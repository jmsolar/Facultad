<?xml version="1.0"?><st-source><!-- Name: ARC4Notice: Copyright © 2005 Cincom Systems, Inc.  All Rights Reserved.Comment: Here's a very fitting description from Python's mxCrypto library by A.M. Kuchling (http://www.amk.ca/python/writing/pycrypt/node9.html):"ARC4 is short for 'Alleged RC4'. The real RC4 algorithm is proprietary to RSA Data Security Inc. In September of 1994, someone posted C code to both the Cypherpunks mailing list and to the Usenet newsgroup sci.crypt, claiming that it implemented the RC4 algorithm. This posted code is what I'm calling Alleged RC4, or ARC4 for short. I don't know if ARC4 is in fact RC4, but ARC4 has been subjected to scrutiny on the Cypherpunks mailing list and elsewhere, and does not seem to be easily breakable. The legal issues surrounding the use of ARC4 are unclear, but be aware that it hasn't been subject to much scrutiny, and may have some critical flaw that hasn't yet been discovered"Same applies to this implementation. Given these legal issues it might be worth to consider avoiding this particular algorithm, however this is one of the few algorithms in the SSL suite that doesn't use insecure limited size keys (up to 56 bits). Moreover thanks to its speed (several times faster than the block ciphers in the SSL suite) it is heavily used in secure web communications making it quite important for an SSL implementation.To apply the algorithm create an instance of ARC4 with the #key: instance creation method. The argument is the secret key which is expected to be a ByteArray of size up to 256 bytes (anything above that mark will be ignored). ARC4 is a stream cipher so an initialized ARC4 instance can be used to both encrypt and decrypt arbitrary chunks of byte data (see protocol 'services').DbIdentifier: bear73DbTrace: 52179DevelopmentPrerequisites: #(#(#package 'CiphersBase' ''))PackageName: ARC4Parcel: #('ARC4')PrerequisiteParcels: #(#('CiphersBase' ''))PrintStringCache: (731 0,mkobetic)Version: 7.3.1Date: 6:42:50 pm April 10, 2005 --><time-stamp>From VisualWorks®, 7.3.1 of April 10, 2005 on April 10, 2005 at 6:42:50 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ARC4</name><environment>Security</environment><super>Security.StreamCipher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sBox i j </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Security-Ciphers</category><attributes><package>ARC4</package></attributes></class><comment><class-id>Security.ARC4</class-id><body>This is an implementation of the "alleged" RC4 algorithm as described in Applied Cryptography by Bruce Schneier.The algorithm uses a secret key which is expected to be a ByteArray of size up to 256 bytes (anything above that mark will be ignored).Instance Variables:	sBox	&lt;ByteArray&gt;	a key dependent substitution box, 256 bytes	i	&lt;SmallInteger&gt;	s-box index	j	&lt;SmallInteger&gt;	s-box index</body></comment><methods><class-id>Security.ARC4</class-id> <category>services</category><body package="ARC4" selector="decryptByte:">decryptByte: aByte	^self encryptByte: aByte</body><body package="ARC4" selector="encryptByte:">encryptByte: aByte	| si sj |	"Algorithm definition is included in the comments,	note that we need to adjust for the 0-based indexing"	"i = (i + 1) mod 256"	i := (i + 1) bitAnd: 255.	"j = (j + Si) mod 256"	si := sBox at: i + 1.	j := (j + si) bitAnd: 255.	"swap Si and Sj"	sj := sBox at: j + 1.	sBox at: i + 1 put: sj.	sBox at: j + 1 put: si.	"t = (Si + Sj) mod 256	K = St"	^aByte bitXor: (sBox at: ((si + sj) bitAnd: 255) + 1)</body></methods><methods><class-id>Security.ARC4</class-id> <category>initialization</category><body package="ARC4" selector="setKey:">setKey: aByteArray"Note that due to the nature of the SBox initialization algorithm it doesn't make sense to pass in a ByteArray of size bigger than 256. Anything above that mark will be simply ignored"	| kBox step |	kBox := ByteArray new: 256.	step := aByteArray size min: kBox size.	1 to: 256 by: step do: [ :start |		kBox replaceFrom: start to: (start + step - 1 min: 256) with: aByteArray startingAt: 1 ].	"Algorithm definition is included in the comments, note that we need to adjust for the 0-based indexing"	sBox := (0 to: 255)			inject: (ByteArray new: 256)			into: [ :array :index | array at: index + 1 put: index; yourself ].	i := 1.	j := 0.	"for i = 0 to 255:"	[ i &lt; 257] whileTrue: [ | s |		"j = (j + Si + Ki) mod 256"		j := (j + (sBox at: i) + (kBox at: i)) bitAnd: 255.		"swap Si and Sj"		s := sBox at: i.		sBox at: i put: (sBox at: j + 1).		sBox at: j + 1 put: s.		i := i + 1 ].	"Reset the indexes"	i := 0.	j := 0</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>StreamCipher</name><environment>Security</environment><super>Security.SymmetricCipher</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Security-Ciphers</category><attributes><package>CiphersBase</package></attributes></class></st-source>