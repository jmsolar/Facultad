<?xml version="1.0"?><st-source><!-- Name: SmaCC Development UIComment: This package is part of the Smalltalk Compiler-Compiler (SmaCC) written by John Brant and Don Roberts. It contains a GUI to create new parsers. It was seperated from the SmaCC Development package to make porting SmaCC easier. The GUI can be accessed through the Tools menu in VA and VW, and through the Additional Tools item in Dolphin.If you want more information about SmaCC, visit http://www.refactory.com/Software/SmaCC/. - - - - - - - - - - - - - - - - - - - - - - - - -Copyright (c) 2002-2003 John Brant, Don RobertsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.DbIdentifier: storeDbTrace: 3528DevelopmentPrerequisites: #(#(#any 'SmaCC Development' '') #(#any 'RBBaseUI' ''))PackageName: SmaCC Development UIParcel: #('SmaCC Development UI')PrerequisiteParcels: #(#('SmaCC Development' '') #('RBBaseUI' ''))PrintStringCache: (1.5,brant)Date: 6:37:44 am October 13, 2003 --><time-stamp>From VisualWorksÂ® NonCommercial, Pre-Release 7.2 (oct03.1) of October 6, 2003 on October 13, 2003 at 6:37:44 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SmaCCParserGenerator</name><environment>Refactory.SmaCC</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subcanvasBuilder tabList parserClassNameHolder scannerClassNameHolder conflictHolder scannerHolder parserHolder testHolder generateDefinitionCommentsHolder generateSymbolCommentsHolder generateItemSetCommentsHolder allowUnicodeHolder ignoreCaseHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC UI</category><attributes><package>SmaCC Development UI</package></attributes></class><shared-variable><name>ShowPrecedenceConflicts</name><environment>Refactory.SmaCC.SmaCCParserGenerator</environment><private>false</private><constant>false</constant><category>variables</category><initializer>false</initializer><attributes><package>SmaCC Development UI</package></attributes></shared-variable><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>aspects</category><body package="SmaCC Development UI">allowUnicodeHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^allowUnicodeHolder isNil		ifTrue:			[allowUnicodeHolder := false asValue]		ifFalse:			[allowUnicodeHolder]</body><body package="SmaCC Development UI">conflictHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^conflictHolder isNil		ifTrue:			[conflictHolder := String new asValue]		ifFalse:			[conflictHolder]</body><body package="SmaCC Development UI">generateDefinitionCommentsHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^generateDefinitionCommentsHolder isNil		ifTrue:			[generateDefinitionCommentsHolder := false asValue]		ifFalse:			[generateDefinitionCommentsHolder]</body><body package="SmaCC Development UI">generateItemSetCommentsHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^generateItemSetCommentsHolder isNil		ifTrue:			[generateItemSetCommentsHolder := false asValue]		ifFalse:			[generateItemSetCommentsHolder]</body><body package="SmaCC Development UI">generateSymbolCommentsHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^generateSymbolCommentsHolder isNil		ifTrue:			[generateSymbolCommentsHolder := false asValue]		ifFalse:			[generateSymbolCommentsHolder]</body><body package="SmaCC Development UI">ignoreCaseHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^ignoreCaseHolder isNil		ifTrue:			[ignoreCaseHolder := false asValue]		ifFalse:			[ignoreCaseHolder]</body><body package="SmaCC Development UI">parserClassNameHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^parserClassNameHolder isNil		ifTrue:			[parserClassNameHolder := nil asValue]		ifFalse:			[parserClassNameHolder]</body><body package="SmaCC Development UI">parserHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^parserHolder isNil		ifTrue:			[parserHolder := String new asValue]		ifFalse:			[parserHolder]</body><body package="SmaCC Development UI">scannerClassNameHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^scannerClassNameHolder isNil		ifTrue:			[scannerClassNameHolder := nil asValue]		ifFalse:			[scannerClassNameHolder]</body><body package="SmaCC Development UI">scannerHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^scannerHolder isNil		ifTrue:			[scannerHolder := String new asValue]		ifFalse:			[scannerHolder]</body><body package="SmaCC Development UI">tabList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^tabList isNil		ifTrue:			[tabList := SelectionInList new]		ifFalse:			[tabList]</body><body package="SmaCC Development UI">testHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^testHolder isNil		ifTrue:			[testHolder := String new asValue]		ifFalse:			[testHolder]</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>changing</category><body package="SmaCC Development UI">changedTab	self installSpec</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>actions</category><body package="SmaCC Development UI">compileLALR1	self compile: #LALR1</body><body package="SmaCC Development UI">compileLR1	self compile: #LR1</body><body package="SmaCC Development UI">findParserClass	| class |	class := self choose: 'What class do you want to use?'				from: (SmaCCParser allSubclasses asSortedCollection: [:a :b | a name &lt; b name]).	class isNil ifTrue: [^self].	self parserClassNameHolder value: class fullName.	(class class includesSelector: #parserDefinitionComment) 		ifTrue: 			[(self confirm: 'Do you wish to load the parser definition?') 				ifTrue: 					[self parserHolder value: (self 								removeCommentedPartOf: (class class sourceCodeAt: #parserDefinitionComment))]]</body><body package="SmaCC Development UI">findScannerClass	| class |	class := self choose: 'What class do you want to use?'				from: (SmaCCScanner allSubclasses asSortedCollection: [:a :b | a name &lt; b name]).	class isNil ifTrue: [^self].	self scannerClassNameHolder value: class fullName.	(class class includesSelector: #scannerDefinitionComment) 		ifTrue: 			[(self confirm: 'Do you wish to load the scanner definition?') 				ifTrue: 					[self scannerHolder value: (self 								removeCommentedPartOf: (class class sourceCodeAt: #scannerDefinitionComment))]]</body><body package="SmaCC Development UI">parse	self parseAndEvaluate: [:each | self warn: 'Parses without errors']</body><body package="SmaCC Development UI">parseAndInspect	self parseAndEvaluate: [:each | each inspect]</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>private</category><body package="SmaCC Development UI">compile: aSymbol 	| grammar stream oldIgnoreCase oldCharacterSize parserCompiler |	(self scannerClassNameHolder value isEmpty 		or: [self parserClassNameHolder value isEmpty]) 			ifTrue: [^self warn: 'Both classes are not specified'].	self showWaitCursorWhile: 			[self verifySyntax ifFalse: [^self].			oldIgnoreCase := SmaCCGrammar ignoreCase.			oldCharacterSize := SmaCCGrammar maximumCharacterValue.						[SmaCCGrammar				ignoreCase: self ignoreCaseHolder value;				maximumCharacterValue: (self allowUnicodeHolder value 							ifTrue: [(2 raisedTo: 16) - 1]							ifFalse: [255]).			parserCompiler := SmaCCGrammarCompiler new.			parserCompiler				buildScanner: self scannerHolder value andParser: self parserHolder value;				scannerClass: self scannerClassNameHolder value;				parserClass: self parserClassNameHolder value.			grammar := parserCompiler grammar.			grammar type: aSymbol.			stream := WriteStream on: Text new.						[parserCompiler createChanges.			self generateDefinitionCommentsHolder value 				ifTrue: [parserCompiler compileDefinitionComments].			self generateSymbolCommentsHolder value 				ifTrue: [parserCompiler compileSymbolComment].			self generateItemSetCommentsHolder value 				ifTrue: [parserCompiler compileItemSetsComment].			parserCompiler compileChanges] 					on: SmaCCCompilationNotification					do: 						[:ex | 						(ShowPrecedenceConflicts or: [('*precedence*' match: ex messageText) not]) 							ifTrue: 								[stream									nextPutAll: '-------------------------\' withCRs asText 												, ex messageText asText allBold;									cr;									cr;									nextPutAll: ex parameter;									cr].						ex pass].			self conflictHolder value: stream contents] 					ensure: 						[SmaCCGrammar							ignoreCase: oldIgnoreCase;							maximumCharacterValue: oldCharacterSize]]</body><body package="SmaCC Development UI">displayError: aString at: position 	self textWidget ifNotNil: 			[:each | 			each takeKeyboardFocus.			each widget controller insertAndSelect: aString , ' -&gt;' at: position]</body><body package="SmaCC Development UI">installSpec	subcanvasBuilder := nil.	(builder componentAt: #subcanvas) widget client: self		spec: self selectedSpec</body><body package="SmaCC Development UI">parseAndEvaluate: aBlock 	| class |	class := self parserClass.	class isNil ifTrue: [^self warn: 'No parser defined'].	aBlock value: (class parse: self testHolder value				onError: 					[:aString :position | 					self tabList selection: 'Test'.					self displayError: aString at: position.					^self])</body><body package="SmaCC Development UI">parserClass	^self parserClassNameHolder value asQualifiedReference value</body><body package="SmaCC Development UI">removeCommentedPartOf: aString 	| inStream outStream |	inStream := ReadStream on: aString.	outStream := WriteStream on: String new.	inStream upTo: $".	[inStream atEnd] whileFalse: 			[(inStream peekFor: $") ifTrue: [outStream nextPut: $"].			outStream nextPutAll: (inStream upTo: $")].	^outStream contents</body><body package="SmaCC Development UI">selectedSpec	^(self tabList selection asLowercase , 'WindowSpec') asSymbol</body><body package="SmaCC Development UI">textWidget	^subcanvasBuilder componentAt: #text</body><body package="SmaCC Development UI">verifyParser	^	[SmaCCGrammarCompiler new buildScanner: self scannerHolder value		andParser: self parserHolder value.	true] 			on: SmaCCParserError			do: 				[:ex | 				self tabList selection: 'Parser'.				self displayError: ex description at: ex parameter position.				ex return: false]</body><body package="SmaCC Development UI">verifyScanner	SmaCCScannerParser parse: self scannerHolder value		onError: 			[:aString :position | 			self tabList selection: 'Scanner'.			self displayError: aString at: position.			^false].	^true</body><body package="SmaCC Development UI">verifySyntax	^self verifyScanner and: [self verifyParser]</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>initialize-release</category><body package="SmaCC Development UI">initialize	super initialize.	(self tabList)		list: #('Scanner' 'Parser' 'Compile' 'Test') asList;		selectionIndex: 1.	self tabList selectionIndexHolder onChangeSend: #changedTab to: self.	self scannerClassNameHolder value: ''.	self parserClassNameHolder value: ''.	self scannerHolder value: ''.	self parserHolder value: ''.	self testHolder value: ''.	self generateDefinitionCommentsHolder value: true</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>interface opening</category><body package="SmaCC Development UI">postBuildWith: aBuilder 	builder == aBuilder ifFalse: [subcanvasBuilder := aBuilder].	(aBuilder componentAt: #text) 		ifNotNil: [:each | each widget controller continuousAccept: true].	super postBuildWith: aBuilder</body><body package="SmaCC Development UI">postOpenWith: aBuilder 	super postOpenWith: aBuilder.	self installSpec</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator class</class-id> <category>interface specs</category><body package="SmaCC Development UI">compileWindowSpec	"UIPainter new openOnClass: self andSelector: #compileWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} -5 0.4 5 0 1 0 ) 					#name: #Label2 					#label: 'Scanner class:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0.4 5 0 -36 1 27 0 ) 					#name: #scannerClassName 					#model: #scannerClassNameHolder 					#type: #string ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -32 1 5 0 -10 1 27 0 ) 					#name: #findScannerClassButton 					#model: #findScannerClass 					#label: '...' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} -5 0.4 35 0 1 0 ) 					#name: #Label3 					#label: 'Parser class:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0.4 35 0 -36 1 57 0 ) 					#name: #parserClassName 					#model: #parserClassNameHolder 					#type: #string ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -32 1 35 0 -10 1 57 0 ) 					#name: #findParserClassButton 					#model: #findParserClass 					#label: '...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 0.333333 122 0 50 0.333333 144 0 ) 					#name: #compileLALR1 					#model: #compileLALR1 					#label: 'Compile LALR(1)' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 0.666666 122 0 50 0.666666 144 0 ) 					#name: #compileLR1 					#model: #compileLR1 					#label: 'Compile LR(1)' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 150 0 -5 1 152 0 ) 					#name: #Divider1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 155 ) 					#name: #Label4 					#label: 'Messages:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 177 0 -10 1 -10 1 ) 					#name: #conflicts 					#model: #conflictHolder 					#tabRequiresControl: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 60 0 205 0.5 79 0 ) 					#name: #generateDefinitionComments 					#model: #generateDefinitionCommentsHolder 					#label: 'Generate definition comments' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 80 0 205 0.5 103 0 ) 					#name: #generateSymbolComments 					#model: #generateSymbolCommentsHolder 					#label: 'Generate symbol comments' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 100 0 205 0.5 123 0 ) 					#name: #generateItemSetComments 					#model: #generateItemSetCommentsHolder 					#label: 'Generate item set comments' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -205 0.5 80 0 -5 0.5 103 0 ) 					#name: #allowUnicode 					#model: #allowUnicodeHolder 					#label: 'Allow Unicode Characters' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -205 0.5 60 0 -5 0.5 83 0 ) 					#name: #ignoreCase 					#model: #ignoreCaseHolder 					#label: 'Ignore Case' ) ) ) )</body><body package="SmaCC Development UI">parserWindowSpec	"UIPainter new openOnClass: self andSelector: #parserWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 576 432 776 632 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 2 0 -2 1 -2 1 ) 					#name: #text 					#model: #parserHolder 					#tabRequiresControl: true ) ) ) )</body><body package="SmaCC Development UI">scannerWindowSpec	"UIPainter new openOnClass: self andSelector: #scannerWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 576 432 776 632 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 2 0 -2 1 -2 1 ) 					#name: #text 					#model: #scannerHolder 					#tabRequiresControl: true ) ) ) )</body><body package="SmaCC Development UI">testWindowSpec	"UIPainter new openOnClass: self andSelector: #testWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 2 0 -2 1 -29 1 ) 					#name: #text 					#model: #testHolder 					#tabRequiresControl: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 -27 1 105 0 -2 1 ) 					#name: #parse 					#model: #parse 					#label: 'Parse' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 110 0 -27 1 210 0 -2 1 ) 					#name: #parseAndInspect 					#model: #parseAndInspect 					#label: 'Parse and Inspect' 					#defaultable: true ) ) ) )</body><body package="SmaCC Development UI">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'SmaCC Parser Generator' 			#min: #(#{Core.Point} 200 200 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1220 910 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 2 0 -2 1 -2 1 ) 					#name: #subcanvas 					#model: #tabList 					#labels: #() ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="SmaCC Development UI">openSmaCC	&lt;menuItem: 'SmaCC Parser Generator'		nameKey: nil		menu: #(#menuBar #tools)		position: 30.00&gt;	Refactory.SmaCC.SmaCCParserGenerator open</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>BrowserApplicationModel</name><environment>Refactory.Browser</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>menus </class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>RBBaseUI</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>