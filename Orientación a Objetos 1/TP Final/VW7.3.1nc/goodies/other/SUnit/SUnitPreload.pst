<?xml version="1.0"?><st-source><!-- Name: SUnitPreloadHideSource: falsePackageName: SUnitPreloadPackageName:: SUnitPreloadParcel: #('SUnitPreload')ParcelName: SUnitPreloadSaveSource: trueVersion: Camp Smalltalk 3.1 RC1Date: 3:52:39 am March 19, 2003 --><time-stamp>From VisualWorksÂ®, Release 7 of June 14, 2002 on March 19, 2003 at 3:52:39 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>XProgramming</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category></category></name-space><name-space><name>SUnit</name><environment>XProgramming</environment><private>false</private><imports>			private Smalltalk.*			</imports><category></category></name-space><class><name>SUnitDelay</name><environment>XProgramming.SUnit</environment><super>Core.Delay</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPreload</category></class><class><name>TestFailure</name><environment>XProgramming.SUnit</environment><super>Core.Exception</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPreload</category></class><class><name>ResumableTestFailure</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestFailure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPreload</category></class><class><name>SUnitNameResolver</name><environment>XProgramming.SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPreload</category></class><methods><class-id>XProgramming.SUnit.ResumableTestFailure</class-id> <category>Camp Smalltalk</category><body>sunitExitWith: aValue	^self resume: aValue</body></methods><methods><class-id>XProgramming.SUnit.SUnitNameResolver class</class-id> <category>Camp Smalltalk</category><body>classNamed: aSymbol	| strippedName possibles |	strippedName := (QualifiedName parseString: aSymbol) last asSymbol.	possibles := Smalltalk withAllNameSpacesAndAllClassesAndStatics 		select: [:each | each name = strippedName].	^possibles isEmpty		ifTrue: [nil]		ifFalse: [possibles first].</body><body>defaultLogDevice	^ Transcript</body><body>errorObject	^Error</body><body>mnuExceptionObject	^MessageNotUnderstood</body><body>notificationObject	^Notification</body></methods><methods><class-id>Core.Object</class-id> <category>Camp Smalltalk</category><body>sunitChanged: aspect	self changed: aspect</body></methods><methods><class-id>Core.Behavior</class-id> <category>Camp Smalltalk</category><body>sunitAllSelectors	^self allSelectors asSortedCollection asOrderedCollection</body></methods><methods><class-id>Core.Class</class-id> <category>Camp Smalltalk</category><body>sunitName	^self name</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>Camp Smalltalk</category><body>sunitEnsure: aBlock 	^self ensure: aBlock</body></methods><methods><class-id>Core.Exception</class-id> <category>Camp Smalltalk</category><body>sunitExitWith: aValue	^self return: aValue</body></methods><methods><class-id>Core.Object</class-id> <category>Camp Smalltalk</category><body>sunitRemoveDependent: anObject	self removeDependent: anObject</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>Camp Smalltalk</category><body>sunitOn: aSignal do: anExceptionBlock 	^self on: aSignal do: anExceptionBlock</body></methods><methods><class-id>Core.Object</class-id> <category>Camp Smalltalk</category><body>sunitAddDependent: anObject	self addDependent: anObject</body></methods><methods><class-id>Core.String</class-id> <category>Camp Smalltalk</category><body>sunitAsSymbol	^self asSymbol</body></methods><methods><class-id>Core.Behavior</class-id> <category>Camp Smalltalk</category><body>sunitSelectors	^self selectors asSortedCollection asOrderedCollection</body></methods><methods><class-id>Core.String</class-id> <category>Camp Smalltalk</category><body>sunitMatch: aString	^self match: aString</body></methods><methods><class-id>Core.Exception class</class-id> <category>Camp Smalltalk</category><body>sunitSignalWith: aString	^self raiseSignal: aString</body></methods><methods><class-id>Core.String</class-id> <category>Camp Smalltalk</category><body>sunitSubStrings	| stream answer index |	answer := OrderedCollection new.	stream := ReadStream on: self.	[stream atEnd]		whileFalse: 			[[stream atEnd ifTrue: [^answer asArray].			stream peek &gt; (Core.TextConstants.Space)]				whileFalse: [stream next].			index := stream position + 1.			[stream atEnd or: [stream peek &lt;= (Core.TextConstants.Space)]]				whileFalse: [stream next].			answer add: (self copyFrom: index to: stream position)].	^answer asArray</body></methods><methods><class-id>Core.Symbol</class-id> <category>Camp Smalltalk</category><body>sunitAsClass	^XProgramming.SUnit.SUnitNameResolver classNamed: self</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category></class><class><name>BlockClosure</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method outerContext copiedValues </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category></class><class><name>Behavior</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclass methodDict format subclasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category></class><class><name>Exception</name><environment>Core</environment><super>Core.GenericException</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category></class><class><name>Class</name><environment>Core</environment><super>Core.ClassDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name classPool environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category></class><class><name>Symbol</name><environment>Core</environment><super>Core.String</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category></class><class><name>Delay</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>delayDuration resumptionTime delaySemaphore delayInProgress </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Processes</category></class></st-source>