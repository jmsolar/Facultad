<?xml version="1.0"?><st-source><!-- Name: SUnitTestsHideSource: falseParcel: #('SUnitTests')PrerequisiteParcels: #(#('SUnit' ''))SaveSource: trueVersion: Camp Smalltalk 3.1 RC1Date: 4:41:56 am March 19, 2003 --><time-stamp>From VisualWorksÂ®, Release 7 of June 14, 2002 on March 19, 2003 at 4:41:56 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SUnitTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hasRun hasSetup hasRanOnce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category></class><comment><class-id>XProgramming.SUnit.SUnitTest</class-id><body>This is both an example of writing tests and a self test for the SUnit. The tests here are pretty strange, since you want to make sure things blow up. You should not generally have to write tests this complicated in structure, although they will be far more complicated in terms of your own objects- more assertions, more complicated setup. Kent says: "Never forget, however, that if the tests are hard to write, something is probably wrong with the design".</body></comment><class><name>ResumableTestFailureTestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category></class><class><name>SimpleTestResource</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>runningState hasRun hasSetup hasRanOnce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category></class><class><name>SimpleTestResourceTestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>resource </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category></class><class><name>ExampleSetTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>full empty </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category></class><methods><class-id>XProgramming.SUnit.SUnitTest</class-id> <category>Private</category><body>assertForTestResult: aResult runCount: aRunCount passed: aPassedCount failed: aFailureCount errors: anErrorCount	self		assert: aResult runCount = aRunCount;		assert: aResult passedCount = aPassedCount;		assert: aResult failureCount = aFailureCount;		assert: aResult errorCount = anErrorCount			</body><body>error	3 zork			</body><body>fail	self assert: false			</body><body>noop			</body><body>setRun	hasRun := true			</body></methods><methods><class-id>XProgramming.SUnit.SUnitTest</class-id> <category>Testing</category><body>errorShouldntRaise	self 		shouldnt: [self someMessageThatIsntUnderstood] 		raise: SUnitNameResolver notificationObject			</body><body>testAssert	self assert: true.	self deny: false			</body><body>testDefects	| result suite error failure |	suite := TestSuite new.	suite addTest: (error := self class selector: #error).	suite addTest: (failure := self class selector: #fail).	result := suite run.	self assert: result defects asArray = (Array with: error with: failure).	self		assertForTestResult: result		runCount: 2		passed: 0		failed: 1		errors: 1			</body><body>testDialectLocalizedException	self		should: [TestResult signalFailureWith: 'Foo']		raise: TestResult failure.	self		should: [TestResult signalErrorWith: 'Foo']		raise: TestResult error.			</body><body>testError	| case result |	case := self class selector: #error.	result := case run.	self		assertForTestResult: result		runCount: 1		passed: 0		failed: 0		errors: 1.	case := self class selector: #errorShouldntRaise.	result := case run.	self 		assertForTestResult: result		runCount: 1		passed: 0		failed: 0		errors: 1			</body><body>testException	self		should: [self error: 'foo']		raise: TestResult error			</body><body>testFail	| case result |	case := self class selector: #fail.	result := case run.	self		assertForTestResult: result		runCount: 1		passed: 0		failed: 1		errors: 0			</body><body>testIsNotRerunOnDebug	| case |	case := self class selector: #testRanOnlyOnce.	case run.	case debug			</body><body>testRan	| case |	case := self class selector: #setRun.	case run.	self assert: case hasSetup.	self assert: case hasRun			</body><body>testRanOnlyOnce	self assert: hasRanOnce ~= true.	hasRanOnce := true			</body><body>testResult	| case result |	case := self class selector: #noop.	result := case run.	self		assertForTestResult: result		runCount: 1		passed: 1		failed: 0		errors: 0			</body><body>testRunning	(SUnitDelay forSeconds: 2) wait			</body><body>testShould	self		should: [true];		shouldnt: [false]			</body><body>testSuite	| suite result |	suite := TestSuite new.	suite 		addTest: (self class selector: #noop);		addTest: (self class selector: #fail);		addTest: (self class selector: #error).	result := suite run.	self		assertForTestResult: result		runCount: 3		passed: 1		failed: 1		errors: 1			</body></methods><methods><class-id>XProgramming.SUnit.SUnitTest</class-id> <category>Accessing</category><body>hasRun	^hasRun			</body><body>hasSetup	^hasSetup			</body></methods><methods><class-id>XProgramming.SUnit.SUnitTest</class-id> <category>Running</category><body>setUp	hasSetup := true			</body></methods><methods><class-id>XProgramming.SUnit.ResumableTestFailureTestCase</class-id> <category>Not categorized</category><body>errorTest	1 zork			</body><body>failureLog	^SUnitNameResolver defaultLogDevice			</body><body>failureTest	self		assert: false description: 'You should see me' resumable: true; 		assert: false description: 'You should see me too' resumable: true; 		assert: false description: 'You should see me last' resumable: false; 		assert: false description: 'You should not see me' resumable: true			</body><body>isLogging	^false			</body><body>okTest	self assert: true			</body><body>regularTestFailureTest	self assert: false description: 'You should see me'			</body><body>resumableTestFailureTest	self		assert: false description: 'You should see me' resumable: true; 		assert: false description: 'You should see me too' resumable: true; 		assert: false description: 'You should see me last' resumable: false; 		assert: false description: 'You should not see me' resumable: true			</body><body>testResumable	| result suite |	suite := TestSuite new.	suite addTest: (self class selector: #errorTest).	suite addTest: (self class selector: #regularTestFailureTest).	suite addTest: (self class selector: #resumableTestFailureTest).	suite addTest: (self class selector: #okTest).	result := suite run.	self assert: result failures size = 2;		assert: result errors size = 1			</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResource</class-id> <category>testing</category><body>hasRun	^hasRun			</body><body>hasSetup	^hasSetup			</body><body>isAvailable		^self runningState == self startedStateSymbol			</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResource</class-id> <category>accessing</category><body>runningState	^runningState			</body><body>runningState: aSymbol	runningState := aSymbol			</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResource</class-id> <category>running</category><body>setRun	hasRun := true			</body><body>setUp		self runningState: self startedStateSymbol.	hasSetup := true			</body><body>startedStateSymbol	^#started			</body><body>stoppedStateSymbol	^#stopped			</body><body>tearDown	self runningState: self stoppedStateSymbol			</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResourceTestCase</class-id> <category>Not categorized</category><body>dummy	self assert: true			</body><body>error	'foo' odd			</body><body>fail	self assert: false			</body><body>setRun	resource setRun			</body><body>setUp	resource := SimpleTestResource current			</body><body>testRan	| case |	case := self class selector: #setRun.	case run.	self assert: resource hasSetup.	self assert: resource hasRun			</body><body>testResourceInitRelease	| result suite error failure |	suite := TestSuite new.	suite addTest: (error := self class selector: #error).	suite addTest: (failure := self class selector: #fail).	suite addTest: (self class selector: #dummy).	result := suite run.	self assert: resource hasSetup			</body><body>testResourcesCollection	| collection |	collection := self resources.	self assert: collection size = 1			</body></methods><methods><class-id>XProgramming.SUnit.SimpleTestResourceTestCase class</class-id> <category>Not categorized</category><body>resources	^Set new add: SimpleTestResource; yourself			</body></methods><methods><class-id>XProgramming.SUnit.ExampleSetTest</class-id> <category>Running</category><body>setUp	empty := Set new.	full := Set with: 5 with: #abc			</body></methods><methods><class-id>XProgramming.SUnit.ExampleSetTest</class-id> <category>Testing</category><body>testAdd	empty add: 5.	self assert: (empty includes: 5)			</body><body>testGrow	empty addAll: (1 to: 100).	self assert: empty size = 100			</body><body>testIllegal	self 		should: [empty at: 5] 		raise: TestResult error.	self 		should: [empty at: 5 put: #abc] 		raise: TestResult error			</body><body>testIncludes	self assert: (full includes: 5).	self assert: (full includes: #abc)			</body><body>testOccurrences	self assert: (empty occurrencesOf: 0) = 0.	self assert: (full occurrencesOf: 5) = 1.	full add: 5.	self assert: (full occurrencesOf: 5) = 1			</body><body>testRemove	full remove: 5.	self assert: (full includes: #abc).	self deny: (full includes: 5)			</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestResource</name><environment>XProgramming.SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name description </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>SUnit</category></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category></class></st-source>