<?xml version="1.0"?><st-source><component-created><name>Refactory</name> <type>package</type></component-created><parcel-loaded><name>Refactory</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'obsolete' 'parcels' 'Refactory.pcl'))</filename></parcel-loaded><component-created><name>SmaCC Runtime</name> <type>package</type></component-created><parcel-loaded><name>SmaCC Runtime</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'goodies' 'other' 'SmaCC' 'SmaCC Runtime.pcl'))</filename></parcel-loaded><component-created><name>ExtraEmphases</name> <type>package</type></component-created><parcel-loaded><name>ExtraEmphases</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'goodies' 'other' 'ExtraEmphases.pcl'))</filename></parcel-loaded><component-created><name>RBCodeHighlighting</name> <type>package</type></component-created><name-space><name>CodeHighlighter</name><environment>Refactory</environment><private>false</private><imports>			private Smalltalk.*			private Refactory.Browser.*			private Refactory.SmaCC.*			</imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></name-space><class><name>CodeHighlightingSettings</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isUnderlineHolder isStrikeoutHolder methodHolder isBoldHolder isJaggedEdgeHolder isItalicHolder hasColorHolder typeList oldStyles newStyles refreshDelayHolder oldDelay highlightDebugger </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>RBCodeHighlighting</package></attributes></class><class><name>CodeHighlightingParser</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.SmaCC.SmaCCParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text string class temps args namespace </inst-vars><class-inst-vars>stylesToRemove styles </class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><class><name>HighlightingTextEditorController</name><environment>Refactory.CodeHighlighter</environment><super>UI.TextEditorController</super><private>false</private><indexed-type>none</indexed-type><inst-vars>highlightingProcess classBlock isForMethod namespaceBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><class><name>CodeHighlightingScanner</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.SmaCC.SmaCCScanner</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><shared-variable><name>RefreshDelay</name><environment>Refactory.CodeHighlighter</environment><private>false</private><constant>false</constant><category>Settings</category><initializer>250</initializer><attributes><package>RBCodeHighlighting</package></attributes></shared-variable><shared-variable><name>HighlightDebugger</name><environment>Refactory.CodeHighlighter</environment><private>false</private><constant>false</constant><category>Settings</category><initializer>true</initializer><attributes><package>RBCodeHighlighting</package></attributes></shared-variable><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="highlightDebugger">highlightDebugger	^HighlightDebugger ifNil: [true]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatExpression:">formatExpression: aText 	| parser |	parser := self on: (ReadStream on: aText).	parser text: aText.	parser setStartingState: self startingStateForSequenceNode.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>CraftedSmalltalk.DebuggerClient</class-id> <category>private</category><body package="RBCodeHighlighting" selector="textController">textController	^ Refactory.CodeHighlighter.CodeHighlightingParser highlightDebugger		ifTrue: 		[	self textWidget controller beHighlightingWithSettings: 				[: newController |					newController classBlock: [ service context ifNotNil: [: c | c mclass ]];						namespaceBlock: [ self doItEnvironment ]				]		]		ifFalse: [ self textWidget controller ]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend3:">reduceActionForPrimitiveMessageSend3: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatComment:">formatComment: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_comment</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBinaryMessageSend1:">reduceActionForBinaryMessageSend1: nodes 	^self formatMessage: (nodes at: 2) to: nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="addStyle:">addStyle: aSymbol 	self selectedStyle isNil ifTrue: [^self].	(self selectedStyle includes: aSymbol) ifTrue: [^self].	self setStyle: (self selectedStyle copyWith: aSymbol)</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="getIntervalForUpdateFromOriginal:withNew:">getIntervalForUpdateFromOriginal: oldText withNew: newText 	| start stop |	oldText size ~= newText size 		ifTrue: 			["this should not happen"			^1 to: oldText size].	start := 1.	stop := oldText size.	"get the first difference in the runs and select the previous word"	[start &lt;= stop and: [(oldText runs at: start) == (newText runs at: start)]] 		whileTrue: [start := start + 1].	start := self move: start homeWithCtrl: false.	"get the first difference from the end in the runs and select the following word"	[stop &gt; start and: [(oldText runs at: stop) == (newText runs at: stop)]] 		whileTrue: [stop := stop - 1].	stop := self move: stop endWithCtrl: false.	^start to: stop</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatReturn:">formatReturn: aSmaCCToken	self formatToken: aSmaCCToken with: #code_return</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="stylesToRemove">stylesToRemove	^stylesToRemove isNil 		ifTrue: 			[stylesToRemove := (OrderedCollection new)						addAll: self stylesDictionary keys;						add: #bold;						add: #underline;						asArray]		ifFalse: [stylesToRemove]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessageSend1:">reduceActionForKeywordMessageSend1: nodes 	^self formatMessage: (nodes at: 2) to: nil</body></methods><methods><class-id>Tools.AbstractWorkspace</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="styleSmalltalkCode">styleSmalltalkCode	self currentPage removeAllActionsWithReceiver: self.	self currentPage styleSmalltalkCode</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private-error handling</category><body package="RBCodeHighlighting" selector="handleError:">handleError: anInteger 	self isEOFToken 		ifTrue: 			[string size = 0 				ifFalse: [self formatSyntaxErrorFrom: string size to: string size]]		ifFalse: 			[self formatSyntaxError.			self hasErrorHandler 				ifFalse: 					[self formatSyntaxErrorFrom: currentToken startPosition to: string size]].	^super handleError: anInteger</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="nameId">nameId	^20</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="isStylingSmalltalkCode">isStylingSmalltalkCode	self myEventTable ifNil: [^true].	^(self myEventTable includesKey: #dontStyleSmalltalkCode) not</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatMethod:">formatMethod: aText 	| parser |	parser := self on: (ReadStream on: aText).	parser text: aText.	parser setStartingState: self defaultStartingState.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="revertController:">revertController: aController 	| new |	aController class = self ifFalse: [^aController].	new := superclass new.	1 to: superclass instSize		do: [:i | new instVarAt: i put: (aController instVarAt: i)].	new become: aController</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-tables</category><body package="RBCodeHighlighting" selector="transitionTable">transitionTable	^#(#[1 0 13 0 20 0 17 0 24 0 21 0 26 0 25 0 35 0 29 0 57 0 33 0 59 0 37 0 67 0 41 0 68]#[1 0 45 0 1 0 98 0 4 0 98 0 5 0 98 0 7 0 98 0 12 0 98 0 13 0 49 0 14 0 98 0 15 0 98 0 16 0 98 0 17 0 98 0 20 0 98 0 21 0 98 0 22 0 98 0 23 0 98 0 29 0 98 0 30 0 53 0 38 0 57 0 58 0 98 0 66 0 98 0 67]#[0 0 62 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 29 0 30 0 66 0 67]#[0 0 61 0 20]#[0 0 65 0 20]#[1 0 6 0 1 0 6 0 4 0 6 0 5 0 6 0 7 0 6 0 9 0 6 0 12 0 6 0 13 0 6 0 14 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 6 0 29 0 6 0 30 0 69 0 33 0 73 0 44 0 6 0 66 0 6 0 67]#[0 0 0 0 66]#[1 0 6 0 1 0 6 0 4 0 6 0 5 0 6 0 7 0 6 0 9 0 6 0 12 0 6 0 13 0 6 0 14 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 77 0 24 0 6 0 29 0 6 0 30 0 69 0 33 0 81 0 44 0 6 0 66 0 6 0 67]#[1 0 6 0 1 0 6 0 4 0 6 0 5 0 6 0 7 0 6 0 9 0 6 0 12 0 6 0 13 0 6 0 14 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 85 0 24 0 6 0 29 0 6 0 30 0 69 0 33 0 89 0 44 0 6 0 66 0 6 0 67]#[1 0 6 0 1 0 6 0 4 0 6 0 5 0 6 0 7 0 6 0 9 0 6 0 12 0 6 0 13 0 6 0 14 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 6 0 29 0 6 0 30 0 69 0 33 0 93 0 44 0 6 0 66 0 6 0 67]#[1 0 66 0 1 0 66 0 20 0 97 0 36]#[0 0 102 0 4 0 5 0 7 0 12 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 23 0 29 0 30 0 66 0 67]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 125 0 16 0 129 0 17 0 74 0 18 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 0 157 0 37 0 161 0 39 0 165 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 74 0 66 0 193 0 67 0 197 0 69]#[0 0 0 0 66]#[0 1 58 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 66 0 67]#[0 2 74 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 29 0 30 0 66 0 67]#[1 0 201 0 1 0 101 0 4 0 105 0 5 0 109 0 7 0 205 0 9 0 113 0 12 0 117 0 13 0 209 0 14 0 121 0 15 0 125 0 16 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 0 213 0 37 0 161 0 39 0 165 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 74 0 66 0 193 0 67 0 197 0 69]#[0 1 38 0 66]#[0 0 217 0 20]#[0 1 46 0 66]#[0 0 221 0 20]#[0 1 50 0 66]#[0 1 42 0 66]#[1 0 225 0 1 0 229 0 20]#[1 0 233 0 5 0 237 0 7 0 241 0 17 0 245 0 20 0 249 0 23 0 253 0 24 1 1 0 25 1 5 0 26]#[1 1 98 0 4 1 98 0 5 1 98 0 7 1 98 0 10 1 98 0 12 1 98 0 13 1 98 0 15 1 98 0 17 1 98 0 20 1 98 0 21 1 98 0 22 1 98 0 23 1 98 0 24 1 98 0 25 1 98 0 26 1 98 0 29 1 98 0 30 1 98 0 32 1 9 0 62 1 13 0 67]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 1 17 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[0 2 78 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 82 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 86 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 1 21 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[1 0 45 0 1 0 98 0 4 0 98 0 5 0 98 0 7 0 98 0 12 0 98 0 13 0 49 0 14 0 98 0 15 0 98 0 16 0 98 0 17 0 98 0 18 1 25 0 19 0 98 0 20 0 98 0 21 0 98 0 22 0 98 0 23 0 98 0 29 0 98 0 30 0 53 0 38 1 29 0 42 1 33 0 58 0 98 0 67]#[1 0 234 0 2 0 234 0 6 1 37 0 11 0 234 0 18 0 234 0 20 0 234 0 24 0 234 0 26 0 234 0 66]#[0 2 90 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 94 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 102 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[1 0 238 0 2 0 238 0 6 1 41 0 11 0 238 0 18 0 238 0 20 0 238 0 24 0 238 0 26 0 238 0 66]#[0 2 98 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 1 54 0 18 0 66]#[1 1 45 0 2 0 122 0 18 1 49 0 40 0 122 0 66]#[0 0 110 0 2 0 18 0 66]#[0 0 242 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[0 0 138 0 2 0 6 0 18 0 66]#[1 0 198 0 2 0 198 0 3 0 198 0 6 0 198 0 18 1 53 0 24 1 57 0 26 1 61 0 47 1 65 0 53 1 69 0 54 0 198 0 66]#[1 0 198 0 2 0 198 0 3 0 198 0 6 0 198 0 18 1 73 0 20 1 53 0 24 1 57 0 26 1 77 0 47 1 81 0 52 1 85 0 53 1 89 0 54 0 198 0 66]#[1 0 190 0 2 0 190 0 6 0 190 0 18 1 73 0 20 1 53 0 24 1 57 0 26 1 93 0 52 1 97 0 53 1 101 0 54 0 190 0 66]#[1 0 198 0 2 0 198 0 3 0 198 0 6 0 198 0 18 1 105 0 47 0 198 0 66]#[1 1 109 0 2 1 113 0 16]#[0 0 230 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[1 0 66 0 1 0 66 0 20 1 117 0 36]#[1 0 18 0 2 0 18 0 3 0 18 0 4 0 18 0 5 0 18 0 6 0 18 0 7 0 18 0 8 0 18 0 10 0 18 0 12 0 18 0 13 0 18 0 15 0 18 0 20 0 18 0 21 0 18 0 22 0 18 0 23 0 18 0 24 0 18 0 26 0 18 0 30 1 121 0 34 1 125 0 67]#[1 0 6 0 4 0 6 0 5 0 6 0 7 0 6 0 9 0 6 0 12 0 6 0 13 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 6 0 29 0 6 0 30 1 129 0 33 0 6 0 66 0 6 0 67]#[0 0 174 0 66]#[0 1 62 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 66 0 67]#[0 1 66 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 66 0 67]#[0 0 106 0 4 0 5 0 7 0 12 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 23 0 29 0 30 0 66 0 67]#[0 0 70 0 1 0 20]#[1 1 133 0 20 1 137 0 29]#[1 1 82 0 4 1 82 0 5 1 82 0 6 1 82 0 7 1 82 0 12 1 82 0 13 1 82 0 15 1 82 0 17 1 82 0 20 1 82 0 21 1 82 0 22 1 82 0 23 1 82 0 24 1 82 0 25 1 82 0 26 1 82 0 29 1 82 0 30 1 82 0 32 1 141 0 61 1 145 0 67]#[1 1 70 0 18 1 70 0 21 1 149 0 60 1 153 0 67]#[0 2 110 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 106 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 118 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 122 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 114 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[1 1 157 0 4 1 161 0 5 1 165 0 7 1 169 0 10 1 173 0 12 1 177 0 13 1 181 0 15 0 129 0 17 1 185 0 20 1 189 0 21 1 193 0 22 1 197 0 23 1 201 0 24 1 205 0 25 1 209 0 26 1 213 0 29 1 217 0 30 1 221 0 32 1 225 0 43 1 229 0 65]#[0 1 102 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 233 0 6]#[1 1 237 0 2 0 122 0 18 1 241 0 40 0 122 0 66]#[0 1 245 0 20]#[1 1 249 0 1 1 253 0 14 2 1 0 18 2 5 0 19]#[0 2 9 0 18]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 2 13 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 2 17 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 2 21 0 16 0 129 0 17 0 126 0 18 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 2 25 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 126 0 66 0 197 0 69]#[0 0 78 0 18 0 66]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 2 29 0 20 0 137 0 21 0 141 0 22 0 145 0 23 2 33 0 29 0 153 0 30 0 169 0 43 2 37 0 48 2 41 0 49 2 45 0 50 2 49 0 55 0 197 0 69]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 2 29 0 20 0 137 0 21 0 141 0 22 0 145 0 23 2 33 0 29 0 153 0 30 0 169 0 43 2 53 0 49 2 57 0 50 2 61 0 56 0 197 0 69]#[1 0 182 0 2 2 65 0 3 0 182 0 6 0 182 0 18 0 182 0 66]#[0 0 206 0 2 0 3 0 6 0 18 0 24 0 26 0 66]#[1 1 218 0 2 1 218 0 3 1 218 0 6 1 218 0 18 2 69 0 24 1 218 0 66]#[0 1 2 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[1 0 186 0 2 2 65 0 3 0 186 0 6 0 186 0 18 0 186 0 66]#[0 0 218 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[0 0 210 0 2 0 3 0 6 0 18 0 24 0 26 0 66]#[1 1 222 0 2 1 222 0 3 1 222 0 6 1 222 0 18 2 69 0 24 1 222 0 66]#[0 0 222 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[0 0 214 0 2 0 3 0 6 0 18 0 24 0 26 0 66]#[1 1 226 0 2 1 226 0 3 1 226 0 6 1 226 0 18 2 69 0 24 1 226 0 66]#[1 0 178 0 2 2 65 0 3 0 178 0 6 0 178 0 18 0 178 0 66]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 2 73 0 16 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 2 77 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 2 81 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[1 2 85 0 1 0 229 0 20]#[1 2 89 0 2 2 93 0 3 0 101 0 4 2 97 0 5 2 101 0 6 2 105 0 7 2 109 0 8 2 113 0 10 0 113 0 12 0 117 0 13 0 121 0 15 2 117 0 20 0 137 0 21 0 141 0 22 0 145 0 23 2 121 0 24 2 125 0 26 0 153 0 30 2 129 0 69]#[0 2 133 0 8]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 205 0 9 0 113 0 12 0 117 0 13 0 121 0 15 0 125 0 16 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 2 137 0 37 0 161 0 39 0 165 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 74 0 66 0 193 0 67 0 197 0 69]#[0 2 141 0 10]#[0 2 145 0 10]#[1 2 149 0 4 2 153 0 5 2 157 0 6 2 161 0 7 2 165 0 12 2 169 0 13 2 173 0 15 2 177 0 17 2 181 0 20 2 185 0 21 2 189 0 22 2 193 0 23 2 197 0 24 2 201 0 25 2 205 0 26 2 209 0 29 2 213 0 30 2 217 0 32 2 221 0 63]#[0 1 86 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 2 225 0 18 2 229 0 21]#[0 1 78 0 18 0 21]#[1 2 233 0 5 2 237 0 7 2 241 0 17 2 245 0 20 2 249 0 23 2 253 0 24 3 1 0 25 3 5 0 26]#[1 1 98 0 4 1 98 0 5 1 98 0 7 1 98 0 10 1 98 0 12 1 98 0 13 1 98 0 15 1 98 0 17 1 98 0 20 1 98 0 21 1 98 0 22 1 98 0 23 1 98 0 24 1 98 0 25 1 98 0 26 1 98 0 29 1 98 0 30 1 98 0 32 3 9 0 62 1 13 0 67]#[1 1 82 0 4 1 82 0 5 1 82 0 6 1 82 0 7 1 82 0 12 1 82 0 13 1 82 0 15 1 82 0 17 1 82 0 20 1 82 0 21 1 82 0 22 1 82 0 23 1 82 0 24 1 82 0 25 1 82 0 26 1 82 0 29 1 82 0 30 1 82 0 32 3 13 0 61 1 145 0 67]#[0 2 142 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 1 230 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 234 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 238 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 2 38 0 4 2 38 0 5 2 38 0 7 2 38 0 10 3 17 0 11 2 38 0 12 2 38 0 13 2 38 0 15 2 38 0 17 2 38 0 20 2 38 0 21 2 38 0 22 2 38 0 23 2 38 0 24 2 38 0 25 2 38 0 26 2 38 0 29 2 38 0 30 2 38 0 32]#[0 1 242 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 246 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 254 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 46 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 50 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 42 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 70 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 250 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 66 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 62 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 106 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 0 226 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[0 0 126 0 18 0 66]#[0 0 86 0 18 0 66]#[0 0 142 0 1 0 14 0 18 0 19]#[1 0 45 0 1 0 98 0 4 0 98 0 5 0 98 0 7 0 98 0 12 0 98 0 13 0 49 0 14 0 98 0 15 0 98 0 16 0 98 0 17 0 98 0 18 0 98 0 20 0 98 0 21 0 98 0 22 0 98 0 23 0 98 0 29 0 98 0 30 0 53 0 38 3 21 0 58 0 98 0 67]#[1 0 66 0 1 0 66 0 20 3 25 0 36]#[0 0 158 0 2 0 3 0 4 0 5 0 6 0 7 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 66]#[0 3 29 0 20]#[0 0 154 0 2 0 3 0 4 0 5 0 6 0 7 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 66]#[0 0 130 0 2 0 6 0 18 0 66]#[0 0 134 0 2 0 6 0 18 0 66]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 3 33 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[0 0 114 0 2 0 18 0 66]#[0 0 234 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[0 0 238 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[1 1 18 0 2 1 18 0 3 1 18 0 6 1 18 0 18 1 18 0 24 1 57 0 26 1 65 0 53 1 18 0 66]#[1 1 22 0 2 1 22 0 3 1 22 0 6 1 22 0 18 1 73 0 20 1 22 0 24 1 57 0 26 1 81 0 52 1 85 0 53 1 22 0 66]#[1 1 26 0 2 1 26 0 3 1 26 0 6 1 26 0 18 1 73 0 20 1 26 0 24 1 57 0 26 1 93 0 52 1 97 0 53 1 26 0 66]#[0 1 10 0 2 0 3 0 6 0 18 0 24 0 66]#[1 1 30 0 2 1 30 0 3 1 30 0 6 1 30 0 18 1 73 0 20 1 30 0 24 1 30 0 26 1 81 0 52 1 30 0 66]#[1 1 34 0 2 1 34 0 3 1 34 0 6 1 34 0 18 1 73 0 20 1 34 0 24 1 34 0 26 1 93 0 52 1 34 0 66]#[0 1 6 0 2 0 3 0 6 0 18 0 24 0 26 0 66]#[1 1 73 0 20 1 53 0 24 1 57 0 26 3 37 0 51 3 41 0 52 3 45 0 53 3 49 0 54]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 2 29 0 20 0 137 0 21 0 141 0 22 0 145 0 23 2 33 0 29 0 153 0 30 0 169 0 43 2 37 0 48 2 41 0 49 2 45 0 50 3 53 0 55 0 197 0 69]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 3 57 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[0 0 118 0 2 0 18 0 66]#[1 1 237 0 2 0 122 0 18 3 61 0 40 0 122 0 66]#[1 0 6 0 4 0 6 0 5 0 6 0 7 0 6 0 9 0 6 0 12 0 6 0 13 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 6 0 29 0 6 0 30 3 65 0 33 0 6 0 66 0 6 0 67]#[0 0 50 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 46 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[1 0 38 0 2 0 38 0 3 1 98 0 4 1 98 0 5 0 38 0 6 1 98 0 7 0 38 0 8 1 98 0 10 1 98 0 12 1 98 0 13 1 98 0 15 1 98 0 17 1 98 0 20 1 98 0 21 1 98 0 22 1 98 0 23 1 98 0 24 1 98 0 25 1 98 0 26 1 98 0 29 1 98 0 30 1 98 0 32 1 9 0 62 1 13 0 67]#[0 0 34 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 30 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 10 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 29 0 30 0 66 0 67]#[0 0 42 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 54 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 22 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 58 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 26 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 14 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 29 0 30 0 66 0 67]#[0 0 170 0 66]#[0 2 134 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 138 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[1 3 69 0 5 3 73 0 7 3 77 0 17 3 81 0 20 3 85 0 23 3 89 0 24 3 93 0 25 3 97 0 26]#[1 3 101 0 20 3 105 0 29]#[0 2 130 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[1 1 82 0 4 1 82 0 5 1 82 0 6 1 82 0 7 1 82 0 12 1 82 0 13 1 82 0 15 1 82 0 17 1 82 0 20 1 82 0 21 1 82 0 22 1 82 0 23 1 82 0 24 1 82 0 25 1 82 0 26 1 82 0 29 1 82 0 30 1 82 0 32 3 109 0 61 1 145 0 67]#[0 1 114 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 118 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 122 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 1 70 0 18 1 70 0 21 3 113 0 60 1 153 0 67]#[1 1 178 0 4 1 178 0 5 1 178 0 6 1 178 0 7 3 117 0 11 1 178 0 12 1 178 0 13 1 178 0 15 1 178 0 17 1 178 0 20 1 178 0 21 1 178 0 22 1 178 0 23 1 178 0 24 1 178 0 25 1 178 0 26 1 178 0 29 1 178 0 30 1 178 0 32]#[0 1 126 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 130 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 138 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 186 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 190 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 182 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 214 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 134 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 210 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 90 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 126 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 1 74 0 18 0 21]#[1 3 121 0 20 3 125 0 29]#[1 1 82 0 4 1 82 0 5 1 82 0 6 1 82 0 7 1 82 0 12 1 82 0 13 1 82 0 15 1 82 0 17 1 82 0 20 1 82 0 21 1 82 0 22 1 82 0 23 1 82 0 24 1 82 0 25 1 82 0 26 1 82 0 29 1 82 0 30 1 82 0 32 3 129 0 61 1 145 0 67]#[1 1 70 0 18 1 70 0 21 3 133 0 60 1 153 0 67]#[0 2 6 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 2 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 14 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 18 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 10 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 1 157 0 4 1 161 0 5 1 165 0 7 3 137 0 10 1 173 0 12 1 177 0 13 1 181 0 15 0 129 0 17 1 185 0 20 1 189 0 21 1 193 0 22 1 197 0 23 1 201 0 24 1 205 0 25 1 209 0 26 1 213 0 29 1 217 0 30 1 221 0 32 1 225 0 43 1 229 0 65]#[1 2 149 0 4 2 153 0 5 3 141 0 6 2 161 0 7 2 165 0 12 2 169 0 13 2 173 0 15 2 177 0 17 2 181 0 20 2 185 0 21 2 189 0 22 2 193 0 23 2 197 0 24 2 201 0 25 2 205 0 26 2 209 0 29 2 213 0 30 2 217 0 32 2 221 0 63]#[0 1 110 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 3 145 0 18]#[1 3 149 0 1 0 229 0 20]#[0 0 146 0 1 0 14 0 18 0 19]#[1 1 237 0 2 0 122 0 18 3 153 0 40 0 122 0 66]#[0 0 202 0 2 0 3 0 6 0 18 0 66]#[0 0 246 0 2 0 3 0 6 0 18 0 66]#[0 0 250 0 2 0 3 0 6 0 18 0 66]#[1 0 254 0 2 0 254 0 3 0 254 0 6 0 254 0 18 2 69 0 24 0 254 0 66]#[0 1 14 0 2 0 3 0 6 0 18 0 24 0 66]#[1 1 237 0 2 0 122 0 18 3 157 0 40 0 122 0 66]#[0 0 90 0 18 0 66]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 205 0 9 0 113 0 12 0 117 0 13 0 121 0 15 0 125 0 16 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 3 161 0 37 0 161 0 39 0 165 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 74 0 66 0 193 0 67 0 197 0 69]#[1 3 165 0 20 3 169 0 29]#[1 1 82 0 4 1 82 0 5 1 82 0 6 1 82 0 7 1 82 0 12 1 82 0 13 1 82 0 15 1 82 0 17 1 82 0 20 1 82 0 21 1 82 0 22 1 82 0 23 1 82 0 24 1 82 0 25 1 82 0 26 1 82 0 29 1 82 0 30 1 82 0 32 3 173 0 61 1 145 0 67]#[1 1 70 0 18 1 70 0 21 3 177 0 60 1 153 0 67]#[0 1 146 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 142 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 154 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 158 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 150 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 3 181 0 10]#[0 3 185 0 10]#[1 2 149 0 4 2 153 0 5 3 189 0 6 2 161 0 7 2 165 0 12 2 169 0 13 2 173 0 15 2 177 0 17 2 181 0 20 2 185 0 21 2 189 0 22 2 193 0 23 2 197 0 24 2 201 0 25 2 205 0 26 2 209 0 29 2 213 0 30 2 217 0 32 2 221 0 63]#[1 3 193 0 18 2 229 0 21]#[0 1 94 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 3 197 0 10]#[0 3 201 0 10]#[1 2 149 0 4 2 153 0 5 3 205 0 6 2 161 0 7 2 165 0 12 2 169 0 13 2 173 0 15 2 177 0 17 2 181 0 20 2 185 0 21 2 189 0 22 2 193 0 23 2 197 0 24 2 201 0 25 2 205 0 26 2 209 0 29 2 213 0 30 2 217 0 32 2 221 0 63]#[1 3 209 0 18 2 229 0 21]#[0 2 54 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 58 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 0 150 0 2 0 3 0 4 0 5 0 6 0 7 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 66]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 125 0 16 0 129 0 17 0 74 0 18 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 3 213 0 37 0 161 0 39 0 165 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 193 0 67 0 197 0 69]#[0 0 82 0 18 0 66]#[0 0 94 0 18 0 66]#[0 0 166 0 66]#[0 3 217 0 10]#[0 3 221 0 10]#[1 2 149 0 4 2 153 0 5 3 225 0 6 2 161 0 7 2 165 0 12 2 169 0 13 2 173 0 15 2 177 0 17 2 181 0 20 2 185 0 21 2 189 0 22 2 193 0 23 2 197 0 24 2 201 0 25 2 205 0 26 2 209 0 29 2 213 0 30 2 217 0 32 2 221 0 63]#[1 3 229 0 18 2 229 0 21]#[0 1 194 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 198 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 202 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 206 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 30 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 34 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 26 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 22 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 3 233 0 18]#[0 1 170 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 174 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 166 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 162 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 0 162 0 2 0 3 0 4 0 5 0 6 0 7 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 66])</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="startHighlighting:">startHighlighting: delay 	| localText class namespace uiPriority |	self stopHighlighting.	self text size &lt; Refactory.Browser.BrowserTextTool.ParserTextLimit 		ifFalse: [^self].	localText := self text copy.	class := self classBlock value.	namespace := self namespaceBlock value.	uiPriority := Processor activePriority.	highlightingProcess := 			[| win event |			(Delay forMilliseconds: delay) wait.			"forked process colorizes copied text"			self isForMethod 				ifTrue: 					[CodeHighlightingParser 						formatMethod: localText						forClass: class						namespace: namespace]				ifFalse: 					[CodeHighlightingParser 						formatExpression: localText						forClass: class						namespace: namespace].			"WindowManager process moves result to UI"			event := 					[localText string = self text string 						ifTrue: 							[self displayWithHighlightedText: localText"							self text setString: self text string setRuns: localText runs.							self view resetSelections.							self view invalidateRectangle: self view bounds repairNow: true"]].						[win := view ifNotNil: [:v | v topComponent].			(win notNil and: [win isInvalid not and: [win isOpen and:[win windowManager notNil]]]) 				ifTrue: [event uiEventFor: win]] 					valueAtPriority: uiPriority	"so window cannot be closed during this block"] 					forkAt: uiPriority - 1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatPrimitiveFrom:to:">formatPrimitiveFrom: startToken to: stopToken 	self 		formatFrom: startToken startPosition		to: stopToken stopPosition		with: #code_primitive</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="text:">text: aText 	text := aText.	string := text string copy.	text 		addEmphasis: #()		removeEmphasis: self class stylesToRemove		allowDuplicates: false</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatMethod:for:">formatMethod: aText for: aClass 	| parser |	parser := self on: (ReadStream on: aText).	parser		text: aText;		class: aClass.	parser setStartingState: self defaultStartingState.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	(self textEditor)		initializeMenuForCodeWithFileItIn;		doNotHandleLocally: #explain;		autoAccept: false.	(self textEditor respondsTo: #augmentEditorCodeMenu) 		ifTrue: [self augmentEditorCodeMenu].	self when: #dontStyleSmalltalkCode send: #yourself to: self workspace.	self isStylingSmalltalkCode 		ifTrue: [self styleSmalltalkCode]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="negative_numberId">negative_numberId	^22</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner class</class-id> <category>generated-initialization</category><body package="RBCodeHighlighting" selector="initializeKeywordMap">initializeKeywordMap	keywordMap := Dictionary new.	#(#(26 '||' 14) #(20 'false' 13) #(20 'nil' 15) #(20 'true' 12)) do: 			[:each | 			(keywordMap at: each first ifAbsentPut: [Dictionary new]) at: (each at: 2)				put: each last].	^keywordMap</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatArrayLeftBrace:rightBrace:">formatArrayLeftBrace: leftBraceSmaCCToken rightBrace: rightBraceSmaCCToken 	"Formatting of an ObjectStudio Array"	self 		formatFrom: leftBraceSmaCCToken startPosition		to: leftBraceSmaCCToken stopPosition		with: #code_array.	self 		formatFrom: rightBraceSmaCCToken startPosition		to: rightBraceSmaCCToken stopPosition		with: #code_array</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForUnaryMessage1:">reduceActionForUnaryMessage1: nodes 	^OrderedCollection with: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend7:">reduceActionForPrimitiveMessageSend7: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForTemporaries1:">reduceActionForTemporaries1: nodes 	^self addTemps</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="highlightDebugger">highlightDebugger	^ highlightDebugger isNil 		ifTrue: [ highlightDebugger := CodeHighlightingParser highlightDebugger asValue ]		ifFalse: [ highlightDebugger ]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="addTemp:">addTemp: aString 	"the guard is here because temps can be empty when we hit the error production of 'KeywordMethodName'.	For example when formatting the following method source: 'foo bar: baz'"	temps isEmpty ifFalse: [temps last add: aString]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBinaryMessageSend2:">reduceActionForBinaryMessageSend2: nodes 	^self formatMessage: (nodes at: 2) to: nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="findNamespaceFor:">findNamespaceFor: aBindingReference	| isAbsolute pathString home |	pathString := aBindingReference asString.	isAbsolute := (pathString includes: $.) and: [pathString first ~~ $_].	home := isAbsolute 		ifTrue: [Smalltalk]		ifFalse: [namespace isNil 			ifTrue: [class isNil ifTrue: [Smalltalk] ifFalse: [class environment]]			ifFalse: [namespace]].	aBindingReference		class: (isAbsolute ifTrue: [nil] ifFalse: [class])		home: home.</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral17:">reduceActionForLiteral17: nodes 	self formatArrayLeftBrace: (nodes at: 1) rightBrace: (nodes at: 3).	^Array</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>generated-starting states</category><body package="RBCodeHighlighting" selector="startingStateForSequenceNode">startingStateForSequenceNode	^2</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatSymbol:hash:">formatSymbol: aSmaCCToken hash: hashSmaCCToken 	self 		formatFrom: (hashSmaCCToken ifNil: [aSmaCCToken]) startPosition		to: aSmaCCToken stopPosition		with: #code_symbol</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController class</class-id> <category>instance creation</category><body package="RBCodeHighlighting" selector="replaceController:doingInitialization:">replaceController: aController doingInitialization: aBlock	| new |	aController class = superclass ifFalse: [^aController].	new := self new.	1 to: superclass instSize		do: [:i | new instVarAt: i put: (aController instVarAt: i)].	aBlock value: new.	new become: aController.	aController startHighlighting: 0.	^aController</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForUnaryMessageSend2:">reduceActionForUnaryMessageSend2: nodes 	^self formatMessage: (nodes at: 2) to: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral16:">reduceActionForLiteral16: nodes 	self 		formatQualifiedReferenceHash: (nodes at: 1)		leftBrace: (nodes at: 2)		rightBrace: (nodes at: 4).	^LiteralBindingReference</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scan3">scan3	self recordMatch: #(24).	self step.	(currentCharacter isLetter or: [currentCharacter == $_]) 		ifTrue: [^self scan4].	currentCharacter == $= 		ifTrue: [^self recordAndReportMatch: #variable_assignment].	^self reportLastMatch</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private-error handling</category><body package="RBCodeHighlighting" selector="dismissErrorToken">dismissErrorToken	| oldToken |	oldToken := currentToken.	super dismissErrorToken.	self isEOFToken 		ifTrue: [self formatSyntaxErrorFrom: oldToken stopPosition + 1 to: text size]		ifFalse: 			[self formatSyntaxErrorFrom: oldToken stopPosition + 1				to: currentToken stopPosition]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral1:">reduceActionForLiteral1: nodes 	self formatTrue: (nodes at: 1).	^True</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral6:">reduceActionForLiteral6: nodes 	self formatCharacter: (nodes at: 1).	^Character</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private-error handling</category><body package="RBCodeHighlighting" selector="patchErrorHandlerStates:">patchErrorHandlerStates: stateCollection 	"Hack -- remove the top level error handler if multiple ones exist"	| errorHandlersCount |	errorHandlersCount := stateCollection inject: 0				into: [:sum :each | sum + (each min: 1)].	errorHandlersCount &gt; 1 		ifTrue: 			[stateCollection at: ((1 to: stateCollection size) 						detect: [:each | (stateCollection at: each) ~~ 0])				put: 0]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatQualifiedReferenceHash:leftBrace:rightBrace:">formatQualifiedReferenceHash: hashSmaCCToken leftBrace: leftBraceSmaCCToken rightBrace: rightBraceSmaCCToken 	self 		formatFrom: (hashSmaCCToken ifNil: [leftBraceSmaCCToken]) startPosition		to: rightBraceSmaCCToken stopPosition		with: #code_qualifiedReference</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="namespaceBlock:">namespaceBlock: aBlock	namespaceBlock := aBlock</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>scanning</category><body package="RBCodeHighlighting" selector="scanNumber:">scanNumber: id 	| token endPosition scannedId |	scannedId := [		Number readFrom: stream.		id	] on: Error do: [ : ex |		self errorTokenId	].	endPosition := stream position.	stream position: start.	outputStream reset.	token := SmaCCToken 				value: (stream next: endPosition - start)				start: start+1				id: (Array with: scannedId).	matchActions := nil.	returnMatchBlock value: token</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="actionForCurrentToken">actionForCurrentToken	| ids action |	[currentToken id first = scanner smalltalkCommentId] whileTrue: 			[self formatComment: currentToken.			currentToken := nil.			self getNextToken].	ids := currentToken id.	1 to: ids size		do: 			[:i | 			action := self actionFor: (ids at: i).			(action bitAnd: 2r11) = 3 ifFalse: [^action].			(ids at: i) = scanner negative_numberId 				ifTrue: 					[currentToken := SmaCCToken 								value: '-'								start: currentToken startPosition								id: (Array with: scanner binary_symbolId).					scanner position: currentToken stopPosition - 1.					^self actionForCurrentToken]].	^3</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatNumber:">formatNumber: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_number</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="initializeAfterLoad">initializeAfterLoad	"self initializeAfterLoad"	(styles notNil and: [styles size ~= self defaultStyles size]) 		ifTrue: [styles := stylesToRemove := nil].	self initializeStyles</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitives2:">reduceActionForPrimitives2: nodes 	^self formatPrimitiveFrom: (nodes at: 2) to: (nodes at: 4)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="ok">ok	CodeHighlightingParser styles: newStyles.	RefreshDelay := self refreshDelayHolder value.	HighlightDebugger := self highlightDebugger value.	self closeRequest.</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForTemporaryVariables2:">reduceActionForTemporaryVariables2: nodes 	^self formatTemporaryVariable: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend4:">reduceActionForPrimitiveMessageSend4: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatUnaryMethod:">formatUnaryMethod: selectorSmaCCToken 	self formatToken: selectorSmaCCToken with: #code_unaryMethodName</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMethodName1:">reduceActionForKeywordMethodName1: nodes 	self addTemps.	^self formatKeyword: (nodes at: 1) with: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="isItalicHolder">isItalicHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isItalicHolder isNil		ifTrue:			[isItalicHolder := false asValue]		ifFalse:			[isItalicHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self textController beHighlightingWithSettings: [: newController | newController classBlock: [ self class ]].	( aBuilder componentAt: #enclosuresColor ) ifNotNil: [ : c | c widget insideColor: self enclosuresColor ].</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="isUnderlineHolder">isUnderlineHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isUnderlineHolder isNil		ifTrue:			[isUnderlineHolder := false asValue]		ifFalse:			[isUnderlineHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>scanning</category><body package="RBCodeHighlighting" selector="number">number	stream skip: -1.	self scanNumber: self numberId</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>scanning</category><body package="RBCodeHighlighting" selector="variable_assignment">variable_assignment	| token |	outputStream skip: -2.	stream skip: -2.	token := SmaCCToken 				value: outputStream contents				start: start+1				id: (Array with: self nameId).	outputStream reset.	matchActions := nil.	returnMatchBlock value: token</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForCascadeList2:">reduceActionForCascadeList2: nodes 	^(nodes at: 1)		add: (nodes at: 3);		yourself</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="revertToDefault">revertToDefault	newStyles := CodeHighlightingParser defaultStyles copy.	self		updateStyle;		changedStyle</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForUnaryMessageSend1:">reduceActionForUnaryMessageSend1: nodes 	^self formatMessage: (nodes at: 2) to: nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>generated-comments</category><body package="RBCodeHighlighting" selector="parserDefinitionComment">parserDefinitionComment	"%id &lt;number&gt; &lt;negative_number&gt; &lt;name&gt; &lt;smalltalkComment&gt; &lt;binary_symbol&gt;;%start SequenceNode ;Method:	  UnaryMethodName MethodSequenceNode 	| BinaryMethodName MethodSequenceNode 	| KeywordMethodName MethodSequenceNode	| error MethodSequenceNode ;UnaryMethodName: 	&lt;name&gt; {self formatUnaryMethod: '1'};BinaryMethodName:	&lt;binary_symbol&gt; &lt;name&gt; 		{self addTemps. self formatBinaryMethod: '1' with: '2'} ;KeywordMethodName:	&lt;keyword&gt; &lt;name&gt; {self addTemps. self formatKeyword: '1' with: '2'}	| KeywordMethodName &lt;keyword&gt; &lt;name&gt; {self formatKeyword: '2' with: '3'}	| error &lt;keyword&gt; &lt;name&gt; {self formatKeyword: '2' with: '3'};Primitives:		| Primitives ""&lt;"" PrimitiveMessageSend ""&gt;"" {self formatPrimitiveFrom: '2' to: '4'}	| Primitives ""&lt;"" error ""&gt;"" {self formatPrimitiveFrom: '2' to: '4'};PrimitiveMessageSend:	| PrimitiveMessageSend &lt;keyword&gt; {nil}	| PrimitiveMessageSend Literal {nil}	| PrimitiveMessageSend ""("" {nil}	| PrimitiveMessageSend "")"" {nil}	| PrimitiveMessageSend ""{"" {nil}	| PrimitiveMessageSend ""}"" {nil}	| PrimitiveMessageSend "";"" {nil}	| PrimitiveMessageSend ""."" {nil}	| PrimitiveMessageSend &lt;name&gt; {nil}	| PrimitiveMessageSend &lt;binary_symbol&gt; {nil};MethodSequenceNode:	Primitives ""|"" TemporaryVariables ""|"" Primitives Statements {self addTemps}	| Primitives ""||"" Primitives Statements	| Primitives Statements;SequenceNode:	Temporaries Statements {self removeTemps};Temporaries:	{self addTemps}	| ""||"" {self addTemps}	| ""|"" TemporaryVariables ""|"";TemporaryVariables:	{self addTemps}	| TemporaryVariables &lt;name&gt; {self formatTemporaryVariable: '2'};Statements:		| StatementList "".""? {self formatPeriod: '2'}	| StatementList ""."" ""^"" Expression "".""? {self formatPeriod: '2'; formatReturn: '3'; formatPeriod: '5'}	| ""^"" Expression "".""? {self formatReturn: '1'; formatPeriod: '3'}	| error ""^"" Expression "".""? {self formatReturn: '2'; formatPeriod: '4'}	| error ""."" ""^"" Expression "".""? {self formatPeriod: '2'; formatReturn: '3'; formatPeriod: '5'};StatementList:	Expression	| StatementList ""."" Expression {self formatPeriod: '2'}	| error ""."" Expression {self formatPeriod: '2'};Block:	""["" BlockArgs ""|"" SequenceNode ""]"" {self removeTemps. self formatLeftBracket: '1'; formatBlockArgumentSeparator: '3'; formatRightBracket: '5'}	| ""["" SequenceNode ""]"" {self formatLeftBracket: '1'; formatRightBracket: '3'}	| ""["" BlockArgs ""]"" {self removeTemps. self formatLeftBracket: '1'; formatRightBracket: '3'}	| ""["" BlockArgs ""||"" TemporaryVariables ""|"" Statements ""]"" {self removeTemps; removeTemps. self formatLeftBracket: '1'; formatBlockArgumentSeparator: '3'; formatRightBracket: '7'};BlockArgs:	"":"" &lt;name&gt; {self addTemps. self formatBlockVariable: '2' colon: '1'}	| BlockArgs "":"" &lt;name&gt; {self formatBlockVariable: '3' colon: '2'};Expression:	&lt;name&gt; "":="" Expression {self formatAssignedVariable: '1'; formatAssignment: '2'}|	&lt;dotted_name&gt; "":="" Expression {self formatAssignedVariable: '1'; formatAssignment: '2'}|	Cascade ;Cascade :	KeywordMessageSend CascadeList {'2' do: [:each | self formatMessage: each to: '1']}|	BinaryMessageSend CascadeList {'2' do: [:each | self formatMessage: each to: '1']}|	UnaryMessageSend CascadeList {'2' do: [:each | self formatMessage: each to: '1']}|	Primary;CascadeList :	{OrderedCollection new}|	CascadeList "";"" SimpleMessage {'1' add: '3'; yourself};SimpleMessage : 	UnaryMessage {'1'}|	BinaryMessage {'1'}|	KeywordMessage {'1'};KeywordMessageSend:	BinaryMessageSend KeywordMessage {self formatMessage: '2' to: nil}|	UnaryMessageSend KeywordMessage {self formatMessage: '2' to: nil}|	Primary KeywordMessage {self formatMessage: '2' to: '1'};KeywordMessage :	&lt;keyword&gt; KeywordArgument {OrderedCollection with: '1'}|	KeywordMessage &lt;keyword&gt; KeywordArgument {'1' add: '2'; yourself} ;KeywordArgument:	BinaryMessageSend|	UnaryMessageSend|	Primary;BinaryMessageSend :	BinaryMessageSend BinaryMessage {self formatMessage: '2' to: nil}|	UnaryMessageSend BinaryMessage {self formatMessage: '2' to: nil}|	Primary BinaryMessage {self formatMessage: '2' to: '1'};BinaryMessage :	&lt;binary_symbol&gt; BinaryArgument {OrderedCollection with: '1'} ;BinaryArgument:	UnaryMessageSend|	Primary;UnaryMessageSend :	UnaryMessageSend UnaryMessage {self formatMessage: '2' to: nil}|	Primary UnaryMessage {self formatMessage: '2' to: '1'};UnaryMessage :	&lt;name&gt; {OrderedCollection with: '1'};Primary :	""("" Expression "")"" {self formatLeftParenthesis: '1'; formatRightParenthesis: '3'. nil}|	Literal {'1'}|	&lt;name&gt; {self formatVariableReference: '1'}|	&lt;dotted_name&gt; {self formatVariableReference: '1'}|	Block {BlockClosure};Literal:	""true"" {self formatTrue: '1'. True}|	""false"" {self formatFalse: '1'. False}|	""nil"" {self formatNil: '1'. UndefinedObject}|	&lt;number&gt; {self formatNumber: '1'. '1' value asNumber class}|	&lt;negative_number&gt; {self formatNumber: '1'. '1' value asNumber class}|	&lt;character&gt; {self formatCharacter: '1'. Character}|	&lt;string&gt; {self formatString: '1'. String}|	 ""#"" &lt;string&gt; {self formatSymbol: '2' hash: '1'. Symbol}|	""#"" &lt;name&gt; {self formatSymbol: '2' hash: '1'. Symbol}|	""#"" &lt;binary_symbol&gt; {self formatSymbol: '2' hash: '1'. Symbol}|	""#"" &lt;keyword&gt; {self formatSymbol: '2' hash: '1'. Symbol}|	""#"" &lt;multikeyword&gt; {self formatSymbol: '2' hash: '1'. Symbol}|	""#"" ""["" ByteArray ""]"" {self formatByteArrayHash: '1' leftBracket: '2' rightBracket: '4'. ByteArray}|	""#"" ""("" Array "")"" {self formatArrayHash: '1' leftParenthesis: '2' rightParenthesis: '4'. Array}|	""#"" ""{"" &lt;name&gt; ""}"" {self formatQualifiedReferenceHash: '1' leftBrace: '2' rightBrace: '4'. LiteralBindingReference}|	""#"" ""{"" &lt;dotted_name&gt; ""}"" {self formatQualifiedReferenceHash: '1' leftBrace: '2' rightBrace: '4'. LiteralBindingReference}|	""{"" ObjectStudioArray ""}"" {self formatArrayLeftBrace: '1' rightBrace: '3'. Array};ByteArray: 	|	ByteArray &lt;number&gt; |	error;Array: 	|	error |	Array ArrayLiteral |	Array &lt;name&gt; "":="" {'2' stopPosition + 1 = '3' startPosition				 			ifTrue: [self formatSymbol: (SmaCCToken value: ('2' value , ':') start: '2' startPosition id: nil) hash: nil] 							ifFalse: [self formatSymbol: '2' hash: nil; 									formatSymbol: (SmaCCToken value: ':' start: '3' startPosition id: nil) hash: nil].  						scanner position: '3' startPosition. currentToken := nil. '1'};ArrayLiteral:## The first several of these are copied from literal, but the formatting was removed.	""true"" |	""false"" |	""nil"" |	&lt;number&gt;|	&lt;negative_number&gt; |	&lt;character&gt; |	&lt;string&gt; |	 ""#"" &lt;string&gt; |	""#"" &lt;name&gt;|	""#"" &lt;binary_symbol&gt; |	""#"" &lt;keyword&gt;|	""#"" &lt;multikeyword&gt;|	""#"" ""["" ByteArray ""]"" |	""#"" ""("" Array "")"" |	""#"" ""{"" &lt;name&gt; ""}""|	""#"" ""{"" &lt;dotted_name&gt; ""}""|	&lt;name&gt; |	&lt;binary_symbol&gt; |	&lt;keyword&gt;|	&lt;multikeyword&gt; |	""{"" &lt;name&gt; ""}"" |	""{"" &lt;dotted_name&gt; ""}"" |	""("" Array "")"" |	""["" ByteArray ""]""|	&lt;any_char&gt; |	&lt;dotted_name&gt; ;ObjectStudioArray: 	|	error |	ObjectStudioArray ObjectStudioArrayLiteral |	ObjectStudioArray &lt;name&gt; "":="" {'2' stopPosition + 1 = '3' startPosition				 			ifTrue: [self formatSymbol: (SmaCCToken value: ('2' value , ':') start: '2' startPosition id: nil) hash: nil] 							ifFalse: [self formatSymbol: '2' hash: nil; 									formatSymbol: (SmaCCToken value: ':' start: '3' startPosition id: nil) hash: nil].  						scanner position: '3' startPosition. currentToken := nil. '1'};ObjectStudioArrayLiteral:## The first several of these are copied from literal, but the formatting was removed.	""true"" |	""false"" |	""nil"" |	&lt;number&gt;|	&lt;negative_number&gt; |	&lt;character&gt; |	&lt;string&gt; |	 ""#"" &lt;string&gt; |	""#"" &lt;name&gt;|	""#"" &lt;binary_symbol&gt; |	""#"" &lt;keyword&gt;|	""#"" &lt;multikeyword&gt;|	""#"" ""["" ByteArray ""]"" |	""#"" ""("" Array "")"" |	""#"" ""{"" &lt;name&gt; ""}""|	""#"" ""{"" &lt;dotted_name&gt; ""}""|	&lt;name&gt; |	&lt;binary_symbol&gt; |	&lt;keyword&gt;|	&lt;multikeyword&gt; |	""{"" ObjectStudioArray ""}"" |	""("" Array "")"" |	Block|	&lt;any_char&gt; |	&lt;dotted_name&gt; ;"</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>generated-accessing</category><body package="RBCodeHighlighting" selector="scannerClass">scannerClass	^CodeHighlightingScanner</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForArray4:">reduceActionForArray4: nodes 	(nodes at: 2) stopPosition + 1 = (nodes at: 3) startPosition 		ifTrue: 			[self formatSymbol: (SmaCCToken 						value: (nodes at: 2) value , ':'						start: (nodes at: 2) startPosition						id: nil)				hash: nil]		ifFalse: 			[self				formatSymbol: (nodes at: 2) hash: nil;				formatSymbol: (SmaCCToken 							value: ':'							start: (nodes at: 3) startPosition							id: nil)					hash: nil].	scanner position: (nodes at: 3) startPosition.	currentToken := nil.	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="prepareForUnloading">prepareForUnloading	self allInstances do: [:each | self revertController: each]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="styles">styles	^styles ifNil: [self defaultStyles]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral11:">reduceActionForLiteral11: nodes 	self formatSymbol: (nodes at: 2) hash: (nodes at: 1).	^Symbol</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatExpression:for:">formatExpression: aText for: aClass 	| parser |	parser := self on: (ReadStream on: aText).	parser		text: aText;		class: aClass.	parser setStartingState: self startingStateForSequenceNode.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral8:">reduceActionForLiteral8: nodes 	self formatSymbol: (nodes at: 2) hash: (nodes at: 1).	^Symbol</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatPeriod:">formatPeriod: aSmaCCToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatAssignedVariable:">formatAssignedVariable: aSmaCCToken 	self formatVariableReference: aSmaCCToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scan2">scan2		[self step.	currentCharacter ~~ $'] whileTrue.	^self scan1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral13:">reduceActionForLiteral13: nodes 	self 		formatByteArrayHash: (nodes at: 1)		leftBracket: (nodes at: 2)		rightBracket: (nodes at: 4).	^ByteArray</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="initialize">initialize	super initialize.	temps := OrderedCollection new .	args  := OrderedCollection new ."	blockArgs  := OrderedCollection new ."</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="isForMethod:">isForMethod: aBoolean 	isForMethod := aBoolean</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="setColor:">setColor: color 	self selectedStyle isNil ifTrue: [^self].	(self widgetAt: #color) insideColor: color.	self removeColor.	self setStyle: (self selectedStyle 				copyWith: (Array with: #color: with: color literalArrayEncoding))</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimary4:">reduceActionForPrimary4: nodes 	^self formatVariableReference: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="styleDescriptions">styleDescriptions	^#(		#(#code_syntaxError 'Syntax Error') 		#(#code_dnu 'Message Not Understood') 		#(#code_undeclaredVariable 'Undeclared Variable')		#(#code_redefinedVariableDefinition 'Redefined Variable')		#(#code_comment 'Comment') 		#(#code_keywordMethodName 'Keyword Method Name') 		#(#code_unaryMethodName 'Unary Method Name') 		#(#code_binaryMethodName 'Binary Method Name') 		#(#code_array 'Literal Array') 		#(#code_true 'true') 		#(#code_false 'false') 		#(#code_nil 'nil') 		#(#code_string 'Literal String') 		#(#code_character 'Literal Character') 		#(#code_symbol 'Literal Symbol') 		#(#code_number 'Literal Number')		#(#code_byteArray 'Literal Byte Array')		#(#code_qualifiedReference 'Literal Qualified Reference')		#(#code_self 'self')		#(#code_super 'super')		#(#code_thisContext 'thisContext')		#(#code_sharedVariableReference 'Shared Variable')		#(#code_nameSpaceReference 'Name Space')		#(#code_classReference 'Class')		#(#code_methodVariableDefinition 'Method Argument')		#(#code_instanceVariable 'Instance Variable')		#(#code_temporaryVariableDefinition 'Temporary Variable Definition')		#(#code_temporaryVariable 'Temporary Variable Reference')		#(#code_blockArgument 'Block Argument')		#(#code_messageSend 'Message Send')		#(#code_primitive 'Primitive/Pragma')		#(#code_assignment 'Assignment')		#(#code_bracket 'Block Bracket')		#(#code_parenthesis 'Parenthesis')		#(#code_return 'Return')	)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBinaryMessageSend3:">reduceActionForBinaryMessageSend3: nodes 	^self formatMessage: (nodes at: 2) to: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedItalic">changedItalic	self isItalicHolder value 		ifTrue: [self addStyle: #italic]		ifFalse: [self removeStyle: #italic]</body></methods><methods><class-id>Tools.AbstractWorkspace</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="isStylingSmalltalkCode">isStylingSmalltalkCode	^self currentPage isStylingSmalltalkCode</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="refreshDelayHolder">refreshDelayHolder		^refreshDelayHolder isNil		ifTrue:			[refreshDelayHolder := RefreshDelay asValue]		ifFalse:			[refreshDelayHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend11:">reduceActionForPrimitiveMessageSend11: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="updateWithLoadedStyles:">updateWithLoadedStyles: styleArray "Simple 'newStyles := styleArray is not enough. Make sure, that the loaded styles will update(but not will replace) existing styles." 	styleArray do: 			[:loadedStyle | 			| index |			index := (1 to: newStyles size) 						detect: [:each | (newStyles at: each) first = loadedStyle first]						ifNone: [].			index notNil ifTrue: [newStyles at: index put: loadedStyle]].	self		updateStyle;		changedStyle</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend6:">reduceActionForPrimitiveMessageSend6: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="styles:">styles: aCollection 	styles := aCollection.	self initializeStyles</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>pages</category><body package="RBCodeHighlighting" selector="rbCodeHighlighterPage">rbCodeHighlighterPage	&lt;settingsPage: #(tools browser rbCodeHighlighter)&gt;	^(ModularSettingsPage new)		label: 'Code Highlighter';		icon: (ListIconLibrary visualFor: #image);		useRadioButtonsForEnumerations;		settings: (self settingsWithPrefix: #(#rbCodeHighlighter))</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-tables</category><body package="RBCodeHighlighting" selector="reduceTable">reduceTable	^#(#(33 0 #reduceFor:)#(33 4 #reduceActionForPrimitives2:)#(33 4 #reduceActionForPrimitives3:)#(34 0 #reduceFor:)#(34 2 #reduceActionForPrimitiveMessageSend2:)#(34 2 #reduceActionForPrimitiveMessageSend3:)#(34 2 #reduceActionForPrimitiveMessageSend4:)#(34 2 #reduceActionForPrimitiveMessageSend5:)#(34 2 #reduceActionForPrimitiveMessageSend6:)#(34 2 #reduceActionForPrimitiveMessageSend7:)#(34 2 #reduceActionForPrimitiveMessageSend8:)#(34 2 #reduceActionForPrimitiveMessageSend9:)#(34 2 #reduceActionForPrimitiveMessageSend10:)#(34 2 #reduceActionForPrimitiveMessageSend11:)#(35 1 #reduceActionForUnaryMethodName1:)#(36 0 #reduceActionForTemporaryVariables1:)#(36 2 #reduceActionForTemporaryVariables2:)#(37 0 #reduceFor:)#(37 2 #reduceActionForStatements2:)#(37 5 #reduceActionForStatements3:)#(37 3 #reduceActionForStatements4:)#(37 4 #reduceActionForStatements5:)#(37 5 #reduceActionForStatements6:)#(38 0 #reduceActionForTemporaries1:)#(38 1 #reduceActionForTemporaries2:)#(38 3 #reduceFor:)#(39 1 #reduceFor:)#(39 3 #reduceActionForStatementList2:)#(39 3 #reduceActionForStatementList3:)#(40 0 #reduceActionForOptional_____1:)#(40 1 #reduceActionForOptional_____2:)#(41 3 #reduceActionForExpression1:)#(41 3 #reduceActionForExpression2:)#(41 1 #reduceFor:)#(42 2 #reduceActionForBlockArgs1:)#(42 3 #reduceActionForBlockArgs2:)#(43 5 #reduceActionForBlock1:)#(43 3 #reduceActionForBlock2:)#(43 3 #reduceActionForBlock3:)#(43 7 #reduceActionForBlock4:)#(44 6 #reduceActionForMethodSequenceNode1:)#(44 4 #reduceFor:)#(44 2 #reduceFor:)#(45 2 #reduceActionForCascade1:)#(45 2 #reduceActionForCascade2:)#(45 2 #reduceActionForCascade3:)#(45 1 #reduceFor:)#(46 1 #reduceFor:)#(47 0 #reduceActionForCascadeList1:)#(47 3 #reduceActionForCascadeList2:)#(48 2 #reduceActionForBinaryMessageSend1:)#(48 2 #reduceActionForBinaryMessageSend2:)#(48 2 #reduceActionForBinaryMessageSend3:)#(49 2 #reduceActionForUnaryMessageSend1:)#(49 2 #reduceActionForUnaryMessageSend2:)#(50 3 #reduceActionForPrimary1:)#(50 1 #reduceActionForPrimary2:)#(50 1 #reduceActionForPrimary3:)#(50 1 #reduceActionForPrimary4:)#(50 1 #reduceActionForPrimary5:)#(51 1 #reduceActionForSimpleMessage1:)#(51 1 #reduceActionForSimpleMessage2:)#(51 1 #reduceActionForSimpleMessage3:)#(52 1 #reduceActionForUnaryMessage1:)#(53 2 #reduceActionForBinaryMessage1:)#(54 2 #reduceActionForKeywordMessage1:)#(54 3 #reduceActionForKeywordMessage2:)#(55 1 #reduceFor:)#(55 1 #reduceFor:)#(55 1 #reduceFor:)#(56 1 #reduceFor:)#(56 1 #reduceFor:)#(57 2 #reduceFor:)#(57 2 #reduceFor:)#(57 2 #reduceFor:)#(57 2 #reduceFor:)#(58 2 #reduceActionForSequenceNode1:)#(59 2 #reduceActionForKeywordMethodName1:)#(59 3 #reduceActionForKeywordMethodName2:)#(59 3 #reduceActionForKeywordMethodName3:)#(60 0 #reduceFor:)#(60 2 #reduceFor:)#(60 1 #reduceFor:)#(61 0 #reduceFor:)#(61 1 #reduceFor:)#(61 2 #reduceFor:)#(61 3 #reduceActionForArray4:)#(62 0 #reduceFor:)#(62 1 #reduceFor:)#(62 2 #reduceFor:)#(62 3 #reduceActionForObjectStudioArray4:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 2 #reduceFor:)#(63 2 #reduceFor:)#(63 2 #reduceFor:)#(63 2 #reduceFor:)#(63 2 #reduceFor:)#(63 4 #reduceFor:)#(63 4 #reduceFor:)#(63 4 #reduceFor:)#(63 4 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 3 #reduceFor:)#(63 3 #reduceFor:)#(63 3 #reduceFor:)#(63 3 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(64 2 #reduceActionForKeywordMessageSend1:)#(64 2 #reduceActionForKeywordMessageSend2:)#(64 2 #reduceActionForKeywordMessageSend3:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 2 #reduceFor:)#(65 2 #reduceFor:)#(65 2 #reduceFor:)#(65 2 #reduceFor:)#(65 2 #reduceFor:)#(65 4 #reduceFor:)#(65 4 #reduceFor:)#(65 4 #reduceFor:)#(65 4 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 3 #reduceFor:)#(65 3 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(68 2 #reduceActionForBinaryMethodName1:)#(69 1 #reduceActionForLiteral1:)#(69 1 #reduceActionForLiteral2:)#(69 1 #reduceActionForLiteral3:)#(69 1 #reduceActionForLiteral4:)#(69 1 #reduceActionForLiteral5:)#(69 1 #reduceActionForLiteral6:)#(69 1 #reduceActionForLiteral7:)#(69 2 #reduceActionForLiteral8:)#(69 2 #reduceActionForLiteral9:)#(69 2 #reduceActionForLiteral10:)#(69 2 #reduceActionForLiteral11:)#(69 2 #reduceActionForLiteral12:)#(69 4 #reduceActionForLiteral13:)#(69 4 #reduceActionForLiteral14:)#(69 4 #reduceActionForLiteral15:)#(69 4 #reduceActionForLiteral16:)#(69 3 #reduceActionForLiteral17:))</body></methods><methods><class-id>Core.Character</class-id> <category>testing</category><body package="RBCodeHighlighting" selector="isBlank">isBlank	"space or tab"	^self == ($ ) or: [ self == ($	) ].</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatByteArrayHash:leftBracket:rightBracket:">formatByteArrayHash: hashSmaCCToken leftBracket: leftBracketSmaCCToken rightBracket: rightBracketSmaCCToken 	self 		formatFrom: (hashSmaCCToken ifNil: [leftBracketSmaCCToken]) startPosition		to: rightBracketSmaCCToken stopPosition		with: #code_byteArray</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral10:">reduceActionForLiteral10: nodes 	self formatSymbol: (nodes at: 2) hash: (nodes at: 1).	^Symbol</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral4:">reduceActionForLiteral4: nodes 	self formatNumber: (nodes at: 1).	^(nodes at: 1) value asNumber class</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="namespace">namespace	^namespace</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatRightBracket:">formatRightBracket: aSmaCCToken	self formatToken: aSmaCCToken with: #code_bracket .</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scan1">scan1	self recordMatch: #(23).	self step.	currentCharacter == $' ifTrue: [^self scan2].	^self reportLastMatch</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="highlightDebugger:">highlightDebugger: aBoolean	HighlightDebugger := aBoolean</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForSimpleMessage2:">reduceActionForSimpleMessage2: nodes 	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="styleWidgets">styleWidgets	^#(#strikeout #underline #jaggedEdge #italic #bold #colorToggle)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatBlockVariable:colon:">formatBlockVariable: variableSmaCCToken colon: colonSmaCCToken 	self 		formatFrom: colonSmaCCToken startPosition		to: variableSmaCCToken stopPosition		with: (((self isTemporaryVariable: variableSmaCCToken value) 				or: [self isInstanceVariable: variableSmaCCToken value]) 					ifTrue: [#code_redefinedVariableDefinition]					ifFalse: [#code_blockArgument]).	self addTemp: variableSmaCCToken value</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="isValidMessage:for:">isValidMessage: anOrderedCollection for: aClass 	| name stream |	stream := WriteStream on: (String new: 30).	anOrderedCollection do: [:each | stream nextPutAll: each value].	name := stream contents.	name := Symbol findInterned: name.	name isNil ifTrue: [^false].	^aClass isNil or: [aClass canUnderstand: name]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend5:">reduceActionForPrimitiveMessageSend5: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="errorTokenId">errorTokenId	^67</body></methods><methods><class-id>Tools.AbstractWorkspace</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="dontStyleSmalltalkCode">dontStyleSmalltalkCode	self currentPage when: #dontStyleSmalltalkCode send: #yourself to: self.	self currentPage dontStyleSmalltalkCode</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatements6:">reduceActionForStatements6: nodes 	^self		formatPeriod: (nodes at: 2);		formatReturn: (nodes at: 3);		formatPeriod: (nodes at: 5)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="isMethodArgument:">isMethodArgument: aString 	^args anySatisfy: [:each | each = aString]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>scanning</category><body package="RBCodeHighlighting" selector="negative_number">negative_number	stream skip: -2.	self scanNumber: self negative_numberId</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend9:">reduceActionForPrimitiveMessageSend9: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimary2:">reduceActionForPrimary2: nodes 	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedUnderline">changedUnderline	self isUnderlineHolder value 		ifTrue: [self addStyle: #underline]		ifFalse: [self removeStyle: #underline]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedStrikeout">changedStrikeout	self isStrikeoutHolder value 		ifTrue: [self addStyle: #strikeout]		ifFalse: [self removeStyle: #strikeout]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend2:">reduceActionForPrimitiveMessageSend2: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatementList2:">reduceActionForStatementList2: nodes 	^self formatPeriod: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessageSend2:">reduceActionForKeywordMessageSend2: nodes 	^self formatMessage: (nodes at: 2) to: nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForObjectStudioArray4:">reduceActionForObjectStudioArray4: nodes 	(nodes at: 2) stopPosition + 1 = (nodes at: 3) startPosition 		ifTrue: 			[self formatSymbol: (SmaCCToken 						value: (nodes at: 2) value , ':'						start: (nodes at: 2) startPosition						id: nil)				hash: nil]		ifFalse: 			[self				formatSymbol: (nodes at: 2) hash: nil;				formatSymbol: (SmaCCToken 							value: ':'							start: (nodes at: 3) startPosition							id: nil)					hash: nil].	scanner position: (nodes at: 3) startPosition.	currentToken := nil.	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="textController">textController	^self controllerFor: #method</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self textController beHighlightingWithSettings: 			[:newController | 			newController				classBlock: [nil class];				isForMethod: false]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatLeftParenthesis:">formatLeftParenthesis: aSmaCCToken	self formatToken: aSmaCCToken with: #code_parenthesis</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	initialLookPrefs := (builder componentAt: #textEditor) lookPreferences.	self updateTextWidget.	self textController beHighlightingWithSettings: 			[:newController | 			newController				classBlock: [self selectedClass];				namespaceBlock: [self doItEnvironment]].</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="stopHighlighting">stopHighlighting	highlightingProcess notNil 		ifTrue: 			[highlightingProcess terminate.			highlightingProcess priority: Processor activePriority + 1.			highlightingProcess := nil]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatCharacter:">formatCharacter: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_character</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatExpression:forClass:namespace:">formatExpression: aText forClass: aClass namespace: aNamespace	| parser |	parser := self on: (ReadStream on: aText).	parser		text: aText;		class: aClass;		namespace: aNamespace.	parser setStartingState: self startingStateForSequenceNode.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatSuper:">formatSuper: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_super</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForTemporaryVariables1:">reduceActionForTemporaryVariables1: nodes 	^self addTemps</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="cancel">cancel	CodeHighlightingParser styles: oldStyles.	RefreshDelay := oldDelay.	self closeRequest</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral2:">reduceActionForLiteral2: nodes 	self formatFalse: (nodes at: 1).	^False</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForExpression2:">reduceActionForExpression2: nodes 	^self		formatAssignedVariable: (nodes at: 1);		formatAssignment: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatSyntaxError">formatSyntaxError	self formatSyntaxErrorFrom: currentToken startPosition		to: currentToken stopPosition</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="replaceFrom:to:with:">replaceFrom: start to: stop with: aText 	self stopHighlighting.	super 		replaceFrom: start		to: stop		with: aText.	self startHighlighting: RefreshDelay</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatements3:">reduceActionForStatements3: nodes 	^self		formatPeriod: (nodes at: 2);		formatReturn: (nodes at: 3);		formatPeriod: (nodes at: 5)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="numberId">numberId	^21</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatString:">formatString: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_string</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatArrayHash:leftParenthesis:rightParenthesis:">formatArrayHash: hashSmaCCToken leftParenthesis: leftParenthesisSmaCCToken rightParenthesis: rightParenthesisSmaCCToken 	self 		formatFrom: (hashSmaCCToken ifNil: [leftParenthesisSmaCCToken]) 				startPosition		to: leftParenthesisSmaCCToken stopPosition		with: #code_array.	self 		formatFrom: rightParenthesisSmaCCToken startPosition		to: rightParenthesisSmaCCToken stopPosition		with: #code_array</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-code highlighting</category><body package="RBCodeHighlighting" selector="rbCodeHighlightingSettingsEditor">rbCodeHighlightingSettingsEditor	&lt;setting: #(rbCodeHighlighter  settingsEditor )&gt;	^(ExternalSetting new)		label: 'Code Highlighter Settings';		editorClass: Refactory.CodeHighlighter.CodeHighlightingSettings;		helpText: 'Opens an editor to manage the colorizing of Smalltalk source.The settings created with that tool are saved separately from the sytem settings.'</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral9:">reduceActionForLiteral9: nodes 	self formatSymbol: (nodes at: 2) hash: (nodes at: 1).	^Symbol</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="class:">class: aClass	class := aClass</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForCascade1:">reduceActionForCascade1: nodes 	^(nodes at: 2) do: [:each | self formatMessage: each to: (nodes at: 1)]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessage2:">reduceActionForKeywordMessage2: nodes 	^(nodes at: 1)		add: (nodes at: 2);		yourself</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatKeyword:with:">formatKeyword: selectorSmaCCToken with: variableSmaCCToken 	self formatToken: selectorSmaCCToken with: #code_keywordMethodName.	self formatMethodArgument: variableSmaCCToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral14:">reduceActionForLiteral14: nodes 	self 		formatArrayHash: (nodes at: 1)		leftParenthesis: (nodes at: 2)		rightParenthesis: (nodes at: 4).	^Array</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="getColor">getColor	| dialog |	dialog := ColorSelectionDialog new.	dialog selection: self currentColor.	dialog open.	dialog accept value ifTrue: [self setColor: dialog selection]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatBinaryMethod:with:">formatBinaryMethod: selectorSmaCCToken with: variableSmaCCToken 	self formatToken: selectorSmaCCToken with: #code_binaryMethodName.	self formatMethodArgument: variableSmaCCToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="removeStyles">removeStyles	"self removeStyles"	self defaultStyles 		do: [:style | CharacterAttributes removeDefaultKey: style first]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForExpression1:">reduceActionForExpression1: nodes 	^self		formatAssignedVariable: (nodes at: 1);		formatAssignment: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="saveStyles">saveStyles	| name file |	name := Dialog requestFileName: 'Save styles as:' default: 'style.sav'.	name isEmpty ifTrue: [^self].	file := name asFilename writeStream.	[newStyles storeOn: file] 		ensure: [file close]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatCascade:">formatCascade: aSmaCCToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="typeList">typeList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^typeList isNil		ifTrue:			[typeList := SelectionInList new]		ifFalse:			[typeList]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMethodName2:">reduceActionForKeywordMethodName2: nodes 	^self formatKeyword: (nodes at: 2) with: (nodes at: 3)</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	(aBuilder componentAt: #methodList) widget 		displayStringSelector: #simpleReverseDisplayString.	self configureCodeViewController: (aBuilder componentAt: #text) widget 				controller.	(aBuilder componentAt: #text) widget controller 		beHighlightingWithSettings: 			[:newController | 			newController				classBlock: [object class];				namespaceBlock: [object class environment]]</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="isForMethod">isForMethod	^isForMethod isNil or: [isForMethod]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>generated-starting states</category><body package="RBCodeHighlighting" selector="startingStateForMethod">startingStateForMethod	^1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatTrue:">formatTrue: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_true</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="isInstanceVariable:">isInstanceVariable: aString 	^class notNil and: [class allInstVarNames includes: aString]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>menu</category><body package="RBCodeHighlighting" selector="highlighterSettings">highlighterSettings	&lt;menuItem: 'Code Highlighter Settings'		nameKey: #highlighterSettings		menu: #(#toolsMenu)		position: 30.00&gt;	Refactory.CodeHighlighter.CodeHighlightingSettings open</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner class</class-id> <category>initialization</category><body package="RBCodeHighlighting" selector="initialize">initialize	"We need this because otherwise our initialization won't get run"	super initialize.</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatVariableReference:">formatVariableReference: aSmaCCToken 	| ref binding |	aSmaCCToken value = 'self' 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_self.			^class].	aSmaCCToken value = 'super' 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_super.			^class ifNotNil: [class superclass]].	aSmaCCToken value = 'thisContext' 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_thisContext.			^thisContext class].	(self isBlockArgument: aSmaCCToken value) 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_blockArgument.			^nil].	(self isTemporaryVariable: aSmaCCToken value) 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_temporaryVariable.			^nil].	(self isInstanceVariable: aSmaCCToken value) 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_instanceVariable.			^nil].	(self isMethodArgument: aSmaCCToken value) 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_methodVariableDefinition.			^nil].	ref := BindingReference pathString: aSmaCCToken value.	self findNamespaceFor: ref.	binding := ref bindingOrNil.	binding isNil 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_undeclaredVariable.			^nil].	binding isForClass 		ifTrue: [self formatToken: aSmaCCToken with: #code_classReference]		ifFalse: 			[binding isForNameSpace 				ifTrue: [self formatToken: aSmaCCToken with: #code_nameSpaceReference]				ifFalse: [self formatToken: aSmaCCToken with: #code_sharedVariableReference]].	^binding value class</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral15:">reduceActionForLiteral15: nodes 	self 		formatQualifiedReferenceHash: (nodes at: 1)		leftBrace: (nodes at: 2)		rightBrace: (nodes at: 4).	^LiteralBindingReference</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="defaultStyles">defaultStyles	^#(		#(#code_syntaxError #jaggedEdge #(#color: #(#{Smalltalk.ColorValue} #red))) 		#(#code_dnu #jaggedEdge) 		#(#code_undeclaredVariable #jaggedEdge #(#color: #(#{Smalltalk.ColorValue} #red)))		#(#code_redefinedVariableDefinition #jaggedEdge #(#color: #(#{Smalltalk.ColorValue} #red)))		#(#code_comment #italic #(#color: #(#{Smalltalk.ColorValue} #lightGray))) 		#(#code_keywordMethodName #bold) 		#(#code_unaryMethodName #bold) 		#(#code_binaryMethodName #bold) 		#(#code_array #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_true #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_false #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_nil #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_string #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_character #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_symbol #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_number #(#color: #(#{Smalltalk.ColorValue} #magenta)))		#(#code_byteArray #(#color: #(#{Smalltalk.ColorValue} #magenta)))		#(#code_qualifiedReference #(#color: #(#{Smalltalk.ColorValue} #magenta)))		#(#code_self #(#color: #(#{Smalltalk.ColorValue} #blue)))		#(#code_super #(#color: #(#{Smalltalk.ColorValue} #royalBlue)))		#(#code_thisContext #(#color: #(#{Smalltalk.ColorValue} #orange)))		#(#code_sharedVariableReference #(#color: #(#{Smalltalk.ColorValue} #darkCyan)))		#(#code_nameSpaceReference #(#color: #(#{Smalltalk.ColorValue} #darkCyan)))		#(#code_classReference #(#color: #(#{Smalltalk.ColorValue} #purple)))		#(#code_methodVariableDefinition #bold #(#color: #(#{Smalltalk.ColorValue} #darkMagenta)))		#(#code_instanceVariable #(#color: #(#{Smalltalk.ColorValue} #navy)))		#(#code_temporaryVariableDefinition #(#color: #(#{Smalltalk.ColorValue} #darkMagenta)))		#(#code_temporaryVariable #(#color: #(#{Smalltalk.ColorValue} #darkMagenta)))		#(#code_blockArgument #(#color: #(#{Smalltalk.ColorValue} #darkMagenta)))		#(#code_messageSend)		#(#code_primitive)		#(#code_assignment)		#(#code_bracket)		#(#code_parenthesis)		#(#code_return #bold  #(#color: #(#{Smalltalk.ColorValue} #red)))	)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="initialize">initialize	self initializeStyles</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings class</class-id> <category>resources</category><body package="RBCodeHighlighting" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Load styles...' 							#value: #loadStyles ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Save styles...' 							#value: #saveStyles ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Revert to default styles' 							#value: #revertToDefault ) 						#(#{UI.MenuItem} 							#rawLabel: 'E&amp;xit' 							#value: #closeRequest ) ) #(2 1 1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMethodName3:">reduceActionForKeywordMethodName3: nodes 	^self formatKeyword: (nodes at: 2) with: (nodes at: 3)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatements4:">reduceActionForStatements4: nodes 	^self		formatReturn: (nodes at: 1);		formatPeriod: (nodes at: 3)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="namespace:">namespace: aNamespace	namespace := aNamespace</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="removeTemps">removeTemps	temps removeLast</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="binary_symbolId">binary_symbolId	^26</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>privileged evaluation</category><body package="RBCodeHighlighting" selector="valueAtPriority:">valueAtPriority: priority	| activeProcess oldPriority |	activeProcess := Processor activeProcess.	oldPriority := activeProcess priority.	activeProcess priority: priority.	^self ensure: [activeProcess priority: oldPriority]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="currentColor">currentColor	| color |	color := self selectedStyle 				detect: [:each | each class = Array and: [each first = #color:]]				ifNone: [^ColorValue black].	^color last decodeAsLiteralArray</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="isBlockArgument:">isBlockArgument: aString 	^ false " blockArgs anySatisfy: [:each | each = aString] "</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBlock4:">reduceActionForBlock4: nodes 	self		removeTemps;		removeTemps.	^self		formatLeftBracket: (nodes at: 1);		formatBlockArgumentSeparator: (nodes at: 3);		formatRightBracket: (nodes at: 7)</body></methods><methods><class-id>UI.ComposedTextView</class-id> <category>displaying</category><body package="RBCodeHighlighting" selector="boundsOfInterval:">boundsOfInterval: interval 	| rect |	rect := self characterBlockForIndex: interval first.	interval 		do: [:each | rect := rect merge: (self characterBlockForIndex: each)].	^rect</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="initializeStyles">initializeStyles	"self initializeStyles"	| dict removals |	dict := self stylesDictionary.	removals := dict keys select: [:each | (dict at: each) isNil].	removals do: [:each | dict removeKey: each].	CharacterAttributes removeDefaultKeys: removals.	CharacterAttributes defaultsAddAll: dict</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForUnaryMethodName1:">reduceActionForUnaryMethodName1: nodes 	^self formatUnaryMethod: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="displayWithHighlightedText:">displayWithHighlightedText: localText 	| interval oldBounds newBounds selectionShowing start stop |	(selectionShowing := view selectionShowing) 		ifTrue: 			["if something is selected, remember what and deselect"			"NOTE! if no deselect happens, then the selection is displayed at a wrong offset,			so when the selection is drawn again at the end of the method, there may be some			strange text-fragment next to the new selection, which looks ugly"			start := self selectionStartIndex copy.			stop := self selectionStopIndex copy.			view deselect].	interval := self getIntervalForUpdateFromOriginal: self text				withNew: localText.	oldBounds := view boundsOfInterval: interval.	self text setString: self text string setRuns: localText runs.	newBounds := view boundsOfInterval: interval.	view invalidateRectangle: (oldBounds merge: newBounds) repairNow: true.	selectionShowing 		ifTrue: 			["if something has been selected, select it again and show that"			view selectFrom: start to: stop.			view selectAndScroll]		ifFalse: [view selectAt: self selectionStartIndex]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForSimpleMessage1:">reduceActionForSimpleMessage1: nodes 	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForCascade3:">reduceActionForCascade3: nodes 	^(nodes at: 2) do: [:each | self formatMessage: each to: (nodes at: 1)]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForCascade2:">reduceActionForCascade2: nodes 	^(nodes at: 2) do: [:each | self formatMessage: each to: (nodes at: 1)]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatMethodArgument:">formatMethodArgument: variableSmaCCToken 	self formatToken: variableSmaCCToken		with: ((self isInstanceVariable: variableSmaCCToken value) 				ifTrue: [#code_redefinedVariableDefinition]				ifFalse: [#code_methodVariableDefinition]).	args add: variableSmaCCToken value</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatMethod:forClass:namespace:">formatMethod: aText forClass: aClass namespace: aNamespace	| parser |	parser := self on: (ReadStream on: aText).	parser		text: aText;		class: aClass;		namespace: aNamespace.	parser setStartingState: self defaultStartingState.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="loadStyles">loadStyles	| name |	name := Dialog requestFileName: 'Load styles from:' default: 'style.sav'.	name isEmpty ifTrue: [^self].	^self loadStylesFrom: name</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="isStrikeoutHolder">isStrikeoutHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isStrikeoutHolder isNil		ifTrue:			[isStrikeoutHolder := false asValue]		ifFalse:			[isStrikeoutHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatLeftBracket:">formatLeftBracket: aSmaCCToken	self formatToken: aSmaCCToken with: #code_bracket</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="updateStyle">updateStyle	CodeHighlightingParser styles: newStyles.	self invalidateComponent: #method</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForSimpleMessage3:">reduceActionForSimpleMessage3: nodes 	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="namespaceBlock">namespaceBlock	^namespaceBlock ifNil: [namespaceBlock := [nil]].</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scanForToken">scanForToken	self step.	(currentCharacter isLetter or: [currentCharacter == $_]) 		ifTrue: 			[self recordMatch: #(20 32).			self step.			(currentCharacter isLetter 				or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]) 					ifTrue: 						[						[self recordMatch: #(20).						self step.						currentCharacter isLetter 							or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]] 								whileTrue].			currentCharacter == $. ifTrue: [^self scan5].			currentCharacter == $: ifTrue: [^self scan3].			^self reportLastMatch].	(currentCharacter &lt;= Character backspace or: 			[(currentCharacter between: (Character value: 14) and: (Character value: 31)) 				or: 					[currentCharacter == $` or: 							[(currentCharacter between: Character del and: $¿) 								or: [currentCharacter == $× or: [currentCharacter == $÷]]]]]) 		ifTrue: [^self recordAndReportMatch: #(32)].	(currentCharacter == $! or: 			[(currentCharacter between: $% and: $&amp;) or: 					[(currentCharacter between: $* and: $,) or: 							[currentCharacter == $/ or: 									[currentCharacter == $= or: 											[(currentCharacter between: $? and: $@) 												or: [currentCharacter == $\ or: [currentCharacter == $~]]]]]]]) 		ifTrue: 			[self recordMatch: #(26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter isDigit ifTrue: [^self recordAndReportMatch: #number].	(currentCharacter isBlank 		or: [currentCharacter between: Character lf and: Character cr]) 			ifTrue: 				[self recordMatch: #whitespace.				self step.				(currentCharacter isBlank 					or: [currentCharacter between: Character lf and: Character cr]) 						ifTrue: 							[							[self recordMatch: #whitespace.							self step.							currentCharacter isBlank 								or: [currentCharacter between: Character lf and: Character cr]] 									whileTrue].				^self reportLastMatch].	currentCharacter == $" 		ifTrue: 			[self recordMatch: #(32).			self step.			currentCharacter ~~ $" 				ifTrue: [					[self step.					currentCharacter ~~ $"] whileTrue].			currentCharacter == $" ifTrue: [^self recordAndReportMatch: #(28)].			^self reportLastMatch].	currentCharacter == $# ifTrue: [^self recordAndReportMatch: #(4 32)].	currentCharacter == $$ 		ifTrue: 			[self recordMatch: #(32).			self step.			^self recordAndReportMatch: #(30)].	currentCharacter == $' 		ifTrue: 			[self recordMatch: #(32).			self step.			currentCharacter ~~ $' ifTrue: [^self scan2].			currentCharacter == $' ifTrue: [^self scan1].			^self reportLastMatch].	currentCharacter == $( ifTrue: [^self recordAndReportMatch: #(7 32)].	currentCharacter == $) ifTrue: [^self recordAndReportMatch: #(6 32)].	currentCharacter == $- 		ifTrue: 			[self recordMatch: #(26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			currentCharacter isDigit 				ifTrue: [^self recordAndReportMatch: #negative_number].			^self reportLastMatch].	currentCharacter == $. ifTrue: [^self recordAndReportMatch: #(2 32)].	currentCharacter == $: 		ifTrue: 			[self recordMatch: #(19 32).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(11)].			^self reportLastMatch].	currentCharacter == $; ifTrue: [^self recordAndReportMatch: #(3 32)].	currentCharacter == $&lt; 		ifTrue: 			[self recordMatch: #(9 26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $&gt; 		ifTrue: 			[self recordMatch: #(8 26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $[ ifTrue: [^self recordAndReportMatch: #(17 32)].	currentCharacter == $] ifTrue: [^self recordAndReportMatch: #(18 32)].	currentCharacter == $^ ifTrue: [^self recordAndReportMatch: #(16 32)].	currentCharacter == ${ ifTrue: [^self recordAndReportMatch: #(5 32)].	currentCharacter == $| 		ifTrue: 			[self recordMatch: #(1 26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $} ifTrue: [^self recordAndReportMatch: #(10 32)].	^self reportLastMatch</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="setStyle:">setStyle: anArray 	| index |	index := (1 to: newStyles size) 				detect: [:each | (newStyles at: each) first = anArray first]				ifNone: 					[newStyles := newStyles copyWith: anArray.					^self updateStyle].	newStyles at: index put: anArray.	self updateStyle</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="classBlock:">classBlock: aBlock 	classBlock := aBlock</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatMessage:to:">formatMessage: anOrderedCollection to: aClass 	| symbol |	symbol := (self isValidMessage: anOrderedCollection for: aClass) 				ifTrue: [#code_messageSend]				ifFalse: [#code_dnu].	anOrderedCollection do: [:each | self formatToken: each with: symbol].	^aClass</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBlock2:">reduceActionForBlock2: nodes 	^self		formatLeftBracket: (nodes at: 1);		formatRightBracket: (nodes at: 3)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral3:">reduceActionForLiteral3: nodes 	self formatNil: (nodes at: 1).	^UndefinedObject</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatSyntaxErrorFrom:to:">formatSyntaxErrorFrom: startInteger to: stopInteger 	self 		formatFrom: startInteger		to: stopInteger		with: #code_syntaxError</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="addTemps">addTemps	temps add: OrderedCollection new</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral5:">reduceActionForLiteral5: nodes 	self formatNumber: (nodes at: 1).	^(nodes at: 1) value asNumber class</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="smalltalkCommentId">smalltalkCommentId	^28</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedBold">changedBold	self isBoldHolder value 		ifTrue: [self addStyle: #bold]		ifFalse: [self removeStyle: #bold]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBlockArgs1:">reduceActionForBlockArgs1: nodes 	self addTemps.	^self formatBlockVariable: (nodes at: 2) colon: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="beHighlightingWithSettings:">beHighlightingWithSettings: aBlock</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scan4">scan4		[self step.	currentCharacter isLetter 		or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]] 			whileTrue.	currentCharacter == $: 		ifTrue: 			[self recordMatch: #(25).			self step.			(currentCharacter isLetter or: [currentCharacter == $_]) 				ifTrue: [^self scan4]].	^self reportLastMatch</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatTemporaryVariable:">formatTemporaryVariable: aSmaCCToken 	self formatToken: aSmaCCToken		with: (((self isTemporaryVariable: aSmaCCToken value) 				or: [self isInstanceVariable: aSmaCCToken value]) 					ifTrue: [#code_redefinedVariableDefinition]					ifFalse: [#code_temporaryVariableDefinition]).	self addTemp: aSmaCCToken value</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="stylesDictionary">stylesDictionary	| styleDictionary |	styleDictionary := Dictionary new.	self styles do: 			[:each | 			each size &gt; 1 				ifTrue: 					[styleDictionary at: each first						put: 							[:query | 							(2 to: each size) do: 									[:i | 									| style |									style := each at: i.									style isSymbol 										ifTrue: 											[style = #bold 												ifTrue: [query boldness: 0.7]												ifFalse: [query perform: (style , ':') asSymbol with: true]]										ifFalse: [query perform: style first with: style last decodeAsLiteralArray]]]]				ifFalse: [styleDictionary at: each first put: nil]].	^styleDictionary</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="resetState">resetState	self stopHighlighting.	super resetState.	self startHighlighting: 0</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatToken:with:">formatToken: aSmaCCToken with: aValue 	self 		formatFrom: aSmaCCToken startPosition		to: aSmaCCToken stopPosition		with: aValue</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="findErrorHandlerIfNoneUseErrorNumber:">findErrorHandlerIfNoneUseErrorNumber: anInteger 	| startingToken |	startingToken := currentToken.	super findErrorHandlerIfNoneUseErrorNumber: anInteger.	self formatSyntaxErrorFrom: startingToken startPosition		to: currentToken stopPosition</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral12:">reduceActionForLiteral12: nodes 	self formatSymbol: (nodes at: 2) hash: (nodes at: 1).	^Symbol</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimary5:">reduceActionForPrimary5: nodes 	^BlockClosure</body></methods><methods><class-id>Tools.AbstractWorkspace</class-id> <category>actions-delegated</category><body package="RBCodeHighlighting" selector="styleAsSmalltalkCodeMenu">styleAsSmalltalkCodeMenu	"Format the current selection and replace the selection with the formatted code."	&lt;menuItem: 'Style as Smalltalk code'		icon: nil		nameKey: nil		enablement: true		indication: #isStylingSmalltalkCode		menu: #(#menuBar #optionsMenu)		position: 10.4&gt;	self isStylingSmalltalkCode		ifTrue: [self dontStyleSmalltalkCode]		ifFalse: [self styleSmalltalkCode]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend8:">reduceActionForPrimitiveMessageSend8: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedHasColor">changedHasColor	| color |	self updateColorWidgets.	self hasColorHolder value 		ifFalse: 			[self removeColor.			^self].	color := self currentColor.	self setColor: color</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatements2:">reduceActionForStatements2: nodes 	^self formatPeriod: (nodes at: 2)</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="dontStyleSmalltalkCode">dontStyleSmalltalkCode	self textEditor view displayContents text emphasizeAllWith: nil.	Refactory.CodeHighlighter.HighlightingTextEditorController 		revertController: self textEditor.	"#display expects the window to actually be open (have a handle)	 in order to create its graphics context."		self mainWindow isOpen ifTrue: [self mainWindow display]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessage1:">reduceActionForKeywordMessage1: nodes 	^OrderedCollection with: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitives3:">reduceActionForPrimitives3: nodes 	^self formatPrimitiveFrom: (nodes at: 2) to: (nodes at: 4)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="emptySymbolTokenId">emptySymbolTokenId	^66</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="classBlock">classBlock	^classBlock isNil ifTrue: [[nil]] ifFalse: [classBlock]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedJaggedEdge">changedJaggedEdge	self isJaggedEdgeHolder value 		ifTrue: [self addStyle: #jaggedEdge]		ifFalse: [self removeStyle: #jaggedEdge]</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController class</class-id> <category>instance creation</category><body package="RBCodeHighlighting" selector="replaceController:">replaceController: aController 	| new |	aController class = superclass ifFalse: [^aController].	new := self new.	1 to: superclass instSize		do: [:i | new instVarAt: i put: (aController instVarAt: i)].	new become: aController.	aController startHighlighting: 0.	^aController</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBlock3:">reduceActionForBlock3: nodes 	self removeTemps.	^self		formatLeftBracket: (nodes at: 1);		formatRightBracket: (nodes at: 3)</body></methods><methods><class-id>UI.TextEditorController</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="beHighlightingWithSettings:">beHighlightingWithSettings: aBlock	Refactory.CodeHighlighter.HighlightingTextEditorController 		replaceController: self 		doingInitialization: aBlock</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatFalse:">formatFalse: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_false</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForSequenceNode1:">reduceActionForSequenceNode1: nodes 	^self removeTemps</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="lookupClassFor:">lookupClassFor: aString 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="isTemporaryVariable:">isTemporaryVariable: aString 	^temps anySatisfy: [:each | each includes: aString]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimary1:">reduceActionForPrimary1: nodes 	self		formatLeftParenthesis: (nodes at: 1);		formatRightParenthesis: (nodes at: 3).	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForCascadeList1:">reduceActionForCascadeList1: nodes 	^OrderedCollection new</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="selectedStyle">selectedStyle	| selection name |	selection := self typeList selection.	selection isNil ifTrue: [^nil].	name := (CodeHighlightingParser styleDescriptions 				detect: [:each | each last = selection]) first.	^newStyles detect: [:each | each first = name] ifNone: [Array with: name]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForMethodSequenceNode1:">reduceActionForMethodSequenceNode1: nodes 	^self addTemps</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="loadStylesFrom:">loadStylesFrom: name 	| styleArray fileStyle file |	name asFilename exists ifFalse: [^Dialog warn: 'Code Highlighting File does not exist !'].	file := name asFilename readStream.	fileStyle := [file upToEnd] ensure: [file close].	(fileStyle isNil and: [fileStyle isEmpty]) 		ifTrue: [^Dialog warn: 'Wrong file contents !'].	styleArray := Compiler evaluate: fileStyle.	styleArray class = Array 		ifFalse: [^Dialog warn: 'Wrong file contents, array was expected !'].	self updateWithLoadedStyles: styleArray</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatNil:">formatNil: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBlockArgs2:">reduceActionForBlockArgs2: nodes 	^self formatBlockVariable: (nodes at: 3) colon: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="isJaggedEdgeHolder">isJaggedEdgeHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isJaggedEdgeHolder isNil		ifTrue:			[isJaggedEdgeHolder := false asValue]		ifFalse:			[isJaggedEdgeHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedStyle">changedStyle	| item |	item := self selectedStyle.	item isNil 		ifTrue: 			[self disableAll: self styleWidgets.			#(#isBoldHolder #isStrikeoutHolder #isUnderlineHolder #isJaggedEdgeHolder #isItalicHolder #hasColorHolder) 				do: [:each | (self perform: each) value: false].			^self].	self enableAll: self styleWidgets.	self isBoldHolder value: (item includes: #bold).	self isStrikeoutHolder value: (item includes: #strikeout).	self isUnderlineHolder value: (item includes: #underline).	self isJaggedEdgeHolder value: (item includes: #jaggedEdge).	self isItalicHolder value: (item includes: #italic).	self hasColorHolder value: (item 				anySatisfy: [:each | each class = Array and: [each first = #color:]])</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="styleSmalltalkCode">styleSmalltalkCode	self textEditor beHighlightingWithSettings: 			[:newController | 			newController				isForMethod: false;				classBlock: [nil class];				namespaceBlock: [self doItEnvironment]].</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral7:">reduceActionForLiteral7: nodes 	self formatString: (nodes at: 1).	^String</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatements5:">reduceActionForStatements5: nodes 	^self		formatReturn: (nodes at: 2);		formatPeriod: (nodes at: 4)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatAssignment:">formatAssignment: aSmaCCToken	self formatToken: aSmaCCToken with: #code_assignment</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBlock1:">reduceActionForBlock1: nodes 	self removeTemps.	^self		formatLeftBracket: (nodes at: 1);		formatBlockArgumentSeparator: (nodes at: 3);		formatRightBracket: (nodes at: 5)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private-error handling</category><body package="RBCodeHighlighting" selector="errorHandlerStates">errorHandlerStates	| states |	states := super errorHandlerStates.	self patchErrorHandlerStates: states.	^states</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="hasColorHolder">hasColorHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^hasColorHolder isNil		ifTrue:			[hasColorHolder := false asValue]		ifFalse:			[hasColorHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatBlockArgumentSeparator:">formatBlockArgumentSeparator: aSmaCCToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="isBoldHolder">isBoldHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isBoldHolder isNil		ifTrue:			[isBoldHolder := false asValue]		ifFalse:			[isBoldHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="removeStyle:">removeStyle: aSymbol 	self selectedStyle isNil ifTrue: [^self].	self setStyle: (self selectedStyle copyWithout: aSymbol)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="removeColor">removeColor	self selectedStyle isNil ifTrue: [^self].	self 		setStyle: (self selectedStyle copyWithout: (self selectedStyle 						detect: [:each | each class = Array and: [each first = #color:]]						ifNone: [^self]))</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForOptional_____2:">reduceActionForOptional_____2: nodes 	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForOptional_____1:">reduceActionForOptional_____1: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scan5">scan5	self step.	(currentCharacter isLetter or: [currentCharacter == $_]) 		ifTrue: 			[			[self recordMatch: #(29).			self step.			currentCharacter isLetter 				or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]] 					whileTrue.			currentCharacter == $. ifTrue: [^self scan5]].	^self reportLastMatch</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBinaryMethodName1:">reduceActionForBinaryMethodName1: nodes 	self addTemps.	^self formatBinaryMethod: (nodes at: 1) with: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="updateColorWidgets">updateColorWidgets	self hasColorHolder value 		ifTrue: 			[(self widgetAt: #color) insideColor: self currentColor.			self showAll: #(#colorButton #color)]		ifFalse: [self hideAll: #(#colorButton #color)]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatRightParenthesis:">formatRightParenthesis: aSmaCCToken	self formatToken: aSmaCCToken with: #code_parenthesis</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend10:">reduceActionForPrimitiveMessageSend10: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="initialize">initialize	super initialize.	self methodHolder value: self exampleMethod.	oldStyles := CodeHighlightingParser styles.	oldDelay := RefreshDelay.	newStyles := oldStyles copy.	self typeList 		list: (CodeHighlightingParser styleDescriptions 				collect: [:each | each last]) asSortedCollection 				asList.	self typeList selectionIndexHolder onChangeSend: #changedStyle to: self.	self hasColorHolder onChangeSend: #updateColorWidgets to: self.	self refreshDelayHolder compute: [:v | RefreshDelay := v].</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatementList3:">reduceActionForStatementList3: nodes 	^self formatPeriod: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="exampleMethod">exampleMethod	^'someMethod: anObject	"Type a new method here and see how it formats as you type"	| temp |	#(a b c) do: [:temp | Transcript show: temp].	"temp is redeclared"	self isNil and: [temp isNil] ifTrue: [self foo].	"and:ifTrue: and #foo are not understood"	temp := (''string'' size + #symbol hash).	self ; this is a syntax error.	^undeclaredVariable value + 4 + $a asInteger'</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBinaryMessage1:">reduceActionForBinaryMessage1: nodes 	^OrderedCollection with: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatSelf:">formatSelf: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_self</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="alternateStyles1">alternateStyles1	"self styles: self alternateStyles1"	^#( #(#code_syntaxError #jaggedEdge #(#color: #(#{Graphics.ColorValue} #red))) #(#code_dnu #jaggedEdge) #(#code_undeclaredVariable #jaggedEdge #(#color: #(#{Graphics.ColorValue} #red))) #(#code_redefinedVariableDefinition #jaggedEdge #(#color: #(#{Graphics.ColorValue} #red))) #(#code_comment #(#color: #(#{Graphics.ColorValue} #darkGreen))) #(#code_keywordMethodName #bold) #(#code_unaryMethodName #bold) #(#code_binaryMethodName #bold) #(#code_array #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_true #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_false #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_nil #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_string #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_character #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_symbol #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_number #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_byteArray #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_qualifiedReference #(#color: #(#{Graphics.ColorValue} #darkMagenta))) #(#code_self) #(#code_super) #(#code_thisContext) #(#code_sharedVariableReference #(#color: #(#{Graphics.ColorValue} #darkMagenta))) #(#code_nameSpaceReference #(#color: #(#{Graphics.ColorValue} #darkMagenta))) #(#code_classReference #(#color: #(#{Graphics.ColorValue} #darkMagenta))) #(#code_methodVariableDefinition #(#color: #(#{Graphics.ColorValue} #olive))) #(#code_instanceVariable #(#color: #(#{Graphics.ColorValue} #navy))) #(#code_temporaryVariableDefinition #(#color: #(#{Graphics.ColorValue} #darkCyan))) #(#code_temporaryVariable #(#color: #(#{Graphics.ColorValue} #darkCyan))) #(#code_blockArgument #(#color: #(#{Graphics.ColorValue} #olive))) #(#code_messageSend) #(#code_primitive #(#color: #(#{Graphics.ColorValue} #orange))) )</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner class</class-id> <category>generated-comments</category><body package="RBCodeHighlighting" selector="scannerDefinitionComment">scannerDefinitionComment	"&lt;name&gt;	:	[a-zA-Z_ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ] [\wÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ]*	;&lt;number&gt;:	[0-9]	;&lt;negative_number&gt;	:	\- &lt;number&gt;	;&lt;string&gt;	:	\'  [^\']* \' (\' [^\']* \')*	;&lt;keyword&gt;	:	&lt;name&gt; \:	;&lt;multikeyword&gt;	:	&lt;name&gt; \: (&lt;name&gt; \: )+	;&lt;binary_symbol&gt;	:	[\~\-\!\@\%\&amp;\*\+\=\\\|\?\/\&gt;\&lt;\,] [\~\!\@\%\&amp;\*\+\=\\\|\?\/\&gt;\&lt;\,]?	;&lt;whitespace&gt;	:	\s+	;&lt;smalltalkComment&gt;	:	\"" [^\""]* \""	;&lt;dotted_name&gt;	:	&lt;name&gt; (\. &lt;name&gt;)+	;&lt;character&gt;	:	\$ .	;&lt;variable_assignment&gt; : &lt;name&gt; \: \=	;&lt;any_char&gt; : . ; # For VW literal arrays that handle #(;) -&gt; #(#';')"</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimary3:">reduceActionForPrimary3: nodes 	^self formatVariableReference: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForTemporaries2:">reduceActionForTemporaries2: nodes 	^self addTemps</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessageSend3:">reduceActionForKeywordMessageSend3: nodes 	^self formatMessage: (nodes at: 2) to: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="methodHolder">methodHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^methodHolder isNil		ifTrue:			[methodHolder := String new asValue]		ifFalse:			[methodHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatFrom:to:with:">formatFrom: startInteger to: stopInteger with: aValue 	text string = string 		ifTrue: 			[text 				addEmphasis: (Array with: aValue)				removeEmphasis: nil				allowDuplicates: false				from: startInteger				to: stopInteger]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings class</class-id> <category>interface specs</category><body package="RBCodeHighlighting" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Code Highlighter Settings' 			#bounds: #(#{Graphics.Rectangle} 720 348 1344 900 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 10 ) 					#name: #Label1 					#label: 'Format Types:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 35 0 -180 1 200 0 ) 					#name: #types 					#model: #typeList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -170 1 60 0 ) 					#name: #bold 					#flags: 32 					#model: #isBoldHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedBold ) 					#label: 'Bold' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -170 1 35 0 ) 					#name: #italic 					#flags: 32 					#model: #isItalicHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedItalic ) 					#label: 'Italic' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -170 1 85 0 ) 					#name: #underline 					#flags: 32 					#model: #isUnderlineHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedUnderline ) 					#label: 'Underline' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -170 1 110 0 ) 					#name: #jaggedEdge 					#flags: 32 					#model: #isJaggedEdgeHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedJaggedEdge ) 					#label: 'Jagged Edge Underline' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -170 1 135 0 ) 					#name: #strikeout 					#flags: 32 					#model: #isStrikeoutHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedStrikeout ) 					#label: 'Strikeout' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -170 1 160 0 ) 					#name: #colorToggle 					#flags: 32 					#model: #hasColorHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedHasColor ) 					#label: 'Has Color' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -150 1 185 0 -90 1 210 0 ) 					#name: #colorButton 					#flags: 24 					#model: #getColor 					#label: 'Color' 					#defaultable: true ) 				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.LayoutFrame} -80 1 185 0 -5 1 210 0 ) 					#name: #color 					#flags: 16 					#lineWidth: 1 ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 220 0 -10 1 225 0 ) 					#name: #Divider2 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 225 ) 					#name: #Label2 					#label: 'Sample' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 250 0 -180 1 -45 1 ) 					#name: #method 					#model: #methodHolder 					#tabRequiresControl: true ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -170 1 225 0 -10 1 -40 1 ) 					#name: #GroupBox1 					#label: 'Options (don''t affect sample)' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -160 1 250 0 ) 					#name: #Label3 					#label: 'Refresh delay (msec):' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -140 1 280 0 -20 1 305 0 ) 					#name: #refreshDelayHolder 					#model: #refreshDelayHolder 					#type: #number 					#formatString: '0' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -160 1 315 0 ) 					#name: #highlightDebugger 					#model: #highlightDebugger 					#label: 'Highlight debugger' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -170 1 -35 1 -95 1 -10 1 ) 					#name: #okButton 					#model: #ok 					#label: 'OK' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -85 1 -35 1 -10 1 -10 1 ) 					#name: #cancelButton 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><component-property><name>RBCodeHighlighting</name> <type>package</type><property>comment</property> <value>'This adds syntax highlighting to the Refactoring Browser, and optionally to workspaces. It runs a background process that parses the code in the text area and attempts to display coloring for it. For reasonable size methods and reasonable speed machines, it can usually keep up with your typing. In addition to most of the syntactic constructs, it also highlights syntax errors, some compile time errors (e.g., redefined variables), and some runtime errors (e.g., DNU errors):You can customize the colors in the settings tool, using the by using the "Code Highlighter" page, under Tools/Browser in the settings.The latest version can be found in the Cincom Public Store Repository (see http://www.cincomsmalltalk.com). See also http://wiki.cs.uiuc.edu/VisualWorks/RB+Code+Highlighter for more information. An alternative, more subdued, color scheme is also available by evaluating 	Refactory.CodeHighlighter.CodeHighlightingParser styles: Refactory.CodeHighlighter.CodeHighlightingParser alternateStyles1'</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>postLoadBlock</property> <value>[:package | Refactory.CodeHighlighter.CodeHighlightingParser initializeAfterLoad.Transcript	show: package name , ' suggests ''Fixed Colored Text Selection'' package';	cr]</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>packageName</property> <value>'RBCodeHighlighting'</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('SmaCC Runtime' '') #('ExtraEmphases' '') #('Tools-Settings-VW' '') #('Browser-RefactoringUI' '') #('Browser-BrowserUI' '') #('Debugger-StackInspector' '') #('Debugger-Exception-Modifications' ''))</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>kSignature</property> <value>#('definedClasses' 4 'definedClassesHash' 25783466817 'extendedClasses' 13 'extendedClassesHash' 2083514339)</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>preUnloadBlock</property> <value>[:package | Refactory.CodeHighlighter.HighlightingTextEditorController prepareForUnloading.Refactory.CodeHighlighter.CodeHighlightingParser removeStyles]</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>time</property> <value>'August 20, 2006 21:52:20.804'</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>comment</property> <value>'This adds syntax highlighting to the Refactoring Browser, and optionally to workspaces. It runs a background process that parses the code in the text area and attempts to display coloring for it. For reasonable size methods and reasonable speed machines, it can usually keep up with your typing. In addition to most of the syntactic constructs, it also highlights syntax errors, some compile time errors (e.g., redefined variables), and some runtime errors (e.g., DNU errors):You can customize the colors in the settings tool, using the by using the "Code Highlighter" page, under Tools/Browser in the settings.The latest version can be found in the Cincom Public Store Repository (see http://www.cincomsmalltalk.com). See also http://wiki.cs.uiuc.edu/VisualWorks/RB+Code+Highlighter for more information. An alternative, more subdued, color scheme is also available by evaluating 	Refactory.CodeHighlighter.CodeHighlightingParser styles: Refactory.CodeHighlighter.CodeHighlightingParser alternateStyles1'</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>parcelName</property> <value>'RBCodeHighlighting'</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'SmaCC Runtime' '') #(#any 'ExtraEmphases' '') #(#any 'Tools-Settings-VW' '') #(#any 'Browser-RefactoringUI' '') #(#any 'Browser-BrowserUI' '') #(#any 'Debugger-StackInspector' '') #(#any 'Debugger-Exception-Modifications' ''))</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>version</property> <value>'1.50'</value></component-property><pundle-loaded><name>RBCodeHighlighting</name><type>package</type><primaryKey>48196</primaryKey><databaseId>'psql_public_cst'</databaseId></pundle-loaded><component-created><name>RB_Tabs</name> <type>package</type></component-created><class><name>RefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>navigator tools currentBuffer policyClass dispatcher findHolder findList toolbarMenuHolder rbTabs </inst-vars><class-inst-vars>showToolbarHolder </class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>RB_Tabs</package></attributes></class><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>changing</category><body package="RB_Tabs" selector="updateWindowLabel">updateWindowLabel	| window |	self builder isNil ifTrue: [^self].	window := self builder window.	window isNil ifTrue: [^self].	(windowLabel = window label or: [window label isEmpty]) 		ifFalse: [self environment label: window label].	windowLabel := self state hasSelection 				ifTrue: 					[windowLabel := self environment label.					windowLabel asString notEmpty ifTrue: [windowLabel := windowLabel asString , ' - '].					windowLabel asString , self state printString]				ifFalse: [self defaultWindowLabel].	window label: windowLabel.	"This is awful; how to do better?"	window model isNil ifFalse: [window model invalidateTabs]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>actions</category><body package="RB_Tabs" selector="invalidateTabs">invalidateTabs	self rbTabs selectionIndex: (tools indexOf: currentBuffer value).	(self builder componentAt: #rbTabs) 		invalidateRectangle: (Rectangle origin: 0 @ 0				corner: self builder window width @ 28)</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>actions</category><body package="RB_Tabs" selector="newBuffer">newBuffer	| newBuffer |	newBuffer := self codeModelClass navigator: navigator.	newBuffer lockPolicyClass: policyClass.	tools add: newBuffer.	self bufferChangeRequest.	self switchToBuffer: tools size.	currentBuffer value tool updateContents.	self enable: #removeBuffer.	self rebuildTabs.	self updateCodeToolZoomed</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>actions</category><body package="RB_Tabs" selector="removeBuffer">removeBuffer	currentBuffer value updateRequest ifFalse: [^self].	tools remove: currentBuffer value.	currentBuffer value release.	self switchToBuffer: tools size.	self rebuildTabs.	tools size == 1 ifTrue: [self disable: #removeBuffer]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>actions</category><body package="RB_Tabs" selector="changedBuffer">changedBuffer	| buffer |	buffer := currentBuffer value.	buffer isNil ifTrue: [^self].	tools do: [:each | each lock].	buffer unlock.	navigator updateWindowLabel.	self installSubcanvasIn: #codeTool using: buffer.	self isZoomed = self codeTool isZoomed ifFalse: [self toggleZoom].	buffer takeFocus.	self rebuildTabs.	self buildNewMenu.</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>interface opening</category><body package="RB_Tabs" selector="postBuildWith:">postBuildWith: aBuilder 	"aBuilder window damageRepairPolicy: DoubleBufferingWindowDisplayPolicy new."	(aBuilder componentAt: #rbTabs) widget subCanvas container insideColor: nil.	^super postBuildWith: aBuilder</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>actions</category><body package="RB_Tabs" selector="tabChanged">tabChanged	(tools indexOf: currentBuffer value) = self rbTabs selectionIndex 		ifTrue: [^self].	self switchToBuffer: self rbTabs selectionIndex</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>actions</category><body package="RB_Tabs" selector="rebuildTabs">rebuildTabs	| navigatorLayout tabs navigatorComponent needsUpdating |	navigatorComponent := self builder componentAt: #navigator.	navigatorLayout := navigatorComponent layout.	needsUpdating := (self hasMultipleCodeTools not 				xor: navigatorLayout topOffset = 25) not.	needsUpdating ifFalse: [^self].	tabs := self builder componentAt: #rbTabs.	self hasMultipleCodeTools 		ifTrue: 			[navigatorLayout topOffset: 25.			tabs beVisible.			rbTabs selectionIndex: (tools indexOf: currentBuffer value)]		ifFalse: 			[navigatorLayout topOffset: 0.			tabs beInvisible].	navigatorComponent		layout: navigatorLayout;		invalidate.	builder window refresh</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>aspects</category><body package="RB_Tabs" selector="rbTabs">rbTabs	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^rbTabs isNil 		ifTrue: 			[rbTabs := SelectionInList new.			rbTabs list: tools]		ifFalse: [rbTabs]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>interface specs</category><body package="RB_Tabs" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 472 312 ) 			#bounds: #(#{Graphics.Rectangle} 196 144 829 624 ) 			#flags: 4 			#menu: #menuBar 			#toolBar: #toolbarMenuHolder ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #rbTabs 					#flags: 16 					#model: #rbTabs 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #tabChanged ) 					#labels: #() )				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -2 0.333333 ) 					#name: #navigator 					#flags: 0 					#majorKey: #NavigatorTool 					#minorKey: #windowSpec 					#clientKey: #navigator ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0.333333 0 1 0 1 ) 					#name: #codeTool 					#flags: 0 					#majorKey: #CodeModelSubcanvas 					#minorKey: #windowSpec 					#clientKey: #codeTool ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.333333 0 1 2 0.333333 ) 					#name: #splitter 					#horizontal: true 					#minAboveSize: 50 					#minBelowSize: 30 					#aboveWidgets: 'navigator' 					#belowWidgets: 'codeTool' ) ) ) )</body></methods><component-property><name>RB_Tabs</name> <type>package</type><property>comment</property> <value>'This package by Yanick Beaudet implements a tabbing mechanism for selecting views (a.k.a. buffers) in the Refactoring Browser in VW7, similar to the tabs in Mozilla or Opera web browsers.'</value></component-property><component-property><name>RB_Tabs</name> <type>package</type><property>parcelName</property> <value>'RB_Tabs'</value></component-property><component-property><name>RB_Tabs</name> <type>package</type><property>packageName</property> <value>'RB_Tabs'</value></component-property><component-property><name>RB_Tabs</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('Browser-BrowserUI' ''))</value></component-property><component-property><name>RB_Tabs</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'Browser-BrowserUI' ''))</value></component-property><component-property><name>RB_Tabs</name> <type>package</type><property>comment</property> <value>'This package by Yanick Beaudet implements a tabbing mechanism for selecting views (a.k.a. buffers) in the Refactoring Browser in VW7, similar to the tabs in Mozilla or Opera web browsers.'</value></component-property><pundle-loaded><name>RB_Tabs</name><type>package</type><primaryKey>24707</primaryKey><databaseId>'psql_public_cst'</databaseId></pundle-loaded><component-created><name>test</name> <type>package</type></component-created><parcel-loaded><name>test</name> <filename>c:\Documents and Settings\Julian\Escritorio\test.pcl</filename></parcel-loaded><component-created><name>SUnitUtilities</name> <type>bundle</type></component-created><component-property><name>SUnitUtilities</name> <type>bundle</type><property>parcelName</property> <value>'SUnitUtilities'</value></component-property><component-property><name>SUnitUtilities</name> <type>bundle</type><property>version</property> <value>'3.1 CS9.NFR.10'</value></component-property><component-property><name>SUnitUtilities</name> <type>bundle</type><property>comment</property> <value>'Niall Ross'' extensions to and patterns for SUnit.'</value></component-property><component-property><name>SUnitUtilities</name> <type>bundle</type><property>comment</property> <value>'Niall Ross'' extensions to and patterns for SUnit.'</value></component-property><component-created><name>SUnitUIExtensions</name> <type>package</type></component-created><class><name>TestSuiteRunner</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestRunner</super><private>false</private><indexed-type>none</indexed-type><inst-vars>suiteBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitUI</category><attributes><package>SUnitUIExtensions</package></attributes></class><comment><class-id>XProgramming.SUnit.TestSuiteRunner</class-id><body>I allow the user to set what tests I will display and run on opening, instead of just using the entire set in the image (the default).Instance Variables:	allTestSuite	&lt;TestSuite | TestCase class&gt;	sending buildSuite to this returns the suite of tests I display and run.</body></comment><methods><class-id>XProgramming.SUnit.TestSuiteRunner class</class-id> <category>instance creation</category><body package="SUnitUIExtensions" selector="newOnSuiteBuilder:">newOnSuiteBuilder: aTestSuiteBuilder	^self new		suiteBuilder: aTestSuiteBuilder;		yourself</body></methods><methods><class-id>XProgramming.SUnit.TestSuiteRunner</class-id> <category>Updating</category><body package="SUnitUIExtensions" selector="displayBlue">displayBlue	self displayColor: ColorValue blue.</body></methods><methods><class-id>XProgramming.SUnit.TestSuiteRunner class</class-id> <category>instance creation</category><body package="SUnitUIExtensions" selector="openOnSuiteBuilder:">openOnSuiteBuilder: aTestSuiteBuilder	^(self newOnSuiteBuilder: aTestSuiteBuilder) open</body></methods><methods><class-id>XProgramming.SUnit.TestSuiteRunner</class-id> <category>Updating</category><body package="SUnitUIExtensions" selector="displayFail">displayFail	self displayYellow.	self displayMode: 'Fail'.	self displayDetails: result printString.</body></methods><methods><class-id>XProgramming.SUnit.TestSuiteRunner</class-id> <category>Actions</category><body package="SUnitUIExtensions" selector="runTests">runTests	self script value isNil ifFalse: 		[self runSuite: self script value]</body></methods><methods><class-id>XProgramming.SUnit.TestCase</class-id> <category>Accessing</category><body package="SUnitUIExtensions" selector="name">name	"Provided for protocol compatibility with TestSuite."	^self printString</body></methods><methods><class-id>XProgramming.SUnit.TestSuite</class-id> <category>Initialize-release</category><body package="SUnitUIExtensions" selector="suite">suite	"I am a suite so need only return myself."	^self"As I may be sent this message repeatedly during the operation of test browsing tools, any subclasses that override this should not use this for once-only initialization code."</body></methods><methods><class-id>XProgramming.SUnit.TestSuite</class-id> <category>Accessing</category><body package="SUnitUIExtensions" selector="removeTest:">removeTest: aTest	self tests remove: aTest</body></methods><methods><class-id>XProgramming.SUnit.TestSuite</class-id> <category>Initialize-release</category><body package="SUnitUIExtensions" selector="buildSuite">buildSuite	"I am a suite so need only return myself."	^self"As I may be sent this message repeatedly during the start-up of test browsing tools, any subclasses that override this should not use this for once-only initialization code."</body></methods><methods><class-id>XProgramming.SUnit.TestSuiteRunner</class-id> <category>private</category><body package="SUnitUIExtensions" selector="allTestCasesMenu">allTestCasesMenu	| testSuitesAndTestCases |	testSuitesAndTestCases := self allTestSuite tests asSortedCollection: [:a :b | a name &lt; b name].	^Menu		labelArray: (testSuitesAndTestCases collect: [:each | each name asString])		values: testSuitesAndTestCases</body></methods><methods><class-id>XProgramming.SUnit.TestSuiteRunner</class-id> <category>private</category><body package="SUnitUIExtensions" selector="suiteBuilder:">suiteBuilder: aTestSuiteOrTestCaseClass	"suiteBuilder must return a TestSuite when sent buildSuite"	suiteBuilder := aTestSuiteOrTestCaseClass</body></methods><methods><class-id>XProgramming.SUnit.TestSuiteRunner</class-id> <category>Updating</category><body package="SUnitUIExtensions" selector="displayError">displayError	self displayRed.	self displayMode: 'Error'.	self displayDetails: result printString.</body></methods><methods><class-id>XProgramming.SUnit.TestSuiteRunner</class-id> <category>private</category><body package="SUnitUIExtensions" selector="allTestSuite">allTestSuite	^self suiteBuilder buildSuite</body></methods><methods><class-id>XProgramming.SUnit.TestSuiteRunner</class-id> <category>Updating</category><body package="SUnitUIExtensions" selector="displayRunning">displayRunning	self displayBlue.	self displayMode: 'running'. 	self displayDetails: '...'.</body></methods><methods><class-id>XProgramming.SUnit.TestSuiteRunner</class-id> <category>private</category><body package="SUnitUIExtensions" selector="suiteBuilder">suiteBuilder	^suiteBuilder ifNil: [suiteBuilder := TestCase]</body></methods><methods><class-id>XProgramming.SUnit.TestSuiteRunner</class-id> <category>Updating</category><body package="SUnitUIExtensions" selector="updateWindow">updateWindow	self updateDefects.	result hasErrors ifTrue: [^self displayError].	result hasFailures ifTrue: [^self displayFail].	self displayPass.</body></methods><component-property><name>SUnitUIExtensions</name> <type>package</type><property>comment</property> <value>'TestSuiteRunner allows more detailed construction and running of test suites than TestRunner, and supports running tests from the StarBrowser.  Protocol is	TestSuiteRunner openOnSuiteBuilder: aSuiteBuilderwhere a suiteBuilder is a test suite, a test case class, or anything that returns a suite when sent #buildSuite.To begin to assimilate its behaviour to that of SUnitBrowser: - the running colour is blue;  the error colour (a result with one or more errored tests) is red;  the failure colour (one or more assertion-failing tests but no errored tests) is yellow - when opened on a suite containing TestCases, not other TestSuites, individual test cases can be seen, selected and runIf these changes are liked, they can be folded into all dialects'' TestRunners at a future camp smalltalk.  TestSuiteRunner has no known bugs in this version.  However note that it is work in progress, done to enable further steps toward handling arbitrary TestSuites, so incomplete in the features offered.'</value></component-property><component-property><name>SUnitUIExtensions</name> <type>package</type><property>version</property> <value>'3.1 CS8.NFR.1'</value></component-property><component-property><name>SUnitUIExtensions</name> <type>package</type><property>packageName</property> <value>'SUnitUIExtensions'</value></component-property><component-property><name>SUnitUIExtensions</name> <type>package</type><property>comment</property> <value>'TestSuiteRunner allows more detailed construction and running of test suites than TestRunner, and supports running tests from the StarBrowser.  Protocol is	TestSuiteRunner openOnSuiteBuilder: aSuiteBuilderwhere a suiteBuilder is a test suite, a test case class, or anything that returns a suite when sent #buildSuite.To begin to assimilate its behaviour to that of SUnitBrowser: - the running colour is blue;  the error colour (a result with one or more errored tests) is red;  the failure colour (one or more assertion-failing tests but no errored tests) is yellow - when opened on a suite containing TestCases, not other TestSuites, individual test cases can be seen, selected and runIf these changes are liked, they can be folded into all dialects'' TestRunners at a future camp smalltalk.  TestSuiteRunner has no known bugs in this version.  However note that it is work in progress, done to enable further steps toward handling arbitrary TestSuites, so incomplete in the features offered.'</value></component-property><component-property><name>SUnitUIExtensions</name> <type>package</type><property>parcelName</property> <value>'SUnitUIExtensions'</value></component-property><component-property><name>SUnitUIExtensions</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'SUnitUI' ''))</value></component-property><component-property><name>SUnitUIExtensions</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('SUnitUI' ''))</value></component-property><component-created><name>SUnitResourcePatterns</name> <type>package</type></component-created><class><name>InvariantResource</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>wasAvailableBeforeRunStarted </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitResourcePatterns</package></attributes></class><comment><class-id>XProgramming.SUnit.InvariantResource</class-id><body>I am a test resource that leaves the state of the resource it encapsulates the same after a test run as it was before the run started, unlike ordinary resources which will always be torn down after a run regardless of whether they were available beforehand or not.  This behaviour can be useful during development when the user may be doing a mix of configuring resources by hand for half-developed tests and re-running existing tests.When initializing itself, the resource only does #setUp if it is not already available.  When uninitializing itself, the resource does #tearDown only if it was not already available before the run started.  Subclasses override instance-side #isAvailable to provide the condition for avoiding or doing #setUp / #tearDown.</body></comment><class><name>CompetingResource</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitResourcePatterns</package></attributes></class><comment><class-id>XProgramming.SUnit.CompetingResource</class-id><body>MOTIVATION:  a resource will often represent something that must be a singleton in a given test case but which can be different for different test cases.  An example is a database resource for a system that can only be logged-in to one database at a time.  There may be several databases (e.g. for different lines of business, different phases, etc.).  It may be essential to make logging-in be a test resource (to make suites of tests that all use one database run quickly).  However when tests using different databases are combined in suites, the resource mechanism breaks down, yet combining all tests into an overall system test suite is the natural XP action.SCENARIO: we want to handle a collection of test cases, each of which individually have a compatible resource set, but which collectively cannot initialize all their resources at the same time.SOLUTION:  CompetingTestResources provide an easy way for XP programmers to combine such test cases as soon as they discover the need.  Just reparent all resource classes of the same type under an abstract subclass of CompetingResource and all will continue to work seamlessly.DETAILS:  Any group of resource classes that can only be available one at a time can be reparented under a superclass, e.g.	CompetingResource		DatabaseSession			UKDatabaseSession			USDatabaseSession(This superclass, e.g. DatabaseSession, will usually already exist since the specific resources will normally share behaviour, differing only in some data values.)  The superclass defines the type via #competingResourceType, e.g.	DatabaseSession class&gt;&gt;competingResourceType		^DatabaseSessionThis is the only additional method the user need define.  General resource behavior is overridden for competing resources as follows: - Only the first resource class encountered is added to a test suite's resources set (because all resource classes that share a type are = to each other).  When this resource is made available (in TestSuite&gt;&gt;run), a copy of its class 'current' instance is also held in its abstract superclass 'current'.  Thus the first test(s) to need any of the resorces find the one they need set up. - Whenever a test is run within the suite (TestCase&gt;&gt;run:), it verifies that all its resource classes have nonNil 'current'.  Any competing resource that hasn't is reset (i.e. the rival competing resource is reset) and made available, now becoming the new 'current' in the abstract superclass.Thus a suite that only has one example of a competing resource will behave exactly as before, setting up and tearing down in TestSuite&gt;&gt;run.  A suite that has several will also tear down and set up each time it encounters a test that wants a different resource from the one of that type currently available.STATUS:  see the associated test package for tests and for an example (the Ex-prefixed classes) of the pattern (the class' method protocols distinguish example methods from methods that are only there to assist testing, not part of the pattern).Currently, there is no support for sorting a multiple-competing-resource-using test suite into an efficient order.  It is assumed that the user knows which tests use competing resources and will assemble a suite that does not prompt excessive changing (or that the time cost of not bothering to do so is acceptable).  It would be possible to devise subclasses or extensions of TestSuite to handle ordering.KNOWN PROBLEMS:  the code handles test suites being created and run by tests running within other test suites.  Like the standard test resource pattern, it does not handle simultaneous running in separate threads of two test suites using the same singleton resource classes, nor does it handle asynchronous tear down of external resources.</body></comment><methods><class-id>XProgramming.SUnit.CompetingResource class</class-id> <category>instance creation</category><body package="SUnitResourcePatterns" selector="reset">reset	"At the end of a test suite's run, #reset is sent to each concrete subclass test resource that is in the suite's resources list.  The type knows which one is current at that point.  The first call to it does the reset."	self competingResourceType resetCurrentResource."The lines below should bever be needed, not even when a test case that does not list any competing resources, but creates and runs a test suite that does in one of its tests, is itself run within an overall suite whose other tests use competing resources.  The code below may be removed after the pattern is well exercised or may be left to protect against corrupt states reached while developing complex competing resource classes;  meanwhile, if you see the halt, please email Niall Ross (nfr@bigwig.net)."	current isNil ifFalse:		[self halt: 'Non-nil, non-type-set competing resource (should not occur!);  resume to clean it up (and tell Niall)'.		super reset].</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource class</class-id> <category>private</category><body package="SUnitResourcePatterns" selector="isNotCurrent:">isNotCurrent: aTestResource	"The current instVar has a lazy accessor, so we use this method to compare invariantly."	^current ~~ aTestResource</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource class</class-id> <category>testing</category><body package="SUnitResourcePatterns" selector="isNotCurrent">isNotCurrent	"False if I am the resource currently available for this competing resource type, or if no resource is (i.e. both current values are nil)."	^self competingResourceType isNotCurrent: current</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource class</class-id> <category>testing</category><body package="SUnitResourcePatterns" selector="isExistent">isExistent	"If I am not already set up, tear down any rival competing resource that is (the abstract class' current) and set up an instance of me (will make it the abstract class' new current)."	^super isExistent or:		[self competingResourceType resetCurrentResource.		self isAvailable]</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource class</class-id> <category>testing</category><body package="SUnitResourcePatterns" selector="isAvailable">isAvailable	"If no other competing resource is set, make me available.  If another is, just return true (lets test suite set up proceed with the promise that this resource can be made available when the first test that needs it calls isExistent on it)."	^self isNotCurrent or: [super isAvailable]</body></methods><methods><class-id>XProgramming.SUnit.TestResource</class-id> <category>Running</category><body package="SUnitResourcePatterns" selector="signalStateError">signalStateError	^self class signalStateError</body></methods><methods><class-id>XProgramming.SUnit.TestResource class</class-id> <category>Testing</category><body package="SUnitResourcePatterns" selector="isExistent">isExistent	"Tests that interact with resources specifically (can sometimes be appropriate but can more often indicate that the user does not grasp the pattern) may incorrectly reset a resource.  I therefore check that no resource has become nil during the run.  Main resource set up occurs in TestSuite&gt;&gt;run.  Although I may be overridden in subclasses for variant resource patterns, here I must be a minimal check incapable of changing the state of a standard resource."	^current notNil</body></methods><methods><class-id>XProgramming.SUnit.TestResource class</class-id> <category>Creation</category><body package="SUnitResourcePatterns" selector="signalStateError">signalStateError	"Perhaps the resource passed the check in #run, then was reset or otherwise lost by specific (pattern-violating) code in a test."	^TestResult signalErrorWith: 'Presume resource ' , self name , ' was initialized on starting but it now is unset'</body></methods><methods><class-id>XProgramming.SUnit.InvariantResource</class-id> <category>running</category><body package="SUnitResourcePatterns" selector="initialize">initialize	"Only setUp if you were not already setUp."	wasAvailableBeforeRunStarted := self isAvailable.	wasAvailableBeforeRunStarted ifFalse: [self setUp].</body></methods><methods><class-id>XProgramming.SUnit.InvariantResource</class-id> <category>Testing</category><body package="SUnitResourcePatterns" selector="isAvailable">isAvailable	"Invariant resource subclasses must override this to return whether the resource is available or not.  (The test must not _cause_ it to become available;  that must only be done in setUp.)"		^self subclassResponsibility</body></methods><methods><class-id>XProgramming.SUnit.InvariantResource</class-id> <category>running</category><body package="SUnitResourcePatterns" selector="uninitialize">uninitialize	"Only tearDown if you were not already setUp before the test run started."	wasAvailableBeforeRunStarted ifFalse: [self tearDown].</body></methods><methods><class-id>XProgramming.SUnit.InvariantResource class</class-id> <category>Testing</category><body package="SUnitResourcePatterns" selector="isAbstract">isAbstract	^self name = #InvariantResource</body></methods><methods><class-id>XProgramming.SUnit.InvariantResource class</class-id> <category>Creation</category><body package="SUnitResourcePatterns" selector="reset">reset	"Pair uninitialize and tearDown to give us the same flexibility at the end of the resource's life as the initialize / setUp pair gives us at the beginning.  We could (should?) push this implementation of reset up to TestResource to increase the flexibility of resource programming."	current notNil ifTrue: [		[current uninitialize] ensure: [			current := nil]]</body></methods><methods><class-id>XProgramming.SUnit.TestCase</class-id> <category>Running</category><body package="SUnitResourcePatterns" selector="run:">run: aResult	"Resources are set up early in a call of TestSuite&gt;&gt;#run (N.B. not #run:) by calling isAvailable on their classes.  At the end of #run, another class-side call (#reset) tears down the resources.  Here we simply check that no earlier test or parallel action has reset a resource (should not be done, of course, but bizarre use and abuse of the resource pattern does occur)."	self resources do: [:each | each isExistent ifFalse: [^each signalStateError]].	aResult runCase: self</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource class</class-id> <category>private</category><body package="SUnitResourcePatterns" selector="competingResourceType">competingResourceType	"To have several types, create abstract subclasses that override this to return themselves as hardcoded type class, so that their concrete subclasses are grouped into their types.  If at first you only need one competing resource type, you can create concrete subclasses of this class, reparenting them under an abstract subclass when a second type is needed.  Often, competing resources share behaviour so naturally have an abstract superclass anyway. "	^CompetingResource</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource class</class-id> <category>accessing</category><body package="SUnitResourcePatterns" selector="current">current	"Make the current of a concrete subclass be also the current of its abstract superclass, thus recording which concrete subclass is the current unique active resource of this type."	current isNil ifTrue:		[self competingResourceType current: super current].	^current</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource class</class-id> <category>testing</category><body package="SUnitResourcePatterns" selector="isAbstract">isAbstract	self == self competingResourceType</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource class</class-id> <category>instance creation</category><body package="SUnitResourcePatterns" selector="resetCurrentResource">resetCurrentResource	current notNil ifTrue:		[[current class superReset] sunitEnsure:			[current := nil]].</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource class</class-id> <category>private</category><body package="SUnitResourcePatterns" selector="superReset">superReset	"Allow the competingResourceType to redispatch the call to super."	super reset.</body></methods><component-property><name>SUnitResourcePatterns</name> <type>package</type><property>comment</property> <value>'SUnit extensions and example patterns.  See the test resource subclass comments for detailed descriptions.	- CompetingResource:  when you want to add tests whose resource sets cannot both be available at the same time to an overall suite.	- InvariantResource:  when you want a run to leave the resource active if was active before the run started.'</value></component-property><component-property><name>SUnitResourcePatterns</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('SUnit' ''))</value></component-property><component-property><name>SUnitResourcePatterns</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'SUnit' ''))</value></component-property><component-property><name>SUnitResourcePatterns</name> <type>package</type><property>comment</property> <value>'SUnit extensions and example patterns.  See the test resource subclass comments for detailed descriptions.	- CompetingResource:  when you want to add tests whose resource sets cannot both be available at the same time to an overall suite.	- InvariantResource:  when you want a run to leave the resource active if was active before the run started.'</value></component-property><component-property><name>SUnitResourcePatterns</name> <type>package</type><property>version</property> <value>'3.1 CS9.NFR.4'</value></component-property><component-created><name>SUnitResourceTests</name> <type>package</type></component-created><class><name>CompetingResourceTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitResourceTests</package></attributes></class><comment><class-id>XProgramming.SUnit.CompetingResourceTest</class-id><body>CompetingResourceTest creates a test suite whose tests require competing resources and runs it.  It itself declares no resources so that we can easily test	- running a suite needing competing resources	- running such a suite within a suite using no resource (this class' suite)	- running such a suite within a suite that also uses competing resources (this package's suite;  conveniently, the classes are added to the package's suite in random order so repeated tests will test the case where the outer and inner suite's resource list contains the same specific example of the competing resource and the case where they differ)</body></comment><class><name>ExAbstractCompetingResource</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.CompetingResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isCorrectlySetUp </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitResourceTests</package></attributes></class><comment><class-id>XProgramming.SUnit.ExAbstractCompetingResource</class-id><body>I am an example abstract competing test resource created for use in tests of the competing resource system.</body></comment><class><name>CompetingResource1TestData</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitResourceTests</package></attributes></class><comment><class-id>XProgramming.SUnit.CompetingResource1TestData</class-id><body>I have three functions	- show that competing resources work like ordinary resources for a single test case	- act as data for the CompetingResourceTest	- act as one of several tests using competing resources in the whole package' test suite</body></comment><class><name>Ex2CompetingResource</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.ExAbstractCompetingResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitExtensions</category><attributes><package>SUnitResourceTests</package></attributes></class><comment><class-id>XProgramming.SUnit.Ex2CompetingResource</class-id><body>I am an example concrete competing test resource created for use in tests of the competing resource system.</body></comment><class><name>Ex1CompetingResource</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.ExAbstractCompetingResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitExtensions</category><attributes><package>SUnitResourceTests</package></attributes></class><comment><class-id>XProgramming.SUnit.Ex1CompetingResource</class-id><body>I am an example concrete competing test resource created for use in tests of the competing resource system.</body></comment><class><name>CompetingResource2TestData</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitResourceTests</package></attributes></class><comment><class-id>XProgramming.SUnit.CompetingResource2TestData</class-id><body>I have three functions	- show that competing resources work like ordinary resources for a single test case	- act as data for the CompetingResourceTest	- act as one of several tests using competing resources in the whole package' test suite</body></comment><methods><class-id>XProgramming.SUnit.Ex1CompetingResource</class-id> <category>test data only, not CR pattern</category><body package="SUnitResourceTests" selector="rivalResourceClass">rivalResourceClass	^Ex2CompetingResource</body></methods><methods><class-id>XProgramming.SUnit.ExAbstractCompetingResource class</class-id> <category>test data only, not CR pattern</category><body package="SUnitResourceTests" selector="isCorrectlySetUp">isCorrectlySetUp	"Test method to let us verify the state of current without risk of accidentally creating it (can't use isExistant because the whole point of a competing resource is to override that with possible creation behaviour)."	^current notNil and: [current isCorrectlySetUp]</body></methods><methods><class-id>XProgramming.SUnit.ExAbstractCompetingResource class</class-id> <category>private</category><body package="SUnitResourceTests" selector="competingResourceType">competingResourceType	^ExAbstractCompetingResource</body></methods><methods><class-id>XProgramming.SUnit.ExAbstractCompetingResource</class-id> <category>initialise-release</category><body package="SUnitResourceTests" selector="tearDown">tearDown	"In a real competing resource, some actual tearDown work would be done here.  The 'isCorrectlySetUp' instvar mimics this to let the tests verify that the pattern is calling the right methods at the right times;  it is not part of the pattern."	isCorrectlySetUp := false</body></methods><methods><class-id>XProgramming.SUnit.ExAbstractCompetingResource</class-id> <category>initialise-release</category><body package="SUnitResourceTests" selector="setUp">setUp	"In a real competing resource, some actual setUp work would be done here.  The 'isCorrectlySetUp' instvar mimics this to let the tests verify that the pattern is calling the right methods at the right times;  it is not part of the pattern.  We assume we can set up OK provided no rival resource is currently set up."	isCorrectlySetUp := (self rivalResourceClass isCorrectlySetUp ~~ true)</body></methods><methods><class-id>XProgramming.SUnit.ExAbstractCompetingResource</class-id> <category>test data only, not CR pattern</category><body package="SUnitResourceTests" selector="isCorrectlySetUp">isCorrectlySetUp	"The tests use the 'isCorrectlySetUp' instvar to mimic the status of a real resource;  it is not part of the pattern."	^isCorrectlySetUp</body></methods><methods><class-id>XProgramming.SUnit.ExAbstractCompetingResource</class-id> <category>testing</category><body package="SUnitResourceTests" selector="isAvailable">isAvailable	"In a real competing resource, some actual availability checking would be done here.  The 'isCorrectlySetUp' instvar mimics this to let the tests verify that the pattern is in the right state at the right times;  it is not part of the pattern."	^isCorrectlySetUp</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource2TestData class</class-id> <category>accessing</category><body package="SUnitResourceTests" selector="resources">resources	"This test case only exists to act as data for the main CompetingResourceTest, by being a test that uses this resource."	^Array with: Ex2CompetingResource</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource2TestData</class-id> <category>running</category><body package="SUnitResourceTests" selector="testCompetingResource2not1">testCompetingResource2not1	"Verify that the 2 resource is available as this test requires and that its competing 1 resource is not, as their being competitors requires.  (Do not use isAvailable as that would set up the resource.)"	self assert: Ex2CompetingResource isCorrectlySetUp		description: 'Test 2''s resource is not set up'.	self deny: Ex1CompetingResource isCorrectlySetUp		description: 'Test1''s resource is set up at the same time as 2''s'.	self assert: ExAbstractCompetingResource isCorrectlySetUp		description: 'Abstract competing resource is not set up although 2''s is'."We can now call current on the set-up resources without danger of creating a new instance."	self assert: ExAbstractCompetingResource current == Ex2CompetingResource current		description: 'Abstract competing resource not set to current concrete instance (2)'.	self assert: ExAbstractCompetingResource current class == Ex2CompetingResource		description: 'Abstract competing resource not set to instance of current concrete class (2)'.</body></methods><methods><class-id>XProgramming.SUnit.Ex2CompetingResource</class-id> <category>test data only, not CR pattern</category><body package="SUnitResourceTests" selector="rivalResourceClass">rivalResourceClass	^Ex1CompetingResource</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource1TestData class</class-id> <category>accessing</category><body package="SUnitResourceTests" selector="resources">resources	"This test case only exists to act as data for the main CompetingResourceTest, by being a test that uses this resource."	^Array with: Ex1CompetingResource</body></methods><methods><class-id>XProgramming.SUnit.CompetingResource1TestData</class-id> <category>running</category><body package="SUnitResourceTests" selector="testCompetingResource1not2">testCompetingResource1not2	"Verify that the 1 resource is available as this test requires and that its competing 2 resource is not, as their being competitors requires.  (Do not use isAvailable as that would set up the resource.)"	self assert: Ex1CompetingResource isCorrectlySetUp		description: 'Test 1''s resource is not set up'.	self deny: Ex2CompetingResource isCorrectlySetUp		description: 'Test 2''s resource is set up at the same time as 1''s'.	self assert: ExAbstractCompetingResource isCorrectlySetUp		description: 'Abstract competing resource is not set up although 1''s is'."We can now call current on the set-up resources without danger of creating a new instance."	self assert: ExAbstractCompetingResource current == Ex1CompetingResource current		description: 'Abstract competing resource not set to current concrete instance (1)'.	self assert: ExAbstractCompetingResource current class == Ex1CompetingResource		description: 'Abstract competing resource not set to instance of current concrete class (1)'.</body></methods><methods><class-id>XProgramming.SUnit.CompetingResourceTest</class-id> <category>running</category><body package="SUnitResourceTests" selector="testCompetingResources">testCompetingResources	"Verify that a test suite containing tests using two competing resources will run."	| result |	self deny: (Ex1CompetingResource isCorrectlySetUp 			and: [Ex2CompetingResource isCorrectlySetUp])		description: 'Invalid start state:  two competing resources are simultaneously set up'.	result := (TestSuite named: 'Competing Resources Tests')		addTest: (CompetingResource1TestData selector: #testCompetingResource1not2);		addTest: (CompetingResource2TestData selector: #testCompetingResource2not1);		run.	self assert: result hasPassed		description:  'The suite of competing resource tests did not pass'.	self deny: ExAbstractCompetingResource isCorrectlySetUp		description: 'Abstract resource is still set up although a test suite has run to its close'.	self deny: Ex1CompetingResource isCorrectlySetUp		description: 'Test1''s resource is still set up although a test suite has run to its close'.	self deny: Ex2CompetingResource isCorrectlySetUp		description: 'Test2''s resource is still set up although a test suite has run to its close'.</body></methods><component-property><name>SUnitResourceTests</name> <type>package</type><property>comment</property> <value>'Tests for the SUnit competing resources pattern.  The Ex* classes are example resources, used to provide data for the tests and also as examples of the competing resource pattern.  The CompetingResource1TestData and CompetingResource2TestData provide test cases requiring competing resources.  The CompetingResourceTest runs a suite of both the tests, verifying that each had the resources it needed when it needed them.  Running all three tests therefore verifies that competing resources work both as individual resources and in suites of tests requiring clashing resources.'</value></component-property><component-property><name>SUnitResourceTests</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('SUnitResourcePatterns' ''))</value></component-property><component-property><name>SUnitResourceTests</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'SUnitResourcePatterns' ''))</value></component-property><component-property><name>SUnitResourceTests</name> <type>package</type><property>comment</property> <value>'Tests for the SUnit competing resources pattern.  The Ex* classes are example resources, used to provide data for the tests and also as examples of the competing resource pattern.  The CompetingResource1TestData and CompetingResource2TestData provide test cases requiring competing resources.  The CompetingResourceTest runs a suite of both the tests, verifying that each had the resources it needed when it needed them.  Running all three tests therefore verifies that competing resources work both as individual resources and in suites of tests requiring clashing resources.'</value></component-property><component-property><name>SUnitResourceTests</name> <type>package</type><property>version</property> <value>'3.1 CS9.NFR.2'</value></component-property><component-created><name>Method Wrapper Base</name> <type>package</type></component-created><name-space><name>Wrappers</name><environment>Refactory</environment><private>false</private><imports>			private Refactory.Browser.*			private Smalltalk.*			</imports><category>Refactory-Method Wrappers</category><attributes><package>Method Wrapper Base</package></attributes></name-space><class><name>MethodWrapper</name><environment>Refactory.Wrappers</environment><super>Kernel.CompiledMethod</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>clientMethod selector </inst-vars><class-inst-vars>methods </class-inst-vars><imports></imports><category>Refactory-Method Wrappers</category><attributes><package>Method Wrapper Base</package></attributes></class><comment><class-id>Refactory.Wrappers.MethodWrapper</class-id><body>MethodWrappers can add "hidden" behavior to the ordinary method. They can change what is executed before or after the method. For example, a CountMethodWrapper would increment a counter when the method is called, and then forward the call onto the original method. While this class is not abstract (i.e., there are no subclassResponsibilities), these method wrappers don't do anything if you install them. Look at the subclasses for example uses.To create a new type of method wrapper, you must create a subclass of MethodWrapper and redefine the #beforeMethod and/or #afterMethod as necessary. If you only need to redefine the #beforeMethod, you can redefine the #valueFrom:arguments: method instead (see the CountMethodWrapper). This will give you some added performance since it doesn't need to create two blocks and send the #valueNowOrOnUnwindDo: message.To use a method wrapper, send the class a #on:inClass message. This will return a new method wrapper (or nil if this method shouldn't be wrapped). You can then install the method wrapper by sending the #install message and uninstall by sending the #uninstall message.WARNING: incorrectly using the wrappers can crash your image, so you should save your image before using them. Most problems occur as a result of installing them on methods that are called either in the #beforeMethod or #afterMethod. (Note: the #value method in Association (VariableBinding in VW2.5) is automatically called by the VM when you refer to a global, class, or pool variable so you should probably never wrap it. I advise against wrapping primitives also.)Instance Variables:clientMethod	&lt;CompiledMethod&gt;	the method that is being wrappedselector	&lt;Symbol&gt;	the selector that the method is listed under in the method dictionaryClass Instance Variables:methods	&lt;OrderedCollection of: MethodWrapper&gt;	prototype wrappers that are copied when installing new wrappers</body></comment><class><name>BlockMethodWrapper</name><environment>Refactory.Wrappers</environment><super>Refactory.Wrappers.MethodWrapper</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>beforeBlock afterBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Refactory-Method Wrappers</category><attributes><package>Method Wrapper Base</package></attributes></class><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="uninstallEverything">uninstallEverything	| originalMethod |	mclass isNil ifTrue: [^self].	(mclass compiledMethodAt: selector ifAbsent: [nil]) == self ifTrue: [		originalMethod := self unwrappedMethod.		mclass == originalMethod mclass			ifTrue: [mclass addSelector: selector withMethod: originalMethod]			ifFalse: [mclass simplyRemoveSelector: selector]]</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="uninstall">uninstall	mclass isNil ifTrue: [^self].	(mclass compiledMethodAt: selector ifAbsent: [nil]) == self ifTrue: [		mclass == clientMethod mclass			ifTrue: [				mclass methodDictionary at: selector put: clientMethod.				mclass flushVMmethodCacheEntriesFor: selector]			ifFalse: [mclass simplyRemoveSelector: selector]]</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper class</class-id> <category>private</category><body package="Method Wrapper Base" selector="createMethodFor:">createMethodFor: numArgs	| compiler method |	compiler := Compiler new.	compiler methodClass: self.	method := [compiler compile: (self codeStringFor: numArgs) in: self notifying: nil ifFail: []]		on: Notification		do: [:sig | sig resume].	^method generate</body></methods><methods><class-id>Kernel.CompiledCode</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="unwrappedMethod">unwrappedMethod	^self</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>enumerating</category><body package="Method Wrapper Base" selector="withAllBlockMethodsDo:">withAllBlockMethodsDo: aBlock 	"Don't recurse into the literal for self, and evaluate for clientMethod so that we can find literals in 	clientMethods."	super withAllBlockMethodsDo: aBlock.	clientMethod withAllBlockMethodsDo: aBlock</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="install">install	self basicInstall.	mclass flushVMmethodCacheEntriesFor: selector</body></methods><methods><class-id>Refactory.Wrappers.BlockMethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="beforeBlock:">beforeBlock: aBlockClosure 	beforeBlock := aBlockClosure</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>private</category><body package="Method Wrapper Base" selector="basicAt:">basicAt: anIndex 	"Lie about what's in our literal frame. This has the bad side-effect that we 	can't view the correct information in inspectors, but the good news is that 	we stop infinite recursion. Good thing the VM doesn't use the basicAt: 	method :)."	| object |	object := super basicAt: anIndex.	^object == self ifTrue: [clientMethod] ifFalse: [object]</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper class</class-id> <category>instance creation</category><body package="Method Wrapper Base" selector="on:inClass:">on: aSelector inClass: aClass 	| wrapper |	(self canWrap: aSelector inClass: aClass) ifFalse: [^nil].	wrapper := (self methods at: aSelector numArgs				ifAbsentPut: [self createMethodFor: aSelector numArgs]) copy.	wrapper class: aClass selector: aSelector.	^wrapper</body></methods><methods><class-id>Refactory.Wrappers.BlockMethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="afterBlock:">afterBlock: aBlockClosure 	afterBlock := aBlockClosure</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper class</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="methods">methods	^methods isNil ifTrue: [methods := Dictionary new] ifFalse: [methods]</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>initialize-release</category><body package="Method Wrapper Base" selector="class:selector:">class: aClass selector: aSelector 	| position |	self at: self methodPosition put: self.	position := self arrayPosition.	position == 0 ifFalse: [self at: position put: Array].	mclass := aClass.	selector := aSelector</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="basicInstall">basicInstall	| definingClass method |	definingClass := mclass whichClassIncludesSelector: selector.	definingClass isNil ifTrue: [^self].	method := definingClass compiledMethodAt: selector.	method == self ifTrue: [^self].	clientMethod := method.	sourceCode := clientMethod sourcePointer.	mclass methodDictionary at: selector put: self</body></methods><methods><class-id>Refactory.Wrappers.BlockMethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="beforeBlock">beforeBlock	^beforeBlock</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="selector">selector	^selector</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper class</class-id> <category>testing</category><body package="Method Wrapper Base" selector="canWrap:inClass:">canWrap: aSelector inClass: aClass 	"Test if a method can be wrapped without causing infinite recursion."	| class method |	(aClass includesBehavior: MethodWrapper) ifTrue: [^false].	aClass == BlockClosure 		ifTrue: 			[(#(#valueAsUnwindBlockFrom: #ensure:) includes: aSelector) 				ifTrue: [^false]].	(aClass includesBehavior: DeferredBinding) ifTrue: [^false].	(aClass includesBehavior: VariableBinding) ifTrue: [^false].	class := aClass whichClassIncludesSelector: aSelector.	class isNil ifTrue: [^false].	method := class compiledMethodAt: aSelector ifAbsent: [nil].	^method notNil 		and: [(self primitives includes: method primitiveNumber) not]</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>private</category><body package="Method Wrapper Base" selector="methodPosition">methodPosition	^(1 to: self size) detect: 			[:i | 			| each |			each := self realAt: i.			each == self class methodWrapperSymbol or: [each == self]]		ifNone: [self error: 'Cannot find position to insert wrapper']</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>evaluating-before-after</category><body package="Method Wrapper Base" selector="afterMethod">afterMethod</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>private</category><body package="Method Wrapper Base" selector="realAt:">realAt: anIndex	^super basicAt: anIndex</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>private</category><body package="Method Wrapper Base" selector="sendingContext">sendingContext	| context |	context := thisContext.	[context == nil or: [context method == self]]		whileFalse: [context := context sender].	^context == nil		ifTrue: [nil]		ifFalse: [context sender]</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper class</class-id> <category>private</category><body package="Method Wrapper Base" selector="methodWrapperSymbol">methodWrapperSymbol	^#'The method wrapper should be inserted in this position'</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper class</class-id> <category>class initialization</category><body package="Method Wrapper Base" selector="initialize">initialize	self == MethodWrapper 		ifTrue: [self allSubclasses do: [:each | each initialize]].	methods := Dictionary new</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>private</category><body package="Method Wrapper Base" selector="at:">at: anIndex 	"Lie about what's in our literal frame. This has the bad side-effect that we 	can't view the correct information in inspectors, but the good news is that 	we stop infinite recursion. Good thing the VM doesn't use the basicAt: 	method :)."	| object |	object := super at: anIndex.	^object == self ifTrue: [clientMethod] ifFalse: [object]</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>evaluating-before-after</category><body package="Method Wrapper Base" selector="beforeMethod">beforeMethod</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="unwrappedMethod">unwrappedMethod	^clientMethod unwrappedMethod</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper class</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="uninstallAllWrappers">uninstallAllWrappers	"Emergency method to uninstall everything"	"MethodWrapper uninstallAllWrappers"	self withAllSubclasses 		do: [:each | each allInstances do: [:inst | inst uninstallEverything]]</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper class</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="nuke">nuke	"MethodWrapper nuke"	self uninstallAllWrappers.	self initialize</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="attributeMessages">attributeMessages	"On initial compilation of method wrapper templates for specific parameter numbers the clientMethod will be nil.  Various utilities, e.g. DefaultPackageNamespaces, may override compilation code to ask for attributeMessages during template creation.  Protect the call to return nil (which should be an acceptable drop-out value for all callers) in that case."	^clientMethod isNil ifFalse: [clientMethod attributeMessages]</body></methods><methods><class-id>Refactory.Wrappers.BlockMethodWrapper</class-id> <category>evaluating</category><body package="Method Wrapper Base" selector="valueWithReceiver:arguments:">valueWithReceiver: anObject arguments: anArrayOfObjects 	"This is the general case where you want both a before and after method, but if you want just a 	before method, you might want to override this method for optimization."	beforeBlock value: anObject value: anArrayOfObjects.	^[clientMethod valueWithReceiver: anObject arguments: anArrayOfObjects] 		ensure: [afterBlock value: anObject value: anArrayOfObjects]</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>evaluating</category><body package="Method Wrapper Base" selector="valueWithReceiver:arguments:">valueWithReceiver: anObject arguments: anArrayOfObjects 	"This is the general case where you want both a before and after method, but if you want just a 	before method, you might want to override this method for optimization."	self beforeMethod.	^[clientMethod valueWithReceiver: anObject arguments: anArrayOfObjects] 		ensure: [self afterMethod]</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>private</category><body package="Method Wrapper Base" selector="arrayPosition">arrayPosition	self numArgs == 0 ifTrue: [^0].	^(1 to: self size)		detect: [:i | (self realAt: i) == #Array or: [(self realAt: i) == Array]]		ifNone: [self error: 'Cannot find position for Array']</body></methods><methods><class-id>Core.ClassDescription</class-id> <category>Method Wrappers</category><body package="Method Wrapper Base" selector="rebindMethod:oldVariableNames:">rebindMethod: method oldVariableNames: varNames 	^super rebindMethod: method unwrappedMethod oldVariableNames: varNames</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper class</class-id> <category>private</category><body package="Method Wrapper Base" selector="primitives">primitives	^#(61	"at:put:"	71	"new:"	523	"valueWithReceiver:arguments:"	501)	"value"</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="attributes">attributes	^clientMethod attributes</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="resourceType">resourceType	^clientMethod isNil		ifTrue: [super resourceType]		ifFalse: [clientMethod resourceType]</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper class</class-id> <category>private</category><body package="Method Wrapper Base" selector="codeStringFor:">codeStringFor: numArgs 	| nameString tempsString |	nameString := 'value'.	tempsString := numArgs == 0 				ifTrue: ['t := #()']				ifFalse: ['(t := #Array new: ' , numArgs printString , ') '].	1 to: numArgs		do: 			[:i | 			nameString := nameString , 'value: t' , i printString , ' '.			tempsString := tempsString , (i == 1 ifTrue: [''] ifFalse: [';']) 						, ' at: ' , i printString 						, ' put: t' , i printString].	^nameString , '	| t |	' , tempsString , '.	^' 		, self methodWrapperSymbol printString 			, ' valueWithReceiver: self arguments: t'</body></methods><methods><class-id>Refactory.Wrappers.BlockMethodWrapper</class-id> <category>initialize-release</category><body package="Method Wrapper Base" selector="class:selector:">class: aClass selector: aSelector 	super class: aClass selector: aSelector.	beforeBlock := [:receiver :arguments | ].	afterBlock := [:receiver :arguments | ]</body></methods><methods><class-id>Refactory.Wrappers.BlockMethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="afterBlock">afterBlock	^afterBlock</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="attributeAt:ifAbsent:">attributeAt: key ifAbsent: exceptionBlock 	^clientMethod attributeAt: key ifAbsent: exceptionBlock</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="attributes:">attributes: aDictionary	^clientMethod attributes: aDictionary</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="attributeMessages:">attributeMessages: anArray	^clientMethod attributeMessages: anArray</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper class</class-id> <category>accessing</category><body package="Method Wrapper Base" selector="installWrappers:">installWrappers: aCollection 	aCollection do: [:each | each basicInstall]</body></methods><component-property><name>Method Wrapper Base</name> <type>package</type><property>comment</property> <value>'This package has the abstract MethodWrapper class and everything the framework needs, plus concrete BlockMethodWrapper.  All other packages in the Method Wrappers bundle are specific applications of method wrappers.  See the bundle comment for references to the theory and use of wrappers.'</value></component-property><component-property><name>Method Wrapper Base</name> <type>package</type><property>packageName</property> <value>'Method Wrapper Base'</value></component-property><component-property><name>Method Wrapper Base</name> <type>package</type><property>visualworksVersion</property> <value>'VisualWorks®, 7.4.1 of May 30, 2006'</value></component-property><component-property><name>Method Wrapper Base</name> <type>package</type><property>comment</property> <value>'This package has the abstract MethodWrapper class and everything the framework needs, plus concrete BlockMethodWrapper.  All other packages in the Method Wrappers bundle are specific applications of method wrappers.  See the bundle comment for references to the theory and use of wrappers.'</value></component-property><pundle-loaded><name>Method Wrapper Base</name><type>package</type><primaryKey>46529</primaryKey><databaseId>'psql_public_cst'</databaseId></pundle-loaded><component-created><name>SUnitXProcPatterns</name> <type>package</type></component-created><class><name>CrossProcessTestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPatterns</category><attributes><package>SUnitXProcPatterns</package></attributes></class><comment><class-id>XProgramming.SUnit.CrossProcessTestCase</class-id><body>CrossProcessTestCase wraps the blocks of any processes it forks in its test handler, suppressing debuggers and reporting the worst defect found in any process back to the overall result.  Thus running the test will not show spurious passes and debuggers when a problem is raised in a subthread.  Debugging the test behaves as normal.Just as an ordinary test run will not complete until it has executed all the test code, so a cross-process test case will not do so until it has executed all the code in the main process and every process spawned by it (see #waitTillSubThreadsComplete).</body></comment><class><name>CrossProcessTestWrapper</name><environment>XProgramming.SUnit</environment><super>Refactory.Wrappers.MethodWrapper</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>testStrategy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPatterns</category><attributes><package>SUnitXProcPatterns</package></attributes></class><comment><class-id>XProgramming.SUnit.CrossProcessTestWrapper</class-id><body>I can wrap Process class&gt;&gt;forBlock:priority:, DeferrableAction&gt;&gt;block: or any other method that has a no-arg-block as its first argument.  I replace the block argument with the modified block that my strategy returns to me.Instance Variables:	testStrategy	&lt;CrossProcessTestStrategy&gt;	convert no-arg block to no-arg block with additional behaviour</body></comment><class><name>ProcrastinatingSemaphore</name><environment>Core</environment><super>Core.Semaphore</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPatterns</category><attributes><package>SUnitXProcPatterns</package></attributes></class><comment><class-id>Core.ProcrastinatingSemaphore</class-id><body>ProcrastinatingSemaphore is a Semaphore that can be told to wait for additional signals before unblocking.  Sending #unsignal reduces the signal count by one.  The signal count can go negative and the semaphore will not unblock until it returns to value 1.Typically it can be used instead of a shared queue of semaphores when, inversely to the standard semaphore usage pattern, a single process must wait on many.</body></comment><class><name>CrossProcessTestStrategy</name><environment>XProgramming.SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testCase testResult subthreadCompletionSemaphore wrappers subThreadCompletionWaitTime </inst-vars><class-inst-vars></class-inst-vars><imports>			Refactory.Wrappers.*			</imports><category>SUnitPatterns</category><attributes><package>SUnitXProcPatterns</package></attributes></class><comment><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id><body>TestCase&gt;&gt;crossProcessTestStrategy, overridden by specific test cases as needed, returns an instance of me suitable to a given cross-process test case.  Strategies differ in their time-out delay (ideally, once the test is stable, it should be longer than any subthread will run) and in which wrappers they need:  tests that open and close windows need additional wrappers to detect subprocess completion;  tests that send actions to pre-existing processes need different wrappers from those that spawn subprocesses (and may also need additional wrappers to detect discarded, so non-completing, actions).Instance Variables:	subthreadCompletionSemaphore	&lt;ProcrastinatingSemaphore&gt;	I am unsignalled when a subthread is wrapped and signalled when it completes	subThreadCompletionWaitTime	&lt;SmallInteger&gt;	How long does the main thread wait for all subthreads to complete before resuming anyway	testCase	&lt;TestCase&gt;	the test whose subthreads are also to have their errors and failures captured to the testResult, just like the main thread	testResult	&lt;CrossProcessTestResult&gt;	capture thread- and subthread-raised defects;  provide the most serious to the outer test result	wrappers	&lt;(Collection of: MethodWrapper)&gt;	modify subthread spawning (and other methods as needed) during the test run</body></comment><class><name>CrossProcessTestResult</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestResult</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPatterns</category><attributes><package>SUnitXProcPatterns</package></attributes></class><comment><class-id>XProgramming.SUnit.CrossProcessTestResult</class-id><body>I am created for a single test run, during which I capture defects raised by the main test process, by subprocesses it spawns and/or by actions it queues to pre-existing processes .  At the end of the run, I add the most serious defect raised to the overall test suites' test result.Adds to my collections are not synchronised as I need to know only whether one or more test cases were added to a given collection, not how many.</body></comment><methods><class-id>XProgramming.SUnit.CrossProcessTestCase</class-id> <category>running</category><body package="SUnitXProcPatterns" selector="run:">run: aResult	"As this is the only method that a test case using the pattern must implement, you can add it to specific test cases instead of subclassing this specialized testcase class;  use whichever approach is more convenient.  (Remember to override #crossProcessTestStrategy if the default strategy is not the one you want.)"	| multithreadResult |	multithreadResult := CrossProcessTestResult new.	super run: multithreadResult.	multithreadResult hasErrors ifTrue: [^aResult errors add: self].	multithreadResult hasFailures ifTrue: [^aResult failures add: self].	^aResult passed add: self</body></methods><methods><class-id>XProgramming.SUnit.TestCase</class-id> <category>cross-process</category><body package="SUnitXProcPatterns" selector="crossProcessTestStrategy">crossProcessTestStrategy	"IMPORTANT:  if the tests opens and closes windows, override this with .^.. wrapProcessesForUI (or ^super ... subwrapUnscheduleWindow)."	^CrossProcessTestStrategy new wrapProcesses"This default extends TestCase instead of CrossProcessTestCase to make it easier to add cross-process behaviour to TestCases that are deep in an otherwise-non-cross-process hierarchy."</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id> <category>initialize-release</category><body package="SUnitXProcPatterns" selector="uninstall">uninstall	wrappers do: [:each | each uninstall].</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>querying</category><body package="SUnitXProcPatterns" selector="isRivalWrapperInstalled">isRivalWrapperInstalled	^(mclass compiledMethodAt: selector ifAbsent: [nil]) class == self class		and: [self isInstalled not]</body></methods><methods><class-id>UI.DeferrableAction</class-id> <category>accessing</category><body package="SUnitXProcPatterns" selector="message:">message: aMessage	"Refactored to allow the cross-process test utility to wrap the block with the test handler."	self block: [aMessage value].</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestResult</class-id> <category>running</category><body package="SUnitXProcPatterns" selector="runCase:forBlock:">runCase: aTestCase forBlock: aBlock	"This generalizes the superclass' #runCase: method to wrap the test handlers round a block, not a specific test method call, so enabling its use to capture defects raised in subthreads forked by the test.  The #add calls are not #critical:-protected for simplicity as we only care if one or more error or failure was found, not the exact number found in all threads, so the possibility of overwriting in writes from nmultiple subthreads is not a concern."	| testCasePassed |	testCasePassed :=		[			[				aBlock value.	"THE ONLY CHANGE FROM super runCase:"				true]					sunitOn: self class failure					do: [:signal |						self failures add: aTestCase.						signal sunitExitWith: false]]							sunitOn: self class error							do: [:signal |								self errors add: aTestCase.								signal sunitExitWith: false].	testCasePassed		ifTrue: [self passed add: aTestCase]</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id> <category>strategy choosing</category><body package="SUnitXProcPatterns" selector="subwrapWindowUnscheduling">subwrapWindowUnscheduling	"If the test creates windows and WindowManager&gt;&gt;newProcess is wrapped then test completion is speeded if we also wrap WindowManager&gt;&gt;unscheduleWindow: to check (after a brief delay) whether the wrapped process should terminate.  Without this, the newProcess block of any manager created by the test may not terminate until the test UI, in updating, makes the WindowManager class checkForTerminate all registered WindowManagers.  However this update may wait until the test completes and since the test is waiting until its spawned processes complete, the deadlock is only resolved when the test times-out waiting for them.  This wrapper makes completion signalling faster and more rational."	wrappers add:		((BlockMethodWrapper on: #unscheduleWindow: inClass: WindowManager)			afterBlock:				[:receiver :arguments | receiver hasWindows ifFalse:					[[receiver checkForTerminate] forkAt: Processor systemRockBottomPriority]];			yourself).</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestCase class</class-id> <category>Testing</category><body package="SUnitXProcPatterns" selector="isAbstract">isAbstract	^self sunitName = #CrossProcessTestCase</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id> <category>evaluating</category><body package="SUnitXProcPatterns" selector="isUnderTest">isUnderTest	"Any process spawned by the main test should be wrapped.  Any process spawned from within a wrapped context should be wrapped."	^(thisContext findParentContextWithHomeMethod:		(CrossProcessTestResult compiledMethodAt: #runCase:forBlock:))			notNil</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id> <category>initialize-release</category><body package="SUnitXProcPatterns" selector="initialize">initialize	wrappers := OrderedCollection new.	subThreadCompletionWaitTime := 5000.	subthreadCompletionSemaphore := ProcrastinatingSemaphore forMutualExclusion.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id> <category>evaluating</category><body package="SUnitXProcPatterns" selector="waitTillSubThreadsComplete">waitTillSubThreadsComplete	"Keep waiting till the last subprocess signals completion.  As a subprocess can spawn a subsubprocess after we reach here that then runs longer than its parent, we need to check we're the only test process, waiting some more if not.  (Could provide mechanism whereby specific test cases can override this with a simple delay if this 'procrastinate till last thread completes' pattern is seen as risky.)"	| timeoutProcess |	timeoutProcess :=		[(Delay forMilliseconds: subThreadCompletionWaitTime) wait.		[subthreadCompletionSemaphore isEmpty] whileFalse:			[subthreadCompletionSemaphore signal]] forkAt: Processor systemRockBottomPriority.	subthreadCompletionSemaphore wait.	timeoutProcess terminate.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id> <category>evaluating</category><body package="SUnitXProcPatterns" selector="wrapBlock:">wrapBlock: anArrayWithFirstElementBlock	"The active process has invoked a method (e.g. #forBlock:priority: or DeferrableAction&gt;&gt;block:) that returns a process or action.  If the active process is under test, I replace the block argument with a modified block (so this becomes the block that the process or action will run) then unsignal the semaphore (so that it will wait for the upcoming subthread).  The modification ensures that when the process is resumed or the action is executed, the testResult runs the original block, trapping defects, and then signals the semaphore;  when all subthreads have signalled (or the test's subthreadCompletionWaitTime is exceeded), the main thread continues."	self isUnderTest ifTrue:		[| testSpawnedBlock | testSpawnedBlock := anArrayWithFirstElementBlock first.		anArrayWithFirstElementBlock at: 1 put:			[[testResult runCase: testCase forBlock: testSpawnedBlock.			subthreadCompletionSemaphore signal]				on: Process terminateSignal				do: [:ex | subthreadCompletionSemaphore signal.					ex pass]].		subthreadCompletionSemaphore unsignal].	^anArrayWithFirstElementBlock</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id> <category>strategy choosing</category><body package="SUnitXProcPatterns" selector="subThreadCompletionWaitTime:">subThreadCompletionWaitTime: anInteger	"Let tests, in #crossProcessTestStrategy, call this to override the default if they wish."	subThreadCompletionWaitTime := anInteger</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestWrapper</class-id> <category>accessing</category><body package="SUnitXProcPatterns" selector="testStrategy:">testStrategy: aCrossProcessTestStrategy	testStrategy := aCrossProcessTestStrategy</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id> <category>strategy choosing</category><body package="SUnitXProcPatterns" selector="wrapDeferrableActions">wrapDeferrableActions	"This wraps all non-pathological ways of creating a DeferredAction (if that class' #message: method has been trivially refactored to use its #block: method).  It is only required when a test sends deferred actions to processes it did not create and so did not wrap, or when processes are not wrapped.  BE AWARE that deferrable actions may activate but silently not execute, e.g. closing a window can easily generate and then lose a second WindowManager&gt;&gt;sendTerminate action, requiring wrapping for to completion signalling when events are discarded from the eventQueue (e.g. in  WindowManager&gt;&gt;terminate and &gt;&gt;drainOutstandingEventsFor:)."	wrappers add:		((CrossProcessTestWrapper on: #block: inClass: DeferrableAction)			testStrategy: self;			yourself)</body></methods><methods><class-id>Refactory.Wrappers.MethodWrapper</class-id> <category>querying</category><body package="SUnitXProcPatterns" selector="isInstalled">isInstalled	^(mclass compiledMethodAt: selector ifAbsent: [nil]) == self</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy class</class-id> <category>instance creation</category><body package="SUnitXProcPatterns" selector="new">new	^super new initialize</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestResult</class-id> <category>running</category><body package="SUnitXProcPatterns" selector="runCase:">runCase: aTestCase	"The super call is refactored into runCase:forBlock: and the call of that here."	| testStrategy |	testStrategy := aTestCase crossProcessTestStrategy		setTestCase: aTestCase result: self.	[testStrategy install.	self runCase: aTestCase forBlock: [aTestCase runCase].	testStrategy waitTillSubThreadsComplete]		sunitEnsure: [testStrategy uninstall].</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id> <category>strategy choosing</category><body package="SUnitXProcPatterns" selector="wrapProcesses">wrapProcesses	"IMPORTANT: if the test creates windows, use #wrapProcessesForUI instead of me or add #subwrapWindowsUnscheduling to me (the effect is the same).  This wraps all non-pathological ways of creating processes."	wrappers add:		((CrossProcessTestWrapper on: #forBlock:priority: inClass: Process class)			testStrategy: self;			yourself)</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id> <category>initialize-release</category><body package="SUnitXProcPatterns" selector="install">install	wrappers do:		[:each |		testCase			deny: each isRivalWrapperInstalled			description: each printString, 'is already wrapped for cross-process testing'].	wrappers do: [:each | each install].</body></methods><methods><class-id>Core.ProcrastinatingSemaphore</class-id> <category>communication</category><body package="SUnitXProcPatterns" selector="unsignal">unsignal	"Reimplement as primitive:  should just need to extract only the count reduction code from super's wait primitive."	[excessSignals := excessSignals - 1] valueUnpreemptively.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestWrapper</class-id> <category>evaluating</category><body package="SUnitXProcPatterns" selector="valueWithReceiver:arguments:">valueWithReceiver: aProcessClass arguments: anArrayWhoseFirstElementIsBlock	"If the parent process is a test process, wrap the forked block in a test handler that will capture any defects to the test result."	^clientMethod		valueWithReceiver: aProcessClass		arguments: (testStrategy wrapBlock: anArrayWhoseFirstElementIsBlock)</body></methods><methods><class-id>Core.ProcrastinatingSemaphore</class-id> <category>communication</category><body package="SUnitXProcPatterns" selector="signal">signal	"Reimplement as primitive:  should be a trivial code rewrite of super's primitive"	[excessSignals &lt; 0		ifFalse: [super signal]		ifTrue: [excessSignals := excessSignals + 1]]			valueUnpreemptively.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id> <category>initialize-release</category><body package="SUnitXProcPatterns" selector="setTestCase:result:">setTestCase: aTestCase result: aTestResult	testResult := aTestResult.	testCase := aTestCase.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestStrategy</class-id> <category>strategy choosing</category><body package="SUnitXProcPatterns" selector="wrapProcessesForUI">wrapProcessesForUI	"This wraps all non-pathological ways of creating processes.  It also wraps WindowManager&gt;&gt;unscheduleWindow: to check (after a brief delay) whether WindowManager&gt;&gt;newProcess should terminate, important if the test creates windows (see subwrapWindowUnscheduling comment)."	self wrapProcesses.	self subwrapWindowUnscheduling.</body></methods><component-property><name>SUnitXProcPatterns</name> <type>package</type><property>comment</property> <value>'Pattern for making test results capture errors and failures raised	- in subprocesses spawned by the main test processor	- in actions created by the test but executed in pre-existing non-test processesor in a mixture of such cases.  This pattern requires method wrappers so can be ported to dialects that have them (e.g. VisualWorks, VisualAge, Squeak, etc.) but not to dialects that lack them.To use the pattern, either make your test class a subclass of CrossProcessTestCase or make it override TestCase&gt;&gt;run: with the implementation in CrossProcessTestCase&gt;&gt;run: (only use this latter way if you need to add the pattern to a subclass in an existing test hierarchy) and decide which strategy the test case requires.  TestCase&gt;&gt;crossProcessTestStrategy provides a default strategy.  Override this method for test cases that open windows or that send DeferrableActions to pre-existing processes (see CrossProcessTestStrategy class comment and ''strategy choosing'' protocol method comments for more infomation).The basic pattern is to wrap	Process class&gt;&gt;forBlock:priority:so that all processes spawned (directly or recursively) by the test will have any errors or failures they raise trapped at the top of the spawned thread and added to the test result.  Subthread completion is tracked by a ProcrastinatingSemaphore which resumes when all spawned blocks signal completion or when a standard delay (set in the strategy, i.e. by overriding TestCase&gt;&gt;crossProcessTestStrategy) is exceeded.  Various subwrap* strategy methods help avoid trivial slowness to complete of UI tests by e.g. wrapping WindowManager&gt;&gt;unscheduleWindow: to check (after a short delay) whether the WindowManager&gt;&gt;newProcess should be terminated whenever a window is closed (see subwrap* method comments).An alternative or additional candidate for wrapping is	DeferrableAction&gt;&gt;block:(A trivial refactor of DeferrableAction&gt;&gt;message: in an override ensures that this captures all DeferrableActions.)  If events created by the test are for some reason to be run in a pre-existing processes (e.g. the WindowManager&gt;&gt;newProcess of a pre-existing window not spawned by the test) then, and only then, this may need to be wrapped instead;  override crossProcessTestStrategy as needed.  In this case probably only DeferrableActions that the tester expects to run will be created during the test, and so wrapped, as the process that runs them is not started or stopped by the test.  However note that DeferrableActions can be lost (i.e. never executed) when a WindowManager is closed (loss of a duplicate #sendTerminate-created event is routine) or when a TransientWindow is unmapped;  if a test includes such cases, completion strategies may need further resource wrappings to avoid waiting for the delay to timeout.  Any method whose first argument is a block (i.e. the block within which errors and failures are to be captured) can be wrapped.  All wrapped methods that share a strategy will share a ProcrastinatingSemaphore and so will (preferrably) all expect completion to be signalled in normal running (it is tedious to rely on the delay routinely, though essential to have it while coding and for some failure situations).Read the class comments for more details.Thanks to Reinout for pair-programming at CS10.'</value></component-property><component-property><name>SUnitXProcPatterns</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('SUnit' '') #('Method Wrapper Base' ''))</value></component-property><component-property><name>SUnitXProcPatterns</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'SUnit' '') #(#any 'Method Wrapper Base' ''))</value></component-property><component-property><name>SUnitXProcPatterns</name> <type>package</type><property>comment</property> <value>'Pattern for making test results capture errors and failures raised	- in subprocesses spawned by the main test processor	- in actions created by the test but executed in pre-existing non-test processesor in a mixture of such cases.  This pattern requires method wrappers so can be ported to dialects that have them (e.g. VisualWorks, VisualAge, Squeak, etc.) but not to dialects that lack them.To use the pattern, either make your test class a subclass of CrossProcessTestCase or make it override TestCase&gt;&gt;run: with the implementation in CrossProcessTestCase&gt;&gt;run: (only use this latter way if you need to add the pattern to a subclass in an existing test hierarchy) and decide which strategy the test case requires.  TestCase&gt;&gt;crossProcessTestStrategy provides a default strategy.  Override this method for test cases that open windows or that send DeferrableActions to pre-existing processes (see CrossProcessTestStrategy class comment and ''strategy choosing'' protocol method comments for more infomation).The basic pattern is to wrap	Process class&gt;&gt;forBlock:priority:so that all processes spawned (directly or recursively) by the test will have any errors or failures they raise trapped at the top of the spawned thread and added to the test result.  Subthread completion is tracked by a ProcrastinatingSemaphore which resumes when all spawned blocks signal completion or when a standard delay (set in the strategy, i.e. by overriding TestCase&gt;&gt;crossProcessTestStrategy) is exceeded.  Various subwrap* strategy methods help avoid trivial slowness to complete of UI tests by e.g. wrapping WindowManager&gt;&gt;unscheduleWindow: to check (after a short delay) whether the WindowManager&gt;&gt;newProcess should be terminated whenever a window is closed (see subwrap* method comments).An alternative or additional candidate for wrapping is	DeferrableAction&gt;&gt;block:(A trivial refactor of DeferrableAction&gt;&gt;message: in an override ensures that this captures all DeferrableActions.)  If events created by the test are for some reason to be run in a pre-existing processes (e.g. the WindowManager&gt;&gt;newProcess of a pre-existing window not spawned by the test) then, and only then, this may need to be wrapped instead;  override crossProcessTestStrategy as needed.  In this case probably only DeferrableActions that the tester expects to run will be created during the test, and so wrapped, as the process that runs them is not started or stopped by the test.  However note that DeferrableActions can be lost (i.e. never executed) when a WindowManager is closed (loss of a duplicate #sendTerminate-created event is routine) or when a TransientWindow is unmapped;  if a test includes such cases, completion strategies may need further resource wrappings to avoid waiting for the delay to timeout.  Any method whose first argument is a block (i.e. the block within which errors and failures are to be captured) can be wrapped.  All wrapped methods that share a strategy will share a ProcrastinatingSemaphore and so will (preferrably) all expect completion to be signalled in normal running (it is tedious to rely on the delay routinely, though essential to have it while coding and for some failure situations).Read the class comments for more details.Thanks to Reinout for pair-programming at CS10.'</value></component-property><component-created><name>SUnitXProcTests</name> <type>package</type></component-created><class><name>CrossProcessTestWindow</name><environment>XProgramming.SUnit</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPatterns</category><attributes><package>SUnitXProcTests</package></attributes></class><class><name>ProcrastinatingSemaphoreTests</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sem procs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitXProcTests</category><attributes><package>SUnitXProcTests</package></attributes></class><class><name>CrossProcessTCData</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.CrossProcessTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPatterns</category><attributes><package>SUnitXProcTests</package></attributes></class><comment><class-id>XProgramming.SUnit.CrossProcessTCData</class-id><body>I run code that spawns subprocesses and then raises errors and failures in both main test process and subprocesses.  I am an abstract test so that I will not show up in test browsers, since my role is only to be data for tests of my subclass.</body></comment><class><name>CrossProcessTCTest</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.CrossProcessTCData</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dataTestResult </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitPatterns</category><attributes><package>SUnitXProcTests</package></attributes></class><comment><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id><body>My tests verify that errors and failures raised in subprocesses spawned by a CrossProcessTestCase are captured in its test result.Instance Variables:	dataTestResult	&lt;CrossProcessTestResult&gt;	holds result of running superclass' test</body></comment><methods><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id> <category>ui failing</category><body package="SUnitXProcTests" selector="testEventFailure">testEventFailure	self testFailureInSubthread.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestWindow</class-id> <category>actions</category><body package="SUnitXProcTests" selector="fakeFailure">fakeFailure	^(TestCase selector: #zork) assert: false</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testMoreSeriousInSubthread">testMoreSeriousInSubthread	self testErrorInSubthread.	self deny: dataTestResult hasFailures		description: 'The run captured a failure which the subthread error should have trumped'.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>cross-process</category><body package="SUnitXProcTests" selector="subthreadWaitTimeForTest">subthreadWaitTimeForTest	^5000</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>ui failing</category><body package="SUnitXProcTests" selector="testEventFailure">testEventFailure	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	(window component components at: 2) component component controller pressAction] uiEventNowFor: window.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] uiEventNowFor: window</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testFailureInSubthread">testFailureInSubthread	self assert: dataTestResult hasFailures		description: 'The run did not capture a failure in a subthread'.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestWindow</class-id> <category>actions</category><body package="SUnitXProcTests" selector="fakeError">fakeError	^self zork</body></methods><methods><class-id>XProgramming.SUnit.ProcrastinatingSemaphoreTests</class-id> <category>running</category><body package="SUnitXProcTests" selector="setUp">setUp	sem := ProcrastinatingSemaphore new.	procs := IdentitySet new</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData class</class-id> <category>Testing</category><body package="SUnitXProcTests" selector="isAbstract">isAbstract	"I am data for another test and should only be run programmatically."	^true</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testErrorInSubthread">testErrorInSubthread	self assert: dataTestResult hasErrors		description: 'The run did not capture an error in a subthread'.</body></methods><methods><class-id>XProgramming.SUnit.ProcrastinatingSemaphoreTests</class-id> <category>utility</category><body package="SUnitXProcTests" selector="addProc:">addProc: block 	procs add: (block forkAt: Processor activePriority + 1)</body></methods><methods><class-id>XProgramming.SUnit.ProcrastinatingSemaphoreTests</class-id> <category>running</category><body package="SUnitXProcTests" selector="testProcrastinatingWithExcessSignals">testProcrastinatingWithExcessSignals	| finished1 finished2 |	finished1 := finished2 := false.	sem		signal;		signal.	sem		unsignal;		unsignal.	self addProc: 			[sem wait.			finished1 := true].	self addProc: 			[sem wait.			finished2 := true].	self deny: finished1 | finished2.	sem signal.	self assert: finished1.	self deny: finished2.	sem signal.	self assert: finished1 &amp; finished2.	self assert: sem excessSignals = 0.	self assert: (procs allSatisfy: [:p | p isTerminated])</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testFailureInSubthread">testFailureInSubthread	"Force a failure in a subthread launched by this test."	[self assert: false] fork.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>cross-process</category><body package="SUnitXProcTests" selector="crossProcessTestStrategy">crossProcessTestStrategy	| cpStrategy |	cpStrategy := super crossProcessTestStrategy.	(self class whichCategoryIncludesSelector: self selector) 		== (self class whichCategoryIncludesSelector: #testErrorInSubthread) 			ifFalse: [cpStrategy subwrapWindowUnscheduling].	cpStrategy subThreadCompletionWaitTime: self subthreadWaitTimeForTest.	^cpStrategy</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTestWindow class</class-id> <category>interface specs</category><body package="SUnitXProcTests" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Smile already..' 			#bounds: #(#{Graphics.Rectangle} 576 432 1041 825 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 83 66 164 89 ) 					#name: #ActionButton1 					#model: #fakeError 					#label: 'FakeError' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 261 65 342 88 ) 					#name: #ActionButton2 					#model: #fakeFailure 					#label: 'FakeFailure' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 207 180 ) 					#name: #CheckBox1 ) 				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.Rectangle} 141 254 316 281 ) 					#name: #TabControl1 					#labels: #('Why' 'WhyNot' ) ) ) ) )</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>ui failing</category><body package="SUnitXProcTests" selector="testEventError">testEventError	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	window component components first component component controller pressAction] uiEventNowFor: window.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] uiEventNowFor: window</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testMoreSeriousInSubthread">testMoreSeriousInSubthread	"Trump a failure in the main thread by an error in a subthread."	self testErrorInSubthread.	self testFailureInSubthread.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testPrematureTerminatedSubthread">testPrematureTerminatedSubthread	"Failure in one subthread and main thread, error in another long-running sub-subthread."	| subProc |	subProc :=		[(Delay forSeconds: 10) wait.		self assert: false		description: 'This subthread should have terminated before this call']			forkAt: Processor systemRockBottomPriority.	(Delay forMilliseconds: 100) wait.	subProc terminate.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id> <category>running</category><body package="SUnitXProcTests" selector="setUp">setUp	"Get the result of running the corresponding data test, which my test will then verify.  (We omit any super setUp as if the superclass test adds it we probably don't want it.)  Ensure that a result was captured.  If I do not implement a specific test selector for it, verify that it passed.  	Check that the data test ran faster than the subthread wait time (noting that a test whose threads were _intended_ to take longer than the subthread wait time would fail this;  increase the wait time for such a test or find another measure)."	| crossProcessTest crossProcessDuration |	crossProcessTest := CrossProcessTCData selector: self selector.	crossProcessDuration := Time millisecondsToRun: [dataTestResult := crossProcessTest run].	self assert: dataTestResult runCount = 1		description: 'Captured too many test results'.	(self class sunitSelectors includes: self selector) ifFalse:		[self assert: dataTestResult hasPassed			description: 'CrossProcess test expected to pass but did not'].	self assert: crossProcessDuration &lt; crossProcessTest subthreadWaitTimeForTest			description: 'The cross-process test took longer than the subthread wait-time; did the test fail to signal completion of all subthreads?'.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testNestedLongSubthread">testNestedLongSubthread	"Failure in one subthread and main thread, error in another long-running sub-subthread."	[(Delay forSeconds: 1) wait.	self testErrorInSubthread] forkAt: Processor systemRockBottomPriority.	self testFailureInSubthread.	self assert: false		description: 'A subthread''s error should have replaced both this failure and a subthread''s failure in the result'.</body></methods><methods><class-id>XProgramming.SUnit.ProcrastinatingSemaphoreTests</class-id> <category>running</category><body package="SUnitXProcTests" selector="testStartingWithProcrastination2">testStartingWithProcrastination2	| finished1 finished2 |	finished1 := finished2 := false.	sem		unsignal;		unsignal.	self addProc: 			[sem wait.			finished1 := true].	self addProc: 			[sem wait.			finished2 := true].	self deny: finished1 | finished2.	sem signal.	self deny: finished1 | finished2.	sem signal.	self deny: finished1 | finished2.	sem signal.	self assert: finished1.	self deny: finished2.	sem signal.	self assert: finished1 &amp; finished2.	self assert: sem excessSignals = 0.	self assert: (procs allSatisfy: [:p | p isTerminated])</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testNestedLongSubthread">testNestedLongSubthread	"Failure in both a subthread and the main thread, error in another."	self testMoreSeriousInSubthread.</body></methods><methods><class-id>XProgramming.SUnit.ProcrastinatingSemaphoreTests</class-id> <category>running</category><body package="SUnitXProcTests" selector="testSignallingAndWaitingOnce">testSignallingAndWaitingOnce	"normal semphore behavior"	sem signal.	self addProc: [sem wait].	self assert: sem excessSignals = 0.	self assert: (procs allSatisfy: [:p | p isTerminated])</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testProcessRenamed">testProcessRenamed	"Some isUnderTest implementations renamed the process to know which had been spawned by the test."	| process |	process :=		[(Delay forMilliseconds: 500) wait.		self assert: true] fork			name: 'Testing..'			yourself.	self assert: process name = 'Testing..'.</body></methods><methods><class-id>XProgramming.SUnit.ProcrastinatingSemaphoreTests</class-id> <category>running</category><body package="SUnitXProcTests" selector="testStartingWithWaiting">testStartingWithWaiting	| finished |	finished := false.	self addProc: 			[sem wait.			finished := true].	self deny: finished.	sem unsignal.	sem signal.	self deny: finished.	sem unsignal.	sem signal.	self deny: finished.	sem signal.	self assert: finished.	self assert: sem excessSignals = 0.	self assert: (procs allSatisfy: [:p | p isTerminated])</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>ui-passing</category><body package="SUnitXProcTests" selector="testWindowProcessThreadsUIEventNowSentToWindow">testWindowProcessThreadsUIEventNowSentToWindow	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	window component invalidateNow] uiEventNowFor: window.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] uiEventNowFor: window</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>ui-passing</category><body package="SUnitXProcTests" selector="testWindowProcessForked">testWindowProcessForked	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	window component invalidateNow] fork.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] fork.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest class</class-id> <category>Testing</category><body package="SUnitXProcTests" selector="isAbstract">isAbstract	"I am data for another test and should only be run programmatically."	^false</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id> <category>running</category><body package="SUnitXProcTests" selector="run:">run: aResult	"Restore standard test behaviour as my purpose is only to check that the tests of my superclass (a cross-process test), returns the appropriate result."	aResult runCase: self.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>ui-passing</category><body package="SUnitXProcTests" selector="testWindowProcessThreadsUIEvent">testWindowProcessThreadsUIEvent	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	window component invalidateNow] uiEvent.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] uiEvent</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>ui-passing</category><body package="SUnitXProcTests" selector="testWindowProcessThreadsUIEventNow">testWindowProcessThreadsUIEventNow	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	window component invalidateNow] uiEventNow.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] uiEventNow</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id> <category>ui failing</category><body package="SUnitXProcTests" selector="testEventError">testEventError	self testErrorInSubthread.</body></methods><methods><class-id>XProgramming.SUnit.ProcrastinatingSemaphoreTests</class-id> <category>running</category><body package="SUnitXProcTests" selector="testStartingWithWaiting2">testStartingWithWaiting2	| finished1 finished2 |	finished1 := finished2 := false.	self addProc: 			[sem wait.			finished1 := true].	self addProc: 			[sem wait.			finished2 := true].	self deny: finished1 | finished2.	sem unsignal.	sem signal.	self deny: finished1 | finished2.	sem unsignal.	sem signal.	self deny: finished1 | finished2.	sem signal.	self assert: finished1.	self deny: finished2.	sem unsignal.	sem signal.	self deny: finished2.	sem signal.	self assert: finished2.	self assert: sem excessSignals = 0.	self assert: (procs allSatisfy: [:p | p isTerminated])</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>ui-passing</category><body package="SUnitXProcTests" selector="testWindowProcessThreadsUIEventNowSentToWindowWithOwnWindowManager">testWindowProcessThreadsUIEventNowSentToWindowWithOwnWindowManager	| model window |	[model := (window := [CrossProcessTestWindow open window] 						on: GetWindowManagerUsagePolicy						do: [:ex | ex resume: MakeNewWindowManagerUsagePolicy new]) model.	[(Delay forMilliseconds: 500) wait.	window component invalidateNow] 			uiEventNowFor: window.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] 			fork.	[(Delay forMilliseconds: 500) wait] uiEventNowFor: window.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCTest</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testLowerPrioritySubthread">testLowerPrioritySubthread	"Failure in both a subthread and the main thread, error in another."	self testMoreSeriousInSubthread.</body></methods><methods><class-id>XProgramming.SUnit.ProcrastinatingSemaphoreTests</class-id> <category>running</category><body package="SUnitXProcTests" selector="testStartingWithProcrastination">testStartingWithProcrastination	| finished |	finished := false.	sem		unsignal;		unsignal.	self addProc: 			[sem wait.			finished := true].	self deny: finished.	sem signal.	self deny: finished.	sem signal.	self deny: finished.	sem signal.	self assert: finished.	self assert: sem excessSignals = 0.	self assert: (procs allSatisfy: [:p | p isTerminated])</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>ui-passing</category><body package="SUnitXProcTests" selector="testPrematureTerminatedUISubprocess">testPrematureTerminatedUISubprocess	| model window subprocess |	[model := (window := CrossProcessTestWindow open window) model.	subprocess :=		[self deny: model isNil description: 'Subthread did not start when it should'.		window component invalidateNow.		(Delay forSeconds: 10) wait.		self assert: model isNil description: 'Subthread did not terminated when it should']			fork.	(Delay forMilliseconds: 500) wait.	subprocess terminate.	model closeAndUnschedule.	model := nil] fork.	[(Delay forMilliseconds: 500) wait] fork.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>ui-passing</category><body package="SUnitXProcTests" selector="testWindowProcessThreadsUIEventSentToWindow">testWindowProcessThreadsUIEventSentToWindow	| model window |	[model := (window := CrossProcessTestWindow open window) model.	[(Delay forMilliseconds: 500) wait.	window component invalidateNow] uiEventFor: window.	(Delay forMilliseconds: 500) wait.	model closeAndUnschedule] fork.	[(Delay forMilliseconds: 500) wait] uiEventFor: window</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testErrorInSubthread">testErrorInSubthread	"Force an error in a subthread launched by this test."	[3 zork] fork.</body></methods><methods><class-id>XProgramming.SUnit.CrossProcessTCData</class-id> <category>non-ui</category><body package="SUnitXProcTests" selector="testLowerPrioritySubthread">testLowerPrioritySubthread	"Failure in one subthread and main thread, error in sub-subthread."	[self testErrorInSubthread] forkAt: Processor systemRockBottomPriority.	self testFailureInSubthread.	self assert: false		description: 'A subthread''s error should have replaced both this failure and a subthread''s failure in the result'.</body></methods><component-property><name>SUnitXProcTests</name> <type>package</type><property>comment</property> <value>'Each CrossProcessTCTest creates and runs the CrossProcessTCData superclass test with the same selector.  If a pass is expected, the subclass needs no test method (shouldInheritSelectors ensures its test suite has all the superclass'' test selectors;  subclass setUp does all the checks needed);  otherwise, the subclass'' test checks the cross-process test result returned by the superclass.Thanks to Michael Lucas-Smith for UI test suggestions.'</value></component-property><component-property><name>SUnitXProcTests</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('SUnitXProcPatterns' ''))</value></component-property><component-property><name>SUnitXProcTests</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'SUnitXProcPatterns' ''))</value></component-property><component-property><name>SUnitXProcTests</name> <type>package</type><property>comment</property> <value>'Each CrossProcessTCTest creates and runs the CrossProcessTCData superclass test with the same selector.  If a pass is expected, the subclass needs no test method (shouldInheritSelectors ensures its test suite has all the superclass'' test selectors;  subclass setUp does all the checks needed);  otherwise, the subclass'' test checks the cross-process test result returned by the superclass.Thanks to Michael Lucas-Smith for UI test suggestions.'</value></component-property><pundle-loaded><name>SUnitUtilities</name><type>bundle</type><primaryKey>26496</primaryKey><databaseId>'psql_public_cst'</databaseId></pundle-loaded><do-it>TestRunner open</do-it><methods><class-id>TreeTest</class-id> <category>As yet unclassified</category><body package="test" selector="testChildren">testChildren | tree childA childB|  tree := Tree new.  tree value: 0. childA :=Tree new: 1.  childB :=Tree new: 2. tree addChild: childA. tree addChild: childB. self assert: (tree children asOrderedCollection = (OrderedCollection with: childA with:childB))</body></methods><component-created><name>RBSUnitExtensions</name> <type>package</type></component-created><class><name>SUnitCodeToolSelectionPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeToolSelectionPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sourceSelectionPolicy </inst-vars><class-inst-vars></class-inst-vars><imports>			private XProgramming.SUnit.*			</imports><category>Browser-Code Tool Selection Policies</category><attributes><package>RBSUnitExtensions</package></attributes></class><comment><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id><body>Determines whether the wrapped source CodeTool, or a wrapping of it within the SUnitCodeTool, should be displayed when source is selected in the navigator.Instance Variables:	sourceSelectionPolicy	&lt;CodeToolSelectionPolicy&gt;	the wrapped source selection policy, which determines the source tool class that this policy wraps, if the selection includes any tests, or not if it does not.</body></comment><class><name>SUnitCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeTool testCount defects </inst-vars><class-inst-vars></class-inst-vars><imports>			private XProgramming.SUnit.*			</imports><category>Browser-Code Tools</category><attributes><package>RBSUnitExtensions</package></attributes></class><comment><class-id>Refactory.Browser.SUnitCodeTool</class-id><body>An addition to the Browser's set of CodeTools.The tool allows Run, Debug, or Profile of concrete subclasses of TestCase, by single or multi-select of individual test selectors, classes, protocols, packages, parcels or categories.  The tool obeys the #isAbstract and #shouldInheritSelectors directives on individual classes, allowing a concrete class to inherit either all or none of the test selectors in its superclass hierarchy (up to, but not including TestCase).Note that the test selector inheritance feature of the TestCase class is, contrary to standard Smalltalk expectations, NOT automatic.  A class must explicitly specify that it is to be considered an abstract test case (#isAbstract) or that, as a concrete class, it wishes to inherit tests from its superclasses (#shouldInheritSelectors).  The directive #shouldInheritSelectors is meaningless (and ignored) for abstract test cases, since their test selectors cannot be run directly from the abstract class.Instance Variables:	codeTool		&lt;CodeTool&gt;					the tool	testCount		&lt;Integer&gt;						the number of tests the selected code unit contains	defects		&lt;Collection of: TestCase&gt;	failing or erroring tests</body></comment><shared-variable><name>DefaultSourceSelectionPolicy</name><environment>Refactory.Browser.SUnitCodeTool</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>RBSUnitExtensions</package></attributes></shared-variable><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id> <category>converting</category><body package="RBSUnitExtensions" selector="replaceSameNamePolicy">replaceSameNamePolicy	^sourceSelectionPolicy := super replaceSameNamePolicy</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id> <category>converting</category><body package="RBSUnitExtensions" selector="unwrapWrappedPolicy">unwrapWrappedPolicy	"Find the policy that equals me and present the policy it wraps to it as its replacement."	self replaceBasePolicyWith: sourceSelectionPolicy.</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id> <category>converting</category><body package="RBSUnitExtensions" selector="wrappedPolicy">wrappedPolicy	^sourceSelectionPolicy.</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>initialize-release</category><body package="RBSUnitExtensions" selector="release">release	codeTool release.	codeTool := nil.	super release</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy class</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="addSelectionPolicy">addSelectionPolicy	| inst | inst := self new.	^CodeModel defaultSelectionPolicies		detect: [:each | each = inst]		ifNone: [CodeModel						resetAllSelectionPoliciesWarning:							inst replaceSameNamePolicy]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy class</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="removeSelectionPolicy">removeSelectionPolicy	| inst | inst := self new.	^CodeModel resetAllSelectionPoliciesWarning:		(CodeModel defaultSelectionPolicies			detect: [:each | each = inst]			ifNone: [^inst]) unwrapWrappedPolicy</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy class</class-id> <category>class initialization</category><body package="RBSUnitExtensions" selector="obsolete">obsolete	CodeModel removeDependent: self.	self removeSelectionPolicy.	super obsolete.</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>initialize-release</category><body package="RBSUnitExtensions" selector="codeModel:">codeModel: aCodeModel	super codeModel: aCodeModel.	self updateContents</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="toolClass">toolClass	^self hasTestsSelected		ifTrue: [SUnitCodeTool]		ifFalse: [sourceSelectionPolicy toolClass]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="wrappedCodeToolClass">wrappedCodeToolClass	^codeModel selectionPolicy wrappedPolicy toolClass</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy class</class-id> <category>class initialization</category><body package="RBSUnitExtensions" selector="initialize">initialize	(CodeModel dependents includes: self)		ifFalse: [CodeModel addDependent: self].	self addSelectionPolicy.</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="updateContents">updateContents	| class |	class := self wrappedCodeToolClass.	class == codeTool class ifFalse: [self installCodeTool: class].	codeTool updateContents.	self		updateTestLabel;		updateButtons</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="testCasesForSelectors:">testCasesForSelectors: selectors 	| testSelectors |	testSelectors := self testSelectorsForClass: self selectedClass.	^(selectors select: [:each | testSelectors includes: each]) 		collect: [:each | self selectedClass selector: each]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="updateTestLabel">updateTestLabel	| label |	self isAbstractClassSelected		ifTrue: [ 			self updateForAbstract.			label := (#NotRunAbstractTest &lt;&lt; #browser &gt;&gt; 'Abstract test class, cannot run') ] 		ifFalse: [			self updateForNotRun.			label := (#NotRunC1pTests &lt;&lt; #browser &gt;&gt; 'Not run: &lt;1p&gt; tests') 							expandMacrosWith: self testCases size ].	self setTestLabel: label</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="updateDefectButtons">updateDefectButtons	| enable |	enable := self defectsExist.	#(listDefects runDefects) do:		[:each | 	(self wrapperAt: each) isEnabled: enable]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>actions</category><body package="RBSUnitExtensions" selector="debugTests">debugTests	| failed |	self shouldNotRunTests ifTrue: [^self].	self updateForNotRun.	self setTestLabel: (#Debugging &lt;&lt; #browser &gt;&gt; 'Debugging').	failed := false.	testCount := self testCases size.	[[self testCases do: 		[:each | 		each debug.			(testCount notNil and: [testCount &gt; 0]) ifTrue:			[testCount := testCount - 1.			self setTestLabel: ((#TestsRemaining1p &lt;&lt; #browser&gt;&gt; 'Tests Remaining : &lt;1p&gt;') expandMacrosWith: testCount)]]] 		on: TestResult failure , TestResult error		do: 			[:ex | 			failed := true.			ex pass]] 			ifCurtailed: [self setFailedLabel].	failed ifTrue: [self setFailedLabel] ifFalse: [self setPassedLabel]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="menu">menu	^codeTool menu</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id> <category>initialize-release</category><body package="RBSUnitExtensions" selector="for:">for: aCodeModel 	super for: aCodeModel.	sourceSelectionPolicy for: aCodeModel</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="updateForFailed">updateForFailed	self setLabelColor: ColorValue red</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="setPassedLabel">setPassedLabel	self setTestLabel: (#Passed &lt;&lt; #browser &gt;&gt; 'Passed').	self updateForPassed</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="update:with:from:">update: aspectSymbol with: parameter from: sender	(testCount notNil and: [testCount &gt; 0]) ifTrue:		[testCount := testCount - 1.		self setTestLabel: ((#TestsRemaining1p &lt;&lt; #browser &gt;&gt; 'Tests Remaining : &lt;1p&gt;') expandMacrosWith: testCount)].</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="testSelectorsForClass:">testSelectorsForClass: aClass	"Answer an OrderedCollection of runnable test selectors for aClass,		obeying the #isAbstract and #shouldInheritSelectors designation,		provided it is a subclass of TestCase."	^ ((aClass inheritsFrom: TestCase) not or: [ aClass isAbstract ])			ifTrue: [ OrderedCollection new ]			ifFalse: [ aClass shouldInheritSelectors				ifTrue: [aClass allTestSelectors]				ifFalse: [aClass testSelectors] ].</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="updateForAbstract">updateForAbstract	self setLabelColor: nil</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="setTestLabel:">setTestLabel: label 	| widget |	self builder isNil ifTrue: [^self].	widget := self builder componentAt: #label.	widget isNil ifTrue: [^self].	widget widget labelString: label.	widget repairDamage</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="pundleTestCases">pundleTestCases	"Answer all runnable test cases for all classes in			the selected pundle or pundles."	^ self pundles inject: Set new		into: 			[:sum :eachPundle | 			sum				addAll: (self testCasesFor: (eachPundle definedClasses));				yourself ].</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="updateForPassed">updateForPassed	self setLabelColor: ColorValue green.	defects := nil</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="pundleTestCasesExist">pundleTestCasesExist	"Answer if runnable test cases exist in classes in the selected pundle or pundles."	^self pundles anySatisfy:		[:any |		self testCasesExistInAny: any definedClasses]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>testing</category><body package="RBSUnitExtensions" selector="defectsExist">defectsExist	^defects notNil and: [defects notEmpty]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="categoryTestCases">categoryTestCases	"Answer all runnable test cases for all classes in		the selected category or categories."	^self testCasesFor: (TestCase allSubclasses 				select: [:each | self categories includes: each category])</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="selectorTestCases">selectorTestCases	"Answer all runnable test cases for the selected selectors."	^self testCasesForSelectors: self selectors</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="setLabelColor:">setLabelColor: color 	| label |	self builder isNil ifTrue: [^self].	label := self builder componentAt: #label.	label isNil ifTrue: [^self].	label lookPreferences: (label lookPreferences backgroundColor: color)</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="codeTool">codeTool	^codeTool</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>actions</category><body package="RBSUnitExtensions" selector="listDefects">listDefects	| testToDebug |	(defects isNil or: [defects isEmpty]) ifTrue: [^self].	testToDebug := Dialog 		choose: (#ChooseATestToDebug &lt;&lt; #browser &gt;&gt; 'Choose A Test To Debug')		fromList: (defects collect: [:each | each printString])		values: defects		lines: 8 		cancel: []		for: Dialog defaultParentWindow.	testToDebug ifNotNil: [:value | value debug]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="classTestCases">classTestCases	"Answer all runnable test cases for the selected class or classes."	^self testCasesFor: self selectedClasses.</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id> <category>copying</category><body package="RBSUnitExtensions" selector="postCopy">postCopy	super postCopy.	sourceSelectionPolicy := sourceSelectionPolicy copy</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>actions</category><body package="RBSUnitExtensions" selector="runDefects">runDefects	| suite result |	(defects isNil or: [defects isEmpty]) ifTrue: [^self].	suite := TestSuite new.	defects do: [:each | suite addTest: each].	testCount := defects size.	suite addDependent: self.	result := [suite run] ifCurtailed: [self setTestLabel: (#Failed &lt;&lt; #browser &gt;&gt; 'Failed')].	self 		setTestLabel: (#x1QPassedORFailed2pRun3pFailed4pErrors &lt;&lt; #browser &gt;&gt; '&lt;1?Passed:Failed&gt;: &lt;2p&gt; run, &lt;3p&gt; failed, &lt;4p&gt; errors'				expandMacrosWith: result hasPassed				with: result runCount				with: result failureCount				with: result errorCount).	codeModel navigate.	result hasPassed 		ifTrue: [self updateForPassed]		ifFalse: 			[defects := result defects.			self updateForFailed].	self updateDefectButtons</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="codeComponentIncludesTest:">codeComponentIncludesTest: aCodeComponent 	^aCodeComponent definedClasses anySatisfy: [:each | each inheritsFrom: TestCase]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="parcelTestCases">parcelTestCases	"Answer all runnable test cases for all classes in			the selected parcel or parcels."	^ self parcels inject: Set new		into: 			[ :sum :eachPundle | 			sum				addAll: (self testCasesFor: (eachPundle definedClasses));				yourself ].</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="protocolTestCases">protocolTestCases	"Answer all runnable test cases for the selected protocol or protocols."	^self protocols inject: Set new		into: 			[ :sum :each | 			sum				addAll: (self testCasesForSelectors: 							(self testSelectorsForClass: self selectedClass protocol: each));				yourself ].</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="testCases">testCases	self selector notNil ifTrue: [^self selectorTestCases].	self protocol notNil ifTrue: [^self protocolTestCases].	self selectedClass notNil ifTrue: [^self classTestCases].	self category notNil ifTrue: [^self categoryTestCases].	self parcel notNil ifTrue: [^self parcelTestCases].	self pundle notNil ifTrue: [^self pundleTestCases].	^#()</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>actions</category><body package="RBSUnitExtensions" selector="runTests">runTests	| suite result |	self shouldNotRunTests ifTrue: [^self].	self updateForNotRun.	self setTestLabel: (#Running &lt;&lt; #browser &gt;&gt; 'Running').	suite := TestSuite new.	self testCases do: [:each | suite addTest: each].	testCount := self testCases size.	suite addDependent: self.	result := [suite run] ifCurtailed: 		[self setTestLabel: (#Failed &lt;&lt; #browser &gt;&gt; 'Failed')].	self 		setTestLabel: (#x1QPassedORFailed2pRun3pFailed4pErrors &lt;&lt; #browser &gt;&gt; '&lt;1?Passed:Failed&gt;: &lt;2p&gt; run, &lt;3p&gt; failed, &lt;4p&gt; errors'				expandMacrosWith: result hasPassed				with: result runCount				with: result failureCount				with: result errorCount).	codeModel navigate.	result hasPassed 		ifTrue: [self updateForPassed]		ifFalse: 			[defects := result defects.			self updateForFailed].	self updateDefectButtons</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool class</class-id> <category>interface specs</category><body package="RBSUnitExtensions" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 456 370 1024 768 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -33 1 ) 					#name: #subcanvas 					#flags: 0 					#majorKey: #subcanvas 					#minorKey: #windowSpec 					#clientKey: #codeTool ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 -33 1 -350 1 0 1 ) 					#name: #label 					#style: #large ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -65 1 -30 1 -2 1 -2 1 ) 					#name: #runTests 					#flags: 40 					#model: #runTests 					#label: 					#(#{Kernel.UserMessage} 						#key: #Run 						#defaultString: 'Run' 						#catalogID: #browser ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -130 1 -30 1 -67 1 -2 1 ) 					#name: #debugTests 					#flags: 40 					#model: #debugTests 					#label: 					#(#{Kernel.UserMessage} 						#key: #Debug 						#defaultString: 'Debug' 						#catalogID: #browser ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -195 1 -30 1 -132 1 -2 1 ) 					#name: #profileTests 					#flags: 40 					#model: #profileTests 					#label: 					#(#{Kernel.UserMessage} 						#key: #Profile 						#defaultString: 'Profile' 						#catalogID: #browser ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -270 1 -30 1 -197 1 -2 1 ) 					#name: #listDefects 					#flags: 40 					#model: #listDefects 					#label: 					#(#{Kernel.UserMessage} 						#key: #listDefects 						#defaultString: 'List Defects' 						#catalogID: #browser ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -350 1 -30 1 -272 1 -2 1 ) 					#name: #runDefects 					#flags: 40 					#model: #runDefects 					#label: 					#(#{Kernel.UserMessage} 						#key: #runDefects 						#defaultString: 'Run Defects' 						#catalogID: #browser ) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="updateForNotRun">updateForNotRun	self setLabelColor: nil</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="name">name	^(#Source &lt;&lt; #browser &gt;&gt; 'Source') asString</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="parcelTestCasesExist">parcelTestCasesExist	"Answer if runnable test cases exist in any classes in the selected parcel or parcels."	^self parcels anySatisfy:		[:any |		self testCasesExistInAny: any definedClasses]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>interface opening</category><body package="RBSUnitExtensions" selector="preBuildWith:">preBuildWith: aBuilder 	aBuilder 		subCanvasAt: #subcanvas		at: #windowSpec		put: codeTool class windowSpec.	^super preBuildWith: aBuilder</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="updateRunButtons">updateRunButtons	| canRun |	canRun := self canRunTests.	#(runTests debugTests profileTests) do:		[:each | 		(self wrapperAt: each) isEnabled: canRun].	(self wrapperAt: #profileTests) isEnabled: canRun &amp; self isProfilerLoaded</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="subcanvases">subcanvases	^(OrderedCollection withAll: super subcanvases)		add: codeTool;		yourself</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>testing</category><body package="RBSUnitExtensions" selector="testCasesExist">testCasesExist	self selector notNil ifTrue: [^self selectorTestCases notEmpty].	self protocol notNil ifTrue: [^self protocolTestCases notEmpty].	self selectedClass notNil ifTrue: [^self classTestCases notEmpty].	self category notNil ifTrue: [^self categoryTestCasesExist].	self parcel notNil ifTrue: [^self parcelTestCasesExist].	self pundle notNil ifTrue: [^self pundleTestCasesExist].	^#()</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="hasTestsSelected">hasTestsSelected	(codeModel selectedClasses 		anySatisfy: [:each | each inheritsFrom: TestCase]) ifTrue: [^true].	codeModel objectNames notEmpty ifTrue: [^false].	(codeModel categories 		anySatisfy: [:each | self categoryIncludesTest: each]) ifTrue: [^true].	(codeModel parcels 		anySatisfy: [:each | self codeComponentIncludesTest: each]) ifTrue: [^true].	^codeModel pundles 		anySatisfy: [:each | self codeComponentIncludesTest: each]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="activeTool">activeTool	^codeTool activeTool</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>actions</category><body package="RBSUnitExtensions" selector="profileTests">profileTests	| profiler |	profiler := #{TimeProfiler} valueOrDo: [nil].	profiler isNil 		ifTrue: [^self warn: (#ProfilerNotLoadedLoad &lt;&lt; #browser &gt;&gt; 'Profiler not loaded. Load the "AT Profiling" parcel.')].	profiler profile: [self runTests]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="installCodeTool:">installCodeTool: aClass 	| newTool |	newTool := aClass codeModel: codeModel.	self installSubcanvasIn: #subcanvas using: newTool.	codeTool release.	codeTool := newTool.	codeTool updateContents</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool class</class-id> <category>private-interface building</category><body package="RBSUnitExtensions" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="updateButtons">updateButtons	builder isNil ifTrue: [^self].	self		updateRunButtons;		updateDefectButtons</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>testing</category><body package="RBSUnitExtensions" selector="canRunTests">canRunTests	^self isAbstractClassSelected not and: [self testCasesExist]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="testCasesFor:">testCasesFor: classesCollection	"Answer all runnable test cases for the collection of classes."	^classesCollection 		inject: Set new		into: 			[:sum :each | 			sum				addAll: ((self testSelectorsForClass: each) collect: [:sel | each selector: sel]);				yourself]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>testing</category><body package="RBSUnitExtensions" selector="isAbstractClassSelected">isAbstractClassSelected	^self selectedClass notNil		and: [(self selectedClass respondsTo: #isAbstract) 		and: [self selectedClass isAbstract]]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>testing</category><body package="RBSUnitExtensions" selector="isProfilerLoaded">isProfilerLoaded	#{TimeProfiler} valueOrDo: [^false].	^true</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>testing</category><body package="RBSUnitExtensions" selector="shouldNotRunTests">shouldNotRunTests	^self canRunTests not</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="testCasesExistInAny:">testCasesExistInAny: classesCollection	"Answer if there are any test cases in the classes listed in the argument."	^classesCollection anySatisfy:		[:any | (self testSelectorsForClass: any) notEmpty]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="testSelectorsForClass:protocol:">testSelectorsForClass: aClass protocol: aProtocol	"Answer an OrderedCollection of runnable test selectors in aProtocol for aClass,		obeying the #isAbstract and #shouldInheritSelectors designation,		provided it is a subclass of TestCase."	^ ((aClass inheritsFrom: TestCase) not or: [ aClass isAbstract ])			ifTrue: [ OrderedCollection new ]			ifFalse: [ aClass shouldInheritSelectors				ifTrue: [ (aClass withAllSuperclasses)							removeAll: TestCase withAllSuperclasses;							inject: Set new into: [ :sum :each | 									sum addAll: (self environment selectorsFor: aProtocol in: each);									yourself ] ]				ifFalse: [ self environment selectorsFor: aProtocol in: aClass ] ].</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="categoryTestCasesExist">categoryTestCasesExist	"Answer if there are runnable test cases in classes in the selected category or categories."	^self testCasesExistInAny:		(TestCase allSubclasses 			select: [:each | self categories includes: each category])</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="updateDisplay">updateDisplay	super updateDisplay.	self		updateTestLabel;		updateButtons</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>private</category><body package="RBSUnitExtensions" selector="setFailedLabel">setFailedLabel	self setTestLabel: (#Failed &lt;&lt; #browser &gt;&gt; 'Failed').	self updateForFailed</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="categoryIncludesTest:">categoryIncludesTest: aCategory 	^TestCase allSubclasses anySatisfy: [:each | aCategory = each category]</body></methods><class><name>SUnitCodeToolSelectionPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeToolSelectionPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sourceSelectionPolicy </inst-vars><class-inst-vars></class-inst-vars><imports>			private XProgramming.SUnit.*			</imports><category>Browser-Code Tool Selection Policies</category><attributes><package>RBSUnitExtensions</package></attributes></class><comment><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id><body>See superclass.Determines what CodeTool should be installed whenever a selection is made in the navigator.Instance Variables:	sourceSelectionPolicy	&lt;CodeToolSelectionPolicy&gt;	the sourceSelectionPolicy</body></comment><class><name>SUnitCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeTool selectionPolicy testCount defects </inst-vars><class-inst-vars></class-inst-vars><imports>			private XProgramming.SUnit.*			</imports><category>Browser-Code Tools</category><attributes><package>RBSUnitExtensions</package></attributes></class><comment><class-id>Refactory.Browser.SUnitCodeTool</class-id><body>An addition to the Browser's set of CodeTools.The tool allows Run, Debug, or Profile of concrete subclasses of TestCase, by single or multi-select of individual test selectors, classes, protocols, packages, parcels or categories.  The tool obeys the #isAbstract and #shouldInheritSelectors directives on individual classes, allowing a concrete class to inherit either all or none of the test selectors in its superclass hierarchy (up to, but not including TestCase).Note that the test selector inheritance feature of the TestCase class is, contrary to standard Smalltalk expectations, NOT automatic.  A class must explicitly specify that it is to be considered an abstract test case (#isAbstract) or that, as a concrete class, it wishes to inherit tests from its superclasses (#shouldInheritSelectors).  The directive #shouldInheritSelectors is meaningless (and ignored) for abstract test cases, since their test selectors cannot be run directly from the abstract class.Instance Variables:	codeTool		&lt;CodeTool&gt;					the tool	selectionPolicy	&lt;CodeToolSelectionPolicy&gt;	the corresponding selectionPolicy</body></comment><methods><class-id>Refactory.Browser.SUnitCodeTool class</class-id> <category>class initialization</category><body package="RBSUnitExtensions" selector="addSelectionPolicy">addSelectionPolicy	| newPolicies |	newPolicies := CodeModel defaultSelectionPolicies collect: 					[:each | 					(each name asString = (#Source &lt;&lt; #browser &gt;&gt; 'Source') asString and: [each class ~= SUnitCodeToolSelectionPolicy]) 						ifTrue: 							[self sourceSelectionPolicy: each.							SUnitCodeToolSelectionPolicy on: each]						ifFalse: [each]].	CodeModel defaultSelectionPolicies: newPolicies</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>initialize-release</category><body package="RBSUnitExtensions" selector="codeModel:">codeModel: aCodeModel 	super codeModel: aCodeModel.	selectionPolicy := (DefaultSourceSelectionPolicy copy)				for: codeModel;				yourself.	self updateContents</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool class</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="sourceSelectionPolicy:">sourceSelectionPolicy: aCodeToolSelectionPolicy 	DefaultSourceSelectionPolicy := aCodeToolSelectionPolicy</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool class</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="sourceSelectionPolicy">sourceSelectionPolicy	^DefaultSourceSelectionPolicy</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="updateContents">updateContents	| class |	class := self codeModelClass.	class == codeTool class ifFalse: [self installCodeTool: class].	codeTool updateContents.	self		updateTestLabel;		updateButtons</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id> <category>accessing</category><body package="RBSUnitExtensions" selector="toolClass">toolClass	^self hasTestsSelected 		ifTrue: [SUnitCodeTool]		ifFalse: [sourceSelectionPolicy toolClass]</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool class</class-id> <category>class initialization</category><body package="RBSUnitExtensions" selector="initialize">initialize	(CodeModel dependents includes: self) 		ifFalse: [CodeModel addDependent: self].	self addSelectionPolicy</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool class</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="update:with:from:">update: anAspectSymbol with: aParameter from: aSender 	(aSender = CodeModel and: [anAspectSymbol = #selectionPolicies]) 		ifTrue: [^self addSelectionPolicy].	^super 		update: anAspectSymbol		with: aParameter		from: aSender</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy</class-id> <category>initialize-release</category><body package="RBSUnitExtensions" selector="on:">on: aSelectionPolicy 	sourceSelectionPolicy := aSelectionPolicy</body></methods><methods><class-id>Refactory.Browser.SUnitCodeToolSelectionPolicy class</class-id> <category>instance creation</category><body package="RBSUnitExtensions" selector="on:">on: aCodeToolSelectionPolicy 	^(self new)		on: aCodeToolSelectionPolicy;		yourself</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool class</class-id> <category>class initialization</category><body package="RBSUnitExtensions" selector="obsolete">obsolete	CodeModel removeDependent: self.	self removeSelectionPolicy.	super obsolete</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool class</class-id> <category>class initialization</category><body package="RBSUnitExtensions" selector="removeSelectionPolicy">removeSelectionPolicy	| newPolicies |	self sourceSelectionPolicy isNil ifTrue: [^self].	newPolicies := CodeModel defaultSelectionPolicies collect: 					[:each | 					each name asString = (#Source &lt;&lt; #browser &gt;&gt; 'Source') asString ifTrue: [self sourceSelectionPolicy] ifFalse: [each]].	CodeModel defaultSelectionPolicies: newPolicies</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>updating</category><body package="RBSUnitExtensions" selector="codeModelClass">codeModelClass	^selectionPolicy toolClass</body></methods><methods><class-id>Refactory.Browser.SUnitCodeTool</class-id> <category>initialize-release</category><body package="RBSUnitExtensions" selector="release">release	selectionPolicy := nil.	codeTool release.	codeTool := nil.	super release</body></methods><do-it>Refactory.Browser.SUnitCodeToolSelectionPolicy class removeSelector: #initialize</do-it><do-it>Refactory.Browser.SUnitCodeToolSelectionPolicy class removeSelector: #addSelectionPolicy</do-it><do-it>Refactory.Browser.SUnitCodeToolSelectionPolicy class removeSelector: #removeSelectionPolicy</do-it><do-it>Refactory.Browser.SUnitCodeToolSelectionPolicy class removeSelector: #obsolete</do-it><do-it>Refactory.Browser.SUnitCodeToolSelectionPolicy removeSelector: #unwrapWrappedPolicy</do-it><do-it>Refactory.Browser.SUnitCodeToolSelectionPolicy removeSelector: #wrappedPolicy</do-it><do-it>Refactory.Browser.SUnitCodeTool removeSelector: #wrappedCodeToolClass</do-it><do-it>Refactory.Browser.SUnitCodeToolSelectionPolicy removeSelector: #replaceSameNamePolicy</do-it><component-property><name>RBSUnitExtensions</name> <type>package</type><property>comment</property> <value>'This package adds an extension to the Source code tool. Whenever a test case is selected, it allows you to run that test case from the browser.'</value></component-property><component-property><name>RBSUnitExtensions</name> <type>package</type><property>version</property> <value>'7.5'</value></component-property><component-property><name>RBSUnitExtensions</name> <type>package</type><property>packageName</property> <value>'RBSUnitExtensions'</value></component-property><component-property><name>RBSUnitExtensions</name> <type>package</type><property>comment</property> <value>'This package adds an extension to the Source code tool. Whenever a test case is selected, it allows you to run that test case from the browser.'</value></component-property><component-property><name>RBSUnitExtensions</name> <type>package</type><property>parcelName</property> <value>'RBSUnitExtensions'</value></component-property><component-property><name>RBSUnitExtensions</name> <type>package</type><property>notice</property> <value>'Copyright © 2005-1999 Cincom Systems, Inc.  All Rights Reserved.'</value></component-property><component-property><name>RBSUnitExtensions</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'Browser-BrowserUI' '') #(#any 'SUnit' ''))</value></component-property><component-property><name>RBSUnitExtensions</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('Browser-BrowserUI' '') #('SUnit' ''))</value></component-property><pundle-loaded><name>RBSUnitExtensions</name><type>package</type><primaryKey>53818</primaryKey><databaseId>'psql_public_cst'</databaseId></pundle-loaded><class><name>Llil</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class><methods><class-id>XProgramming.SUnit.Llil</class-id> <category>initialize-release</category><body package="SUnit" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>XProgramming.SUnit.Llil class</class-id> <category>instance creation</category><body package="SUnit" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><do-it>XProgramming.SUnit.Llil removeFromSystem</do-it><component-created><name>Refactory</name> <type>package</type></component-created><parcel-loaded><name>Refactory</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'obsolete' 'parcels' 'Refactory.pcl'))</filename></parcel-loaded><component-created><name>SmaCC Runtime</name> <type>package</type></component-created><parcel-loaded><name>SmaCC Runtime</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'goodies' 'other' 'SmaCC' 'SmaCC Runtime.pcl'))</filename></parcel-loaded><component-created><name>ExtraEmphases</name> <type>package</type></component-created><parcel-loaded><name>ExtraEmphases</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'goodies' 'other' 'ExtraEmphases.pcl'))</filename></parcel-loaded><component-created><name>RBCodeHighlighting</name> <type>package</type></component-created><name-space><name>CodeHighlighter</name><environment>Refactory</environment><private>false</private><imports>			private Smalltalk.*			private Refactory.Browser.*			private Refactory.SmaCC.*			</imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></name-space><class><name>CodeHighlightingSettings</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isUnderlineHolder isStrikeoutHolder methodHolder isBoldHolder isJaggedEdgeHolder isItalicHolder hasColorHolder typeList oldStyles newStyles refreshDelayHolder oldDelay highlightDebugger </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>RBCodeHighlighting</package></attributes></class><class><name>CodeHighlightingParser</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.SmaCC.SmaCCParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text string class temps args namespace </inst-vars><class-inst-vars>stylesToRemove styles </class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><class><name>HighlightingTextEditorController</name><environment>Refactory.CodeHighlighter</environment><super>UI.TextEditorController</super><private>false</private><indexed-type>none</indexed-type><inst-vars>highlightingProcess classBlock isForMethod namespaceBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><class><name>CodeHighlightingScanner</name><environment>Refactory.CodeHighlighter</environment><super>Refactory.SmaCC.SmaCCScanner</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>RBCodeHighlighting</package></attributes></class><shared-variable><name>RefreshDelay</name><environment>Refactory.CodeHighlighter</environment><private>false</private><constant>false</constant><category>Settings</category><initializer>250</initializer><attributes><package>RBCodeHighlighting</package></attributes></shared-variable><shared-variable><name>HighlightDebugger</name><environment>Refactory.CodeHighlighter</environment><private>false</private><constant>false</constant><category>Settings</category><initializer>true</initializer><attributes><package>RBCodeHighlighting</package></attributes></shared-variable><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="highlightDebugger">highlightDebugger	^HighlightDebugger ifNil: [true]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatExpression:">formatExpression: aText 	| parser |	parser := self on: (ReadStream on: aText).	parser text: aText.	parser setStartingState: self startingStateForSequenceNode.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>CraftedSmalltalk.DebuggerClient</class-id> <category>private</category><body package="RBCodeHighlighting" selector="textController">textController	^ Refactory.CodeHighlighter.CodeHighlightingParser highlightDebugger		ifTrue: 		[	self textWidget controller beHighlightingWithSettings: 				[: newController |					newController classBlock: [ service context ifNotNil: [: c | c mclass ]];						namespaceBlock: [ self doItEnvironment ]				]		]		ifFalse: [ self textWidget controller ]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend3:">reduceActionForPrimitiveMessageSend3: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatComment:">formatComment: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_comment</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBinaryMessageSend1:">reduceActionForBinaryMessageSend1: nodes 	^self formatMessage: (nodes at: 2) to: nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="addStyle:">addStyle: aSymbol 	self selectedStyle isNil ifTrue: [^self].	(self selectedStyle includes: aSymbol) ifTrue: [^self].	self setStyle: (self selectedStyle copyWith: aSymbol)</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="getIntervalForUpdateFromOriginal:withNew:">getIntervalForUpdateFromOriginal: oldText withNew: newText 	| start stop |	oldText size ~= newText size 		ifTrue: 			["this should not happen"			^1 to: oldText size].	start := 1.	stop := oldText size.	"get the first difference in the runs and select the previous word"	[start &lt;= stop and: [(oldText runs at: start) == (newText runs at: start)]] 		whileTrue: [start := start + 1].	start := self move: start homeWithCtrl: false.	"get the first difference from the end in the runs and select the following word"	[stop &gt; start and: [(oldText runs at: stop) == (newText runs at: stop)]] 		whileTrue: [stop := stop - 1].	stop := self move: stop endWithCtrl: false.	^start to: stop</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatReturn:">formatReturn: aSmaCCToken	self formatToken: aSmaCCToken with: #code_return</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="stylesToRemove">stylesToRemove	^stylesToRemove isNil 		ifTrue: 			[stylesToRemove := (OrderedCollection new)						addAll: self stylesDictionary keys;						add: #bold;						add: #underline;						asArray]		ifFalse: [stylesToRemove]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessageSend1:">reduceActionForKeywordMessageSend1: nodes 	^self formatMessage: (nodes at: 2) to: nil</body></methods><methods><class-id>Tools.AbstractWorkspace</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="styleSmalltalkCode">styleSmalltalkCode	self currentPage removeAllActionsWithReceiver: self.	self currentPage styleSmalltalkCode</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private-error handling</category><body package="RBCodeHighlighting" selector="handleError:">handleError: anInteger 	self isEOFToken 		ifTrue: 			[string size = 0 				ifFalse: [self formatSyntaxErrorFrom: string size to: string size]]		ifFalse: 			[self formatSyntaxError.			self hasErrorHandler 				ifFalse: 					[self formatSyntaxErrorFrom: currentToken startPosition to: string size]].	^super handleError: anInteger</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="nameId">nameId	^20</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="isStylingSmalltalkCode">isStylingSmalltalkCode	self myEventTable ifNil: [^true].	^(self myEventTable includesKey: #dontStyleSmalltalkCode) not</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatMethod:">formatMethod: aText 	| parser |	parser := self on: (ReadStream on: aText).	parser text: aText.	parser setStartingState: self defaultStartingState.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="revertController:">revertController: aController 	| new |	aController class = self ifFalse: [^aController].	new := superclass new.	1 to: superclass instSize		do: [:i | new instVarAt: i put: (aController instVarAt: i)].	new become: aController</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-tables</category><body package="RBCodeHighlighting" selector="transitionTable">transitionTable	^#(#[1 0 13 0 20 0 17 0 24 0 21 0 26 0 25 0 35 0 29 0 57 0 33 0 59 0 37 0 67 0 41 0 68]#[1 0 45 0 1 0 98 0 4 0 98 0 5 0 98 0 7 0 98 0 12 0 98 0 13 0 49 0 14 0 98 0 15 0 98 0 16 0 98 0 17 0 98 0 20 0 98 0 21 0 98 0 22 0 98 0 23 0 98 0 29 0 98 0 30 0 53 0 38 0 57 0 58 0 98 0 66 0 98 0 67]#[0 0 62 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 29 0 30 0 66 0 67]#[0 0 61 0 20]#[0 0 65 0 20]#[1 0 6 0 1 0 6 0 4 0 6 0 5 0 6 0 7 0 6 0 9 0 6 0 12 0 6 0 13 0 6 0 14 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 6 0 29 0 6 0 30 0 69 0 33 0 73 0 44 0 6 0 66 0 6 0 67]#[0 0 0 0 66]#[1 0 6 0 1 0 6 0 4 0 6 0 5 0 6 0 7 0 6 0 9 0 6 0 12 0 6 0 13 0 6 0 14 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 77 0 24 0 6 0 29 0 6 0 30 0 69 0 33 0 81 0 44 0 6 0 66 0 6 0 67]#[1 0 6 0 1 0 6 0 4 0 6 0 5 0 6 0 7 0 6 0 9 0 6 0 12 0 6 0 13 0 6 0 14 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 85 0 24 0 6 0 29 0 6 0 30 0 69 0 33 0 89 0 44 0 6 0 66 0 6 0 67]#[1 0 6 0 1 0 6 0 4 0 6 0 5 0 6 0 7 0 6 0 9 0 6 0 12 0 6 0 13 0 6 0 14 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 6 0 29 0 6 0 30 0 69 0 33 0 93 0 44 0 6 0 66 0 6 0 67]#[1 0 66 0 1 0 66 0 20 0 97 0 36]#[0 0 102 0 4 0 5 0 7 0 12 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 23 0 29 0 30 0 66 0 67]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 125 0 16 0 129 0 17 0 74 0 18 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 0 157 0 37 0 161 0 39 0 165 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 74 0 66 0 193 0 67 0 197 0 69]#[0 0 0 0 66]#[0 1 58 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 66 0 67]#[0 2 74 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 29 0 30 0 66 0 67]#[1 0 201 0 1 0 101 0 4 0 105 0 5 0 109 0 7 0 205 0 9 0 113 0 12 0 117 0 13 0 209 0 14 0 121 0 15 0 125 0 16 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 0 213 0 37 0 161 0 39 0 165 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 74 0 66 0 193 0 67 0 197 0 69]#[0 1 38 0 66]#[0 0 217 0 20]#[0 1 46 0 66]#[0 0 221 0 20]#[0 1 50 0 66]#[0 1 42 0 66]#[1 0 225 0 1 0 229 0 20]#[1 0 233 0 5 0 237 0 7 0 241 0 17 0 245 0 20 0 249 0 23 0 253 0 24 1 1 0 25 1 5 0 26]#[1 1 98 0 4 1 98 0 5 1 98 0 7 1 98 0 10 1 98 0 12 1 98 0 13 1 98 0 15 1 98 0 17 1 98 0 20 1 98 0 21 1 98 0 22 1 98 0 23 1 98 0 24 1 98 0 25 1 98 0 26 1 98 0 29 1 98 0 30 1 98 0 32 1 9 0 62 1 13 0 67]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 1 17 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[0 2 78 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 82 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 86 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 1 21 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[1 0 45 0 1 0 98 0 4 0 98 0 5 0 98 0 7 0 98 0 12 0 98 0 13 0 49 0 14 0 98 0 15 0 98 0 16 0 98 0 17 0 98 0 18 1 25 0 19 0 98 0 20 0 98 0 21 0 98 0 22 0 98 0 23 0 98 0 29 0 98 0 30 0 53 0 38 1 29 0 42 1 33 0 58 0 98 0 67]#[1 0 234 0 2 0 234 0 6 1 37 0 11 0 234 0 18 0 234 0 20 0 234 0 24 0 234 0 26 0 234 0 66]#[0 2 90 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 94 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 102 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[1 0 238 0 2 0 238 0 6 1 41 0 11 0 238 0 18 0 238 0 20 0 238 0 24 0 238 0 26 0 238 0 66]#[0 2 98 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 1 54 0 18 0 66]#[1 1 45 0 2 0 122 0 18 1 49 0 40 0 122 0 66]#[0 0 110 0 2 0 18 0 66]#[0 0 242 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[0 0 138 0 2 0 6 0 18 0 66]#[1 0 198 0 2 0 198 0 3 0 198 0 6 0 198 0 18 1 53 0 24 1 57 0 26 1 61 0 47 1 65 0 53 1 69 0 54 0 198 0 66]#[1 0 198 0 2 0 198 0 3 0 198 0 6 0 198 0 18 1 73 0 20 1 53 0 24 1 57 0 26 1 77 0 47 1 81 0 52 1 85 0 53 1 89 0 54 0 198 0 66]#[1 0 190 0 2 0 190 0 6 0 190 0 18 1 73 0 20 1 53 0 24 1 57 0 26 1 93 0 52 1 97 0 53 1 101 0 54 0 190 0 66]#[1 0 198 0 2 0 198 0 3 0 198 0 6 0 198 0 18 1 105 0 47 0 198 0 66]#[1 1 109 0 2 1 113 0 16]#[0 0 230 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[1 0 66 0 1 0 66 0 20 1 117 0 36]#[1 0 18 0 2 0 18 0 3 0 18 0 4 0 18 0 5 0 18 0 6 0 18 0 7 0 18 0 8 0 18 0 10 0 18 0 12 0 18 0 13 0 18 0 15 0 18 0 20 0 18 0 21 0 18 0 22 0 18 0 23 0 18 0 24 0 18 0 26 0 18 0 30 1 121 0 34 1 125 0 67]#[1 0 6 0 4 0 6 0 5 0 6 0 7 0 6 0 9 0 6 0 12 0 6 0 13 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 6 0 29 0 6 0 30 1 129 0 33 0 6 0 66 0 6 0 67]#[0 0 174 0 66]#[0 1 62 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 66 0 67]#[0 1 66 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 66 0 67]#[0 0 106 0 4 0 5 0 7 0 12 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 23 0 29 0 30 0 66 0 67]#[0 0 70 0 1 0 20]#[1 1 133 0 20 1 137 0 29]#[1 1 82 0 4 1 82 0 5 1 82 0 6 1 82 0 7 1 82 0 12 1 82 0 13 1 82 0 15 1 82 0 17 1 82 0 20 1 82 0 21 1 82 0 22 1 82 0 23 1 82 0 24 1 82 0 25 1 82 0 26 1 82 0 29 1 82 0 30 1 82 0 32 1 141 0 61 1 145 0 67]#[1 1 70 0 18 1 70 0 21 1 149 0 60 1 153 0 67]#[0 2 110 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 106 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 118 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 122 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 114 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[1 1 157 0 4 1 161 0 5 1 165 0 7 1 169 0 10 1 173 0 12 1 177 0 13 1 181 0 15 0 129 0 17 1 185 0 20 1 189 0 21 1 193 0 22 1 197 0 23 1 201 0 24 1 205 0 25 1 209 0 26 1 213 0 29 1 217 0 30 1 221 0 32 1 225 0 43 1 229 0 65]#[0 1 102 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 233 0 6]#[1 1 237 0 2 0 122 0 18 1 241 0 40 0 122 0 66]#[0 1 245 0 20]#[1 1 249 0 1 1 253 0 14 2 1 0 18 2 5 0 19]#[0 2 9 0 18]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 2 13 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 2 17 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 2 21 0 16 0 129 0 17 0 126 0 18 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 2 25 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 126 0 66 0 197 0 69]#[0 0 78 0 18 0 66]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 2 29 0 20 0 137 0 21 0 141 0 22 0 145 0 23 2 33 0 29 0 153 0 30 0 169 0 43 2 37 0 48 2 41 0 49 2 45 0 50 2 49 0 55 0 197 0 69]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 2 29 0 20 0 137 0 21 0 141 0 22 0 145 0 23 2 33 0 29 0 153 0 30 0 169 0 43 2 53 0 49 2 57 0 50 2 61 0 56 0 197 0 69]#[1 0 182 0 2 2 65 0 3 0 182 0 6 0 182 0 18 0 182 0 66]#[0 0 206 0 2 0 3 0 6 0 18 0 24 0 26 0 66]#[1 1 218 0 2 1 218 0 3 1 218 0 6 1 218 0 18 2 69 0 24 1 218 0 66]#[0 1 2 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[1 0 186 0 2 2 65 0 3 0 186 0 6 0 186 0 18 0 186 0 66]#[0 0 218 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[0 0 210 0 2 0 3 0 6 0 18 0 24 0 26 0 66]#[1 1 222 0 2 1 222 0 3 1 222 0 6 1 222 0 18 2 69 0 24 1 222 0 66]#[0 0 222 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[0 0 214 0 2 0 3 0 6 0 18 0 24 0 26 0 66]#[1 1 226 0 2 1 226 0 3 1 226 0 6 1 226 0 18 2 69 0 24 1 226 0 66]#[1 0 178 0 2 2 65 0 3 0 178 0 6 0 178 0 18 0 178 0 66]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 2 73 0 16 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 2 77 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 2 81 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[1 2 85 0 1 0 229 0 20]#[1 2 89 0 2 2 93 0 3 0 101 0 4 2 97 0 5 2 101 0 6 2 105 0 7 2 109 0 8 2 113 0 10 0 113 0 12 0 117 0 13 0 121 0 15 2 117 0 20 0 137 0 21 0 141 0 22 0 145 0 23 2 121 0 24 2 125 0 26 0 153 0 30 2 129 0 69]#[0 2 133 0 8]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 205 0 9 0 113 0 12 0 117 0 13 0 121 0 15 0 125 0 16 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 2 137 0 37 0 161 0 39 0 165 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 74 0 66 0 193 0 67 0 197 0 69]#[0 2 141 0 10]#[0 2 145 0 10]#[1 2 149 0 4 2 153 0 5 2 157 0 6 2 161 0 7 2 165 0 12 2 169 0 13 2 173 0 15 2 177 0 17 2 181 0 20 2 185 0 21 2 189 0 22 2 193 0 23 2 197 0 24 2 201 0 25 2 205 0 26 2 209 0 29 2 213 0 30 2 217 0 32 2 221 0 63]#[0 1 86 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 2 225 0 18 2 229 0 21]#[0 1 78 0 18 0 21]#[1 2 233 0 5 2 237 0 7 2 241 0 17 2 245 0 20 2 249 0 23 2 253 0 24 3 1 0 25 3 5 0 26]#[1 1 98 0 4 1 98 0 5 1 98 0 7 1 98 0 10 1 98 0 12 1 98 0 13 1 98 0 15 1 98 0 17 1 98 0 20 1 98 0 21 1 98 0 22 1 98 0 23 1 98 0 24 1 98 0 25 1 98 0 26 1 98 0 29 1 98 0 30 1 98 0 32 3 9 0 62 1 13 0 67]#[1 1 82 0 4 1 82 0 5 1 82 0 6 1 82 0 7 1 82 0 12 1 82 0 13 1 82 0 15 1 82 0 17 1 82 0 20 1 82 0 21 1 82 0 22 1 82 0 23 1 82 0 24 1 82 0 25 1 82 0 26 1 82 0 29 1 82 0 30 1 82 0 32 3 13 0 61 1 145 0 67]#[0 2 142 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 1 230 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 234 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 238 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 2 38 0 4 2 38 0 5 2 38 0 7 2 38 0 10 3 17 0 11 2 38 0 12 2 38 0 13 2 38 0 15 2 38 0 17 2 38 0 20 2 38 0 21 2 38 0 22 2 38 0 23 2 38 0 24 2 38 0 25 2 38 0 26 2 38 0 29 2 38 0 30 2 38 0 32]#[0 1 242 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 246 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 254 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 46 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 50 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 42 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 70 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 250 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 66 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 62 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 106 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 0 226 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[0 0 126 0 18 0 66]#[0 0 86 0 18 0 66]#[0 0 142 0 1 0 14 0 18 0 19]#[1 0 45 0 1 0 98 0 4 0 98 0 5 0 98 0 7 0 98 0 12 0 98 0 13 0 49 0 14 0 98 0 15 0 98 0 16 0 98 0 17 0 98 0 18 0 98 0 20 0 98 0 21 0 98 0 22 0 98 0 23 0 98 0 29 0 98 0 30 0 53 0 38 3 21 0 58 0 98 0 67]#[1 0 66 0 1 0 66 0 20 3 25 0 36]#[0 0 158 0 2 0 3 0 4 0 5 0 6 0 7 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 66]#[0 3 29 0 20]#[0 0 154 0 2 0 3 0 4 0 5 0 6 0 7 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 66]#[0 0 130 0 2 0 6 0 18 0 66]#[0 0 134 0 2 0 6 0 18 0 66]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 3 33 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[0 0 114 0 2 0 18 0 66]#[0 0 234 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[0 0 238 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 66]#[1 1 18 0 2 1 18 0 3 1 18 0 6 1 18 0 18 1 18 0 24 1 57 0 26 1 65 0 53 1 18 0 66]#[1 1 22 0 2 1 22 0 3 1 22 0 6 1 22 0 18 1 73 0 20 1 22 0 24 1 57 0 26 1 81 0 52 1 85 0 53 1 22 0 66]#[1 1 26 0 2 1 26 0 3 1 26 0 6 1 26 0 18 1 73 0 20 1 26 0 24 1 57 0 26 1 93 0 52 1 97 0 53 1 26 0 66]#[0 1 10 0 2 0 3 0 6 0 18 0 24 0 66]#[1 1 30 0 2 1 30 0 3 1 30 0 6 1 30 0 18 1 73 0 20 1 30 0 24 1 30 0 26 1 81 0 52 1 30 0 66]#[1 1 34 0 2 1 34 0 3 1 34 0 6 1 34 0 18 1 73 0 20 1 34 0 24 1 34 0 26 1 93 0 52 1 34 0 66]#[0 1 6 0 2 0 3 0 6 0 18 0 24 0 26 0 66]#[1 1 73 0 20 1 53 0 24 1 57 0 26 3 37 0 51 3 41 0 52 3 45 0 53 3 49 0 54]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 2 29 0 20 0 137 0 21 0 141 0 22 0 145 0 23 2 33 0 29 0 153 0 30 0 169 0 43 2 37 0 48 2 41 0 49 2 45 0 50 3 53 0 55 0 197 0 69]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 3 57 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 197 0 69]#[0 0 118 0 2 0 18 0 66]#[1 1 237 0 2 0 122 0 18 3 61 0 40 0 122 0 66]#[1 0 6 0 4 0 6 0 5 0 6 0 7 0 6 0 9 0 6 0 12 0 6 0 13 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 6 0 29 0 6 0 30 3 65 0 33 0 6 0 66 0 6 0 67]#[0 0 50 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 46 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[1 0 38 0 2 0 38 0 3 1 98 0 4 1 98 0 5 0 38 0 6 1 98 0 7 0 38 0 8 1 98 0 10 1 98 0 12 1 98 0 13 1 98 0 15 1 98 0 17 1 98 0 20 1 98 0 21 1 98 0 22 1 98 0 23 1 98 0 24 1 98 0 25 1 98 0 26 1 98 0 29 1 98 0 30 1 98 0 32 1 9 0 62 1 13 0 67]#[0 0 34 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 30 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 10 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 29 0 30 0 66 0 67]#[0 0 42 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 54 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 22 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 58 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 26 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 14 0 1 0 4 0 5 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 29 0 30 0 66 0 67]#[0 0 170 0 66]#[0 2 134 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 2 138 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[1 3 69 0 5 3 73 0 7 3 77 0 17 3 81 0 20 3 85 0 23 3 89 0 24 3 93 0 25 3 97 0 26]#[1 3 101 0 20 3 105 0 29]#[0 2 130 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[1 1 82 0 4 1 82 0 5 1 82 0 6 1 82 0 7 1 82 0 12 1 82 0 13 1 82 0 15 1 82 0 17 1 82 0 20 1 82 0 21 1 82 0 22 1 82 0 23 1 82 0 24 1 82 0 25 1 82 0 26 1 82 0 29 1 82 0 30 1 82 0 32 3 109 0 61 1 145 0 67]#[0 1 114 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 118 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 122 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 1 70 0 18 1 70 0 21 3 113 0 60 1 153 0 67]#[1 1 178 0 4 1 178 0 5 1 178 0 6 1 178 0 7 3 117 0 11 1 178 0 12 1 178 0 13 1 178 0 15 1 178 0 17 1 178 0 20 1 178 0 21 1 178 0 22 1 178 0 23 1 178 0 24 1 178 0 25 1 178 0 26 1 178 0 29 1 178 0 30 1 178 0 32]#[0 1 126 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 130 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 138 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 186 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 190 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 182 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 214 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 134 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 210 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 90 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 126 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 18 0 20 0 21 0 22 0 23 0 24 0 26 0 30 0 66]#[0 1 74 0 18 0 21]#[1 3 121 0 20 3 125 0 29]#[1 1 82 0 4 1 82 0 5 1 82 0 6 1 82 0 7 1 82 0 12 1 82 0 13 1 82 0 15 1 82 0 17 1 82 0 20 1 82 0 21 1 82 0 22 1 82 0 23 1 82 0 24 1 82 0 25 1 82 0 26 1 82 0 29 1 82 0 30 1 82 0 32 3 129 0 61 1 145 0 67]#[1 1 70 0 18 1 70 0 21 3 133 0 60 1 153 0 67]#[0 2 6 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 2 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 14 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 18 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 10 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[1 1 157 0 4 1 161 0 5 1 165 0 7 3 137 0 10 1 173 0 12 1 177 0 13 1 181 0 15 0 129 0 17 1 185 0 20 1 189 0 21 1 193 0 22 1 197 0 23 1 201 0 24 1 205 0 25 1 209 0 26 1 213 0 29 1 217 0 30 1 221 0 32 1 225 0 43 1 229 0 65]#[1 2 149 0 4 2 153 0 5 3 141 0 6 2 161 0 7 2 165 0 12 2 169 0 13 2 173 0 15 2 177 0 17 2 181 0 20 2 185 0 21 2 189 0 22 2 193 0 23 2 197 0 24 2 201 0 25 2 205 0 26 2 209 0 29 2 213 0 30 2 217 0 32 2 221 0 63]#[0 1 110 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 3 145 0 18]#[1 3 149 0 1 0 229 0 20]#[0 0 146 0 1 0 14 0 18 0 19]#[1 1 237 0 2 0 122 0 18 3 153 0 40 0 122 0 66]#[0 0 202 0 2 0 3 0 6 0 18 0 66]#[0 0 246 0 2 0 3 0 6 0 18 0 66]#[0 0 250 0 2 0 3 0 6 0 18 0 66]#[1 0 254 0 2 0 254 0 3 0 254 0 6 0 254 0 18 2 69 0 24 0 254 0 66]#[0 1 14 0 2 0 3 0 6 0 18 0 24 0 66]#[1 1 237 0 2 0 122 0 18 3 157 0 40 0 122 0 66]#[0 0 90 0 18 0 66]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 205 0 9 0 113 0 12 0 117 0 13 0 121 0 15 0 125 0 16 0 129 0 17 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 3 161 0 37 0 161 0 39 0 165 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 74 0 66 0 193 0 67 0 197 0 69]#[1 3 165 0 20 3 169 0 29]#[1 1 82 0 4 1 82 0 5 1 82 0 6 1 82 0 7 1 82 0 12 1 82 0 13 1 82 0 15 1 82 0 17 1 82 0 20 1 82 0 21 1 82 0 22 1 82 0 23 1 82 0 24 1 82 0 25 1 82 0 26 1 82 0 29 1 82 0 30 1 82 0 32 3 173 0 61 1 145 0 67]#[1 1 70 0 18 1 70 0 21 3 177 0 60 1 153 0 67]#[0 1 146 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 142 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 154 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 158 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 150 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 3 181 0 10]#[0 3 185 0 10]#[1 2 149 0 4 2 153 0 5 3 189 0 6 2 161 0 7 2 165 0 12 2 169 0 13 2 173 0 15 2 177 0 17 2 181 0 20 2 185 0 21 2 189 0 22 2 193 0 23 2 197 0 24 2 201 0 25 2 205 0 26 2 209 0 29 2 213 0 30 2 217 0 32 2 221 0 63]#[1 3 193 0 18 2 229 0 21]#[0 1 94 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 3 197 0 10]#[0 3 201 0 10]#[1 2 149 0 4 2 153 0 5 3 205 0 6 2 161 0 7 2 165 0 12 2 169 0 13 2 173 0 15 2 177 0 17 2 181 0 20 2 185 0 21 2 189 0 22 2 193 0 23 2 197 0 24 2 201 0 25 2 205 0 26 2 209 0 29 2 213 0 30 2 217 0 32 2 221 0 63]#[1 3 209 0 18 2 229 0 21]#[0 2 54 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 58 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 0 150 0 2 0 3 0 4 0 5 0 6 0 7 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 66]#[1 0 101 0 4 0 105 0 5 0 109 0 7 0 113 0 12 0 117 0 13 0 121 0 15 0 125 0 16 0 129 0 17 0 74 0 18 0 133 0 20 0 137 0 21 0 141 0 22 0 145 0 23 0 149 0 29 0 153 0 30 3 213 0 37 0 161 0 39 0 165 0 41 0 169 0 43 0 173 0 45 0 177 0 48 0 181 0 49 0 185 0 50 0 189 0 64 0 193 0 67 0 197 0 69]#[0 0 82 0 18 0 66]#[0 0 94 0 18 0 66]#[0 0 166 0 66]#[0 3 217 0 10]#[0 3 221 0 10]#[1 2 149 0 4 2 153 0 5 3 225 0 6 2 161 0 7 2 165 0 12 2 169 0 13 2 173 0 15 2 177 0 17 2 181 0 20 2 185 0 21 2 189 0 22 2 193 0 23 2 197 0 24 2 201 0 25 2 205 0 26 2 209 0 29 2 213 0 30 2 217 0 32 2 221 0 63]#[1 3 229 0 18 2 229 0 21]#[0 1 194 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 198 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 202 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 206 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 30 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 34 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 26 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 22 0 4 0 5 0 7 0 10 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 3 233 0 18]#[0 1 170 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 174 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 166 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 162 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 0 162 0 2 0 3 0 4 0 5 0 6 0 7 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 66])</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="startHighlighting:">startHighlighting: delay 	| localText class namespace uiPriority |	self stopHighlighting.	self text size &lt; Refactory.Browser.BrowserTextTool.ParserTextLimit 		ifFalse: [^self].	localText := self text copy.	class := self classBlock value.	namespace := self namespaceBlock value.	uiPriority := Processor activePriority.	highlightingProcess := 			[| win event |			(Delay forMilliseconds: delay) wait.			"forked process colorizes copied text"			self isForMethod 				ifTrue: 					[CodeHighlightingParser 						formatMethod: localText						forClass: class						namespace: namespace]				ifFalse: 					[CodeHighlightingParser 						formatExpression: localText						forClass: class						namespace: namespace].			"WindowManager process moves result to UI"			event := 					[localText string = self text string 						ifTrue: 							[self displayWithHighlightedText: localText"							self text setString: self text string setRuns: localText runs.							self view resetSelections.							self view invalidateRectangle: self view bounds repairNow: true"]].						[win := view ifNotNil: [:v | v topComponent].			(win notNil and: [win isInvalid not and: [win isOpen and:[win windowManager notNil]]]) 				ifTrue: [event uiEventFor: win]] 					valueAtPriority: uiPriority	"so window cannot be closed during this block"] 					forkAt: uiPriority - 1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatPrimitiveFrom:to:">formatPrimitiveFrom: startToken to: stopToken 	self 		formatFrom: startToken startPosition		to: stopToken stopPosition		with: #code_primitive</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="text:">text: aText 	text := aText.	string := text string copy.	text 		addEmphasis: #()		removeEmphasis: self class stylesToRemove		allowDuplicates: false</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatMethod:for:">formatMethod: aText for: aClass 	| parser |	parser := self on: (ReadStream on: aText).	parser		text: aText;		class: aClass.	parser setStartingState: self defaultStartingState.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	(self textEditor)		initializeMenuForCodeWithFileItIn;		doNotHandleLocally: #explain;		autoAccept: false.	(self textEditor respondsTo: #augmentEditorCodeMenu) 		ifTrue: [self augmentEditorCodeMenu].	self when: #dontStyleSmalltalkCode send: #yourself to: self workspace.	self isStylingSmalltalkCode 		ifTrue: [self styleSmalltalkCode]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="negative_numberId">negative_numberId	^22</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner class</class-id> <category>generated-initialization</category><body package="RBCodeHighlighting" selector="initializeKeywordMap">initializeKeywordMap	keywordMap := Dictionary new.	#(#(26 '||' 14) #(20 'false' 13) #(20 'nil' 15) #(20 'true' 12)) do: 			[:each | 			(keywordMap at: each first ifAbsentPut: [Dictionary new]) at: (each at: 2)				put: each last].	^keywordMap</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatArrayLeftBrace:rightBrace:">formatArrayLeftBrace: leftBraceSmaCCToken rightBrace: rightBraceSmaCCToken 	"Formatting of an ObjectStudio Array"	self 		formatFrom: leftBraceSmaCCToken startPosition		to: leftBraceSmaCCToken stopPosition		with: #code_array.	self 		formatFrom: rightBraceSmaCCToken startPosition		to: rightBraceSmaCCToken stopPosition		with: #code_array</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForUnaryMessage1:">reduceActionForUnaryMessage1: nodes 	^OrderedCollection with: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend7:">reduceActionForPrimitiveMessageSend7: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForTemporaries1:">reduceActionForTemporaries1: nodes 	^self addTemps</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="highlightDebugger">highlightDebugger	^ highlightDebugger isNil 		ifTrue: [ highlightDebugger := CodeHighlightingParser highlightDebugger asValue ]		ifFalse: [ highlightDebugger ]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="addTemp:">addTemp: aString 	"the guard is here because temps can be empty when we hit the error production of 'KeywordMethodName'.	For example when formatting the following method source: 'foo bar: baz'"	temps isEmpty ifFalse: [temps last add: aString]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBinaryMessageSend2:">reduceActionForBinaryMessageSend2: nodes 	^self formatMessage: (nodes at: 2) to: nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="findNamespaceFor:">findNamespaceFor: aBindingReference	| isAbsolute pathString home |	pathString := aBindingReference asString.	isAbsolute := (pathString includes: $.) and: [pathString first ~~ $_].	home := isAbsolute 		ifTrue: [Smalltalk]		ifFalse: [namespace isNil 			ifTrue: [class isNil ifTrue: [Smalltalk] ifFalse: [class environment]]			ifFalse: [namespace]].	aBindingReference		class: (isAbsolute ifTrue: [nil] ifFalse: [class])		home: home.</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral17:">reduceActionForLiteral17: nodes 	self formatArrayLeftBrace: (nodes at: 1) rightBrace: (nodes at: 3).	^Array</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>generated-starting states</category><body package="RBCodeHighlighting" selector="startingStateForSequenceNode">startingStateForSequenceNode	^2</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatSymbol:hash:">formatSymbol: aSmaCCToken hash: hashSmaCCToken 	self 		formatFrom: (hashSmaCCToken ifNil: [aSmaCCToken]) startPosition		to: aSmaCCToken stopPosition		with: #code_symbol</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController class</class-id> <category>instance creation</category><body package="RBCodeHighlighting" selector="replaceController:doingInitialization:">replaceController: aController doingInitialization: aBlock	| new |	aController class = superclass ifFalse: [^aController].	new := self new.	1 to: superclass instSize		do: [:i | new instVarAt: i put: (aController instVarAt: i)].	aBlock value: new.	new become: aController.	aController startHighlighting: 0.	^aController</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForUnaryMessageSend2:">reduceActionForUnaryMessageSend2: nodes 	^self formatMessage: (nodes at: 2) to: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral16:">reduceActionForLiteral16: nodes 	self 		formatQualifiedReferenceHash: (nodes at: 1)		leftBrace: (nodes at: 2)		rightBrace: (nodes at: 4).	^LiteralBindingReference</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scan3">scan3	self recordMatch: #(24).	self step.	(currentCharacter isLetter or: [currentCharacter == $_]) 		ifTrue: [^self scan4].	currentCharacter == $= 		ifTrue: [^self recordAndReportMatch: #variable_assignment].	^self reportLastMatch</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private-error handling</category><body package="RBCodeHighlighting" selector="dismissErrorToken">dismissErrorToken	| oldToken |	oldToken := currentToken.	super dismissErrorToken.	self isEOFToken 		ifTrue: [self formatSyntaxErrorFrom: oldToken stopPosition + 1 to: text size]		ifFalse: 			[self formatSyntaxErrorFrom: oldToken stopPosition + 1				to: currentToken stopPosition]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral1:">reduceActionForLiteral1: nodes 	self formatTrue: (nodes at: 1).	^True</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral6:">reduceActionForLiteral6: nodes 	self formatCharacter: (nodes at: 1).	^Character</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private-error handling</category><body package="RBCodeHighlighting" selector="patchErrorHandlerStates:">patchErrorHandlerStates: stateCollection 	"Hack -- remove the top level error handler if multiple ones exist"	| errorHandlersCount |	errorHandlersCount := stateCollection inject: 0				into: [:sum :each | sum + (each min: 1)].	errorHandlersCount &gt; 1 		ifTrue: 			[stateCollection at: ((1 to: stateCollection size) 						detect: [:each | (stateCollection at: each) ~~ 0])				put: 0]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatQualifiedReferenceHash:leftBrace:rightBrace:">formatQualifiedReferenceHash: hashSmaCCToken leftBrace: leftBraceSmaCCToken rightBrace: rightBraceSmaCCToken 	self 		formatFrom: (hashSmaCCToken ifNil: [leftBraceSmaCCToken]) startPosition		to: rightBraceSmaCCToken stopPosition		with: #code_qualifiedReference</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="namespaceBlock:">namespaceBlock: aBlock	namespaceBlock := aBlock</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>scanning</category><body package="RBCodeHighlighting" selector="scanNumber:">scanNumber: id 	| token endPosition scannedId |	scannedId := [		Number readFrom: stream.		id	] on: Error do: [ : ex |		self errorTokenId	].	endPosition := stream position.	stream position: start.	outputStream reset.	token := SmaCCToken 				value: (stream next: endPosition - start)				start: start+1				id: (Array with: scannedId).	matchActions := nil.	returnMatchBlock value: token</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="actionForCurrentToken">actionForCurrentToken	| ids action |	[currentToken id first = scanner smalltalkCommentId] whileTrue: 			[self formatComment: currentToken.			currentToken := nil.			self getNextToken].	ids := currentToken id.	1 to: ids size		do: 			[:i | 			action := self actionFor: (ids at: i).			(action bitAnd: 2r11) = 3 ifFalse: [^action].			(ids at: i) = scanner negative_numberId 				ifTrue: 					[currentToken := SmaCCToken 								value: '-'								start: currentToken startPosition								id: (Array with: scanner binary_symbolId).					scanner position: currentToken stopPosition - 1.					^self actionForCurrentToken]].	^3</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatNumber:">formatNumber: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_number</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="initializeAfterLoad">initializeAfterLoad	"self initializeAfterLoad"	(styles notNil and: [styles size ~= self defaultStyles size]) 		ifTrue: [styles := stylesToRemove := nil].	self initializeStyles</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitives2:">reduceActionForPrimitives2: nodes 	^self formatPrimitiveFrom: (nodes at: 2) to: (nodes at: 4)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="ok">ok	CodeHighlightingParser styles: newStyles.	RefreshDelay := self refreshDelayHolder value.	HighlightDebugger := self highlightDebugger value.	self closeRequest.</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForTemporaryVariables2:">reduceActionForTemporaryVariables2: nodes 	^self formatTemporaryVariable: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend4:">reduceActionForPrimitiveMessageSend4: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatUnaryMethod:">formatUnaryMethod: selectorSmaCCToken 	self formatToken: selectorSmaCCToken with: #code_unaryMethodName</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMethodName1:">reduceActionForKeywordMethodName1: nodes 	self addTemps.	^self formatKeyword: (nodes at: 1) with: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="isItalicHolder">isItalicHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isItalicHolder isNil		ifTrue:			[isItalicHolder := false asValue]		ifFalse:			[isItalicHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self textController beHighlightingWithSettings: [: newController | newController classBlock: [ self class ]].	( aBuilder componentAt: #enclosuresColor ) ifNotNil: [ : c | c widget insideColor: self enclosuresColor ].</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="isUnderlineHolder">isUnderlineHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isUnderlineHolder isNil		ifTrue:			[isUnderlineHolder := false asValue]		ifFalse:			[isUnderlineHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>scanning</category><body package="RBCodeHighlighting" selector="number">number	stream skip: -1.	self scanNumber: self numberId</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>scanning</category><body package="RBCodeHighlighting" selector="variable_assignment">variable_assignment	| token |	outputStream skip: -2.	stream skip: -2.	token := SmaCCToken 				value: outputStream contents				start: start+1				id: (Array with: self nameId).	outputStream reset.	matchActions := nil.	returnMatchBlock value: token</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForCascadeList2:">reduceActionForCascadeList2: nodes 	^(nodes at: 1)		add: (nodes at: 3);		yourself</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="revertToDefault">revertToDefault	newStyles := CodeHighlightingParser defaultStyles copy.	self		updateStyle;		changedStyle</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForUnaryMessageSend1:">reduceActionForUnaryMessageSend1: nodes 	^self formatMessage: (nodes at: 2) to: nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>generated-comments</category><body package="RBCodeHighlighting" selector="parserDefinitionComment">parserDefinitionComment	"%id &lt;number&gt; &lt;negative_number&gt; &lt;name&gt; &lt;smalltalkComment&gt; &lt;binary_symbol&gt;;%start SequenceNode ;Method:	  UnaryMethodName MethodSequenceNode 	| BinaryMethodName MethodSequenceNode 	| KeywordMethodName MethodSequenceNode	| error MethodSequenceNode ;UnaryMethodName: 	&lt;name&gt; {self formatUnaryMethod: '1'};BinaryMethodName:	&lt;binary_symbol&gt; &lt;name&gt; 		{self addTemps. self formatBinaryMethod: '1' with: '2'} ;KeywordMethodName:	&lt;keyword&gt; &lt;name&gt; {self addTemps. self formatKeyword: '1' with: '2'}	| KeywordMethodName &lt;keyword&gt; &lt;name&gt; {self formatKeyword: '2' with: '3'}	| error &lt;keyword&gt; &lt;name&gt; {self formatKeyword: '2' with: '3'};Primitives:		| Primitives ""&lt;"" PrimitiveMessageSend ""&gt;"" {self formatPrimitiveFrom: '2' to: '4'}	| Primitives ""&lt;"" error ""&gt;"" {self formatPrimitiveFrom: '2' to: '4'};PrimitiveMessageSend:	| PrimitiveMessageSend &lt;keyword&gt; {nil}	| PrimitiveMessageSend Literal {nil}	| PrimitiveMessageSend ""("" {nil}	| PrimitiveMessageSend "")"" {nil}	| PrimitiveMessageSend ""{"" {nil}	| PrimitiveMessageSend ""}"" {nil}	| PrimitiveMessageSend "";"" {nil}	| PrimitiveMessageSend ""."" {nil}	| PrimitiveMessageSend &lt;name&gt; {nil}	| PrimitiveMessageSend &lt;binary_symbol&gt; {nil};MethodSequenceNode:	Primitives ""|"" TemporaryVariables ""|"" Primitives Statements {self addTemps}	| Primitives ""||"" Primitives Statements	| Primitives Statements;SequenceNode:	Temporaries Statements {self removeTemps};Temporaries:	{self addTemps}	| ""||"" {self addTemps}	| ""|"" TemporaryVariables ""|"";TemporaryVariables:	{self addTemps}	| TemporaryVariables &lt;name&gt; {self formatTemporaryVariable: '2'};Statements:		| StatementList "".""? {self formatPeriod: '2'}	| StatementList ""."" ""^"" Expression "".""? {self formatPeriod: '2'; formatReturn: '3'; formatPeriod: '5'}	| ""^"" Expression "".""? {self formatReturn: '1'; formatPeriod: '3'}	| error ""^"" Expression "".""? {self formatReturn: '2'; formatPeriod: '4'}	| error ""."" ""^"" Expression "".""? {self formatPeriod: '2'; formatReturn: '3'; formatPeriod: '5'};StatementList:	Expression	| StatementList ""."" Expression {self formatPeriod: '2'}	| error ""."" Expression {self formatPeriod: '2'};Block:	""["" BlockArgs ""|"" SequenceNode ""]"" {self removeTemps. self formatLeftBracket: '1'; formatBlockArgumentSeparator: '3'; formatRightBracket: '5'}	| ""["" SequenceNode ""]"" {self formatLeftBracket: '1'; formatRightBracket: '3'}	| ""["" BlockArgs ""]"" {self removeTemps. self formatLeftBracket: '1'; formatRightBracket: '3'}	| ""["" BlockArgs ""||"" TemporaryVariables ""|"" Statements ""]"" {self removeTemps; removeTemps. self formatLeftBracket: '1'; formatBlockArgumentSeparator: '3'; formatRightBracket: '7'};BlockArgs:	"":"" &lt;name&gt; {self addTemps. self formatBlockVariable: '2' colon: '1'}	| BlockArgs "":"" &lt;name&gt; {self formatBlockVariable: '3' colon: '2'};Expression:	&lt;name&gt; "":="" Expression {self formatAssignedVariable: '1'; formatAssignment: '2'}|	&lt;dotted_name&gt; "":="" Expression {self formatAssignedVariable: '1'; formatAssignment: '2'}|	Cascade ;Cascade :	KeywordMessageSend CascadeList {'2' do: [:each | self formatMessage: each to: '1']}|	BinaryMessageSend CascadeList {'2' do: [:each | self formatMessage: each to: '1']}|	UnaryMessageSend CascadeList {'2' do: [:each | self formatMessage: each to: '1']}|	Primary;CascadeList :	{OrderedCollection new}|	CascadeList "";"" SimpleMessage {'1' add: '3'; yourself};SimpleMessage : 	UnaryMessage {'1'}|	BinaryMessage {'1'}|	KeywordMessage {'1'};KeywordMessageSend:	BinaryMessageSend KeywordMessage {self formatMessage: '2' to: nil}|	UnaryMessageSend KeywordMessage {self formatMessage: '2' to: nil}|	Primary KeywordMessage {self formatMessage: '2' to: '1'};KeywordMessage :	&lt;keyword&gt; KeywordArgument {OrderedCollection with: '1'}|	KeywordMessage &lt;keyword&gt; KeywordArgument {'1' add: '2'; yourself} ;KeywordArgument:	BinaryMessageSend|	UnaryMessageSend|	Primary;BinaryMessageSend :	BinaryMessageSend BinaryMessage {self formatMessage: '2' to: nil}|	UnaryMessageSend BinaryMessage {self formatMessage: '2' to: nil}|	Primary BinaryMessage {self formatMessage: '2' to: '1'};BinaryMessage :	&lt;binary_symbol&gt; BinaryArgument {OrderedCollection with: '1'} ;BinaryArgument:	UnaryMessageSend|	Primary;UnaryMessageSend :	UnaryMessageSend UnaryMessage {self formatMessage: '2' to: nil}|	Primary UnaryMessage {self formatMessage: '2' to: '1'};UnaryMessage :	&lt;name&gt; {OrderedCollection with: '1'};Primary :	""("" Expression "")"" {self formatLeftParenthesis: '1'; formatRightParenthesis: '3'. nil}|	Literal {'1'}|	&lt;name&gt; {self formatVariableReference: '1'}|	&lt;dotted_name&gt; {self formatVariableReference: '1'}|	Block {BlockClosure};Literal:	""true"" {self formatTrue: '1'. True}|	""false"" {self formatFalse: '1'. False}|	""nil"" {self formatNil: '1'. UndefinedObject}|	&lt;number&gt; {self formatNumber: '1'. '1' value asNumber class}|	&lt;negative_number&gt; {self formatNumber: '1'. '1' value asNumber class}|	&lt;character&gt; {self formatCharacter: '1'. Character}|	&lt;string&gt; {self formatString: '1'. String}|	 ""#"" &lt;string&gt; {self formatSymbol: '2' hash: '1'. Symbol}|	""#"" &lt;name&gt; {self formatSymbol: '2' hash: '1'. Symbol}|	""#"" &lt;binary_symbol&gt; {self formatSymbol: '2' hash: '1'. Symbol}|	""#"" &lt;keyword&gt; {self formatSymbol: '2' hash: '1'. Symbol}|	""#"" &lt;multikeyword&gt; {self formatSymbol: '2' hash: '1'. Symbol}|	""#"" ""["" ByteArray ""]"" {self formatByteArrayHash: '1' leftBracket: '2' rightBracket: '4'. ByteArray}|	""#"" ""("" Array "")"" {self formatArrayHash: '1' leftParenthesis: '2' rightParenthesis: '4'. Array}|	""#"" ""{"" &lt;name&gt; ""}"" {self formatQualifiedReferenceHash: '1' leftBrace: '2' rightBrace: '4'. LiteralBindingReference}|	""#"" ""{"" &lt;dotted_name&gt; ""}"" {self formatQualifiedReferenceHash: '1' leftBrace: '2' rightBrace: '4'. LiteralBindingReference}|	""{"" ObjectStudioArray ""}"" {self formatArrayLeftBrace: '1' rightBrace: '3'. Array};ByteArray: 	|	ByteArray &lt;number&gt; |	error;Array: 	|	error |	Array ArrayLiteral |	Array &lt;name&gt; "":="" {'2' stopPosition + 1 = '3' startPosition				 			ifTrue: [self formatSymbol: (SmaCCToken value: ('2' value , ':') start: '2' startPosition id: nil) hash: nil] 							ifFalse: [self formatSymbol: '2' hash: nil; 									formatSymbol: (SmaCCToken value: ':' start: '3' startPosition id: nil) hash: nil].  						scanner position: '3' startPosition. currentToken := nil. '1'};ArrayLiteral:## The first several of these are copied from literal, but the formatting was removed.	""true"" |	""false"" |	""nil"" |	&lt;number&gt;|	&lt;negative_number&gt; |	&lt;character&gt; |	&lt;string&gt; |	 ""#"" &lt;string&gt; |	""#"" &lt;name&gt;|	""#"" &lt;binary_symbol&gt; |	""#"" &lt;keyword&gt;|	""#"" &lt;multikeyword&gt;|	""#"" ""["" ByteArray ""]"" |	""#"" ""("" Array "")"" |	""#"" ""{"" &lt;name&gt; ""}""|	""#"" ""{"" &lt;dotted_name&gt; ""}""|	&lt;name&gt; |	&lt;binary_symbol&gt; |	&lt;keyword&gt;|	&lt;multikeyword&gt; |	""{"" &lt;name&gt; ""}"" |	""{"" &lt;dotted_name&gt; ""}"" |	""("" Array "")"" |	""["" ByteArray ""]""|	&lt;any_char&gt; |	&lt;dotted_name&gt; ;ObjectStudioArray: 	|	error |	ObjectStudioArray ObjectStudioArrayLiteral |	ObjectStudioArray &lt;name&gt; "":="" {'2' stopPosition + 1 = '3' startPosition				 			ifTrue: [self formatSymbol: (SmaCCToken value: ('2' value , ':') start: '2' startPosition id: nil) hash: nil] 							ifFalse: [self formatSymbol: '2' hash: nil; 									formatSymbol: (SmaCCToken value: ':' start: '3' startPosition id: nil) hash: nil].  						scanner position: '3' startPosition. currentToken := nil. '1'};ObjectStudioArrayLiteral:## The first several of these are copied from literal, but the formatting was removed.	""true"" |	""false"" |	""nil"" |	&lt;number&gt;|	&lt;negative_number&gt; |	&lt;character&gt; |	&lt;string&gt; |	 ""#"" &lt;string&gt; |	""#"" &lt;name&gt;|	""#"" &lt;binary_symbol&gt; |	""#"" &lt;keyword&gt;|	""#"" &lt;multikeyword&gt;|	""#"" ""["" ByteArray ""]"" |	""#"" ""("" Array "")"" |	""#"" ""{"" &lt;name&gt; ""}""|	""#"" ""{"" &lt;dotted_name&gt; ""}""|	&lt;name&gt; |	&lt;binary_symbol&gt; |	&lt;keyword&gt;|	&lt;multikeyword&gt; |	""{"" ObjectStudioArray ""}"" |	""("" Array "")"" |	Block|	&lt;any_char&gt; |	&lt;dotted_name&gt; ;"</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>generated-accessing</category><body package="RBCodeHighlighting" selector="scannerClass">scannerClass	^CodeHighlightingScanner</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForArray4:">reduceActionForArray4: nodes 	(nodes at: 2) stopPosition + 1 = (nodes at: 3) startPosition 		ifTrue: 			[self formatSymbol: (SmaCCToken 						value: (nodes at: 2) value , ':'						start: (nodes at: 2) startPosition						id: nil)				hash: nil]		ifFalse: 			[self				formatSymbol: (nodes at: 2) hash: nil;				formatSymbol: (SmaCCToken 							value: ':'							start: (nodes at: 3) startPosition							id: nil)					hash: nil].	scanner position: (nodes at: 3) startPosition.	currentToken := nil.	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="prepareForUnloading">prepareForUnloading	self allInstances do: [:each | self revertController: each]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="styles">styles	^styles ifNil: [self defaultStyles]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral11:">reduceActionForLiteral11: nodes 	self formatSymbol: (nodes at: 2) hash: (nodes at: 1).	^Symbol</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatExpression:for:">formatExpression: aText for: aClass 	| parser |	parser := self on: (ReadStream on: aText).	parser		text: aText;		class: aClass.	parser setStartingState: self startingStateForSequenceNode.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral8:">reduceActionForLiteral8: nodes 	self formatSymbol: (nodes at: 2) hash: (nodes at: 1).	^Symbol</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatPeriod:">formatPeriod: aSmaCCToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatAssignedVariable:">formatAssignedVariable: aSmaCCToken 	self formatVariableReference: aSmaCCToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scan2">scan2		[self step.	currentCharacter ~~ $'] whileTrue.	^self scan1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral13:">reduceActionForLiteral13: nodes 	self 		formatByteArrayHash: (nodes at: 1)		leftBracket: (nodes at: 2)		rightBracket: (nodes at: 4).	^ByteArray</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="initialize">initialize	super initialize.	temps := OrderedCollection new .	args  := OrderedCollection new ."	blockArgs  := OrderedCollection new ."</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="isForMethod:">isForMethod: aBoolean 	isForMethod := aBoolean</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="setColor:">setColor: color 	self selectedStyle isNil ifTrue: [^self].	(self widgetAt: #color) insideColor: color.	self removeColor.	self setStyle: (self selectedStyle 				copyWith: (Array with: #color: with: color literalArrayEncoding))</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimary4:">reduceActionForPrimary4: nodes 	^self formatVariableReference: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="styleDescriptions">styleDescriptions	^#(		#(#code_syntaxError 'Syntax Error') 		#(#code_dnu 'Message Not Understood') 		#(#code_undeclaredVariable 'Undeclared Variable')		#(#code_redefinedVariableDefinition 'Redefined Variable')		#(#code_comment 'Comment') 		#(#code_keywordMethodName 'Keyword Method Name') 		#(#code_unaryMethodName 'Unary Method Name') 		#(#code_binaryMethodName 'Binary Method Name') 		#(#code_array 'Literal Array') 		#(#code_true 'true') 		#(#code_false 'false') 		#(#code_nil 'nil') 		#(#code_string 'Literal String') 		#(#code_character 'Literal Character') 		#(#code_symbol 'Literal Symbol') 		#(#code_number 'Literal Number')		#(#code_byteArray 'Literal Byte Array')		#(#code_qualifiedReference 'Literal Qualified Reference')		#(#code_self 'self')		#(#code_super 'super')		#(#code_thisContext 'thisContext')		#(#code_sharedVariableReference 'Shared Variable')		#(#code_nameSpaceReference 'Name Space')		#(#code_classReference 'Class')		#(#code_methodVariableDefinition 'Method Argument')		#(#code_instanceVariable 'Instance Variable')		#(#code_temporaryVariableDefinition 'Temporary Variable Definition')		#(#code_temporaryVariable 'Temporary Variable Reference')		#(#code_blockArgument 'Block Argument')		#(#code_messageSend 'Message Send')		#(#code_primitive 'Primitive/Pragma')		#(#code_assignment 'Assignment')		#(#code_bracket 'Block Bracket')		#(#code_parenthesis 'Parenthesis')		#(#code_return 'Return')	)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBinaryMessageSend3:">reduceActionForBinaryMessageSend3: nodes 	^self formatMessage: (nodes at: 2) to: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedItalic">changedItalic	self isItalicHolder value 		ifTrue: [self addStyle: #italic]		ifFalse: [self removeStyle: #italic]</body></methods><methods><class-id>Tools.AbstractWorkspace</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="isStylingSmalltalkCode">isStylingSmalltalkCode	^self currentPage isStylingSmalltalkCode</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="refreshDelayHolder">refreshDelayHolder		^refreshDelayHolder isNil		ifTrue:			[refreshDelayHolder := RefreshDelay asValue]		ifFalse:			[refreshDelayHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend11:">reduceActionForPrimitiveMessageSend11: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="updateWithLoadedStyles:">updateWithLoadedStyles: styleArray "Simple 'newStyles := styleArray is not enough. Make sure, that the loaded styles will update(but not will replace) existing styles." 	styleArray do: 			[:loadedStyle | 			| index |			index := (1 to: newStyles size) 						detect: [:each | (newStyles at: each) first = loadedStyle first]						ifNone: [].			index notNil ifTrue: [newStyles at: index put: loadedStyle]].	self		updateStyle;		changedStyle</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend6:">reduceActionForPrimitiveMessageSend6: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="styles:">styles: aCollection 	styles := aCollection.	self initializeStyles</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>pages</category><body package="RBCodeHighlighting" selector="rbCodeHighlighterPage">rbCodeHighlighterPage	&lt;settingsPage: #(tools browser rbCodeHighlighter)&gt;	^(ModularSettingsPage new)		label: 'Code Highlighter';		icon: (ListIconLibrary visualFor: #image);		useRadioButtonsForEnumerations;		settings: (self settingsWithPrefix: #(#rbCodeHighlighter))</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-tables</category><body package="RBCodeHighlighting" selector="reduceTable">reduceTable	^#(#(33 0 #reduceFor:)#(33 4 #reduceActionForPrimitives2:)#(33 4 #reduceActionForPrimitives3:)#(34 0 #reduceFor:)#(34 2 #reduceActionForPrimitiveMessageSend2:)#(34 2 #reduceActionForPrimitiveMessageSend3:)#(34 2 #reduceActionForPrimitiveMessageSend4:)#(34 2 #reduceActionForPrimitiveMessageSend5:)#(34 2 #reduceActionForPrimitiveMessageSend6:)#(34 2 #reduceActionForPrimitiveMessageSend7:)#(34 2 #reduceActionForPrimitiveMessageSend8:)#(34 2 #reduceActionForPrimitiveMessageSend9:)#(34 2 #reduceActionForPrimitiveMessageSend10:)#(34 2 #reduceActionForPrimitiveMessageSend11:)#(35 1 #reduceActionForUnaryMethodName1:)#(36 0 #reduceActionForTemporaryVariables1:)#(36 2 #reduceActionForTemporaryVariables2:)#(37 0 #reduceFor:)#(37 2 #reduceActionForStatements2:)#(37 5 #reduceActionForStatements3:)#(37 3 #reduceActionForStatements4:)#(37 4 #reduceActionForStatements5:)#(37 5 #reduceActionForStatements6:)#(38 0 #reduceActionForTemporaries1:)#(38 1 #reduceActionForTemporaries2:)#(38 3 #reduceFor:)#(39 1 #reduceFor:)#(39 3 #reduceActionForStatementList2:)#(39 3 #reduceActionForStatementList3:)#(40 0 #reduceActionForOptional_____1:)#(40 1 #reduceActionForOptional_____2:)#(41 3 #reduceActionForExpression1:)#(41 3 #reduceActionForExpression2:)#(41 1 #reduceFor:)#(42 2 #reduceActionForBlockArgs1:)#(42 3 #reduceActionForBlockArgs2:)#(43 5 #reduceActionForBlock1:)#(43 3 #reduceActionForBlock2:)#(43 3 #reduceActionForBlock3:)#(43 7 #reduceActionForBlock4:)#(44 6 #reduceActionForMethodSequenceNode1:)#(44 4 #reduceFor:)#(44 2 #reduceFor:)#(45 2 #reduceActionForCascade1:)#(45 2 #reduceActionForCascade2:)#(45 2 #reduceActionForCascade3:)#(45 1 #reduceFor:)#(46 1 #reduceFor:)#(47 0 #reduceActionForCascadeList1:)#(47 3 #reduceActionForCascadeList2:)#(48 2 #reduceActionForBinaryMessageSend1:)#(48 2 #reduceActionForBinaryMessageSend2:)#(48 2 #reduceActionForBinaryMessageSend3:)#(49 2 #reduceActionForUnaryMessageSend1:)#(49 2 #reduceActionForUnaryMessageSend2:)#(50 3 #reduceActionForPrimary1:)#(50 1 #reduceActionForPrimary2:)#(50 1 #reduceActionForPrimary3:)#(50 1 #reduceActionForPrimary4:)#(50 1 #reduceActionForPrimary5:)#(51 1 #reduceActionForSimpleMessage1:)#(51 1 #reduceActionForSimpleMessage2:)#(51 1 #reduceActionForSimpleMessage3:)#(52 1 #reduceActionForUnaryMessage1:)#(53 2 #reduceActionForBinaryMessage1:)#(54 2 #reduceActionForKeywordMessage1:)#(54 3 #reduceActionForKeywordMessage2:)#(55 1 #reduceFor:)#(55 1 #reduceFor:)#(55 1 #reduceFor:)#(56 1 #reduceFor:)#(56 1 #reduceFor:)#(57 2 #reduceFor:)#(57 2 #reduceFor:)#(57 2 #reduceFor:)#(57 2 #reduceFor:)#(58 2 #reduceActionForSequenceNode1:)#(59 2 #reduceActionForKeywordMethodName1:)#(59 3 #reduceActionForKeywordMethodName2:)#(59 3 #reduceActionForKeywordMethodName3:)#(60 0 #reduceFor:)#(60 2 #reduceFor:)#(60 1 #reduceFor:)#(61 0 #reduceFor:)#(61 1 #reduceFor:)#(61 2 #reduceFor:)#(61 3 #reduceActionForArray4:)#(62 0 #reduceFor:)#(62 1 #reduceFor:)#(62 2 #reduceFor:)#(62 3 #reduceActionForObjectStudioArray4:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 2 #reduceFor:)#(63 2 #reduceFor:)#(63 2 #reduceFor:)#(63 2 #reduceFor:)#(63 2 #reduceFor:)#(63 4 #reduceFor:)#(63 4 #reduceFor:)#(63 4 #reduceFor:)#(63 4 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(63 3 #reduceFor:)#(63 3 #reduceFor:)#(63 3 #reduceFor:)#(63 3 #reduceFor:)#(63 1 #reduceFor:)#(63 1 #reduceFor:)#(64 2 #reduceActionForKeywordMessageSend1:)#(64 2 #reduceActionForKeywordMessageSend2:)#(64 2 #reduceActionForKeywordMessageSend3:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 2 #reduceFor:)#(65 2 #reduceFor:)#(65 2 #reduceFor:)#(65 2 #reduceFor:)#(65 2 #reduceFor:)#(65 4 #reduceFor:)#(65 4 #reduceFor:)#(65 4 #reduceFor:)#(65 4 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 3 #reduceFor:)#(65 3 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(65 1 #reduceFor:)#(68 2 #reduceActionForBinaryMethodName1:)#(69 1 #reduceActionForLiteral1:)#(69 1 #reduceActionForLiteral2:)#(69 1 #reduceActionForLiteral3:)#(69 1 #reduceActionForLiteral4:)#(69 1 #reduceActionForLiteral5:)#(69 1 #reduceActionForLiteral6:)#(69 1 #reduceActionForLiteral7:)#(69 2 #reduceActionForLiteral8:)#(69 2 #reduceActionForLiteral9:)#(69 2 #reduceActionForLiteral10:)#(69 2 #reduceActionForLiteral11:)#(69 2 #reduceActionForLiteral12:)#(69 4 #reduceActionForLiteral13:)#(69 4 #reduceActionForLiteral14:)#(69 4 #reduceActionForLiteral15:)#(69 4 #reduceActionForLiteral16:)#(69 3 #reduceActionForLiteral17:))</body></methods><methods><class-id>Core.Character</class-id> <category>testing</category><body package="RBCodeHighlighting" selector="isBlank">isBlank	"space or tab"	^self == ($ ) or: [ self == ($	) ].</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatByteArrayHash:leftBracket:rightBracket:">formatByteArrayHash: hashSmaCCToken leftBracket: leftBracketSmaCCToken rightBracket: rightBracketSmaCCToken 	self 		formatFrom: (hashSmaCCToken ifNil: [leftBracketSmaCCToken]) startPosition		to: rightBracketSmaCCToken stopPosition		with: #code_byteArray</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral10:">reduceActionForLiteral10: nodes 	self formatSymbol: (nodes at: 2) hash: (nodes at: 1).	^Symbol</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral4:">reduceActionForLiteral4: nodes 	self formatNumber: (nodes at: 1).	^(nodes at: 1) value asNumber class</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="namespace">namespace	^namespace</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatRightBracket:">formatRightBracket: aSmaCCToken	self formatToken: aSmaCCToken with: #code_bracket .</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scan1">scan1	self recordMatch: #(23).	self step.	currentCharacter == $' ifTrue: [^self scan2].	^self reportLastMatch</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="highlightDebugger:">highlightDebugger: aBoolean	HighlightDebugger := aBoolean</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForSimpleMessage2:">reduceActionForSimpleMessage2: nodes 	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="styleWidgets">styleWidgets	^#(#strikeout #underline #jaggedEdge #italic #bold #colorToggle)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatBlockVariable:colon:">formatBlockVariable: variableSmaCCToken colon: colonSmaCCToken 	self 		formatFrom: colonSmaCCToken startPosition		to: variableSmaCCToken stopPosition		with: (((self isTemporaryVariable: variableSmaCCToken value) 				or: [self isInstanceVariable: variableSmaCCToken value]) 					ifTrue: [#code_redefinedVariableDefinition]					ifFalse: [#code_blockArgument]).	self addTemp: variableSmaCCToken value</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="isValidMessage:for:">isValidMessage: anOrderedCollection for: aClass 	| name stream |	stream := WriteStream on: (String new: 30).	anOrderedCollection do: [:each | stream nextPutAll: each value].	name := stream contents.	name := Symbol findInterned: name.	name isNil ifTrue: [^false].	^aClass isNil or: [aClass canUnderstand: name]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend5:">reduceActionForPrimitiveMessageSend5: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="errorTokenId">errorTokenId	^67</body></methods><methods><class-id>Tools.AbstractWorkspace</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="dontStyleSmalltalkCode">dontStyleSmalltalkCode	self currentPage when: #dontStyleSmalltalkCode send: #yourself to: self.	self currentPage dontStyleSmalltalkCode</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatements6:">reduceActionForStatements6: nodes 	^self		formatPeriod: (nodes at: 2);		formatReturn: (nodes at: 3);		formatPeriod: (nodes at: 5)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="isMethodArgument:">isMethodArgument: aString 	^args anySatisfy: [:each | each = aString]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>scanning</category><body package="RBCodeHighlighting" selector="negative_number">negative_number	stream skip: -2.	self scanNumber: self negative_numberId</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend9:">reduceActionForPrimitiveMessageSend9: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimary2:">reduceActionForPrimary2: nodes 	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedUnderline">changedUnderline	self isUnderlineHolder value 		ifTrue: [self addStyle: #underline]		ifFalse: [self removeStyle: #underline]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedStrikeout">changedStrikeout	self isStrikeoutHolder value 		ifTrue: [self addStyle: #strikeout]		ifFalse: [self removeStyle: #strikeout]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend2:">reduceActionForPrimitiveMessageSend2: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatementList2:">reduceActionForStatementList2: nodes 	^self formatPeriod: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessageSend2:">reduceActionForKeywordMessageSend2: nodes 	^self formatMessage: (nodes at: 2) to: nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForObjectStudioArray4:">reduceActionForObjectStudioArray4: nodes 	(nodes at: 2) stopPosition + 1 = (nodes at: 3) startPosition 		ifTrue: 			[self formatSymbol: (SmaCCToken 						value: (nodes at: 2) value , ':'						start: (nodes at: 2) startPosition						id: nil)				hash: nil]		ifFalse: 			[self				formatSymbol: (nodes at: 2) hash: nil;				formatSymbol: (SmaCCToken 							value: ':'							start: (nodes at: 3) startPosition							id: nil)					hash: nil].	scanner position: (nodes at: 3) startPosition.	currentToken := nil.	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="textController">textController	^self controllerFor: #method</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self textController beHighlightingWithSettings: 			[:newController | 			newController				classBlock: [nil class];				isForMethod: false]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatLeftParenthesis:">formatLeftParenthesis: aSmaCCToken	self formatToken: aSmaCCToken with: #code_parenthesis</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>interface opening</category><body package="RBCodeHighlighting" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	initialLookPrefs := (builder componentAt: #textEditor) lookPreferences.	self updateTextWidget.	self textController beHighlightingWithSettings: 			[:newController | 			newController				classBlock: [self selectedClass];				namespaceBlock: [self doItEnvironment]].</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="stopHighlighting">stopHighlighting	highlightingProcess notNil 		ifTrue: 			[highlightingProcess terminate.			highlightingProcess priority: Processor activePriority + 1.			highlightingProcess := nil]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatCharacter:">formatCharacter: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_character</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatExpression:forClass:namespace:">formatExpression: aText forClass: aClass namespace: aNamespace	| parser |	parser := self on: (ReadStream on: aText).	parser		text: aText;		class: aClass;		namespace: aNamespace.	parser setStartingState: self startingStateForSequenceNode.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatSuper:">formatSuper: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_super</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForTemporaryVariables1:">reduceActionForTemporaryVariables1: nodes 	^self addTemps</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="cancel">cancel	CodeHighlightingParser styles: oldStyles.	RefreshDelay := oldDelay.	self closeRequest</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral2:">reduceActionForLiteral2: nodes 	self formatFalse: (nodes at: 1).	^False</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForExpression2:">reduceActionForExpression2: nodes 	^self		formatAssignedVariable: (nodes at: 1);		formatAssignment: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatSyntaxError">formatSyntaxError	self formatSyntaxErrorFrom: currentToken startPosition		to: currentToken stopPosition</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="replaceFrom:to:with:">replaceFrom: start to: stop with: aText 	self stopHighlighting.	super 		replaceFrom: start		to: stop		with: aText.	self startHighlighting: RefreshDelay</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatements3:">reduceActionForStatements3: nodes 	^self		formatPeriod: (nodes at: 2);		formatReturn: (nodes at: 3);		formatPeriod: (nodes at: 5)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="numberId">numberId	^21</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatString:">formatString: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_string</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatArrayHash:leftParenthesis:rightParenthesis:">formatArrayHash: hashSmaCCToken leftParenthesis: leftParenthesisSmaCCToken rightParenthesis: rightParenthesisSmaCCToken 	self 		formatFrom: (hashSmaCCToken ifNil: [leftParenthesisSmaCCToken]) 				startPosition		to: leftParenthesisSmaCCToken stopPosition		with: #code_array.	self 		formatFrom: rightParenthesisSmaCCToken startPosition		to: rightParenthesisSmaCCToken stopPosition		with: #code_array</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-code highlighting</category><body package="RBCodeHighlighting" selector="rbCodeHighlightingSettingsEditor">rbCodeHighlightingSettingsEditor	&lt;setting: #(rbCodeHighlighter  settingsEditor )&gt;	^(ExternalSetting new)		label: 'Code Highlighter Settings';		editorClass: Refactory.CodeHighlighter.CodeHighlightingSettings;		helpText: 'Opens an editor to manage the colorizing of Smalltalk source.The settings created with that tool are saved separately from the sytem settings.'</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral9:">reduceActionForLiteral9: nodes 	self formatSymbol: (nodes at: 2) hash: (nodes at: 1).	^Symbol</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="class:">class: aClass	class := aClass</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForCascade1:">reduceActionForCascade1: nodes 	^(nodes at: 2) do: [:each | self formatMessage: each to: (nodes at: 1)]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessage2:">reduceActionForKeywordMessage2: nodes 	^(nodes at: 1)		add: (nodes at: 2);		yourself</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatKeyword:with:">formatKeyword: selectorSmaCCToken with: variableSmaCCToken 	self formatToken: selectorSmaCCToken with: #code_keywordMethodName.	self formatMethodArgument: variableSmaCCToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral14:">reduceActionForLiteral14: nodes 	self 		formatArrayHash: (nodes at: 1)		leftParenthesis: (nodes at: 2)		rightParenthesis: (nodes at: 4).	^Array</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="getColor">getColor	| dialog |	dialog := ColorSelectionDialog new.	dialog selection: self currentColor.	dialog open.	dialog accept value ifTrue: [self setColor: dialog selection]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatBinaryMethod:with:">formatBinaryMethod: selectorSmaCCToken with: variableSmaCCToken 	self formatToken: selectorSmaCCToken with: #code_binaryMethodName.	self formatMethodArgument: variableSmaCCToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="removeStyles">removeStyles	"self removeStyles"	self defaultStyles 		do: [:style | CharacterAttributes removeDefaultKey: style first]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForExpression1:">reduceActionForExpression1: nodes 	^self		formatAssignedVariable: (nodes at: 1);		formatAssignment: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="saveStyles">saveStyles	| name file |	name := Dialog requestFileName: 'Save styles as:' default: 'style.sav'.	name isEmpty ifTrue: [^self].	file := name asFilename writeStream.	[newStyles storeOn: file] 		ensure: [file close]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatCascade:">formatCascade: aSmaCCToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="typeList">typeList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^typeList isNil		ifTrue:			[typeList := SelectionInList new]		ifFalse:			[typeList]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMethodName2:">reduceActionForKeywordMethodName2: nodes 	^self formatKeyword: (nodes at: 2) with: (nodes at: 3)</body></methods><methods><class-id>Tools.Trippy.BehaviorInspector</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	(aBuilder componentAt: #methodList) widget 		displayStringSelector: #simpleReverseDisplayString.	self configureCodeViewController: (aBuilder componentAt: #text) widget 				controller.	(aBuilder componentAt: #text) widget controller 		beHighlightingWithSettings: 			[:newController | 			newController				classBlock: [object class];				namespaceBlock: [object class environment]]</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="isForMethod">isForMethod	^isForMethod isNil or: [isForMethod]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>generated-starting states</category><body package="RBCodeHighlighting" selector="startingStateForMethod">startingStateForMethod	^1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatTrue:">formatTrue: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_true</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="isInstanceVariable:">isInstanceVariable: aString 	^class notNil and: [class allInstVarNames includes: aString]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>menu</category><body package="RBCodeHighlighting" selector="highlighterSettings">highlighterSettings	&lt;menuItem: 'Code Highlighter Settings'		nameKey: #highlighterSettings		menu: #(#toolsMenu)		position: 30.00&gt;	Refactory.CodeHighlighter.CodeHighlightingSettings open</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner class</class-id> <category>initialization</category><body package="RBCodeHighlighting" selector="initialize">initialize	"We need this because otherwise our initialization won't get run"	super initialize.</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatVariableReference:">formatVariableReference: aSmaCCToken 	| ref binding |	aSmaCCToken value = 'self' 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_self.			^class].	aSmaCCToken value = 'super' 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_super.			^class ifNotNil: [class superclass]].	aSmaCCToken value = 'thisContext' 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_thisContext.			^thisContext class].	(self isBlockArgument: aSmaCCToken value) 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_blockArgument.			^nil].	(self isTemporaryVariable: aSmaCCToken value) 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_temporaryVariable.			^nil].	(self isInstanceVariable: aSmaCCToken value) 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_instanceVariable.			^nil].	(self isMethodArgument: aSmaCCToken value) 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_methodVariableDefinition.			^nil].	ref := BindingReference pathString: aSmaCCToken value.	self findNamespaceFor: ref.	binding := ref bindingOrNil.	binding isNil 		ifTrue: 			[self formatToken: aSmaCCToken with: #code_undeclaredVariable.			^nil].	binding isForClass 		ifTrue: [self formatToken: aSmaCCToken with: #code_classReference]		ifFalse: 			[binding isForNameSpace 				ifTrue: [self formatToken: aSmaCCToken with: #code_nameSpaceReference]				ifFalse: [self formatToken: aSmaCCToken with: #code_sharedVariableReference]].	^binding value class</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral15:">reduceActionForLiteral15: nodes 	self 		formatQualifiedReferenceHash: (nodes at: 1)		leftBrace: (nodes at: 2)		rightBrace: (nodes at: 4).	^LiteralBindingReference</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="defaultStyles">defaultStyles	^#(		#(#code_syntaxError #jaggedEdge #(#color: #(#{Smalltalk.ColorValue} #red))) 		#(#code_dnu #jaggedEdge) 		#(#code_undeclaredVariable #jaggedEdge #(#color: #(#{Smalltalk.ColorValue} #red)))		#(#code_redefinedVariableDefinition #jaggedEdge #(#color: #(#{Smalltalk.ColorValue} #red)))		#(#code_comment #italic #(#color: #(#{Smalltalk.ColorValue} #lightGray))) 		#(#code_keywordMethodName #bold) 		#(#code_unaryMethodName #bold) 		#(#code_binaryMethodName #bold) 		#(#code_array #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_true #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_false #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_nil #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_string #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_character #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_symbol #(#color: #(#{Smalltalk.ColorValue} #magenta))) 		#(#code_number #(#color: #(#{Smalltalk.ColorValue} #magenta)))		#(#code_byteArray #(#color: #(#{Smalltalk.ColorValue} #magenta)))		#(#code_qualifiedReference #(#color: #(#{Smalltalk.ColorValue} #magenta)))		#(#code_self #(#color: #(#{Smalltalk.ColorValue} #blue)))		#(#code_super #(#color: #(#{Smalltalk.ColorValue} #royalBlue)))		#(#code_thisContext #(#color: #(#{Smalltalk.ColorValue} #orange)))		#(#code_sharedVariableReference #(#color: #(#{Smalltalk.ColorValue} #darkCyan)))		#(#code_nameSpaceReference #(#color: #(#{Smalltalk.ColorValue} #darkCyan)))		#(#code_classReference #(#color: #(#{Smalltalk.ColorValue} #purple)))		#(#code_methodVariableDefinition #bold #(#color: #(#{Smalltalk.ColorValue} #darkMagenta)))		#(#code_instanceVariable #(#color: #(#{Smalltalk.ColorValue} #navy)))		#(#code_temporaryVariableDefinition #(#color: #(#{Smalltalk.ColorValue} #darkMagenta)))		#(#code_temporaryVariable #(#color: #(#{Smalltalk.ColorValue} #darkMagenta)))		#(#code_blockArgument #(#color: #(#{Smalltalk.ColorValue} #darkMagenta)))		#(#code_messageSend)		#(#code_primitive)		#(#code_assignment)		#(#code_bracket)		#(#code_parenthesis)		#(#code_return #bold  #(#color: #(#{Smalltalk.ColorValue} #red)))	)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="initialize">initialize	self initializeStyles</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings class</class-id> <category>resources</category><body package="RBCodeHighlighting" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Load styles...' 							#value: #loadStyles ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Save styles...' 							#value: #saveStyles ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Revert to default styles' 							#value: #revertToDefault ) 						#(#{UI.MenuItem} 							#rawLabel: 'E&amp;xit' 							#value: #closeRequest ) ) #(2 1 1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMethodName3:">reduceActionForKeywordMethodName3: nodes 	^self formatKeyword: (nodes at: 2) with: (nodes at: 3)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatements4:">reduceActionForStatements4: nodes 	^self		formatReturn: (nodes at: 1);		formatPeriod: (nodes at: 3)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="namespace:">namespace: aNamespace	namespace := aNamespace</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="removeTemps">removeTemps	temps removeLast</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="binary_symbolId">binary_symbolId	^26</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>privileged evaluation</category><body package="RBCodeHighlighting" selector="valueAtPriority:">valueAtPriority: priority	| activeProcess oldPriority |	activeProcess := Processor activeProcess.	oldPriority := activeProcess priority.	activeProcess priority: priority.	^self ensure: [activeProcess priority: oldPriority]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="currentColor">currentColor	| color |	color := self selectedStyle 				detect: [:each | each class = Array and: [each first = #color:]]				ifNone: [^ColorValue black].	^color last decodeAsLiteralArray</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="isBlockArgument:">isBlockArgument: aString 	^ false " blockArgs anySatisfy: [:each | each = aString] "</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBlock4:">reduceActionForBlock4: nodes 	self		removeTemps;		removeTemps.	^self		formatLeftBracket: (nodes at: 1);		formatBlockArgumentSeparator: (nodes at: 3);		formatRightBracket: (nodes at: 7)</body></methods><methods><class-id>UI.ComposedTextView</class-id> <category>displaying</category><body package="RBCodeHighlighting" selector="boundsOfInterval:">boundsOfInterval: interval 	| rect |	rect := self characterBlockForIndex: interval first.	interval 		do: [:each | rect := rect merge: (self characterBlockForIndex: each)].	^rect</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>class initialization</category><body package="RBCodeHighlighting" selector="initializeStyles">initializeStyles	"self initializeStyles"	| dict removals |	dict := self stylesDictionary.	removals := dict keys select: [:each | (dict at: each) isNil].	removals do: [:each | dict removeKey: each].	CharacterAttributes removeDefaultKeys: removals.	CharacterAttributes defaultsAddAll: dict</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForUnaryMethodName1:">reduceActionForUnaryMethodName1: nodes 	^self formatUnaryMethod: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="displayWithHighlightedText:">displayWithHighlightedText: localText 	| interval oldBounds newBounds selectionShowing start stop |	(selectionShowing := view selectionShowing) 		ifTrue: 			["if something is selected, remember what and deselect"			"NOTE! if no deselect happens, then the selection is displayed at a wrong offset,			so when the selection is drawn again at the end of the method, there may be some			strange text-fragment next to the new selection, which looks ugly"			start := self selectionStartIndex copy.			stop := self selectionStopIndex copy.			view deselect].	interval := self getIntervalForUpdateFromOriginal: self text				withNew: localText.	oldBounds := view boundsOfInterval: interval.	self text setString: self text string setRuns: localText runs.	newBounds := view boundsOfInterval: interval.	view invalidateRectangle: (oldBounds merge: newBounds) repairNow: true.	selectionShowing 		ifTrue: 			["if something has been selected, select it again and show that"			view selectFrom: start to: stop.			view selectAndScroll]		ifFalse: [view selectAt: self selectionStartIndex]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForSimpleMessage1:">reduceActionForSimpleMessage1: nodes 	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForCascade3:">reduceActionForCascade3: nodes 	^(nodes at: 2) do: [:each | self formatMessage: each to: (nodes at: 1)]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForCascade2:">reduceActionForCascade2: nodes 	^(nodes at: 2) do: [:each | self formatMessage: each to: (nodes at: 1)]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatMethodArgument:">formatMethodArgument: variableSmaCCToken 	self formatToken: variableSmaCCToken		with: ((self isInstanceVariable: variableSmaCCToken value) 				ifTrue: [#code_redefinedVariableDefinition]				ifFalse: [#code_methodVariableDefinition]).	args add: variableSmaCCToken value</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatMethod:forClass:namespace:">formatMethod: aText forClass: aClass namespace: aNamespace	| parser |	parser := self on: (ReadStream on: aText).	parser		text: aText;		class: aClass;		namespace: aNamespace.	parser setStartingState: self defaultStartingState.	[parser parse] on: SmaCCParserError do: [:ex | ex return].	^aText</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="loadStyles">loadStyles	| name |	name := Dialog requestFileName: 'Load styles from:' default: 'style.sav'.	name isEmpty ifTrue: [^self].	^self loadStylesFrom: name</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="isStrikeoutHolder">isStrikeoutHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isStrikeoutHolder isNil		ifTrue:			[isStrikeoutHolder := false asValue]		ifFalse:			[isStrikeoutHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatLeftBracket:">formatLeftBracket: aSmaCCToken	self formatToken: aSmaCCToken with: #code_bracket</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="updateStyle">updateStyle	CodeHighlightingParser styles: newStyles.	self invalidateComponent: #method</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForSimpleMessage3:">reduceActionForSimpleMessage3: nodes 	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="namespaceBlock">namespaceBlock	^namespaceBlock ifNil: [namespaceBlock := [nil]].</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scanForToken">scanForToken	self step.	(currentCharacter isLetter or: [currentCharacter == $_]) 		ifTrue: 			[self recordMatch: #(20 32).			self step.			(currentCharacter isLetter 				or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]) 					ifTrue: 						[						[self recordMatch: #(20).						self step.						currentCharacter isLetter 							or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]] 								whileTrue].			currentCharacter == $. ifTrue: [^self scan5].			currentCharacter == $: ifTrue: [^self scan3].			^self reportLastMatch].	(currentCharacter &lt;= Character backspace or: 			[(currentCharacter between: (Character value: 14) and: (Character value: 31)) 				or: 					[currentCharacter == $` or: 							[(currentCharacter between: Character del and: $¿) 								or: [currentCharacter == $× or: [currentCharacter == $÷]]]]]) 		ifTrue: [^self recordAndReportMatch: #(32)].	(currentCharacter == $! or: 			[(currentCharacter between: $% and: $&amp;) or: 					[(currentCharacter between: $* and: $,) or: 							[currentCharacter == $/ or: 									[currentCharacter == $= or: 											[(currentCharacter between: $? and: $@) 												or: [currentCharacter == $\ or: [currentCharacter == $~]]]]]]]) 		ifTrue: 			[self recordMatch: #(26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter isDigit ifTrue: [^self recordAndReportMatch: #number].	(currentCharacter isBlank 		or: [currentCharacter between: Character lf and: Character cr]) 			ifTrue: 				[self recordMatch: #whitespace.				self step.				(currentCharacter isBlank 					or: [currentCharacter between: Character lf and: Character cr]) 						ifTrue: 							[							[self recordMatch: #whitespace.							self step.							currentCharacter isBlank 								or: [currentCharacter between: Character lf and: Character cr]] 									whileTrue].				^self reportLastMatch].	currentCharacter == $" 		ifTrue: 			[self recordMatch: #(32).			self step.			currentCharacter ~~ $" 				ifTrue: [					[self step.					currentCharacter ~~ $"] whileTrue].			currentCharacter == $" ifTrue: [^self recordAndReportMatch: #(28)].			^self reportLastMatch].	currentCharacter == $# ifTrue: [^self recordAndReportMatch: #(4 32)].	currentCharacter == $$ 		ifTrue: 			[self recordMatch: #(32).			self step.			^self recordAndReportMatch: #(30)].	currentCharacter == $' 		ifTrue: 			[self recordMatch: #(32).			self step.			currentCharacter ~~ $' ifTrue: [^self scan2].			currentCharacter == $' ifTrue: [^self scan1].			^self reportLastMatch].	currentCharacter == $( ifTrue: [^self recordAndReportMatch: #(7 32)].	currentCharacter == $) ifTrue: [^self recordAndReportMatch: #(6 32)].	currentCharacter == $- 		ifTrue: 			[self recordMatch: #(26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			currentCharacter isDigit 				ifTrue: [^self recordAndReportMatch: #negative_number].			^self reportLastMatch].	currentCharacter == $. ifTrue: [^self recordAndReportMatch: #(2 32)].	currentCharacter == $: 		ifTrue: 			[self recordMatch: #(19 32).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(11)].			^self reportLastMatch].	currentCharacter == $; ifTrue: [^self recordAndReportMatch: #(3 32)].	currentCharacter == $&lt; 		ifTrue: 			[self recordMatch: #(9 26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $&gt; 		ifTrue: 			[self recordMatch: #(8 26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $[ ifTrue: [^self recordAndReportMatch: #(17 32)].	currentCharacter == $] ifTrue: [^self recordAndReportMatch: #(18 32)].	currentCharacter == $^ ifTrue: [^self recordAndReportMatch: #(16 32)].	currentCharacter == ${ ifTrue: [^self recordAndReportMatch: #(5 32)].	currentCharacter == $| 		ifTrue: 			[self recordMatch: #(1 26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $} ifTrue: [^self recordAndReportMatch: #(10 32)].	^self reportLastMatch</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="setStyle:">setStyle: anArray 	| index |	index := (1 to: newStyles size) 				detect: [:each | (newStyles at: each) first = anArray first]				ifNone: 					[newStyles := newStyles copyWith: anArray.					^self updateStyle].	newStyles at: index put: anArray.	self updateStyle</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="classBlock:">classBlock: aBlock 	classBlock := aBlock</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatMessage:to:">formatMessage: anOrderedCollection to: aClass 	| symbol |	symbol := (self isValidMessage: anOrderedCollection for: aClass) 				ifTrue: [#code_messageSend]				ifFalse: [#code_dnu].	anOrderedCollection do: [:each | self formatToken: each with: symbol].	^aClass</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBlock2:">reduceActionForBlock2: nodes 	^self		formatLeftBracket: (nodes at: 1);		formatRightBracket: (nodes at: 3)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral3:">reduceActionForLiteral3: nodes 	self formatNil: (nodes at: 1).	^UndefinedObject</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatSyntaxErrorFrom:to:">formatSyntaxErrorFrom: startInteger to: stopInteger 	self 		formatFrom: startInteger		to: stopInteger		with: #code_syntaxError</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="addTemps">addTemps	temps add: OrderedCollection new</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral5:">reduceActionForLiteral5: nodes 	self formatNumber: (nodes at: 1).	^(nodes at: 1) value asNumber class</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="smalltalkCommentId">smalltalkCommentId	^28</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedBold">changedBold	self isBoldHolder value 		ifTrue: [self addStyle: #bold]		ifFalse: [self removeStyle: #bold]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBlockArgs1:">reduceActionForBlockArgs1: nodes 	self addTemps.	^self formatBlockVariable: (nodes at: 2) colon: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="beHighlightingWithSettings:">beHighlightingWithSettings: aBlock</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scan4">scan4		[self step.	currentCharacter isLetter 		or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]] 			whileTrue.	currentCharacter == $: 		ifTrue: 			[self recordMatch: #(25).			self step.			(currentCharacter isLetter or: [currentCharacter == $_]) 				ifTrue: [^self scan4]].	^self reportLastMatch</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatTemporaryVariable:">formatTemporaryVariable: aSmaCCToken 	self formatToken: aSmaCCToken		with: (((self isTemporaryVariable: aSmaCCToken value) 				or: [self isInstanceVariable: aSmaCCToken value]) 					ifTrue: [#code_redefinedVariableDefinition]					ifFalse: [#code_temporaryVariableDefinition]).	self addTemp: aSmaCCToken value</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="stylesDictionary">stylesDictionary	| styleDictionary |	styleDictionary := Dictionary new.	self styles do: 			[:each | 			each size &gt; 1 				ifTrue: 					[styleDictionary at: each first						put: 							[:query | 							(2 to: each size) do: 									[:i | 									| style |									style := each at: i.									style isSymbol 										ifTrue: 											[style = #bold 												ifTrue: [query boldness: 0.7]												ifFalse: [query perform: (style , ':') asSymbol with: true]]										ifFalse: [query perform: style first with: style last decodeAsLiteralArray]]]]				ifFalse: [styleDictionary at: each first put: nil]].	^styleDictionary</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="resetState">resetState	self stopHighlighting.	super resetState.	self startHighlighting: 0</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatToken:with:">formatToken: aSmaCCToken with: aValue 	self 		formatFrom: aSmaCCToken startPosition		to: aSmaCCToken stopPosition		with: aValue</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="findErrorHandlerIfNoneUseErrorNumber:">findErrorHandlerIfNoneUseErrorNumber: anInteger 	| startingToken |	startingToken := currentToken.	super findErrorHandlerIfNoneUseErrorNumber: anInteger.	self formatSyntaxErrorFrom: startingToken startPosition		to: currentToken stopPosition</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral12:">reduceActionForLiteral12: nodes 	self formatSymbol: (nodes at: 2) hash: (nodes at: 1).	^Symbol</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimary5:">reduceActionForPrimary5: nodes 	^BlockClosure</body></methods><methods><class-id>Tools.AbstractWorkspace</class-id> <category>actions-delegated</category><body package="RBCodeHighlighting" selector="styleAsSmalltalkCodeMenu">styleAsSmalltalkCodeMenu	"Format the current selection and replace the selection with the formatted code."	&lt;menuItem: 'Style as Smalltalk code'		icon: nil		nameKey: nil		enablement: true		indication: #isStylingSmalltalkCode		menu: #(#menuBar #optionsMenu)		position: 10.4&gt;	self isStylingSmalltalkCode		ifTrue: [self dontStyleSmalltalkCode]		ifFalse: [self styleSmalltalkCode]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend8:">reduceActionForPrimitiveMessageSend8: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedHasColor">changedHasColor	| color |	self updateColorWidgets.	self hasColorHolder value 		ifFalse: 			[self removeColor.			^self].	color := self currentColor.	self setColor: color</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatements2:">reduceActionForStatements2: nodes 	^self formatPeriod: (nodes at: 2)</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="dontStyleSmalltalkCode">dontStyleSmalltalkCode	self textEditor view displayContents text emphasizeAllWith: nil.	Refactory.CodeHighlighter.HighlightingTextEditorController 		revertController: self textEditor.	"#display expects the window to actually be open (have a handle)	 in order to create its graphics context."		self mainWindow isOpen ifTrue: [self mainWindow display]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessage1:">reduceActionForKeywordMessage1: nodes 	^OrderedCollection with: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitives3:">reduceActionForPrimitives3: nodes 	^self formatPrimitiveFrom: (nodes at: 2) to: (nodes at: 4)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-tokens</category><body package="RBCodeHighlighting" selector="emptySymbolTokenId">emptySymbolTokenId	^66</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController</class-id> <category>private</category><body package="RBCodeHighlighting" selector="classBlock">classBlock	^classBlock isNil ifTrue: [[nil]] ifFalse: [classBlock]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedJaggedEdge">changedJaggedEdge	self isJaggedEdgeHolder value 		ifTrue: [self addStyle: #jaggedEdge]		ifFalse: [self removeStyle: #jaggedEdge]</body></methods><methods><class-id>Refactory.CodeHighlighter.HighlightingTextEditorController class</class-id> <category>instance creation</category><body package="RBCodeHighlighting" selector="replaceController:">replaceController: aController 	| new |	aController class = superclass ifFalse: [^aController].	new := self new.	1 to: superclass instSize		do: [:i | new instVarAt: i put: (aController instVarAt: i)].	new become: aController.	aController startHighlighting: 0.	^aController</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBlock3:">reduceActionForBlock3: nodes 	self removeTemps.	^self		formatLeftBracket: (nodes at: 1);		formatRightBracket: (nodes at: 3)</body></methods><methods><class-id>UI.TextEditorController</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="beHighlightingWithSettings:">beHighlightingWithSettings: aBlock	Refactory.CodeHighlighter.HighlightingTextEditorController 		replaceController: self 		doingInitialization: aBlock</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatFalse:">formatFalse: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_false</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForSequenceNode1:">reduceActionForSequenceNode1: nodes 	^self removeTemps</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="lookupClassFor:">lookupClassFor: aString 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private</category><body package="RBCodeHighlighting" selector="isTemporaryVariable:">isTemporaryVariable: aString 	^temps anySatisfy: [:each | each includes: aString]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimary1:">reduceActionForPrimary1: nodes 	self		formatLeftParenthesis: (nodes at: 1);		formatRightParenthesis: (nodes at: 3).	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForCascadeList1:">reduceActionForCascadeList1: nodes 	^OrderedCollection new</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="selectedStyle">selectedStyle	| selection name |	selection := self typeList selection.	selection isNil ifTrue: [^nil].	name := (CodeHighlightingParser styleDescriptions 				detect: [:each | each last = selection]) first.	^newStyles detect: [:each | each first = name] ifNone: [Array with: name]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForMethodSequenceNode1:">reduceActionForMethodSequenceNode1: nodes 	^self addTemps</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="loadStylesFrom:">loadStylesFrom: name 	| styleArray fileStyle file |	name asFilename exists ifFalse: [^Dialog warn: 'Code Highlighting File does not exist !'].	file := name asFilename readStream.	fileStyle := [file upToEnd] ensure: [file close].	(fileStyle isNil and: [fileStyle isEmpty]) 		ifTrue: [^Dialog warn: 'Wrong file contents !'].	styleArray := Compiler evaluate: fileStyle.	styleArray class = Array 		ifFalse: [^Dialog warn: 'Wrong file contents, array was expected !'].	self updateWithLoadedStyles: styleArray</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatNil:">formatNil: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBlockArgs2:">reduceActionForBlockArgs2: nodes 	^self formatBlockVariable: (nodes at: 3) colon: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="isJaggedEdgeHolder">isJaggedEdgeHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isJaggedEdgeHolder isNil		ifTrue:			[isJaggedEdgeHolder := false asValue]		ifFalse:			[isJaggedEdgeHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="changedStyle">changedStyle	| item |	item := self selectedStyle.	item isNil 		ifTrue: 			[self disableAll: self styleWidgets.			#(#isBoldHolder #isStrikeoutHolder #isUnderlineHolder #isJaggedEdgeHolder #isItalicHolder #hasColorHolder) 				do: [:each | (self perform: each) value: false].			^self].	self enableAll: self styleWidgets.	self isBoldHolder value: (item includes: #bold).	self isStrikeoutHolder value: (item includes: #strikeout).	self isUnderlineHolder value: (item includes: #underline).	self isJaggedEdgeHolder value: (item includes: #jaggedEdge).	self isItalicHolder value: (item includes: #italic).	self hasColorHolder value: (item 				anySatisfy: [:each | each class = Array and: [each first = #color:]])</body></methods><methods><class-id>Tools.WorkspacePage</class-id> <category>actions</category><body package="RBCodeHighlighting" selector="styleSmalltalkCode">styleSmalltalkCode	self textEditor beHighlightingWithSettings: 			[:newController | 			newController				isForMethod: false;				classBlock: [nil class];				namespaceBlock: [self doItEnvironment]].</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForLiteral7:">reduceActionForLiteral7: nodes 	self formatString: (nodes at: 1).	^String</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatements5:">reduceActionForStatements5: nodes 	^self		formatReturn: (nodes at: 2);		formatPeriod: (nodes at: 4)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatAssignment:">formatAssignment: aSmaCCToken	self formatToken: aSmaCCToken with: #code_assignment</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBlock1:">reduceActionForBlock1: nodes 	self removeTemps.	^self		formatLeftBracket: (nodes at: 1);		formatBlockArgumentSeparator: (nodes at: 3);		formatRightBracket: (nodes at: 5)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>private-error handling</category><body package="RBCodeHighlighting" selector="errorHandlerStates">errorHandlerStates	| states |	states := super errorHandlerStates.	self patchErrorHandlerStates: states.	^states</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="hasColorHolder">hasColorHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^hasColorHolder isNil		ifTrue:			[hasColorHolder := false asValue]		ifFalse:			[hasColorHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatBlockArgumentSeparator:">formatBlockArgumentSeparator: aSmaCCToken</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="isBoldHolder">isBoldHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isBoldHolder isNil		ifTrue:			[isBoldHolder := false asValue]		ifFalse:			[isBoldHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="removeStyle:">removeStyle: aSymbol 	self selectedStyle isNil ifTrue: [^self].	self setStyle: (self selectedStyle copyWithout: aSymbol)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="removeColor">removeColor	self selectedStyle isNil ifTrue: [^self].	self 		setStyle: (self selectedStyle copyWithout: (self selectedStyle 						detect: [:each | each class = Array and: [each first = #color:]]						ifNone: [^self]))</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForOptional_____2:">reduceActionForOptional_____2: nodes 	^nodes at: 1</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForOptional_____1:">reduceActionForOptional_____1: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner</class-id> <category>generated-scanner</category><body package="RBCodeHighlighting" selector="scan5">scan5	self step.	(currentCharacter isLetter or: [currentCharacter == $_]) 		ifTrue: 			[			[self recordMatch: #(29).			self step.			currentCharacter isLetter 				or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]] 					whileTrue.			currentCharacter == $. ifTrue: [^self scan5]].	^self reportLastMatch</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBinaryMethodName1:">reduceActionForBinaryMethodName1: nodes 	self addTemps.	^self formatBinaryMethod: (nodes at: 1) with: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>changing</category><body package="RBCodeHighlighting" selector="updateColorWidgets">updateColorWidgets	self hasColorHolder value 		ifTrue: 			[(self widgetAt: #color) insideColor: self currentColor.			self showAll: #(#colorButton #color)]		ifFalse: [self hideAll: #(#colorButton #color)]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatRightParenthesis:">formatRightParenthesis: aSmaCCToken	self formatToken: aSmaCCToken with: #code_parenthesis</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimitiveMessageSend10:">reduceActionForPrimitiveMessageSend10: nodes 	^nil</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>initialize-release</category><body package="RBCodeHighlighting" selector="initialize">initialize	super initialize.	self methodHolder value: self exampleMethod.	oldStyles := CodeHighlightingParser styles.	oldDelay := RefreshDelay.	newStyles := oldStyles copy.	self typeList 		list: (CodeHighlightingParser styleDescriptions 				collect: [:each | each last]) asSortedCollection 				asList.	self typeList selectionIndexHolder onChangeSend: #changedStyle to: self.	self hasColorHolder onChangeSend: #updateColorWidgets to: self.	self refreshDelayHolder compute: [:v | RefreshDelay := v].</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForStatementList3:">reduceActionForStatementList3: nodes 	^self formatPeriod: (nodes at: 2)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>private</category><body package="RBCodeHighlighting" selector="exampleMethod">exampleMethod	^'someMethod: anObject	"Type a new method here and see how it formats as you type"	| temp |	#(a b c) do: [:temp | Transcript show: temp].	"temp is redeclared"	self isNil and: [temp isNil] ifTrue: [self foo].	"and:ifTrue: and #foo are not understood"	temp := (''string'' size + #symbol hash).	self ; this is a syntax error.	^undeclaredVariable value + 4 + $a asInteger'</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForBinaryMessage1:">reduceActionForBinaryMessage1: nodes 	^OrderedCollection with: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatSelf:">formatSelf: aSmaCCToken 	self formatToken: aSmaCCToken with: #code_self</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser class</class-id> <category>accessing</category><body package="RBCodeHighlighting" selector="alternateStyles1">alternateStyles1	"self styles: self alternateStyles1"	^#( #(#code_syntaxError #jaggedEdge #(#color: #(#{Graphics.ColorValue} #red))) #(#code_dnu #jaggedEdge) #(#code_undeclaredVariable #jaggedEdge #(#color: #(#{Graphics.ColorValue} #red))) #(#code_redefinedVariableDefinition #jaggedEdge #(#color: #(#{Graphics.ColorValue} #red))) #(#code_comment #(#color: #(#{Graphics.ColorValue} #darkGreen))) #(#code_keywordMethodName #bold) #(#code_unaryMethodName #bold) #(#code_binaryMethodName #bold) #(#code_array #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_true #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_false #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_nil #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_string #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_character #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_symbol #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_number #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_byteArray #(#color: #(#{Graphics.ColorValue} #darkRed))) #(#code_qualifiedReference #(#color: #(#{Graphics.ColorValue} #darkMagenta))) #(#code_self) #(#code_super) #(#code_thisContext) #(#code_sharedVariableReference #(#color: #(#{Graphics.ColorValue} #darkMagenta))) #(#code_nameSpaceReference #(#color: #(#{Graphics.ColorValue} #darkMagenta))) #(#code_classReference #(#color: #(#{Graphics.ColorValue} #darkMagenta))) #(#code_methodVariableDefinition #(#color: #(#{Graphics.ColorValue} #olive))) #(#code_instanceVariable #(#color: #(#{Graphics.ColorValue} #navy))) #(#code_temporaryVariableDefinition #(#color: #(#{Graphics.ColorValue} #darkCyan))) #(#code_temporaryVariable #(#color: #(#{Graphics.ColorValue} #darkCyan))) #(#code_blockArgument #(#color: #(#{Graphics.ColorValue} #olive))) #(#code_messageSend) #(#code_primitive #(#color: #(#{Graphics.ColorValue} #orange))) )</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingScanner class</class-id> <category>generated-comments</category><body package="RBCodeHighlighting" selector="scannerDefinitionComment">scannerDefinitionComment	"&lt;name&gt;	:	[a-zA-Z_ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ] [\wÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ]*	;&lt;number&gt;:	[0-9]	;&lt;negative_number&gt;	:	\- &lt;number&gt;	;&lt;string&gt;	:	\'  [^\']* \' (\' [^\']* \')*	;&lt;keyword&gt;	:	&lt;name&gt; \:	;&lt;multikeyword&gt;	:	&lt;name&gt; \: (&lt;name&gt; \: )+	;&lt;binary_symbol&gt;	:	[\~\-\!\@\%\&amp;\*\+\=\\\|\?\/\&gt;\&lt;\,] [\~\!\@\%\&amp;\*\+\=\\\|\?\/\&gt;\&lt;\,]?	;&lt;whitespace&gt;	:	\s+	;&lt;smalltalkComment&gt;	:	\"" [^\""]* \""	;&lt;dotted_name&gt;	:	&lt;name&gt; (\. &lt;name&gt;)+	;&lt;character&gt;	:	\$ .	;&lt;variable_assignment&gt; : &lt;name&gt; \: \=	;&lt;any_char&gt; : . ; # For VW literal arrays that handle #(;) -&gt; #(#';')"</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForPrimary3:">reduceActionForPrimary3: nodes 	^self formatVariableReference: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForTemporaries2:">reduceActionForTemporaries2: nodes 	^self addTemps</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>generated-reduction actions</category><body package="RBCodeHighlighting" selector="reduceActionForKeywordMessageSend3:">reduceActionForKeywordMessageSend3: nodes 	^self formatMessage: (nodes at: 2) to: (nodes at: 1)</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings</class-id> <category>aspects</category><body package="RBCodeHighlighting" selector="methodHolder">methodHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^methodHolder isNil		ifTrue:			[methodHolder := String new asValue]		ifFalse:			[methodHolder]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingParser</class-id> <category>formatting</category><body package="RBCodeHighlighting" selector="formatFrom:to:with:">formatFrom: startInteger to: stopInteger with: aValue 	text string = string 		ifTrue: 			[text 				addEmphasis: (Array with: aValue)				removeEmphasis: nil				allowDuplicates: false				from: startInteger				to: stopInteger]</body></methods><methods><class-id>Refactory.CodeHighlighter.CodeHighlightingSettings class</class-id> <category>interface specs</category><body package="RBCodeHighlighting" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Code Highlighter Settings' 			#bounds: #(#{Graphics.Rectangle} 720 348 1344 900 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 10 ) 					#name: #Label1 					#label: 'Format Types:' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 35 0 -180 1 200 0 ) 					#name: #types 					#model: #typeList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -170 1 60 0 ) 					#name: #bold 					#flags: 32 					#model: #isBoldHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedBold ) 					#label: 'Bold' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -170 1 35 0 ) 					#name: #italic 					#flags: 32 					#model: #isItalicHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedItalic ) 					#label: 'Italic' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -170 1 85 0 ) 					#name: #underline 					#flags: 32 					#model: #isUnderlineHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedUnderline ) 					#label: 'Underline' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -170 1 110 0 ) 					#name: #jaggedEdge 					#flags: 32 					#model: #isJaggedEdgeHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedJaggedEdge ) 					#label: 'Jagged Edge Underline' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -170 1 135 0 ) 					#name: #strikeout 					#flags: 32 					#model: #isStrikeoutHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedStrikeout ) 					#label: 'Strikeout' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -170 1 160 0 ) 					#name: #colorToggle 					#flags: 32 					#model: #hasColorHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedHasColor ) 					#label: 'Has Color' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -150 1 185 0 -90 1 210 0 ) 					#name: #colorButton 					#flags: 24 					#model: #getColor 					#label: 'Color' 					#defaultable: true ) 				#(#{UI.RegionSpec} 					#layout: #(#{Graphics.LayoutFrame} -80 1 185 0 -5 1 210 0 ) 					#name: #color 					#flags: 16 					#lineWidth: 1 ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 220 0 -10 1 225 0 ) 					#name: #Divider2 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 225 ) 					#name: #Label2 					#label: 'Sample' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 250 0 -180 1 -45 1 ) 					#name: #method 					#model: #methodHolder 					#tabRequiresControl: true ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -170 1 225 0 -10 1 -40 1 ) 					#name: #GroupBox1 					#label: 'Options (don''t affect sample)' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -160 1 250 0 ) 					#name: #Label3 					#label: 'Refresh delay (msec):' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -140 1 280 0 -20 1 305 0 ) 					#name: #refreshDelayHolder 					#model: #refreshDelayHolder 					#type: #number 					#formatString: '0' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -160 1 315 0 ) 					#name: #highlightDebugger 					#model: #highlightDebugger 					#label: 'Highlight debugger' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -170 1 -35 1 -95 1 -10 1 ) 					#name: #okButton 					#model: #ok 					#label: 'OK' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -85 1 -35 1 -10 1 -10 1 ) 					#name: #cancelButton 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><component-property><name>RBCodeHighlighting</name> <type>package</type><property>comment</property> <value>'This adds syntax highlighting to the Refactoring Browser, and optionally to workspaces. It runs a background process that parses the code in the text area and attempts to display coloring for it. For reasonable size methods and reasonable speed machines, it can usually keep up with your typing. In addition to most of the syntactic constructs, it also highlights syntax errors, some compile time errors (e.g., redefined variables), and some runtime errors (e.g., DNU errors):You can customize the colors in the settings tool, using the by using the "Code Highlighter" page, under Tools/Browser in the settings.The latest version can be found in the Cincom Public Store Repository (see http://www.cincomsmalltalk.com). See also http://wiki.cs.uiuc.edu/VisualWorks/RB+Code+Highlighter for more information. An alternative, more subdued, color scheme is also available by evaluating 	Refactory.CodeHighlighter.CodeHighlightingParser styles: Refactory.CodeHighlighter.CodeHighlightingParser alternateStyles1'</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>postLoadBlock</property> <value>[:package | Refactory.CodeHighlighter.CodeHighlightingParser initializeAfterLoad.Transcript	show: package name , ' suggests ''Fixed Colored Text Selection'' package';	cr]</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>packageName</property> <value>'RBCodeHighlighting'</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>prerequisiteParcels</property> <value>#(#('SmaCC Runtime' '') #('ExtraEmphases' '') #('Tools-Settings-VW' '') #('Browser-RefactoringUI' '') #('Browser-BrowserUI' '') #('Debugger-StackInspector' '') #('Debugger-Exception-Modifications' ''))</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>preUnloadBlock</property> <value>[:package | Refactory.CodeHighlighter.HighlightingTextEditorController prepareForUnloading.Refactory.CodeHighlighter.CodeHighlightingParser removeStyles]</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>kSignature</property> <value>#('definedClasses' 4 'definedClassesHash' 25783466817 'extendedClasses' 13 'extendedClassesHash' 2083514339)</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>time</property> <value>'August 20, 2006 21:52:20.804'</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>comment</property> <value>'This adds syntax highlighting to the Refactoring Browser, and optionally to workspaces. It runs a background process that parses the code in the text area and attempts to display coloring for it. For reasonable size methods and reasonable speed machines, it can usually keep up with your typing. In addition to most of the syntactic constructs, it also highlights syntax errors, some compile time errors (e.g., redefined variables), and some runtime errors (e.g., DNU errors):You can customize the colors in the settings tool, using the by using the "Code Highlighter" page, under Tools/Browser in the settings.The latest version can be found in the Cincom Public Store Repository (see http://www.cincomsmalltalk.com). See also http://wiki.cs.uiuc.edu/VisualWorks/RB+Code+Highlighter for more information. An alternative, more subdued, color scheme is also available by evaluating 	Refactory.CodeHighlighter.CodeHighlightingParser styles: Refactory.CodeHighlighter.CodeHighlightingParser alternateStyles1'</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>parcelName</property> <value>'RBCodeHighlighting'</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>developmentPrerequisites</property> <value>#(#(#any 'SmaCC Runtime' '') #(#any 'ExtraEmphases' '') #(#any 'Tools-Settings-VW' '') #(#any 'Browser-RefactoringUI' '') #(#any 'Browser-BrowserUI' '') #(#any 'Debugger-StackInspector' '') #(#any 'Debugger-Exception-Modifications' ''))</value></component-property><component-property><name>RBCodeHighlighting</name> <type>package</type><property>version</property> <value>'1.50'</value></component-property><pundle-loaded><name>RBCodeHighlighting</name><type>package</type><primaryKey>48196</primaryKey><databaseId>'psql_public_cst'</databaseId></pundle-loaded><shared-variable><name>CreateSubclassResponsibilities</name><environment>Tools.ClassCreationDialog</environment><private>false</private><constant>false</constant><category>defaults</category><initializer>false</initializer><attributes><package>Tools-Programming</package></attributes></shared-variable><shared-variable><name>CreateInitializer</name><environment>Tools.ClassCreationDialog</environment><private>false</private><constant>false</constant><category>defaults</category><initializer>false</initializer><attributes><package>Tools-Programming</package></attributes></shared-variable><shared-variable><name>CreateAccessors</name><environment>Tools.ClassCreationDialog</environment><private>false</private><constant>false</constant><category>defaults</category><initializer>false</initializer><attributes><package>Tools-Programming</package></attributes></shared-variable><initialize><variable-id>Tools.ClassCreationDialog.CreateSubclassResponsibilities</variable-id></initialize><initialize><variable-id>Tools.ClassCreationDialog.CreateInitializer</variable-id></initialize><initialize><variable-id>Tools.ClassCreationDialog.CreateAccessors</variable-id></initialize><component-created><name>Robot - Primera Practica</name> <type>package</type></component-created><parcel-loaded><name>Robot - Primera Practica</name> <filename>d:\Documentos\Julián\Lifia\Catedras\Objetos 1 - 2007\VW 7.3.1nc\parcels - objetos 1\Robot - Primera Practica.pcl</filename></parcel-loaded><methods><class-id>Core.Object</class-id> <category>user interface</category><body package="Robot - Primera Practica" selector="inspect">inspect		^PrimitiveObjectInspector openOn: self.</body></methods><methods><class-id>RobotWorldTextEditorController</class-id> <category>accessing</category><body package="Robot - Primera Practica" selector="world">world		^world.</body><body package="Robot - Primera Practica" selector="world:">world: aWorld 		world:=aWorld.</body></methods><methods><class-id>RobotWorldTextEditorController</class-id> <category>private</category><body package="Robot - Primera Practica" selector="doItEnvironment">doItEnvironment		| env |		env:=NameSpace new.		env name: 'RobotNameSpace'.		"env at: 'Robot' put: Robot."		env at: 'world'  put: self world.		self world namedRobots keysAndValuesDo: [:key :value | env at: key put: value].		^env.</body></methods><methods><class-id>RobotController</class-id> <category>events</category><body package="Robot - Primera Practica" selector="redButtonPressedEvent:">redButtonPressedEvent: event		RobotInspector robot: self model.</body></methods><methods><class-id>RobotController</class-id> <category>control</category><body package="Robot - Primera Practica" selector="isControlActive">isControlActive		^self viewHasCursor.</body><body package="Robot - Primera Practica" selector="isControlWanted">isControlWanted		^self viewHasCursor.</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="Robot - Primera Practica" selector="centeredIn:">centeredIn: aPoint		^Rectangle origin: ((aPoint x - (self width // 2)) @ (aPoint y - (self height // 2))) extent:(self width @ self height).</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>testing</category><body package="Robot - Primera Practica" selector="sharesSideWith:">sharesSideWith: aRectangle		^(((self top = aRectangle top or:[self top = aRectangle bottom])		 or:[(self bottom = aRectangle top or:[self bottom = aRectangle bottom])])	 	 or:[(self left = aRectangle left or:[self left = aRectangle right])])		 or:[(self right = aRectangle left or:[self right = aRectangle left])].</body></methods><methods><class-id>RobotView</class-id> <category>accessing</category><body package="Robot - Primera Practica" selector="color">color		^color.</body><body package="Robot - Primera Practica" selector="color:">color: aColor 		color:=aColor.</body><body package="Robot - Primera Practica" selector="model:">model: aModel		super model: aModel.		self color: (self class colorArray at: self class index).		self updateImage: aModel direction.		self oldDirection: aModel direction.		self oldPosition: aModel position.		self updateBounds.		self launchThread.</body></methods><methods><class-id>RobotView</class-id> <category>bounds accessing</category><body package="Robot - Primera Practica" selector="preferredBounds">preferredBounds		^preferredBounds.</body></methods><methods><class-id>RobotView</class-id> <category>controller accessing</category><body package="Robot - Primera Practica" selector="defaultController">defaultController		| rc |		rc:=RobotController new.		^rc.</body></methods><methods><class-id>RobotView</class-id> <category>displaying</category><body package="Robot - Primera Practica" selector="displayOn:">displayOn: aGraphicsContext		self image displayOn: aGraphicsContext at:(self preferredBounds origin).</body></methods><methods><class-id>RobotView</class-id> <category>update</category><body package="Robot - Primera Practica" selector="update:">update: anAspect		(anAspect == #position)	ifTrue:[self updatePosition].		(anAspect == #direction)	ifTrue:[self updateDirection].		self invalidateRectangle: self bounds repairNow: true.</body><body package="Robot - Primera Practica" selector="updateDirection">updateDirection		self oldDirection: self model direction.		self updateImage: self model direction.</body><body package="Robot - Primera Practica" selector="updatePosition">updatePosition		self oldPosition: self model position.		self updateBounds.		self invalidateRectangle: self bounds repairNow: true.</body><body package="Robot - Primera Practica" selector="updateView">updateView		self model notNil ifTrue:[								(self oldPosition ~= self model position) 										ifTrue:[^self updatePosition].								(self oldDirection ~= self model direction)										ifTrue:[^self updateDirection]								].</body></methods><methods><class-id>RobotView</class-id> <category>update - private</category><body package="Robot - Primera Practica" selector="updateBounds">updateBounds		| oldBounds |		oldBounds:=self preferredBounds.		self preferredBounds: (self image preferredBounds centeredIn: self model position).		self changedPreferredBounds: oldBounds.</body><body package="Robot - Primera Practica" selector="updateImage:">updateImage: anAngle		self image: (OpaqueImage figure: (self class basicImage rotatedByDegrees: anAngle) 						shape: (self class mask rotateByDegrees: anAngle to: self class mask copyEmpty interpolate: false)).		self invalidate.</body></methods><methods><class-id>RobotView</class-id> <category>release</category><body package="Robot - Primera Practica" selector="release">release	"Remove the receiver as a dependent of its model."		self updateThread terminate.		^super release.</body></methods><methods><class-id>RobotView</class-id> <category>private</category><body package="Robot - Primera Practica" selector="launchThread">launchThread		self updateThread: ([[true] whileTrue:[(Delay forMilliseconds: 20) wait. self updateView]] fork).</body></methods><methods><class-id>RobotView</class-id> <category>private - accessing</category><body package="Robot - Primera Practica" selector="image">image		^image.</body><body package="Robot - Primera Practica" selector="image:">image: anImage 		image:=anImage.</body><body package="Robot - Primera Practica" selector="oldDirection">oldDirection		^oldDirection.</body><body package="Robot - Primera Practica" selector="oldDirection:">oldDirection: anOldDirection 		oldDirection:=anOldDirection.</body><body package="Robot - Primera Practica" selector="oldPosition">oldPosition		^oldPosition.</body><body package="Robot - Primera Practica" selector="oldPosition:">oldPosition: anOldPosition 		oldPosition:=anOldPosition.</body><body package="Robot - Primera Practica" selector="preferredBounds:">preferredBounds: aRectangle		preferredBounds:=aRectangle.</body><body package="Robot - Primera Practica" selector="updateThread">updateThread		^updateThread.</body><body package="Robot - Primera Practica" selector="updateThread:">updateThread: anUpdateThread 		updateThread:=anUpdateThread.</body></methods><methods><class-id>RobotView class</class-id> <category>resources</category><body package="Robot - Primera Practica" selector="basicImage">basicImage	"UIMaskEditor new openOnClass: self andSelector: #basicImage"	&lt;resource: #image&gt;	^(Image extent: 50@50 depth: 8 bitsPerPixel: 8 palette: (MappedPalette withColors: ((Array new: 184) at: 1 put: (ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 7662); at: 2 put: (ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 6605); at: 3 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 6077); at: 4 put: (ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 6341); at: 5 put: (ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 5812); at: 6 put: (ColorValue scaledRed: 7926 scaledGreen: 7134 scaledBlue: 7134); at: 7 put: (ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 7134); at: 8 put: (ColorValue scaledRed: 7134 scaledGreen: 6869 scaledBlue: 5548); at: 9 put: (ColorValue scaledRed: 7398 scaledGreen: 6869 scaledBlue: 5284); at: 10 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 5548); at: 11 put: (ColorValue scaledRed: 6605 scaledGreen: 6341 scaledBlue: 5284); at: 12 put: (ColorValue scaledRed: 7134 scaledGreen: 6341 scaledBlue: 4756); at: 13 put: (ColorValue scaledRed: 5812 scaledGreen: 5548 scaledBlue: 5548); at: 14 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 4227); at: 15 put: (ColorValue scaledRed: 6341 scaledGreen: 6077 scaledBlue: 4491); at: 16 put: (ColorValue scaledRed: 5812 scaledGreen: 5548 scaledBlue: 4227); at: 17 put: (ColorValue scaledRed: 6341 scaledGreen: 5548 scaledBlue: 3699); at: 18 put: (ColorValue scaledRed: 6869 scaledGreen: 5812 scaledBlue: 4227); at: 19 put: (ColorValue scaledRed: 5812 scaledGreen: 4227 scaledBlue: 4227); at: 20 put: (ColorValue scaledRed: 5812 scaledGreen: 5020 scaledBlue: 3434); at: 21 put: (ColorValue scaledRed: 5548 scaledGreen: 4491 scaledBlue: 2906); at: 22 put: (ColorValue scaledRed: 5020 scaledGreen: 4756 scaledBlue: 3170); at: 23 put: (ColorValue scaledRed: 4756 scaledGreen: 3963 scaledBlue: 2906); at: 24 put: (ColorValue scaledRed: 4756 scaledGreen: 3699 scaledBlue: 3170); at: 25 put: (ColorValue scaledRed: 4491 scaledGreen: 3699 scaledBlue: 2113); at: 26 put: (ColorValue scaledRed: 5020 scaledGreen: 4227 scaledBlue: 2378); at: 27 put: (ColorValue scaledRed: 4756 scaledGreen: 3434 scaledBlue: 2113); at: 28 put: (ColorValue scaledRed: 4227 scaledGreen: 2906 scaledBlue: 1849); at: 29 put: (ColorValue scaledRed: 4756 scaledGreen: 4227 scaledBlue: 2642); at: 30 put: (ColorValue scaledRed: 3434 scaledGreen: 2906 scaledBlue: 1321); at: 31 put: (ColorValue scaledRed: 3963 scaledGreen: 2113 scaledBlue: 1585); at: 32 put: (ColorValue scaledRed: 3170 scaledGreen: 2906 scaledBlue: 1585); at: 33 put: (ColorValue scaledRed: 2906 scaledGreen: 2378 scaledBlue: 1056); at: 34 put: (ColorValue scaledRed: 3170 scaledGreen: 1056 scaledBlue: 792); at: 35 put: (ColorValue scaledRed: 2906 scaledGreen: 1321 scaledBlue: 792); at: 36 put: (ColorValue scaledRed: 2378 scaledGreen: 792 scaledBlue: 528); at: 37 put: (ColorValue scaledRed: 1849 scaledGreen: 264 scaledBlue: 264); at: 38 put: (ColorValue scaledRed: 2113 scaledGreen: 264 scaledBlue: 0); at: 39 put: (ColorValue scaledRed: 2378 scaledGreen: 0 scaledBlue: 0); at: 40 put: ColorValue white; at: 41 put: (ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 7398); at: 42 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7134); at: 43 put: (ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 5812); at: 44 put: (ColorValue scaledRed: 7134 scaledGreen: 6869 scaledBlue: 5284); at: 45 put: (ColorValue scaledRed: 7398 scaledGreen: 6869 scaledBlue: 5020); at: 46 put: (ColorValue scaledRed: 6341 scaledGreen: 5812 scaledBlue: 5812); at: 47 put: (ColorValue scaledRed: 7134 scaledGreen: 6341 scaledBlue: 4491); at: 48 put: (ColorValue scaledRed: 7134 scaledGreen: 5548 scaledBlue: 5284); at: 49 put: (ColorValue scaledRed: 6605 scaledGreen: 5812 scaledBlue: 4227); at: 50 put: (ColorValue scaledRed: 6869 scaledGreen: 6341 scaledBlue: 4756); at: 51 put: (ColorValue scaledRed: 6341 scaledGreen: 4491 scaledBlue: 4491); at: 52 put: (ColorValue scaledRed: 6077 scaledGreen: 5548 scaledBlue: 3699); at: 53 put: (ColorValue scaledRed: 6341 scaledGreen: 5284 scaledBlue: 3699); at: 54 put: (ColorValue scaledRed: 5020 scaledGreen: 4491 scaledBlue: 4491); at: 55 put: (ColorValue scaledRed: 5284 scaledGreen: 4227 scaledBlue: 3170); at: 56 put: (ColorValue scaledRed: 5284 scaledGreen: 3699 scaledBlue: 3699); at: 57 put: (ColorValue scaledRed: 5020 scaledGreen: 4491 scaledBlue: 3170); at: 58 put: (ColorValue scaledRed: 4756 scaledGreen: 4227 scaledBlue: 2378); at: 59 put: (ColorValue scaledRed: 4227 scaledGreen: 2906 scaledBlue: 2906); at: 60 put: (ColorValue scaledRed: 4756 scaledGreen: 3170 scaledBlue: 2113); at: 61 put: (ColorValue scaledRed: 4227 scaledGreen: 3699 scaledBlue: 2113); at: 62 put: (ColorValue scaledRed: 3699 scaledGreen: 3170 scaledBlue: 1849); at: 63 put: (ColorValue scaledRed: 4227 scaledGreen: 2642 scaledBlue: 1849); at: 64 put: (ColorValue scaledRed: 3170 scaledGreen: 2642 scaledBlue: 1585); at: 65 put: (ColorValue scaledRed: 3699 scaledGreen: 1849 scaledBlue: 1849); at: 66 put: (ColorValue scaledRed: 3170 scaledGreen: 1849 scaledBlue: 1056); at: 67 put: (ColorValue scaledRed: 3434 scaledGreen: 1321 scaledBlue: 1321); at: 68 put: (ColorValue scaledRed: 3699 scaledGreen: 2113 scaledBlue: 1585); at: 69 put: (ColorValue scaledRed: 2906 scaledGreen: 1056 scaledBlue: 792); at: 70 put: (ColorValue scaledRed: 2378 scaledGreen: 1056 scaledBlue: 1321); at: 71 put: (ColorValue scaledRed: 2642 scaledGreen: 528 scaledBlue: 264); at: 72 put: (ColorValue scaledRed: 2378 scaledGreen: 528 scaledBlue: 528); at: 73 put: (ColorValue scaledRed: 2906 scaledGreen: 264 scaledBlue: 264); at: 74 put: (ColorValue scaledRed: 2378 scaledGreen: 792 scaledBlue: 264); at: 75 put: (ColorValue scaledRed: 2113 scaledGreen: 0 scaledBlue: 0); at: 76 put: (ColorValue scaledRed: 1849 scaledGreen: 264 scaledBlue: 0); at: 77 put: (ColorValue scaledRed: 1585 scaledGreen: 264 scaledBlue: 264); at: 78 put: (ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 7926); at: 79 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 6869); at: 80 put: (ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 6077); at: 81 put: (ColorValue scaledRed: 7662 scaledGreen: 6341 scaledBlue: 6341); at: 82 put: (ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 5548); at: 83 put: (ColorValue scaledRed: 7398 scaledGreen: 5812 scaledBlue: 5812); at: 84 put: (ColorValue scaledRed: 7134 scaledGreen: 6605 scaledBlue: 5284); at: 85 put: (ColorValue scaledRed: 6869 scaledGreen: 6341 scaledBlue: 4491); at: 86 put: (ColorValue scaledRed: 6869 scaledGreen: 5812 scaledBlue: 5020); at: 87 put: (ColorValue scaledRed: 6605 scaledGreen: 5812 scaledBlue: 3963); at: 88 put: (ColorValue scaledRed: 6869 scaledGreen: 4756 scaledBlue: 4756); at: 89 put: ColorValue magenta; at: 90 put: (ColorValue scaledRed: 6341 scaledGreen: 5812 scaledBlue: 4227); at: 91 put: (ColorValue scaledRed: 6077 scaledGreen: 5284 scaledBlue: 3699); at: 92 put: (ColorValue scaledRed: 5812 scaledGreen: 5284 scaledBlue: 3963); at: 93 put: (ColorValue scaledRed: 5548 scaledGreen: 5020 scaledBlue: 3170); at: 94 put: (ColorValue scaledRed: 5284 scaledGreen: 4491 scaledBlue: 2642); at: 95 put: (ColorValue scaledRed: 5020 scaledGreen: 3699 scaledBlue: 3699); at: 96 put: (ColorValue scaledRed: 5020 scaledGreen: 4491 scaledBlue: 2906); at: 97 put: (ColorValue scaledRed: 4491 scaledGreen: 3963 scaledBlue: 2642); at: 98 put: (ColorValue scaledRed: 4756 scaledGreen: 3963 scaledBlue: 2378); at: 99 put: (ColorValue scaledRed: 4491 scaledGreen: 3170 scaledBlue: 2113); at: 100 put: (ColorValue scaledRed: 4227 scaledGreen: 3434 scaledBlue: 2113); at: 101 put: (ColorValue scaledRed: 3434 scaledGreen: 3170 scaledBlue: 1849); at: 102 put: (ColorValue scaledRed: 3699 scaledGreen: 2378 scaledBlue: 2378); at: 103 put: (ColorValue scaledRed: 3434 scaledGreen: 2378 scaledBlue: 1321); at: 104 put: (ColorValue scaledRed: 3699 scaledGreen: 2113 scaledBlue: 1321); at: 105 put: (ColorValue scaledRed: 2906 scaledGreen: 1849 scaledBlue: 1056); at: 106 put: (ColorValue scaledRed: 3170 scaledGreen: 1585 scaledBlue: 1056); at: 107 put: (ColorValue scaledRed: 3699 scaledGreen: 1849 scaledBlue: 1585); at: 108 put: (ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 1585); at: 109 put: (ColorValue scaledRed: 2378 scaledGreen: 1321 scaledBlue: 792); at: 110 put: (ColorValue scaledRed: 2113 scaledGreen: 792 scaledBlue: 264); at: 111 put: (ColorValue scaledRed: 2378 scaledGreen: 528 scaledBlue: 264); at: 112 put: (ColorValue scaledRed: 1585 scaledGreen: 264 scaledBlue: 0); at: 113 put: (ColorValue scaledRed: 1849 scaledGreen: 0 scaledBlue: 0); at: 114 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7926); at: 115 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 7398); at: 116 put: (ColorValue scaledRed: 7662 scaledGreen: 7662 scaledBlue: 6077); at: 117 put: (ColorValue scaledRed: 7398 scaledGreen: 7134 scaledBlue: 5548); at: 118 put: (ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 5284); at: 119 put: (ColorValue scaledRed: 7134 scaledGreen: 6605 scaledBlue: 5020); at: 120 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 6077); at: 121 put: (ColorValue scaledRed: 6869 scaledGreen: 5284 scaledBlue: 5284); at: 122 put: (ColorValue scaledRed: 7398 scaledGreen: 6605 scaledBlue: 4756); at: 123 put: (ColorValue scaledRed: 6077 scaledGreen: 5812 scaledBlue: 4227); at: 124 put: (ColorValue scaledRed: 6341 scaledGreen: 5548 scaledBlue: 4227); at: 125 put: (ColorValue scaledRed: 6341 scaledGreen: 5812 scaledBlue: 3963); at: 126 put: (ColorValue scaledRed: 6077 scaledGreen: 5284 scaledBlue: 3434); at: 127 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 4756); at: 128 put: (ColorValue scaledRed: 5812 scaledGreen: 4491 scaledBlue: 3170); at: 129 put: (ColorValue scaledRed: 5548 scaledGreen: 4756 scaledBlue: 3170); at: 130 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 3434); at: 131 put: (ColorValue scaledRed: 5284 scaledGreen: 3434 scaledBlue: 3434); at: 132 put: (ColorValue scaledRed: 5812 scaledGreen: 5020 scaledBlue: 3963); at: 133 put: (ColorValue scaledRed: 5020 scaledGreen: 4491 scaledBlue: 2642); at: 134 put: (ColorValue scaledRed: 4491 scaledGreen: 3170 scaledBlue: 3170); at: 135 put: (ColorValue scaledRed: 4491 scaledGreen: 3963 scaledBlue: 2378); at: 136 put: (ColorValue scaledRed: 4756 scaledGreen: 3699 scaledBlue: 2378); at: 137 put: (ColorValue scaledRed: 3963 scaledGreen: 3434 scaledBlue: 2113); at: 138 put: (ColorValue scaledRed: 4491 scaledGreen: 2642 scaledBlue: 2378); at: 139 put: (ColorValue scaledRed: 5812 scaledGreen: 5284 scaledBlue: 3699); at: 140 put: (ColorValue scaledRed: 3699 scaledGreen: 2906 scaledBlue: 1585); at: 141 put: (ColorValue scaledRed: 3963 scaledGreen: 2378 scaledBlue: 1849); at: 142 put: (ColorValue scaledRed: 3170 scaledGreen: 1849 scaledBlue: 1849); at: 143 put: (ColorValue scaledRed: 2906 scaledGreen: 2378 scaledBlue: 1585); at: 144 put: (ColorValue scaledRed: 3434 scaledGreen: 1056 scaledBlue: 1056); at: 145 put: (ColorValue scaledRed: 2906 scaledGreen: 1585 scaledBlue: 1056); at: 146 put: (ColorValue scaledRed: 2906 scaledGreen: 1321 scaledBlue: 1321); at: 147 put: (ColorValue scaledRed: 2378 scaledGreen: 1056 scaledBlue: 792); at: 148 put: (ColorValue scaledRed: 1849 scaledGreen: 528 scaledBlue: 528); at: 149 put: (ColorValue scaledRed: 2378 scaledGreen: 264 scaledBlue: 264); at: 150 put: (ColorValue scaledRed: 1585 scaledGreen: 0 scaledBlue: 0); at: 151 put: (ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 7398); at: 152 put: (ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 6869); at: 153 put: (ColorValue scaledRed: 7926 scaledGreen: 6605 scaledBlue: 6605); at: 154 put: (ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 6077); at: 155 put: (ColorValue scaledRed: 7398 scaledGreen: 6869 scaledBlue: 6869); at: 156 put: (ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 5020); at: 157 put: (ColorValue scaledRed: 6869 scaledGreen: 6077 scaledBlue: 4227); at: 158 put: (ColorValue scaledRed: 6341 scaledGreen: 6077 scaledBlue: 4756); at: 159 put: (ColorValue scaledRed: 6869 scaledGreen: 4491 scaledBlue: 4491); at: 160 put: (ColorValue scaledRed: 6341 scaledGreen: 5548 scaledBlue: 3963); at: 161 put: (ColorValue scaledRed: 6341 scaledGreen: 4756 scaledBlue: 4756); at: 162 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 4491); at: 163 put: (ColorValue scaledRed: 5812 scaledGreen: 5020 scaledBlue: 3699); at: 164 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 3170); at: 165 put: (ColorValue scaledRed: 5548 scaledGreen: 3963 scaledBlue: 3699); at: 166 put: (ColorValue scaledRed: 5020 scaledGreen: 4227 scaledBlue: 2642); at: 167 put: (ColorValue scaledRed: 4756 scaledGreen: 4227 scaledBlue: 2906); at: 168 put: (ColorValue scaledRed: 5284 scaledGreen: 3963 scaledBlue: 2642); at: 169 put: (ColorValue scaledRed: 4756 scaledGreen: 3434 scaledBlue: 2378); at: 170 put: (ColorValue scaledRed: 4227 scaledGreen: 2906 scaledBlue: 2113); at: 171 put: (ColorValue scaledRed: 3963 scaledGreen: 2642 scaledBlue: 2642); at: 172 put: (ColorValue scaledRed: 3963 scaledGreen: 3434 scaledBlue: 1849); at: 173 put: (ColorValue scaledRed: 3434 scaledGreen: 2906 scaledBlue: 1585); at: 174 put: (ColorValue scaledRed: 3699 scaledGreen: 2906 scaledBlue: 1321); at: 175 put: (ColorValue scaledRed: 3434 scaledGreen: 1849 scaledBlue: 1321); at: 176 put: (ColorValue scaledRed: 2642 scaledGreen: 2378 scaledBlue: 1585); at: 177 put: (ColorValue scaledRed: 3170 scaledGreen: 1321 scaledBlue: 792); at: 178 put: (ColorValue scaledRed: 2378 scaledGreen: 1056 scaledBlue: 528); at: 179 put: (ColorValue scaledRed: 2642 scaledGreen: 792 scaledBlue: 528); at: 180 put: (ColorValue scaledRed: 2378 scaledGreen: 792 scaledBlue: 792); at: 181 put: (ColorValue scaledRed: 1849 scaledGreen: 528 scaledBlue: 264); at: 182 put: (ColorValue scaledRed: 2642 scaledGreen: 0 scaledBlue: 0); at: 183 put: (ColorValue scaledRed: 2113 scaledGreen: 264 scaledBlue: 264); at: 184 put: (ColorValue scaledRed: 1321 scaledGreen: 0 scaledBlue: 0); yourself)) usingBits: (ByteArray fromPackedStringlt;?O5!XVE!XVE!XVE!XVE!XVE!XVE!XVE!X@@AXVE!XVE!XVE!XVE!XVE!XVE!XO3&lt;?_W5\DG4?O3=XVE!XVE!XVE!XVE!XVE!XVE!XV@@@VE!XVE!XVE!XVE!XVE!XVC&lt;?O75=WJU"Y&amp;M]_UXPO3&lt;?VE!XVE!XVE!XVE!XVE!XVE @@E!XVE!XVE!XVE!XVE ?O3==DG5]X6Y,[6=/[H,XWAB\U#&lt;?O5!XVE!XVE!XVE!XVE!X@@AXVE!XVE!XVE!XVC&lt;?DEXP H^K$KQ/%YVU-6=/[YB-)W5TK ,?O5!XVE!XVE!XVE!XV@@@VE!XVE!XVE!XVC&lt;G]!B%"6!-[9VU%WA0%YVU%YVU[;E(X1QT%0(?VE!XVE!XVE!XVE @@E!XVE!XVE!XVE ?@".",RRU%YU0\IU0%WA0R$)0\IVU[;Q,LD&gt;WO5!XVE!XVE!XVE!X@@AXVE!XVE!XVE!XO0QS#D.U%YU0R$)0\IVU\D)J\GA0%YV7R8\G%#=XVE!XVE!XVE!XV@@@VE!XVE ?O3&lt;?O48+($YG$YVU%WA0%WBU%YVU\GA0\IT$"RV2L@FWO3&lt;?O3&lt;?VE!XVE @@E!XVE ?]D9OL0]OBJ:5PH%@%YU0\IU0%YVU%YU0\GBQ(E]BIVHH%%L*%""](3=XVE!X@@AXVE!XO2()@3LGS0!A-TBIYYVU\GBU\IVU%YU0\GAK$U]WP"U"A9X3AIZV''U0?VE!XV@@@VE!XVC&lt;GJWYYS"06RH&gt;B)HJB$[YJR$)J\D)JR$)G)EBX&amp;EJTRU(AJUPASR$MO5!XVE @@E!XVE ?&amp;T:!]GM6,KVB''*B L!I@\IU0R+Y0\IV3^@T@\WE1*+X[T9X3]IX)CS=XVE!X@@AXVE!XO4=3VT8+_9QBK2=RT"=8L+NU\GAF\IVU!P@''I2\''I7^SRU*WJ@^VJE$?VE!XV@@@VE!XVC&lt;DVWQOB4EJD)"X&amp;I"XT(I0R$)0,D)JR+LFI2]MI2]1YT,[A9X3@R%5O5!XVE @@E!XVE ?]G)NJ1QFQI!2@@@@\%BQIKIIPZ!)IKQKMR\''I2\''I25KRY&gt;W%3MN]#=XVE!X@@AXVE!XO3@3\7Y''R!I2\)(-_#U^%RRR,QZ_*T24%TT5_ 17&amp;''E1#[ZGJ"$3&amp;UP?VE!XV@@@VE!XVC&gt;#L7T+P2ZEW!^*$YNU%WBU%YT"E9J7%WA0%YVR#S(7M4@%E")N R(KO5!XVE @@E!XVE ?V8 ,](MHR''A0\GA0\GA0%YVU%X67%WA0\GA0\GA0R$)JRSE3BE&lt;CB3=XVE!X@@AXVE!XO0^F''7$G,BY0R7A0\GA0\GBU%YVQ%WA0R''A0\GA0\GA0R*$H@%2]S''T?VE!XV@@@VE!XVC&lt;G^(Y9]#X&amp;R$)0\GA0\D)J\GBU,7A0\GA0\GA0\GA0\F9;TUFD%2$MO5!XVE @@E!XVE ?^ &lt;=LEQS,+UJ\GA0\GA0\GA0\D.6I"YJ\GA0\GA0R$)C] %=C"$)UC=XVE!X@@AXVE!XO3E:!*YTT3,&amp;R''A0\IVU\GBU\IVUR4)J\IVU\IUJR$(%V7%QXUL)S%P?VE!XV@@@VE!XVC&gt;!C%&lt;]L@5URD)J\GBU-9VU-9V7-;^7-9VU%WA0-+X%,B.[U!%TS7PPO5!XVE @@E!XVE  *:M OS"\A6(&amp;R''BU-;^U%[^7-;^7%YVU%YV7\GAJI#XK&amp;6DYL05\+S=XVE!X@@AXVE!XHJ,UXC5_''@\^I$)0-;^7%YV7%[^7-9VU%YVU-9U0R"X6B9-!NX)&lt; J4?VE!XV@@@VE!XVE ?O3&lt;?+G00UT &amp;R+^7%YU0\GB7-9U0R''AK%[^U\D)DJ7$PO3&lt;?O3&lt;?VE!XVE @@E!XVE!XVE!XVH9__@\^Q''BU-;^U%YV7-;^7%YVU%YV7%T,#M%Q9O3=XVE!XVE!XVE!X@@AXVE!XVE!XVE!XOSLPDQ*.QD.U%YU0\IV7%T-KR;Y0[&amp;&amp;.EI1VU#=XVE!XVE!XVE!XV@@@VE!XVE!XVE!XVJ&gt;&amp;XU4SDW&lt;&gt;Z$%0\GBU-9VU\BT!Y1,4U!NDGA0?VE!XVE!XVE!XVE @@E!XVE!XVE!XVE ?O3&lt;=!(Z#U%XZ*V%K%YU0[&amp;(&gt;)5Y=(6FF+C&lt;?VE!XVE!XVE!XVE!X@@AXVE!XVE!XVE!XVE ?O3&lt;?OC2DD:DT*J%AN3,SDE1!!(",O3=XVE!XVE!XVE!XVE!XV@@@VE!XVE!XVE!XVE!XVE ?O6,?OX &lt; EZ_EEXSWVL&lt;OZ0?O5!XVE!XVE!XVE!XVE!XVE @@E!XVE!XVE!XVE!XVE!XVE ?O3&lt;?G8 =!HBFX8",G3&lt;?VE!XVE!XVE!XVE!XVE!XVE!X@@AXVE!XVE!XVE!XVE!XVE!XVE!XO3&lt;?G36HOVP?O3=XVE!XVE!XVE!XVE!XVE!XVE!XV@@@VE!XVE!XVE!XVE!XVE!XVE!XVE!XO3&lt;?O3&ltb'))</body><body package="Robot - Primera Practica" selector="image">image		^OpaqueImage figure: self basicImage shape: self mask.</body><body package="Robot - Primera Practica" selector="mask">mask	"UIMaskEditor new openOnClass: self andSelector: #mask"	&lt;resource: #image&gt;	^(Image extent: 50@50 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O @@@@@@@@G?0@@@@@@@C??8@@@@@@A???&lt;@@@@@@_???&lt;@@@@@C????8@@@@@O???? @@@@@????&gt;@@@@A??????8@@@O??????0@@@???????@@@C??????&lt;@@@O??????0@@@???????@@@C??????&lt;@@@O??????0@@@???????@@@C??????&lt;@@@O??????0@@@???????@@@C??????&lt;@@@O??????0@@@???????@@@C??????&lt;@@@O??????0@@@???????@@@A??????8@@@@_????0@@@@@????&gt;@@@@@C????8@@@@@O????@@@@@@O???0@@@@@@O??&lt;@@@@@@@O??@@@@@@@@G?0@@@@@@@@G&lt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@a'))</body></methods><methods><class-id>RobotView class</class-id> <category>private - accessing</category><body package="Robot - Primera Practica" selector="colorArray">colorArray		| res |				res:=Array new:11.		res at:1  put: ColorValue navy.		res at:2  put: ColorValue black.		res at:3  put: ColorValue brown.		res at:4  put: ColorValue darkCyan.		res at:5  put: ColorValue darkGreen.		res at:6  put: ColorValue darkRed.		res at:7  put: ColorValue olive.		res at:8  put: ColorValue orange.		res at:9  put: ColorValue red.		res at:10 put: ColorValue salmon.		res at:11 put: ColorValue yellow.		^res.</body><body package="Robot - Primera Practica" selector="index">index		Index isNil ifTrue:[Index:=0].		Index:=Index+1.		Index:=Index rem: self colorArray size.		^Index+1.</body></methods><methods><class-id>PathView</class-id> <category>bounds accessing</category><body package="Robot - Primera Practica" selector="preferredBounds">preferredBounds				| minX minY maxX maxY |				minX:=maxX:=self model points first x.		minY:=maxY:=self model points first y.		self model points do:[:p | 								minX:=minX min: p x.								minY:=minY min: p y.								maxX:=maxX max: p x.								maxY:=maxY max: p y.								].		^((minX@minY) corner: (maxX@maxY)) expandedBy: 3.</body></methods><methods><class-id>PathView</class-id> <category>displaying</category><body package="Robot - Primera Practica" selector="displayOn:">displayOn: aGraphicsContext		aGraphicsContext paint: self color.		aGraphicsContext lineWidth: 3.		aGraphicsContext displayPolyline: (self model points).</body></methods><methods><class-id>PathView</class-id> <category>accessing</category><body package="Robot - Primera Practica" selector="color">color		^color.</body><body package="Robot - Primera Practica" selector="color:">color: aColor 		color:=aColor.</body></methods><methods><class-id>PathView class</class-id> <category>instance creation</category><body package="Robot - Primera Practica" selector="model:color:">model: aModel color: aColor		^(super model: aModel) color: aColor; yourself.</body></methods><methods><class-id>RobotWorldView</class-id> <category>accessing</category><body package="Robot - Primera Practica" selector="world">world		^world.</body><body package="Robot - Primera Practica" selector="world:">world: aWorld 		self setWorld: aWorld.</body></methods><methods><class-id>RobotWorldView</class-id> <category>bounds accessing</category><body package="Robot - Primera Practica" selector="computePreferredBounds">computePreferredBounds		| oldBounds |		oldBounds:=preferredBounds.		super computePreferredBounds.		preferredBounds:=preferredBounds merge: self minBounds.		oldBounds notNil ifTrue:[preferredBounds:=preferredBounds merge: oldBounds].		self container setOrigin: (self preferredBounds origin abs).		^preferredBounds.</body></methods><methods><class-id>RobotWorldView</class-id> <category>bounds changing</category><body package="Robot - Primera Practica" selector="changedPreferredBounds:forComponent:">changedPreferredBounds: oldPreferredBoundsOrNil forComponent: aVisualPart		self computePreferredBounds.		self invalidateRectangle: oldPreferredBoundsOrNil repairNow: true.		super changedPreferredBounds: oldPreferredBoundsOrNil forComponent: aVisualPart.</body></methods><methods><class-id>RobotWorldView</class-id> <category>displaying</category><body package="Robot - Primera Practica" selector="displayBackgroungOn:">displayBackgroungOn: aGraphicsContext		| box x y x0 y0 x1 y1 deltaX deltaY |		box:=self preferredBounds.		x0:=box origin x.		x:=(x0 / 100) truncated * 100.		y0:=box origin y.		y:=(y0 / 100) truncated * 100.		deltaX:=box extent x // 100.		deltaY:=box extent y // 100.		x1:=box corner x.		y1:=box corner y.		aGraphicsContext paint: (ColorValue lightGray).		aGraphicsContext displayRectangle: box.		aGraphicsContext paint: (ColorValue darkGray).		(deltaX+1) timesRepeat:[aGraphicsContext displayLineFrom: (x@y0) to: (x@y1).								x:=x + 100].		(deltaY+1) timesRepeat:[aGraphicsContext displayLineFrom: (x0@y) to: (x1@y).								y:=y + 100].</body><body package="Robot - Primera Practica" selector="displayOn:">displayOn: aGraphicsContext		self displayBackgroungOn: aGraphicsContext.		self displayPathsOn:  aGraphicsContext copy.		super displayOn: aGraphicsContext.</body><body package="Robot - Primera Practica" selector="displayPathsOn:">displayPathsOn: aGraphicsContext		self paths do:[:pv | pv displayOn: aGraphicsContext].</body></methods><methods><class-id>RobotWorldView</class-id> <category>initialize</category><body package="Robot - Primera Practica" selector="initialize">initialize		super initialize.		self clearPaths.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private</category><body package="Robot - Primera Practica" selector="invalidateRectangle:repairNow:forComponent:">invalidateRectangle: aRectangle repairNow: aBoolean	forComponent: aVisualComponent		(self preferredBounds sharesSideWith: aRectangle)			ifTrue: [self invalidateRectangle: self bounds repairNow: aBoolean.]			ifFalse:[super invalidateRectangle: aRectangle repairNow: aBoolean forComponent: aVisualComponent].</body><body package="Robot - Primera Practica" selector="layoutComponentsForBounds:">layoutComponentsForBounds: newBounds		| oldBounds |		oldBounds:=preferredBounds.		super layoutComponentsForBounds: newBounds.		preferredBounds:=preferredBounds merge: self minBounds.		oldBounds notNil ifTrue:[preferredBounds:=preferredBounds merge: oldBounds].		self container setOrigin: (self preferredBounds origin abs).</body><body package="Robot - Primera Practica" selector="minBounds">minBounds		^(-500@-250) extent: 1000@500.</body><body package="Robot - Primera Practica" selector="worldChanged">worldChanged		self setUpPaths.		self setUpRobots.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - accessing</category><body package="Robot - Primera Practica" selector="paths">paths		^paths.</body><body package="Robot - Primera Practica" selector="paths:">paths: aPaths 		paths:=aPaths.</body><body package="Robot - Primera Practica" selector="setWorld:">setWorld: aWorld 		world isNil ifFalse:[self removeDependencies].		world:= aWorld.		world isNil ifFalse:[self setDependencies].		self worldChanged.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - dependencies</category><body package="Robot - Primera Practica" selector="release">release		self removeDependencies.		self clearPaths.		super release.		self components do: [:v | v container:nil].</body><body package="Robot - Primera Practica" selector="removeDependencies">removeDependencies		self world retractInterestIn: #robotAdded for: self.		self world retractInterestIn: #robotRemoved for: self.		self world retractInterestIn: #newPath for: self.		self world retractInterestIn: #pathsCleared for: self.</body><body package="Robot - Primera Practica" selector="setDependencies">setDependencies		self world expressInterestIn: #robotAdded for: self sendBack: #addRobot:.		self world expressInterestIn: #robotRemoved for: self sendBack: #removeRobot:.		self world expressInterestIn: #newPath for: self sendBack: #addPath:.		self world expressInterestIn: #pathsCleared for: self sendBack: #clearAllPaths.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - robots</category><body package="Robot - Primera Practica" selector="addRobot:">addRobot: aRobot		self add: (RobotView model: aRobot)."		aRobot expressInterestIn: #clearPaths for: self sendBack: #clearRobotPaths:."</body><body package="Robot - Primera Practica" selector="clearRobots">clearRobots		self components do:[:c | c release; container: nil].		super initialize.</body><body package="Robot - Primera Practica" selector="removeRobot:">removeRobot: aRobot		| view | 		view:=self components detect: [:c | c component model = aRobot].		self remove: view.</body><body package="Robot - Primera Practica" selector="setUpRobots">setUpRobots		self clearRobots.		self world robots do:[:r | self add: (RobotView model: r)].</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - paths</category><body package="Robot - Primera Practica" selector="addPath:">addPath: anArray		| view robot |		robot:=anArray at:2.		view:=PathView 						model: (anArray at:1)						color: (self components detect:[:c | c component model = robot]) component color.		self paths add: view.		view container: self.		self invalidateRectangle: view bounds.</body><body package="Robot - Primera Practica" selector="clearAllPaths">clearAllPaths		self clearPaths.		self invalidate.</body><body package="Robot - Primera Practica" selector="clearPaths">clearPaths		self paths notNil ifTrue:[self paths do:[:p | p release; container: nil]].		self paths: OrderedCollection new.</body><body package="Robot - Primera Practica" selector="setUpPaths">setUpPaths		self clearPaths.		self world paths do:[:p | self addPath: p].</body></methods><methods><class-id>RobotWorldView class</class-id> <category>instance creation</category><body package="Robot - Primera Practica" selector="world:">world: aRobotWorld		^super new world: aRobotWorld.</body></methods><methods><class-id>NoRenamingInspector</class-id> <category>initialize-release</category><body package="Robot - Primera Practica" selector="resetLabel">resetLabel	"Reset the receiver's label"	| win |	(win := builder window) notNil		ifTrue:			[win icon: (Icon constantNamed: #inspector)].</body></methods><methods><class-id>NoRenamingInspector</class-id> <category>interface opening</category><body package="Robot - Primera Practica" selector="postBuildWith:">postBuildWith: aBuilder	| win |	(aBuilder componentAt: #text) widget controller autoAccept: false.	(win := aBuilder window) notNil		ifTrue: [win icon: (Icon constantNamed: #inspector)].</body></methods><methods><class-id>NoRenamingInspector</class-id> <category>private</category><body package="Robot - Primera Practica" selector="fieldMenu">fieldMenu	"Inspector flushMenus"	| m |	m := Menu		labels: 'inspect'		values: #(inspectField).	^m</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Primera Practica" selector="openRobotWorld">openRobotWorld	"openRobotWorld" 	&lt;menuItem: #(#OpenRobot #robot 'Open robotworld ')		icon: #robotIcon		nameKey: nil		menu: #(#launcherToolBar)		position: 110.01		helpText: #(#OpenRobotWorkd #labels 'Open the Robot world')&gt;   RobotApplication new open</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Primera Practica" selector="robotIcon">robotIcon	^RobotApplication robotIcon</body></methods><methods><class-id>InstanceBehaviorInspector</class-id> <category>private-text</category><body package="Robot - Primera Practica" selector="computeText">computeText	^self methodListHolder selections isEmpty		ifTrue:			[self protocolListHolder selections isEmpty				ifTrue:					['']									ifFalse: 					[self classObject sourceCodeTemplate]]		ifFalse: 			[self computeMethodSourceText]</body></methods><methods><class-id>InstanceBehaviorInspector</class-id> <category>resources</category><body package="Robot - Primera Practica" selector="buildMethodListMenu">buildMethodListMenu	| menu |	menu := self class methodListMenu.	menu		augmentFrom: self class		to: InstanceBehaviorInspector		menuName: #methodList		for: self.	^menu</body></methods><methods><class-id>InstanceBehaviorInspector class</class-id> <category>interface specs</category><body package="Robot - Primera Practica" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 512 384 936 710 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.4 0 0.4 ) 					#name: #protocolList 					#model: #protocolListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: #updateRequest ) 					#menu: #protocolListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 0 1 0 0.4 ) 					#name: #methodList 					#model: #methodListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #selectorDoubleClicked 						#requestValueChangeSelector: #updateRequest ) 					#menu: #methodListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.4 0 1 0 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: 						#requestValueChangeSelector: 						#textAcceptAllowed: ) 					#isReadOnly: false 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>InstanceBehaviorInspector class</class-id> <category>resources</category><body package="Robot - Primera Practica" selector="methodListMenu">methodListMenu	"Tools.MenuEditor new openOnClass: self andSelector: #methodListMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #SendIt 					#defaultString: 'Sen&amp;d It' 					#catalogID: #menus ) 				#nameKey: #methodsSendIt 				#value: #sendIt 				#enablementSelector: #singleUnaryMethodIsSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Remove 					#defaultString: '&amp;Remove' 					#catalogID: #menus ) 				#value: #removeMethods 				#enablementSelector: #canRemoveMethods ) ) #(1 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>WorldTempRobotInspector class</class-id> <category>interface specs</category><body package="Robot - Primera Practica" selector="unsegmentedSpec">unsegmentedSpec	"Tools.UIPainter new openOnClass: self andSelector: #unsegmentedSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 562 362 869 697 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEntry: #dragOverSelector 						#dragOver: #dragStartSelector 						#doDrag: #dropSelector 						#drop: #dragExitSelector 						#dragExit: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.4 0 1 ) 					#name: #fieldList 					#flags: 15 					#model: #fieldListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #dive 						#requestValueChangeSelector: #changeRequest ) 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 0 1 0 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: 						#requestValueChangeSelector: 						#textAcceptAllowed: ) 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>RobotInspector</class-id> <category>accessing</category><body package="Robot - Primera Practica" selector="robot">robot		^robot.</body><body package="Robot - Primera Practica" selector="robot:">robot: aRobot 		robot:=aRobot.		self updateValueHolders.</body><body package="Robot - Primera Practica" selector="tabs:">tabs: aTabs 		tabs:=aTabs.</body></methods><methods><class-id>RobotInspector</class-id> <category>actions</category><body package="Robot - Primera Practica" selector="refresh">refresh		self updateValueHolders.</body></methods><methods><class-id>RobotInspector</class-id> <category>aspects</category><body package="Robot - Primera Practica" selector="battery">battery	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^battery isNil		ifTrue:			[battery := String new asValue]		ifFalse:			[battery]</body><body package="Robot - Primera Practica" selector="browser">browser		^browser.</body><body package="Robot - Primera Practica" selector="direction">direction	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^direction isNil		ifTrue:			[direction := String new asValue]		ifFalse:			[direction]</body><body package="Robot - Primera Practica" selector="explanationText">explanationText		^explanationText.</body><body package="Robot - Primera Practica" selector="inspector">inspector		^inspector.</body><body package="Robot - Primera Practica" selector="myselfText">myselfText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^myselfText</body><body package="Robot - Primera Practica" selector="name">name	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^name isNil		ifTrue:			[name := String new asValue]		ifFalse:			[name]</body><body package="Robot - Primera Practica" selector="position">position	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^position isNil		ifTrue:			[position := String new asValue]		ifFalse:			[position]</body><body package="Robot - Primera Practica" selector="tabs">tabs		tabs isNil			ifTrue: 				[(tabs := SelectionInList with: self labelArray) selectionIndex: 1.				tabs selectionIndexHolder onChangeSend: #tabsChanged to: self].		^tabs</body><body package="Robot - Primera Practica" selector="theInspector">theInspector		^inspector.</body></methods><methods><class-id>RobotInspector</class-id> <category>initialize</category><body package="Robot - Primera Practica" selector="initialize">initialize		super initialize.		self myselfText: self defaultText asText asValue.		self inspector: NoRenamingInspector new.		self browser: (InstanceBehaviorInspector on: nil).		self explanationText: 'Mientras que los objetos se refieren a mi con el nombre de ''robotech'' yo me refiero a mi mismos como self' asText.		self explanationText emphasizeFrom: (self explanationText size - 4) to: self explanationText size with: #bold.		self direction: '' asValue.		self battery: '' asValue.		self position: '' asValue.</body></methods><methods><class-id>RobotInspector</class-id> <category>changing</category><body package="Robot - Primera Practica" selector="tabsChanged">tabsChanged	"Every time a tab is changed, a new sub canvas gets installed."		| index |		index := self tabs selectionIndex.		(self builder componentAt: #tabbing) widget client: self spec: (self specArray at: index)</body></methods><methods><class-id>RobotInspector</class-id> <category>interface opening</category><body package="Robot - Primera Practica" selector="postOpenWith:">postOpenWith: aBuilder 		super postOpenWith: aBuilder.		self tabsChanged</body></methods><methods><class-id>RobotInspector</class-id> <category>menus</category><body package="Robot - Primera Practica" selector="doItContext">doItContext		^nil</body><body package="Robot - Primera Practica" selector="doItReceiver">doItReceiver		^self robot.</body><body package="Robot - Primera Practica" selector="myselfTextMenu">myselfTextMenu		^[Menu				labelList: ParagraphEditor editGroupLabels, #(('do it' 'print it' 'inspect'))				values: ParagraphEditor editGroupSelectors, #(doIt printIt inspectIt)].</body></methods><methods><class-id>RobotInspector</class-id> <category>private - accessing</category><body package="Robot - Primera Practica" selector="battery:">battery: aBattery 		battery:=aBattery.</body><body package="Robot - Primera Practica" selector="browser:">browser: aBrowser 		browser:=aBrowser.</body><body package="Robot - Primera Practica" selector="defaultText">defaultText^'"Me envío a mi mismo el mensaje #direction:, con parámetro 180"self direction: 180"Avanzo 30 pasos"self move: 30"Mensajes en cascada: dejo marcado mi recorrido y avanzo 20 pasos"self brushDown; move: 30'</body><body package="Robot - Primera Practica" selector="direction:">direction: aDirection 		direction:=aDirection.</body><body package="Robot - Primera Practica" selector="explanationText:">explanationText: anExplanationText 		explanationText:=anExplanationText.</body><body package="Robot - Primera Practica" selector="inspector:">inspector: anInspector 		inspector:=anInspector.</body><body package="Robot - Primera Practica" selector="labelArray">labelArray		^Array			with: (self robot world getRobotName: self robot)"			with: 'self'"			with: 'Inside an inspector'			with: 'Definition'</body><body package="Robot - Primera Practica" selector="myselfText:">myselfText: aText		myselfText:=aText.</body><body package="Robot - Primera Practica" selector="name:">name: aName 		name:=aName.</body><body package="Robot - Primera Practica" selector="position:">position: aPosition 		position:=aPosition.</body><body package="Robot - Primera Practica" selector="specArray">specArray	"Private - The list of associated sub canvaes. See also #labelArray."	^#(#presentation #inspector #robotBrowser).</body></methods><methods><class-id>RobotInspector</class-id> <category>private</category><body package="Robot - Primera Practica" selector="updateValueHolders">updateValueHolders		| bat |		bat:=self robot battery.		self direction value: ('Dirección : ' , self robot direction printString , '°').		self battery value:  ('Batería : ' , (bat charge printString) , '  (' , (bat charge * 100 / bat capacity) rounded printString , '%)').		self position value: ('Posición : ' , self robot position printString).		self inspector inspect: self robot.		self browser initialize: self robot.</body></methods><methods><class-id>RobotInspector class</class-id> <category>interface specs</category><body package="Robot - Primera Practica" selector="inspector">inspector	"UIPainter new openOnClass: self andSelector: #inspector"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Robot Inspector' 			#min: #(#Point 398 405 ) 			#max: #(#Point 398 405 ) 			#bounds: #(#Rectangle 281 158 679 563 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#SubCanvasSpec 					#layout: #(#LayoutFrame 0 0 0 0 0 1 -30 1 ) 					#flags: 0 					#majorKey: #NoRenamingInspector 					#minorKey: #windowSpec 					#clientKey: #theInspector ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -56 1 -25 1 -2 1 -2 1 ) 					#model: #refresh 					#label: 'Refresh' 					#defaultable: true ) ) ) )</body><body package="Robot - Primera Practica" selector="myself">myself	"UIPainter new openOnClass: self andSelector: #myself"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Robot Inspector' 			#min: #(#Point 398 405 ) 			#max: #(#Point 398 405 ) 			#bounds: #(#Rectangle 281 158 679 563 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#TextEditorSpec 					#layout: #(#LayoutFrame 1 0 0 0.5 -1 1 -1 1 ) 					#model: #myselfText 					#menu: #myselfTextMenu ) 				#(#TextEditorSpec 					#layout: #(#LayoutFrame 1 0 7 0.2 -1 1 -1 0.5 ) 					#flags: 4 					#model: #explanationText 					#alignment: #center 					#style: #systemDefault 					#isReadOnly: true ) ) ) )</body><body package="Robot - Primera Practica" selector="presentation">presentation	"UIPainter new openOnClass: self andSelector: #presentation"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Robot Inspector' 			#min: #(#Point 398 405 ) 			#max: #(#Point 398 405 ) 			#bounds: #(#Rectangle 470 139 868 544 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#InputFieldSpec 					#layout: #(#Rectangle 192 33 349 58 ) 					#flags: 0 					#model: #position 					#tabable: false 					#isReadOnly: true ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 192 57 349 82 ) 					#flags: 0 					#model: #direction 					#tabable: false 					#isReadOnly: true ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 192 81 349 106 ) 					#flags: 0 					#model: #battery 					#tabable: false 					#isReadOnly: true ) 				#(#LabelSpec 					#layout: #(#Rectangle 30 30 156 139 ) 					#label: #image 					#hasCharacterOrientedLabel: false ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -56 1 -25 1 -2 1 -2 1 ) 					#model: #refresh 					#label: 'Refresh' 					#defaultable: true ) ) ) )</body><body package="Robot - Primera Practica" selector="robotBrowser">robotBrowser	"UIPainter new openOnClass: self andSelector: #robotBrowser"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Robot Inspector' 			#min: #(#Point 398 405 ) 			#max: #(#Point 398 405 ) 			#bounds: #(#Rectangle 281 158 679 563 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#SubCanvasSpec 					#layout: #(#LayoutFrame 0 0 0 0 0 1 0 1 ) 					#flags: 0 					#majorKey: #InstanceBehaviorInspector 					#minorKey: #windowSpec 					#clientKey: #browser ) ) ) )</body><body package="Robot - Primera Practica" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Robot Inspector' 			#min: #(#Point 398 405 ) 			#max: #(#Point 398 405 ) 			#bounds: #(#Rectangle 281 158 679 563 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#TabControlSpec 					#layout: #(#LayoutFrame 1 0 8 0 -1 1 -30 1 ) 					#name: #tabbing 					#model: #tabs 					#labels: #() ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -61 1 -26 1 -1 1 -1 1 ) 					#model: #closeRequest 					#label: 'Close' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>RobotInspector class</class-id> <category>resources</category><body package="Robot - Primera Practica" selector="basicImage">basicImage	"UIMaskEditor new openOnClass: self andSelector: #basicImage"	&lt;resource: #image&gt;	^(Image extent: 126@109 depth: 8 bitsPerPixel: 8 palette: (MappedPalette withColors: ((Array new: 205) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 7662); at: 3 put: (ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 7134); at: 4 put: (ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 6341); at: 5 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 5548); at: 6 put: (ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 5812); at: 7 put: (ColorValue scaledRed: 7662 scaledGreen: 6869 scaledBlue: 5020); at: 8 put: (ColorValue scaledRed: 7398 scaledGreen: 6869 scaledBlue: 5284); at: 9 put: (ColorValue scaledRed: 6869 scaledGreen: 6341 scaledBlue: 5020); at: 10 put: (ColorValue scaledRed: 7134 scaledGreen: 6341 scaledBlue: 4756); at: 11 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 4227); at: 12 put: (ColorValue scaledRed: 6869 scaledGreen: 5020 scaledBlue: 5020); at: 13 put: (ColorValue scaledRed: 5812 scaledGreen: 5548 scaledBlue: 4227); at: 14 put: (ColorValue scaledRed: 6341 scaledGreen: 5548 scaledBlue: 3699); at: 15 put: (ColorValue scaledRed: 6077 scaledGreen: 5548 scaledBlue: 3963); at: 16 put: (ColorValue scaledRed: 5812 scaledGreen: 5020 scaledBlue: 3434); at: 17 put: (ColorValue scaledRed: 5284 scaledGreen: 4491 scaledBlue: 3170); at: 18 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 2906); at: 19 put: (ColorValue scaledRed: 5548 scaledGreen: 3699 scaledBlue: 3699); at: 20 put: (ColorValue scaledRed: 4756 scaledGreen: 3434 scaledBlue: 3434); at: 21 put: (ColorValue scaledRed: 4756 scaledGreen: 4227 scaledBlue: 2642); at: 22 put: (ColorValue scaledRed: 5812 scaledGreen: 4227 scaledBlue: 2906); at: 23 put: (ColorValue scaledRed: 3963 scaledGreen: 3699 scaledBlue: 2642); at: 24 put: (ColorValue scaledRed: 5020 scaledGreen: 2642 scaledBlue: 2642); at: 25 put: (ColorValue scaledRed: 3699 scaledGreen: 3170 scaledBlue: 2113); at: 26 put: (ColorValue scaledRed: 3963 scaledGreen: 3170 scaledBlue: 1849); at: 27 put: (ColorValue scaledRed: 4227 scaledGreen: 2906 scaledBlue: 1849); at: 28 put: (ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 2113); at: 29 put: (ColorValue scaledRed: 3170 scaledGreen: 2906 scaledBlue: 1585); at: 30 put: (ColorValue scaledRed: 3434 scaledGreen: 1849 scaledBlue: 1056); at: 31 put: (ColorValue scaledRed: 2906 scaledGreen: 2378 scaledBlue: 1056); at: 32 put: (ColorValue scaledRed: 2642 scaledGreen: 2378 scaledBlue: 1321); at: 33 put: (ColorValue scaledRed: 3170 scaledGreen: 2642 scaledBlue: 1849); at: 34 put: (ColorValue scaledRed: 2906 scaledGreen: 1321 scaledBlue: 792); at: 35 put: (ColorValue scaledRed: 3434 scaledGreen: 2906 scaledBlue: 1321); at: 36 put: (ColorValue scaledRed: 1585 scaledGreen: 1321 scaledBlue: 792); at: 37 put: (ColorValue scaledRed: 2378 scaledGreen: 1056 scaledBlue: 264); at: 38 put: (ColorValue scaledRed: 2642 scaledGreen: 792 scaledBlue: 264); at: 39 put: (ColorValue scaledRed: 1849 scaledGreen: 264 scaledBlue: 264); at: 40 put: (ColorValue scaledRed: 2113 scaledGreen: 264 scaledBlue: 0); at: 41 put: (ColorValue scaledRed: 2378 scaledGreen: 0 scaledBlue: 0); at: 42 put: (ColorValue scaledRed: 792 scaledGreen: 792 scaledBlue: 792); at: 43 put: ColorValue white; at: 44 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7134); at: 45 put: (ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 7398); at: 46 put: (ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 6341); at: 47 put: (ColorValue scaledRed: 8191 scaledGreen: 6869 scaledBlue: 6869); at: 48 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 5812); at: 49 put: (ColorValue scaledRed: 7926 scaledGreen: 6341 scaledBlue: 6341); at: 50 put: (ColorValue scaledRed: 7662 scaledGreen: 5812 scaledBlue: 5812); at: 51 put: (ColorValue scaledRed: 7398 scaledGreen: 6869 scaledBlue: 5020); at: 52 put: (ColorValue scaledRed: 7134 scaledGreen: 6869 scaledBlue: 5284); at: 53 put: (ColorValue scaledRed: 7134 scaledGreen: 6341 scaledBlue: 4491); at: 54 put: (ColorValue scaledRed: 6869 scaledGreen: 6341 scaledBlue: 4756); at: 55 put: (ColorValue scaledRed: 6869 scaledGreen: 5812 scaledBlue: 3963); at: 56 put: (ColorValue scaledRed: 6341 scaledGreen: 4491 scaledBlue: 4491); at: 57 put: (ColorValue scaledRed: 6077 scaledGreen: 5548 scaledBlue: 3699); at: 58 put: (ColorValue scaledRed: 5812 scaledGreen: 5020 scaledBlue: 3170); at: 59 put: (ColorValue scaledRed: 5548 scaledGreen: 5020 scaledBlue: 3434); at: 60 put: (ColorValue scaledRed: 4756 scaledGreen: 4491 scaledBlue: 3434); at: 61 put: (ColorValue scaledRed: 5020 scaledGreen: 4491 scaledBlue: 3170); at: 62 put: (ColorValue scaledRed: 5284 scaledGreen: 4491 scaledBlue: 2906); at: 63 put: (ColorValue scaledRed: 3434 scaledGreen: 3170 scaledBlue: 2113); at: 64 put: (ColorValue scaledRed: 3699 scaledGreen: 3170 scaledBlue: 1849); at: 65 put: (ColorValue scaledRed: 3170 scaledGreen: 2113 scaledBlue: 2113); at: 66 put: (ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 1849); at: 67 put: (ColorValue scaledRed: 3434 scaledGreen: 2642 scaledBlue: 1321); at: 68 put: (ColorValue scaledRed: 3699 scaledGreen: 2378 scaledBlue: 1321); at: 69 put: (ColorValue scaledRed: 2378 scaledGreen: 2113 scaledBlue: 1585); at: 70 put: (ColorValue scaledRed: 3699 scaledGreen: 1849 scaledBlue: 1849); at: 71 put: (ColorValue scaledRed: 2642 scaledGreen: 2378 scaledBlue: 1056); at: 72 put: (ColorValue scaledRed: 3170 scaledGreen: 2642 scaledBlue: 1585); at: 73 put: (ColorValue scaledRed: 1849 scaledGreen: 792 scaledBlue: 792); at: 74 put: (ColorValue scaledRed: 2378 scaledGreen: 792 scaledBlue: 264); at: 75 put: (ColorValue scaledRed: 2906 scaledGreen: 264 scaledBlue: 264); at: 76 put: (ColorValue scaledRed: 1056 scaledGreen: 792 scaledBlue: 264); at: 77 put: (ColorValue scaledRed: 2113 scaledGreen: 0 scaledBlue: 0); at: 78 put: (ColorValue scaledRed: 528 scaledGreen: 264 scaledBlue: 0); at: 79 put: (ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 264); at: 80 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 6869); at: 81 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 6341); at: 82 put: (ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 6077); at: 83 put: (ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 6869); at: 84 put: (ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 5548); at: 85 put: (ColorValue scaledRed: 7398 scaledGreen: 7134 scaledBlue: 5812); at: 86 put: (ColorValue scaledRed: 7134 scaledGreen: 6605 scaledBlue: 6605); at: 87 put: (ColorValue scaledRed: 7398 scaledGreen: 6605 scaledBlue: 5020); at: 88 put: (ColorValue scaledRed: 6341 scaledGreen: 5812 scaledBlue: 5548); at: 89 put: (ColorValue scaledRed: 6869 scaledGreen: 6077 scaledBlue: 4756); at: 90 put: (ColorValue scaledRed: 7134 scaledGreen: 5284 scaledBlue: 5284); at: 91 put: (ColorValue scaledRed: 6605 scaledGreen: 5812 scaledBlue: 3963); at: 92 put: (ColorValue scaledRed: 6341 scaledGreen: 5812 scaledBlue: 4227); at: 93 put: (ColorValue scaledRed: 5812 scaledGreen: 5284 scaledBlue: 5284); at: 94 put: (ColorValue scaledRed: 7134 scaledGreen: 6077 scaledBlue: 4491); at: 95 put: (ColorValue scaledRed: 6341 scaledGreen: 5020 scaledBlue: 3699); at: 96 put: (ColorValue scaledRed: 5812 scaledGreen: 4491 scaledBlue: 3434); at: 97 put: (ColorValue scaledRed: 5812 scaledGreen: 5020 scaledBlue: 2906); at: 98 put: (ColorValue scaledRed: 5548 scaledGreen: 5020 scaledBlue: 3170); at: 99 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 3699); at: 100 put: (ColorValue scaledRed: 5020 scaledGreen: 4491 scaledBlue: 2906); at: 101 put: (ColorValue scaledRed: 5812 scaledGreen: 3963 scaledBlue: 3963); at: 102 put: (ColorValue scaledRed: 4227 scaledGreen: 3963 scaledBlue: 2906); at: 103 put: (ColorValue scaledRed: 4756 scaledGreen: 3963 scaledBlue: 2378); at: 104 put: (ColorValue scaledRed: 4227 scaledGreen: 3434 scaledBlue: 2113); at: 105 put: (ColorValue scaledRed: 3963 scaledGreen: 3434 scaledBlue: 2378); at: 106 put: (ColorValue scaledRed: 4227 scaledGreen: 3699 scaledBlue: 1849); at: 107 put: (ColorValue scaledRed: 3434 scaledGreen: 2906 scaledBlue: 2113); at: 108 put: (ColorValue scaledRed: 4756 scaledGreen: 3699 scaledBlue: 2642); at: 109 put: (ColorValue scaledRed: 4491 scaledGreen: 2642 scaledBlue: 2642); at: 110 put: (ColorValue scaledRed: 4227 scaledGreen: 2378 scaledBlue: 1849); at: 111 put: (ColorValue scaledRed: 3699 scaledGreen: 2378 scaledBlue: 2378); at: 112 put: (ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 1585); at: 113 put: (ColorValue scaledRed: 3170 scaledGreen: 1585 scaledBlue: 1056); at: 114 put: (ColorValue scaledRed: 2378 scaledGreen: 2113 scaledBlue: 1321); at: 115 put: (ColorValue scaledRed: 3170 scaledGreen: 1321 scaledBlue: 1321); at: 116 put: (ColorValue scaledRed: 1849 scaledGreen: 1585 scaledBlue: 1056); at: 117 put: (ColorValue scaledRed: 2906 scaledGreen: 792 scaledBlue: 792); at: 118 put: (ColorValue scaledRed: 3434 scaledGreen: 3170 scaledBlue: 1849); at: 119 put: (ColorValue scaledRed: 1321 scaledGreen: 1056 scaledBlue: 792); at: 120 put: (ColorValue scaledRed: 3699 scaledGreen: 3170 scaledBlue: 1585); at: 121 put: (ColorValue scaledRed: 3170 scaledGreen: 2642 scaledBlue: 1321); at: 122 put: (ColorValue scaledRed: 1056 scaledGreen: 1056 scaledBlue: 1056); at: 123 put: (ColorValue scaledRed: 1585 scaledGreen: 264 scaledBlue: 0); at: 124 put: (ColorValue scaledRed: 1849 scaledGreen: 0 scaledBlue: 0); at: 125 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7926); at: 126 put: (ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 6869); at: 127 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 6605); at: 128 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 7398); at: 129 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 6077); at: 130 put: (ColorValue scaledRed: 7398 scaledGreen: 7134 scaledBlue: 5548); at: 131 put: (ColorValue scaledRed: 7926 scaledGreen: 6077 scaledBlue: 6077); at: 132 put: (ColorValue scaledRed: 6869 scaledGreen: 6605 scaledBlue: 5284); at: 133 put: (ColorValue scaledRed: 7134 scaledGreen: 6605 scaledBlue: 5020); at: 134 put: (ColorValue scaledRed: 6869 scaledGreen: 6341 scaledBlue: 4227); at: 135 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 4756); at: 136 put: (ColorValue scaledRed: 6869 scaledGreen: 6077 scaledBlue: 4491); at: 137 put: (ColorValue scaledRed: 6341 scaledGreen: 5812 scaledBlue: 3963); at: 138 put: (ColorValue scaledRed: 6077 scaledGreen: 5548 scaledBlue: 4491); at: 139 put: (ColorValue scaledRed: 6341 scaledGreen: 5548 scaledBlue: 4227); at: 140 put: (ColorValue scaledRed: 6077 scaledGreen: 5284 scaledBlue: 3434); at: 141 put: (ColorValue scaledRed: 5812 scaledGreen: 5284 scaledBlue: 3699); at: 142 put: (ColorValue scaledRed: 6077 scaledGreen: 5020 scaledBlue: 3699); at: 143 put: (ColorValue scaledRed: 5548 scaledGreen: 4756 scaledBlue: 3170); at: 144 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 3434); at: 145 put: (ColorValue scaledRed: 5812 scaledGreen: 4491 scaledBlue: 4491); at: 146 put: (ColorValue scaledRed: 5020 scaledGreen: 4227 scaledBlue: 2906); at: 147 put: (ColorValue scaledRed: 5284 scaledGreen: 3434 scaledBlue: 3434); at: 148 put: (ColorValue scaledRed: 4491 scaledGreen: 3170 scaledBlue: 3170); at: 149 put: (ColorValue scaledRed: 6605 scaledGreen: 5284 scaledBlue: 4227); at: 150 put: (ColorValue scaledRed: 4227 scaledGreen: 3434 scaledBlue: 1849); at: 151 put: (ColorValue scaledRed: 3170 scaledGreen: 2906 scaledBlue: 2113); at: 152 put: (ColorValue scaledRed: 3699 scaledGreen: 2906 scaledBlue: 1585); at: 153 put: (ColorValue scaledRed: 3963 scaledGreen: 2642 scaledBlue: 1585); at: 154 put: (ColorValue scaledRed: 3434 scaledGreen: 3170 scaledBlue: 1585); at: 155 put: (ColorValue scaledRed: 3170 scaledGreen: 2378 scaledBlue: 1321); at: 156 put: (ColorValue scaledRed: 3699 scaledGreen: 3170 scaledBlue: 1321); at: 157 put: (ColorValue scaledRed: 2906 scaledGreen: 1849 scaledBlue: 792); at: 158 put: (ColorValue scaledRed: 2642 scaledGreen: 1585 scaledBlue: 1321); at: 159 put: (ColorValue scaledRed: 3434 scaledGreen: 2906 scaledBlue: 1849); at: 160 put: (ColorValue scaledRed: 1585 scaledGreen: 1585 scaledBlue: 1056); at: 161 put: (ColorValue scaledRed: 2378 scaledGreen: 1321 scaledBlue: 528); at: 162 put: (ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 1321); at: 163 put: (ColorValue scaledRed: 1849 scaledGreen: 792 scaledBlue: 264); at: 164 put: (ColorValue scaledRed: 792 scaledGreen: 528 scaledBlue: 264); at: 165 put: (ColorValue scaledRed: 1585 scaledGreen: 0 scaledBlue: 0); at: 166 put: (ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 0); at: 167 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7662); at: 168 put: (ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 7398); at: 169 put: (ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 6605); at: 170 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 5812); at: 171 put: (ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 6077); at: 172 put: (ColorValue scaledRed: 7926 scaledGreen: 6605 scaledBlue: 6605); at: 173 put: (ColorValue scaledRed: 7662 scaledGreen: 6869 scaledBlue: 5284); at: 174 put: (ColorValue scaledRed: 7398 scaledGreen: 6869 scaledBlue: 5548); at: 175 put: (ColorValue scaledRed: 7398 scaledGreen: 5548 scaledBlue: 5548); at: 176 put: (ColorValue scaledRed: 7134 scaledGreen: 6605 scaledBlue: 4756); at: 177 put: (ColorValue scaledRed: 7398 scaledGreen: 6341 scaledBlue: 4756); at: 178 put: (ColorValue scaledRed: 6869 scaledGreen: 6077 scaledBlue: 4227); at: 179 put: (ColorValue scaledRed: 6341 scaledGreen: 6077 scaledBlue: 4756); at: 180 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 4491); at: 181 put: (ColorValue scaledRed: 6341 scaledGreen: 5548 scaledBlue: 3963); at: 182 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 5812); at: 183 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 3170); at: 184 put: (ColorValue scaledRed: 5548 scaledGreen: 4756 scaledBlue: 2906); at: 185 put: (ColorValue scaledRed: 5020 scaledGreen: 4227 scaledBlue: 2642); at: 186 put: (ColorValue scaledRed: 5284 scaledGreen: 3963 scaledBlue: 2642); at: 187 put: (ColorValue scaledRed: 4491 scaledGreen: 3699 scaledBlue: 2378); at: 188 put: (ColorValue scaledRed: 4227 scaledGreen: 2906 scaledBlue: 2113); at: 189 put: (ColorValue scaledRed: 3170 scaledGreen: 2906 scaledBlue: 1849); at: 190 put: (ColorValue scaledRed: 3699 scaledGreen: 2906 scaledBlue: 1321); at: 191 put: (ColorValue scaledRed: 3963 scaledGreen: 2378 scaledBlue: 1585); at: 192 put: (ColorValue scaledRed: 3170 scaledGreen: 1585 scaledBlue: 1849); at: 193 put: (ColorValue scaledRed: 2642 scaledGreen: 2378 scaledBlue: 1585); at: 194 put: (ColorValue scaledRed: 2906 scaledGreen: 2378 scaledBlue: 1321); at: 195 put: (ColorValue scaledRed: 2113 scaledGreen: 1849 scaledBlue: 1321); at: 196 put: (ColorValue scaledRed: 2642 scaledGreen: 1321 scaledBlue: 1321); at: 197 put: (ColorValue scaledRed: 3170 scaledGreen: 1321 scaledBlue: 792); at: 198 put: (ColorValue scaledRed: 2378 scaledGreen: 792 scaledBlue: 792); at: 199 put: (ColorValue scaledRed: 3434 scaledGreen: 2906 scaledBlue: 1585); at: 200 put: (ColorValue scaledRed: 1056 scaledGreen: 1056 scaledBlue: 528); at: 201 put: (ColorValue scaledRed: 2113 scaledGreen: 264 scaledBlue: 264); at: 202 put: (ColorValue scaledRed: 2378 scaledGreen: 264 scaledBlue: 0); at: 203 put: (ColorValue scaledRed: 2642 scaledGreen: 0 scaledBlue: 0); at: 204 put: (ColorValue scaledRed: 528 scaledGreen: 528 scaledBlue: 264); at: 205 put: (ColorValue scaledRed: 1321 scaledGreen: 0 scaledBlue: 0); yourself)) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%@JT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)PAM],B_)ZV%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%)ZV#0&amp;!%N3-%0$-M@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JV%)T4#0AX&lt;X6NN#+ZOY[2_SZV%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%S\/BZARQX1F7XC&amp;KN[^N-)DV\ZN%)PB%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SRMAYS1#OQF7XC$9"8.K"8- XX:OOK13(:V%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JV%S\H&gt;YS1#D[] NS&amp;K"8,M"8.K"8.KNVFN#30V0JN%)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JV#H6)%OC0=#&amp;D9"8.K"8.KCP4MCP64CP4M"8.KXX:O#393(:V%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)ZV#QA TX6N6-3&amp;K"8.K"8.KCX"HCP64"@6H"H"HCP6K"3%!#+XV0D.%)ZT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%)ZM6%#,&lt;-!E!XC&amp;K"8.K"04MCX"4"1F:EH:KCP6H"H!ZV#YZCX.KNX:OOF"_(:V%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%)T-DZC,&lt;X89!NX.K"8.KCX.K-@4MXK!''%1:ZFVX=C8,M"E)ZM#X6M( M"0=!#6HVP\^%)PB%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%27Y*YS26-(8O"8.K"04MCP4MCX.KO[*UP)0$^*J &amp;)\Y.FFKC[QZM#X6,[D6V 6KNS*OOF"_2:V%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JV%],HVN6N6#(8ON@4M"H M-KPMCX.7Y)VW&amp;*@$(''+L^*R"()2Z%;(=XH,MV#Z1!XT4![EZ"8,ON(9%PWYM)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JUMH6)%OKZ6XP&lt;8C[RH"H"HC[PM"3&amp;8.)UB''J@$(''+L3L3L3L2"("P$&amp;)!''Y(:KCU(6,SP4MCR1M%(8C3*OOF!3SZV%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)T56QFT&lt;OH:NC8,M-H!ZV%*HC[PMNQF:FY"Z(BR"^''*$3L3L3L3L3L3L(*J"()2Z%6^8NX.HM(T4MJ&lt;4MCR1"C ON(&lt;&lt;Z''YM)ZT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D6_%&amp;T&lt;-(8ON@6HV#YZV%*H-@6KX[":FY*\ID&amp;"^''*$)JR$)JSL3L3L3L3L3G):("R ''K6UY+^K-CX4MJ&gt;/+:&gt;/!SZ4C3(:OA[BSP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AM%#,;-#(OCX!ZM#X6M#ZHCX,9OVXY/Y2 ID&amp;"^*R$)JR$)JR$)JR$)JSL3L3L3L1:^*J"IJBZ&amp;F^8NX-Z,SR/L XFL*&lt;4,S"L#FI%2:T@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)RM%X(XN"E*1,SX6M%*HCX.7Y&amp;&amp;X&amp;)0$IJI:^*R$)JR$)JR$)JR$)JR$)JSL3L3L3L2$^''*"(*H$''DHYY!FK"KD4+0Z,+@Z,U  3BFH#)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AM0C22 ELI!XVE,SZ4"3$=.)V=''J@$(*I:)JR$)JR$)JR$^7-;^7.$)JR$)JR$3L3L)JR$)JQ:^*J"IJBZ&amp;IV8NX,6MCHFA@PETD&gt;*CAYM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)\\VX*4CTP^G,U(MNS5&amp;%Y^Z''BQI(''):)JR$)JR$)JR$)G-;^7-;^:R$)JR$)JR$)JR$)JR$)JR$)G):(*H$''DHYY#49V(T2+@L+@''4HX)&gt;%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%QC2IKW9QA0(NC36:%Y^\''BP%(''*$)JR$)JR$)JQ;)JQ;^7-;^7.$)JR$)JR$)G,&amp;^7-;^:R$)JR$3JQ:^*J"II0^FYTTNP6D@2.''@**L%$4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)T5%X#M&gt;_*$I+0!&amp;&amp;DJ IJJ"I*SL)JR$)JR$^7-;^7.$)G.$)G.$)JR$)JR$^7-;^7-;^7-;^7.$)JR$)JSL3G):(*H$''DHYV0&amp;*J:^''_[H;]*T@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%0&amp;TL G8C [LE*QB IJJ"^*R$)JR$)JR$)JQ;SG-;^:R$)JR$)JR$)JR$)JQ;^7-;SD1;^7,''^:R$)JR$)L3L3L3L^''*"II\G+8Q=@*\BUH1A)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JL&gtgt;*ST3@86;IT0''^:R$)JR$)JR$)JQ;^41LSD1LSG-;^7-;)JR$)JQ;^40''SD1LSB];^7-;^7-;^:R$)JR$)JR$)G-;I7@=+CV-J:^''J8M"0*V%)ZV%)ZT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)ZUMST7K12OG],^&lt;OHXC_ LG,8B-Z7CII2]L1W.$)JR$)G.$)G-;SD1LSB]L^:QLI7.$)JR$)JQ;^41LSD1LSG-;^7-;^7-;)JR$)JR$I,M;SD1LHTN3A0"(@*^''T@1(R4-K14.#2&lt;-MSZV%)PB%@@@@@@@@@@@@@@@@@@@@22MD%!X;X&amp;I"#6TVZARLUD== CVD H5C]B (JL!2\,"$)JR$)JR$)G-;^2]LI7.$)G-;^:R$)JR$)JR$)JR$)G-;^41;^7-;^7.$)JR$^&lt;U,D&lt;#HSD0''HV^)!8AO):\+BH26-(&lt;L,+JI"S,VF&lt;I62:T@@@@@@@@@@@@@@@@@)RL&gt;YS-"CKHH 8RFC6LTEHXCS7:AMXF-Y7CI2" (]DUE/&lt;"$)JR$)JR$)G-;^7-;)JR$)G.$)JR$)JR$)JR$)JR$)JQ;SD1;^7-;^:R$)JSE[AI$QR]LSB\%&amp; &amp;/!J B)0J*#H"HV8ET*%RC,+JI#C-(]*V%@@@@@@@@@@@@)ZWBE#26N%.C*"4CTUNHC;Z6*$=O@8PHTH5C]B#JJB!E[V9.Q\V$)JR$)JR$)G.$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)G-LSD1;^7.$)JR$\!I$$IBRIR]L2T''DOZ23*".'')76F"CHG@4&lt;+@"-=TJ6F#C(&lt;H:T@@@@@@@@@@@B%11X&lt;OS!V J!OS78C P:HDU,CS78E!8EPY17IJL((]F1,[F1.[,V$)JR$)JR$^7-;^:R$)JR$)JR$)JR$)JR$)JR$)JR$^41LSG-;^:R$)GJPM3\7M3^?SB]LI2F&gt;,@$3_Z^''J5RHL ^@J0J''):]=*(RHC3(&gt;SZT@@@@@@@@@@D5AYQP=N(YT_R,+S0N/"C"NL79O@5ZG E!CHR (JB!E[F1,[F1,[LN$)JR$^7-;I41;^7-;^7-;^:R$)JR$)G-;^7-;^7-;^7-;^7-;)BY.M0,KVU%YVQH''I41LRWA_A3UP@*\B_[N/!EQ=)71&lt;_@I=U@*KN#0#)P@@@@@@@@B%(;2QX82DKT&lt;+@ IO* :H#%-PS78E!0\E.WCIJB (]A^S$9NS$9NS[K&lt;&amp;)G-;I7,''SD1LSD1LSD1;^:R$)G-;SD1LSG-LSD1L^7-;^7/H[@-Y+*:.+#F.+''KHSD0''HTN,MZ4+@*\++[MSAW6''_G1&lt;)76*!E(O-$F%@@@@@@@@@JV_E&amp;N6#E,3*B,B@$=T"H :L75O_ ^3*U"X1B (2"!E$)JRD9JRD9JS$4T&amp;SD1LSB]LSD1LSD1LSD1;)JQ;^7-LSB (SD1LSD1L^7-;2IMYLSD1LXJB (JBYL (SD0%HX)VBJ B)0IPV5ZD*"-&lt;_G1&lt;@*)["0&gt;6FJL@@@@@@@@@S\HXEID:,5R(J0H+KXX8XP9PS4=Q!8R)OQ4%JL((]IJRD!HRD!HR$)JRD&amp;7HSD1LI40''SD1LJB!LSG-;^7-;SD0(JB!LSD1LSD1LSGQ$ (H0LJ.+*:.+K*../2\(JL$!Y5ZGUB.'')2.-B%Z-J:]&lt;_G2''J:!VCX9(]*T@@@@@@@AM\S&gt;QXZ&gt;@_$&lt;+J76-V066BG9O_%N3 UZX\B (R,(ZYFQ$YFQ$YAI$YAI$$&amp;3E^41LSD0''I41LSD1LSG-L^7-LSB]LSB\''SB]LSD14M8JB*28.K"9?_21?_28SI2\(SGRZV0&amp;D_Z\B@"5[ XAO@*Y&lt;_J]=+[L8C313)P@@@@@@@JL&gt;EFM!#KMT_$&lt;+S0VGC82*S4&lt;-!CV@W14%JL+J]FP7M3\7M9BP$IBPYFQ$YIOC^:R$)JR$^7-;SD1;^2]L^41L^7-;)JQ;SB\''/5$0K"9?_20,@PDA)*Z&amp;KJ/E^2]L2JA''A(^*@*^''J8R3 X@+)71&lt;)76CC &lt;O%WEM@@@@@@@@(&lt;DY.K :MR5OS4&gt;*!H"6!*!O_%R3 P^U\L$(2,)-M3\7B0,KM3\7M3\7M9BPYIKC^7.$)JQ;^40''I41;2B];I2]L^7.$)JQ;^;=YK"9?_20A)''1&lt;J"(*J"*&amp;@V:$^2\''(GB1BSL+@*\B*%.DL:"''_G2''@*!SV &gt;:G44@@@@@@@CG[6"6NEZ@_$=OKSN3C0&gt;*S4=&gt;!H^)#TM4JB (R)HKB0,KB0,KB0,KB0,7M3\7$II2^7-;)G-;SD1;^7/H2T1LSG-;^7-;^7-. "8._22&amp;_B(*J"(*J"(*J"*&amp;-T!;SG,''H[%V,5@B):]=!*=QS:]&lt;_G0BT@VE"895(0@@@@@@@I&lt;V$VD8BXDCS4&lt;-AX\Q,:!O_(B3U(E''G\%LJB!EM0,KVU%YVU%YVU%YVP,KB3\7M1KH^:R$)JR$)G-;SL%JSG-;)JR$)JR$1U$._22&amp;_B(*J"(*J"(*J"(*J")?[*Q;^2\%P;FG+T&gt;'')0ITV8AO@*]&lt;)0ITV3$9EA"#@@@@@@@@\12:$[ O,8AOS7:@C6F-S4&lt;C+P(E"DODJD0(JFQYVU&amp;.+*:.+*:.+*:.VU$KB0,7[L!;^:R$^7-;^7-LR$)L^7.$)JR$)JR$$G&lt;,)"(*J"(*J"(*J"(*J"(*J''1\RBY;^4%0W:&gt;3TJ]&lt;)76F!%Q=@ J''@*"-NC&amp;:1,^%@@@@@@CBG1&amp;8-8"DKZ -UCU#V:!OS8@5!J%''G\$(JB!2VZ81LSFB (JB (H1LSF.+%%YB3_C^7-;^7-;^7-;^2!J]B!L^7-;^7-;^:R]_:X*J"(*J"(*J"(*J"(*J"(*J''=@)G-L^2FXWX^-J:^''@%Q[ Z +@*\BS0L2V+](H:T@@@@@)\I5E@&lt;J+HB@*#LHC883S4&lt;C [LEVDODJB (JIH1 #@0LC@0LC@0LC@0 (H1+*9Y$,!;^7-;SD1LSG-;2T)42T1LSD1LSD1L^4"5)"(*J"(*J"(*J"(*J"(*J"(*))CL^7,''IY2M,CUO):^''*E,HS0HB@".(AUYZN[+B)P@@@@AMPVU#N("/ X@-KXQ#V24BS8@5!0U+P4$(JB!2VS@0 #B+K"8.K":+*:,0LHJBLZ92^41LSB (JB (SD3IR''SJJB (SD1LSD1L)AX,J"(*_B(*J"(*J")&lt;J"(*J"(*T,L&amp;I40''HQ*0B*(B):\+L5,-J0HBJ:)[NVA&amp;&amp;WF%@@@@@L,_1!R8OS 5 G8CV;X3S4=&gt;T0(2BY#D2R (SIL0LJ,.K"8.K''=?_28.K":+LCBBB2];^41LJB (2"!LSB_IR" (JB!LSD1LSB];0;U&lt;J"(*J"(*J"(*J"(*J"(*J"(AD2YLI2\%\KQX 76'')0H-V0!=J0H+*CLMNVZW\ZT@@@@@S\IFY+ =N@(GTZ5##B5OS0ND!0P=GRT(JD3HLS@.K''=?_7&lt;,KB1?_7=?K"8.LCA,^7-;^40(JB (SB_H1K--]L ''I7-;^7-LI2^$D E&lt;J"(*J"(*J"(*J"(*J"(*J''25''R]LSD$!Y;A[* J'')2.CC(A=@"-OTSIZXYW@)P@@@@B#G3&gt;QN%.DU(R/#FLHS2.(AP)VA;8]2R (SF0.K"9?KB0,)*XA) D,KB1?_28.V\N$)G-;I2\''I2\''^&amp;,UNU&gt;9[R];^7-;^2]L^:QHKJY&lt;J"(*J"(*J"(*J"(*J"(*J FSI$1LI2VZ-KNCJ:^''@%@NA78+J4=Q+KFKY"B%@@@@@L_AY[ZLV:=VU#V6#J(+S0ND,0POGWP(JB#HB29?_20A)*Z&amp;J"(*_G2&amp;) D,_28R^*R$)G(&amp;($$!HZJ\#[RHCU8P(JIHI*R$)JR$)L1\)"(*J"(*J"(*J"(*J"(*J")&lt;_KWL^40''RRE+,KMP@*^''J8Y[@2-OUKNH"1F:/D4@@@@@1&lt;F:X88OV8PEB&amp;LH*D=O KN/U)U02T0(I680_7&lt;,)*Y&lt;J"(*J")&lt;J")&lt;) D,*94&amp;RLUI(I2\''I2 ''FNHNH.K-H4?(*IHRD!HI"X&amp;I$ARJ''0*J"(*J"(*J"(*J"(*J"(*))6$^2\''(I)[V:5O@*\B* :DS7:-C#$9ZTI/SP@@@@A6Q!9&amp;.K :V5ZN#(EOS78GB(FMP2ELSB#H$B8,KJY&lt;_G1&lt;J")&lt;_G1&lt;)*Z&amp;@R1\)BX&amp;1T&amp;"RT$$IBR %U,M";R4")):3L3L3L0&amp;I"Z$RE^&amp;_G1&lt;J"(*J"(*J"(*J''0*J"*&amp;WBX''I2]I(KZG!"4+)0J(! 8C_%DG"H-&amp;%&lt;EM@@@@@GYFG+(=-# 5C&amp;X8U@LCASV/AV-0I40(I7J+_22&amp;)''0,T%IRUUUUUU]WU50SD96$)JR$)JR$^''):^*J"#X*J-H(&lt;3L3L3L3L3JR$)BZ$PALSWE]WU;UUUUURT%HA)''2&amp;) EUPB\''SB^ ]0&amp;3AT&lt;B@* HN(PC@2&lt;2M(.:Q44@@@@@H&lt;E($P&gt;HBU-)H+*F Z&amp;A+8P-#Q5LSD1LQYBP$ANS$1]@[$B]''Y7C^&lt;3L3JR$)JR$^:R$)JR$)L2$3L3C.5&lt;P%&lt;WL3L3L3L2$)G-;^7.$)JSL3L3L1Y6]04A@[&amp;2S$1L7$IA.I41L^2PP*Z&lt;ES2-OUC))N(@CTZ21"6X\(0@@@@B_0[*6C8"GMQQ8%81VA@R/!8BC.2\(JD1;I"X&amp;)JP&amp;)JR$^7-;)JQ;)JQ;^7-;^7-;^:R$)JR$)JR$)L1:(LWL3L3L3L2$)JQ;^7-L^7-;^7-;)JR$)JR$)G-;^2_HI&lt;WHR\!LJD3I''HNA!EE&gt;S0N3.!&amp;L@5R3CX.7Z[1K@@@@@I?AO6N6C8 IV9]8$X^,ACJG+U@PHR (JD1;^7-;^7-;^41LSD1LSD1;^7-;^7-;^7-;)JR$)JQ;)JR$)D"?/4#L3L3L)JR$^7-;^7-LSG-;^7-;^7-;^7-;^41LI2 ''I2\''2R (JBU'' HRA@79&gt; C(Y.#M&gt;UE,9XF&amp;=GL\@@@@@H4X^Y+"QN%.DEA8YC#J,+@$H@5 ]2\+JJD1L^7-;^7-;^7-;^7-;^7-;^7-;^:R$^7.$)G-;^7-;)JR$1TA@1\3L3L2$)G-;^7-;^7-;^7-;^41;^7-;^7-;^7-LSD1LSD0(JD3IHX(E+:$C_ LGY).6KW9QA0*KY)-GR0@@@@@#Q!::X;XN,0^LH''!#+:2,+8\ETK-4R$+JJD1;SG-;^7-;^7-;^7-L^7-;^7-;^:Q;^7-;^7.$^:R$)JSE[$CE3L2$)JR$^41L^7-;^7-;^7-;^7-;^7-;^7-;^7-LSD1LSD0(SB\ZA5ZDTW9&gt; E.[%XY&gt;_ L/L#ZK.,[G@@@@@G[AO9D:C+N3! 8?G+(J+J1VMHR(#WIJ2,((SG-;^7-;^7-;^7-;^41;^7-;^7-;^7-;^7.$)JR$)JR$)LU@/4"$)JR$)JQ;^41;^7-;^7-;^7-;^7-;^7-;^7-;^7-;SD1LSD0''(AB)BUMQ_ NAOY-#KT=&gt;@2&lt;2M(-&amp;1''X@@@@@''&lt;E(X0&lt;8V;LHBKY8^@&lt;I+CJ/MX@3.2WJ2"!L^7-;^7-;^7-;^7-;^7-;^7-;^7-;SD1;^7.$)JR$)JR$1TB?)L2$)JR$)G-L^7-;^7-;^7-;^7.$^7-;^7-;^7-LSG-L^41LSB\]!HF/*PLCTP*U%P +J4&lt;E!8,9-9WFH:T@@JU3Q#&lt;TOX8NMPT-L3&lt;^.KEVL*&gt;3+U@P]B#JJD1;^7-;^7-;^7-;^7-;^7-;^7-;^7-LSD1;^:R$)JR$)JP&amp;/96$)JR$)JQ;^7-L^7-;^7-;^7-;^:R$^7-;^7-;^7-;^7-LSD1LIV^)+0]QK0MSXY,T*",BS8BGNS%&amp;/\Y6)P@@)ROA^APTX805 J -EA:[NK@2U(\5*E"&gt;2,((JD1LSB];I41;^7-;^7-;^7-;^40''SB\''I41;)JR$^:R$)JR?0:R$)G-;^41LSB\''^40''^7-;^7-;^7-;^7-LSD0''SD1L^7-LSB_D"%NFT2&lt;/TZ=)&amp;80-J2-O@:$I-C4Y1$.%@@B%H&lt;EBEC6NC(ZC 0"OH''!#!3IV+5.**&amp;]42,((SD1LSD1L^7-;^7-;^7-;^7-;^41LSD1LSG-;^7-;^7.$)K?C)JQ;^40''2B\''SD1;SD1;^7-;^7-;^7-;^41LSD1LSG-;^40''IQ*-A:&lt;DK2&lt;ENI-)L: +J4&lt;C*SIZNYV^1:T@@@B_0\XT# &lt;NV;J2"X1(G&amp;&amp;H+5Z/,3N(#W@(2"!LSD1LSG-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^:R$0&lt;"$^7-;^41LSG-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;I43DW:$5U"&lt;/K5Z8&amp;0&gt;(J0HBS8BDV(.7FY8#@@@@)Y?AP!Q## :3+Z(-* 18P#(4U*&lt;I,25T.&lt;$(JB!LSD1L^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^:SCI*Q;^7-;^7-;^7-;^41;^7-;^7-;^7-;^7-;^7-;^7-L^40''I4LHT8]SK2&lt;DV)U)!D&lt;B@ H+ KNKNV&amp;=GGX@@@@@''&lt;F!EK =C(P-_$=&gt;UI%FEE./+0%[+UA_H\+JJB!LJD1;^7.$^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7.$)L"$^7-;^41LSD1LSG-LSG-;^7-;^7.$)G-;^7-;^7-;^7-LSB]IZ8BD+0P/K3J7&amp;;"C*B,B@",CA;FKY)]GR0@@@@@#0Q::$X9[B@"F,($L.''"WC8^/MKD5*@!-R$+JJB (SG-;^:R$^7.$^7-;^:Q;^7-;^7-;^7-;^7-;^:R$)JQ;I2\(JB (JB!LSD1L^7-;^7-;^:R$^7-;^7-;^7-;SD1LI91X*[L2AB&lt;DM&amp;&amp;[V:6(J0HBJ0N)BP67]99K@@@@@I?AG)U#N 9[,+JI"P0&lt;&amp;W"QV:&lt;4!U.@TF-4R$+JJB ''SG-;^7-;^:R$^7-;^7-;SD1LSB\''I2]LSD1;)JR$^7-LJB#J2,+JJB!LSB];^7-;^7-;)JQ;^7-LSD1LSD1LSD1I.0TGBZ0DK5NK&amp;1R)_ J'')0IO @$MNV&amp;WGJL@@@@@H1&lt;^O; =C(P-@0N(@3NQG!&amp;4!Z&gt;EB(R("''AJR,((SD1;^7-;^7-;)JQ;^:R$^7-;SD1LSG-;^41LSG.$)JQ;^40(JB#JJB (SD1;^7-;^7-;^7-;)G-;SD1LSD1LSD1LSBFM*P&amp;/AJ$D+6Z[N(EPJ0HBJ78E,X,=&amp;1%GSP@@@@CGG197$S6L!*6*UCNC,;Y8P+Z1MCR1,5B*[RWJ2"!L^7-;^7-;^7-;)JR$)JR$)G-LSD1L^7-;^2];)JR$)JR$^2]LSD1LSD1L^7.$)JR$)G-;^7-;^7-LSB ''I41LSD0''/(QS,SHDAZ2HF[(NBEQOJ2-O_%EVV &gt;UO2AM@@@@@JO@G''!)X0&lt;N,8Z2CH2OX6 ^Y+REMH][+UA_1B (JD1;^7-;^7-;^7.$)JR$)JR$^41LSG.$)JR$^:R$)JSL)JR$)G-;^7-;^7-;)JR$)JR$^7-;^7-;^41LSB\''SD0''SBV9 J&lt;4+@PD+1F[XP]Q*B,BJ4&lt;CA8"KOW\?Z$4@@@@@(&lt;CAG!&amp;QN%.A EF@ @][X7 "C;FE!U,HT@"&gt;JB (SD0''SG-;^41;^:R$)JR$)JQ;^7-;)JR$)JR$)JSL3L3L3L2$)JSL3L2$)JR$)JR$)JR$^7-;^7-;SD1;^7-LSD0''HP"@B*&lt;DA@QZZYVKMXF@_W5O*HB/CVE)]6!A)P@@@@AM0F&lt;^FQRNC#UVL8R3C(&lt;TP!9#"HVEB%.*TK$%2,((SD1LSG-;^7-;)JR$3L3L)JR$)JSL3L3L3L3L3L3L3L3L3L3L3L3L3L2$)JR$)JR$)JQ;^7-;^2\''SB\''I40(SBTZ @^EL PDL+^[Y(,8,:4-T@N)T0%ZC6&amp;=FDR%@@@@@JUD[4YF^ARN#H![,80:-)FUG!$O!8V1"HN("Q5JR,((SD1L^7-;^:R$3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L)L3L3L3L3JR$)JR$)JR$)JQ;^7-;I2\''I2]LSB#IHX6@MSPFAJ2EZY,QCP)VAXB@*UN/C[])%3&lt;&gt;QJT@@@@@)TP (TX"$S(8,;L5V3(&lt;EA$^P+Y[,XVH,0MP/$)J2"!LSD1;^:R$)JSL3L3L3L3L3L3L3L3L3L2$3L3L3L3L3L2$)L3L3L3L)JR$)JR$)JSL)JR$^7-;^7-;SD0(JB^&gt; 8F1+:0DL(.[&amp;34QNP:3+:&lt;4!5(OY$JWO3:_@@@@@@B%H4E/G!8^G''^Q-(&gt;6EFV:ZLX^. :1,[FH+W5_H\+JJD1LSD1;)JR$3L3L3L2$)JR$)JR$)JR$)JR$3L3L3L3L3JR$)JR$)JR$)JR$)JR$)L3L)JQ;^41;^7-LJB (IQB@!KD2+J04O[6[.C66C08NNH-!.IV[%9\XO$,@@@@@@JWGPRA/(Q9FH''\YZC?FQ7!8(ZD"C5*1B("F*HN&gt;R$+JJD1LSD2$)L3L3L3L3JR$)G-;^7-;)JR$)JR$3L3L3L2$)JR$)JQ;^:R$)JR$)JSL3L3L)JQ;SG-;SD0(JL%0VH@JMCJ,L+Q)%2JY]9%(FQ$Y];5BH)]7FA!A20@@@@@@@D7BF2@\Q7"!G!:!(Q;AQ$Y8^A:QNKE[V%.**+$%R,+JJB (I7.$3L3L3L2$)JR$^41LSD1LSG-;^:SL3L3L3JR$^7-;SD1;^7-;)JR$)L3L3L3L)G-;^41;SB (I[.@A5*/L X4DY\Y1''!GQ12^&amp;\[F&amp;Y$?FC&lt;?O,J%@@@@@@B%)WYA%+2&lt;Z+2&lt;''):&lt;/K0\Z"AGG!$O"KEZC(R("!5JR,+JJB ''^:SL3L3L3JR$)JQ;SD1LSD1L^7-;)L3L3L3L)G-;SD1LSB]LSD1;^7.$)L3L3L2$^7-;^2]LSL$!"(BG!Z&lt;FL%*:]3=80\GA0\EGGI:^]S8X''&amp;+@10@@@@@@@@B%SY?@0LC@G&lt;C@0A&lt;_G1&lt;_G4^!^FNHB("HV:"*[T)J2,((JD1;)L3L3L3L)JR$)G-;^7-;^7-;^:R$3L3L3L2$)G-;^7-LSG-LSG-;^:R$3L3L3L2$^7-;^41L2[:- P(4L Z/"9-7''$YF\WE1\TX_G1&lt;_0A=AQGZ%@@@@@@@@@@B%SWZ_0$S@0LC@0LC@0L@_Q$\^ZP&gt;HV( 8+Z"M1D+JJD1L^:R$3L3L3L3L3JR$)JR$)JR$)JR$)L3L3L3L3JR$)JR$)JR$^7-;^7-;)JSL3L3L3JR$^7-LSB\%W:&amp;/B#P2L+DTH!#AG4QDQDQDQDQDQLKB\2N#)P@@@@@@@@@@@@@@@JWK(2''G]"L#''7OB0''M1GA9BXP8J"H"F*J5C2R (SD1;)JSL3L3L3L3L3JR$)JR$)L3L3L3L3L3L3L3L)JR$3JSL3JR$)JR$)JR$)L3L3L2$)JQ;^7,''I15X*P*1+3J/CQ$?FGGB\2M6]"M61&lt;\)(&lt;-M@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)PB%SRMAQ18TNH!ZC%.*TA@%I41LSD1;)JR$3L3L3L3L)JR$)JR$)JR$)L3L3L3L3L3L)JR$)JR$)JR$)JR$)JR$3L3L)JR$^7-;^7,$Z:%V"HV/,HT=%3&gt;&lt;0*N%@@B%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(4P G#&lt;O"H"4NHR@"!+DRR\''2R];^7.$)JR$)JR$)JR$^7.$)JQ;)JR$3L3L3L2$)JR$^7-;^7-;^7-;^:R$)JR$^7-;^2\''HY"M*[D6MJ&gt;/"F&amp;WFDE6)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%H;1/G&amp;L8-H 8"J&gt;0,U9+P2GII41LSG-;^:R$)JR$)JR$)JQ;)G.$)JSL3L3L3JR$^7-;^7-;^7-;SD1L^7.$)G,''I2\%G[.M" &amp;/"KD4+3Q!&amp;7\&gt;QD4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B#QD\^F@&gt;4"C"K"8"E,KB4EV7D2T1;SB]L^7.$)JR$)JR$)JR$)JR$3L3L3L3L3JR$)JR$^:Q;^7-LSD1;^7-;I4$!/+!^WSRE,X M,SP4M&amp;ZWFDD#)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JT#P\D"- 88XVE "8,MM+B0WU&lt;Z\BT''I2]LSG.$)JR$)JR$)JR$)L3L3L2$3JR$)JR$)JQ;^7-LSD0(SD1LI4$]F!VTWSR1V 6K"3&amp;K,XVK]7\&gt;0,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D7B[18T#)D=D[^7XF@9"5(4A+B4E[8!RR]LSG-;^7-;SD1L^7.$)JSL3JSL)JQ;)JR$^41LSB (JB!L2RF&gt;Z59]MKD6CX.KNS$9#!D=NIFWFDEM)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@GYA0T\?H)TTOQF7-6@9NX.H!PXF,QTZ\D$''I2\''SD0''SD1L^7.$)L3L3L2$I"Y;^7-LSB\(JB!L2RE-E[Q]MKFH"8,9NS%!-8:8Z[4YFY%(H:T@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@S\@ [7"!G$I7.)D=DQF7XS$9"3Z0A Z4.[8!I2\''I2\''I41;)JSL3L3L3JR$^7-LSD1LSD3II[9+W+D4ME*K"3$9XFB7OS5&amp;]4IBP)''FO$GK@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%0!-*GD]8^A:!&amp;[(TX1DQ-;] NX-ZMJ2,,QU-HT$''SD1;^7.$)JSL3L2$)JQ;^7,''SB_I1K:9-E44,U*K"3$9-;^7D[!)]4IBP)&amp;YO1 &gt;\:T@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B#PYZ&lt;Z+0\Q7"!G'' Y.+ QO[^7-3&amp;KC[D2+KA^Z14%I2];^7.$)JR$)G-;SD1LI2\%GV]_,[@4M(.KNS% -;^7OVZUH$IB1)$?]WU5%,B#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JV#''&lt;@[Z&amp;*^GD]G(Q98%6&amp;8X34Q-6E NX.H,J2,,QB&gt;HR\''I2];^7-;^2\''I&lt;$!/+&amp;4MK@4"H,9NVB7-;^7.F%7P$H"1)$XO7U5/LB_(0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%(2O@P[15]T\\(ZE8^DHYEID=DQF7XC&amp;K"CR,+KBM.7AII2]L^41LI4%0F!V1,J&gt;1CS$9XFB7DQD=.IV=^DJY1)%5FGV^HDE3(:T@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SROB0F&lt; Z):^GD]8(Q98];(TOS4=D[^7XH.1L R,%AU-HR\''I2F&gt;.YR0A#RH"3$9-;^7DS68.'']BP"KF&amp;S&lt;XFGV&lt;Q6?B\:L@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SRMDQGEA/K2^'',YGQ7 ^^BJU.C4=OQDQ-3&amp;KV%XD+KBMY4LZW560A+F4"3% -;\QDQF8%RIBP"KF''#&lt;XFGV&lt;[&lt;H_0GOK@JT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)WYD0GE10V&gt;&lt;''):^GD]8(Q8^];*QOS4QDQE NP4I+J&amp;,,[B,MCZKXFB7D[\QO[!&amp;]7!8H,ZYO1 XFI9G0WD_P\B_SP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)ZM3PTD_\TY//I95''!0\^G"!G)%)EID=DQF7-3$8,P^,M@6KXFB7-1DQO[!)%7!8H,Z^]Q X]Y9/Q$X_[4ED]$4@@@@@@@@@@@ANS @@248@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@L._0DEA[4YF0RB^/GV^GG!8(Q98FVZQX34Q-;] "8,9-;^7-1D=.FXY^G!BH,Y5FA!5''!3AG4Y/[2AA0$.%@@@@@@@@@@@@@B$)S*M9^T8@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D6_F4EAPV=1Q!=//I:^'',Y8^JF!^I%).C4=OQF7-;^7DS4=.K*WP'' "&amp;Y&amp;YFA!5]T]1G1=/GK0[F4R#)P@@@@@@@@@@@@@@JR$)JW%9JP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D7GQA,[%$E/G4Y1[;2^]Y:&lt;GD^!(W "FQP=OS4QDS4=.IT"^BKF1)%5FA!5''&amp;=10&amp;=//K2V%$P#20@@@@@@@@@@@@@@@@@)^W%9^W$)S @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AMH4P[Z"B&lt;[6=1Q,EA/GU5/A0\^LD^^I&amp;:.FNQZW]B^BKF&amp;WU5FGV^GDYFQ$F&lt;Z)ZV%,B_(0@@@@@@@@@@@@@@@@@@@GY9JR%9^R$)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@27L[F9ZV/DE/0TY1[;15]Y:^Q7"!(W "&amp;Y%8^L[F&amp;WTXFA"^[1=FQ$\\/F)*Z)[B(:T@@@@@@@@@@@@@@@@@@@@@JR%NS''$)S"%N@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)ZM3F9ZV%)X PV&lt;_G1=G''''V^''!1G^JE8P,ZY&amp;S&lt;XFI8\0TYFQ11*/F)*%!-D(:T@@@@@@@@@@@@@@@@@@@@@@@A9^R$)^ZL@S"%N@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)ZWG\&lt;@[%)ZV/BCAQ$[AQ9:^]Y8\Q&lt;Z^FA X]WT\G1?AQ;2&lt;Z&amp;*V%!/B]$4@@@@@@@@@@@@@@@@@@@@@@@@@@B$)S,-9(0@@(2$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%SZN_QDD[%)ZVPV?B0,EG''''V^FA!5'')9GG1=/HK2VZ)ZV0DQ62:T@)P@@@@@@@@@@@@@@@@@@@@@@@@@@JR$)JR%N@@@@S @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JUM(2OBPQ,[PTEA\Q&lt;_PV(&gt;Z+0_G1=APYZVF1-D\&lt;]M)ZV%)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@S AN@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D6#12M30$QDQDR_0!/@QDS@QLJ_''9&lt;#(46%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%)ZV%)T6%(:N#]''[G(&lt;-M)PB%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="Robot - Primera Practica" selector="image">image		&lt;resource: #image&gt;		^OpaqueImage figure: self basicImage shape: self mask.</body><body package="Robot - Primera Practica" selector="mask">mask	"UIMaskEditor new openOnClass: self andSelector: #mask"	&lt;resource: #image&gt;	^(Image extent: 126@109 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A8@@@@@@@@@@@@@@@@@@@C? @@@@@@@@@@@@@@@@@@G??@@@@@@@@@@@@@@@@@@G??&gt;@@@@@@@@@@@@@@@@@O???8@@@@@@@@@@@@@@@@_????0@@@@@@@@@@@@@@@_?????@@@@@@@@@@@@@@@_?????&gt;@@@@@@@@@@@@@@???????8@@@@@@@@@@@@@????????0@@@@@@@@@@@A?????????@@@@@@@@@@@A?????????&gt;@@@@@@@@@@C??????????8@@@@@@@@@C???????????0@@@@@@@@C????????????@@@@@@@@A????????????0@@@@@@@@????????????&gt;@@@@@@@@O????????????0@@@@@@@G????????????&lt;@@@@@@@A?????????????@@@@@@@@?????????????8@@@@@@@O????????????&gt;@@@@@@@G?????????????0@@@@@@A?????????????&lt;@@@@@@@?????????????? @@@@@@O?????????????8@@@@A??????????????????@@@??????????????????&lt;@A??????????????????? @???????????????????&lt;@O???????????????????@G???????????????????8A???????????????????&gt;@_???????????????????0G???????????????????&lt;A????????????????????@_???????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0G???????????????????&lt;A????????????????????@O???????????????????0C???????????????????&lt;@???????????????????&gt;@G???????????????????@@G?????????????????? @@@G??????????????@@@@@@A?????????????? @@@@@@O?????????????8@@@@@@C?????????????&gt;@@@@@@@_?????????????@@@@@@@G?????????????0@@@@@@@?????????????8@@@@@@@G????????????&gt;@@@@@@@A?????????????@@@@@@@@O????????????0@@@@@@@A????????????8@@@@@@@@G???????????8@@@@@@@@@_??????????8@@@@@@@@@A??????????8@@@@@@@@@@G?????????8@@@@@@@@@@@O????????8@@@@@@@@@@@@????????0@@@@@@@@@@@@A???????0@@@@@@@@@@@@@G?????? @@@@@@@@@@@@@@O????? @@@@@@@@@@@@@@@?????@@@@@@@@@@@@@@@@A????@@@@@@@@@@@@@@@@@G??&gt;@@@@@@@@@@@@@@@@@@O?&gt;@@@@@@@@@@@@@@@@@@@?&gt;@@@@@@@@@@@@@@@@@@@A&lt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@a'))</body></methods><methods><class-id>RobotInspector class</class-id> <category>instance creation</category><body package="Robot - Primera Practica" selector="robot:">robot: aRobot		^self new initialize; robot: aRobot; open.</body></methods><methods><class-id>RobotApplication</class-id> <category>accessing</category><body package="Robot - Primera Practica" selector="world">world		^world.</body><body package="Robot - Primera Practica" selector="world:">world: aWorld 		world isNil ifFalse:						[							world retractInterestIn: #robotAdded for: self.						world retractInterestIn: #robotRemoved for: self.						].		world:=aWorld.		aWorld expressInterestIn: #robotAdded for: self sendBack: #refreshInspector.		aWorld expressInterestIn: #robotRemoved for: self sendBack: #refreshInspector.</body><body package="Robot - Primera Practica" selector="worldView">worldView		^worldView.</body></methods><methods><class-id>RobotApplication</class-id> <category>aspects</category><body package="Robot - Primera Practica" selector="inspector">inspector		^inspector.</body><body package="Robot - Primera Practica" selector="text">text		^text</body></methods><methods><class-id>RobotApplication</class-id> <category>events</category><body package="Robot - Primera Practica" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow 			self world retractInterestIn: #robotAdded for: self.		self world retractInterestIn: #robotRemoved for: self.		^super noticeOfWindowClose: aWindow</body></methods><methods><class-id>RobotApplication</class-id> <category>initialize</category><body package="Robot - Primera Practica" selector="initialize">initialize		super initialize.		self text: self defaultText asValue.		self inspector: (WorkspaceInspectorPage with: (WorldTempRobotInspector on: NameSpace new)).		self world: RobotWorld new.		self worldView: (TranslatingWrapper on:(RobotWorldView world: self world) at:250@250).		self world addRobot: (Robot position:(0@(-80))) named: 'robotech'.</body></methods><methods><class-id>RobotApplication</class-id> <category>interface opening</category><body package="Robot - Primera Practica" selector="postBuildWith:">postBuildWith: aBuilder		"Post-building stuff. Set the transcript's controller and set it transparent."		| widget win |		widget := (aBuilder componentAt: #transcript) widget.		widget controller: RobotWorldTextEditorController new.		widget controller world: self world.		widget controller initializeMenuForCode.		widget controller keyboardProcessor: builder keyboardProcessor.		widget controller autoAccept: false.		widget controller supportCodeEditingFeels: true.		widget controller flushFeels.		widget widgetState colors notNil ifTrue:[widget widgetState colors setBackgroundColor: nil].		widget widgetState hasBackgroundColor: false.		(win := aBuilder window) notNil ifTrue: [win label: 'Robot World'].</body><body package="Robot - Primera Practica" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	(self builder componentAt: #InspectorSubcanvas) widget							client: self inspector							spec: #windowSpec							builder: builder newSubBuilder.	self refreshInspector.</body></methods><methods><class-id>RobotApplication</class-id> <category>update</category><body package="Robot - Primera Practica" selector="refreshInspector">refreshInspector		self localVars: NameSpace new.		"self localVars at: 'world'  put: self world."		self world namedRobots keysAndValuesDo: [:key :value | self localVars at: key put: value].		self inspector inspector initialize: self localVars.</body></methods><methods><class-id>RobotApplication</class-id> <category>private - accessing</category><body package="Robot - Primera Practica" selector="defaultText">defaultText^'"La forma de indicarle a un objeto que hacer, es mediante el envío de mensajes. En este caso le envíamos al objeto robotech el mensaje #direction: con parámetro 30"robotech direction: 30."Le indico a robotech que avance 50 pasos en la dirección actual"robotech move: 50"Podemos enviarle a un objeto una serie de mensajes en cascada utilizando ; "robotech brushDown; direction: 0; move: 30; direction: 90; move: 30; direction: 180; move: 30; direction: 270; move: 30.'</body><body package="Robot - Primera Practica" selector="inspector:">inspector: anInspector 		inspector:=anInspector.</body><body package="Robot - Primera Practica" selector="localVars">localVars	^localVars</body><body package="Robot - Primera Practica" selector="localVars:">localVars: anObject	localVars := anObject</body><body package="Robot - Primera Practica" selector="text:">text: aText 		text:=aText.</body><body package="Robot - Primera Practica" selector="worldView:">worldView: aWorldView 		worldView:=aWorldView.</body></methods><methods><class-id>RobotApplication class</class-id> <category>interface specs</category><body package="Robot - Primera Practica" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Robot World' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 280 298 1024 768 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -200 1 -300 1 -1 1 ) 					#name: #transcript 					#model: #text 					#tabRequiresControl: true ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 5 0 -1 1 -202 1 ) 					#flags: 11 					#component: #worldView ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -295 1 -200 1 0 1 0 1 ) 					#name: #InspectorSubcanvas 					#flags: 0 					#clientKey: #inspector ) ) ) )</body></methods><methods><class-id>RobotApplication class</class-id> <category>resources</category><body package="Robot - Primera Practica" selector="robotIcon">robotIcon	"Tools.UIMaskEditor new openOnClass: self andSelector: #robotIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 31@32 depth: 9 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 307) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 7134 scaledBlue: 6605); at: 3 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 4756); at: 4 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 4491); at: 5 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 3699 scaledBlue: 3963); at: 6 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 3699 scaledBlue: 3699); at: 7 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 2906 scaledBlue: 3699); at: 8 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 3434 scaledBlue: 3963); at: 9 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 792 scaledBlue: 1321); at: 10 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 1056 scaledBlue: 1321); at: 11 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 0 scaledBlue: 0); at: 12 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 528 scaledBlue: 0); at: 13 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 1056 scaledBlue: 264); at: 14 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 792 scaledBlue: 528); at: 15 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 2378 scaledBlue: 3170); at: 16 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 2906 scaledBlue: 3170); at: 17 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 3963 scaledBlue: 4756); at: 18 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 792 scaledBlue: 1056); at: 19 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 528 scaledBlue: 792); at: 20 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 1056 scaledBlue: 1321); at: 21 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 792 scaledBlue: 792); at: 22 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 1056 scaledBlue: 1056); at: 23 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 1321 scaledBlue: 1056); at: 24 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 7134 scaledBlue: 4227); at: 25 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 7134 scaledBlue: 3963); at: 26 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 3434 scaledBlue: 2906); at: 27 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 2113 scaledBlue: 2642); at: 28 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 2378 scaledBlue: 2642); at: 29 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 528 scaledBlue: 264); at: 30 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 0 scaledBlue: 0); at: 31 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 7926); at: 32 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 8191); at: 33 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 8191); at: 34 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 0 scaledBlue: 1585); at: 35 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 264 scaledBlue: 1056); at: 36 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 0 scaledBlue: 0); at: 37 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 0 scaledBlue: 264); at: 38 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 1585); at: 39 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 792 scaledBlue: 1056); at: 40 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7926 scaledBlue: 7662); at: 41 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 7926); at: 42 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5020 scaledBlue: 5020); at: 43 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 3170 scaledBlue: 4227); at: 44 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5020 scaledBlue: 5548); at: 45 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5548 scaledBlue: 5020); at: 46 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 2642 scaledBlue: 3434); at: 47 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 0 scaledBlue: 1321); at: 48 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 0 scaledBlue: 1056); at: 49 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 0 scaledBlue: 792); at: 50 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 0 scaledBlue: 528); at: 51 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 2113 scaledBlue: 2113); at: 52 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 0 scaledBlue: 0); at: 53 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 528 scaledBlue: 0); at: 54 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 264); at: 55 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 0 scaledBlue: 264); at: 56 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 792); at: 57 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 264 scaledBlue: 528); at: 58 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 264); at: 59 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 528); at: 60 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 5812); at: 61 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 7134 scaledBlue: 7398); at: 62 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 2906 scaledBlue: 3699); at: 63 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 3699 scaledBlue: 3963); at: 64 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 0 scaledBlue: 1056); at: 65 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 0 scaledBlue: 528); at: 66 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 1056 scaledBlue: 0); at: 67 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 4756); at: 68 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 4491 scaledBlue: 5284); at: 69 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 2378 scaledBlue: 3699); at: 70 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 1056 scaledBlue: 1056); at: 71 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 1056 scaledBlue: 1321); at: 72 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 1321 scaledBlue: 1321); at: 73 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 1585 scaledBlue: 1321); at: 74 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7398 scaledBlue: 4227); at: 75 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 3170 scaledBlue: 3170); at: 76 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 3699 scaledBlue: 3170); at: 77 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 2642 scaledBlue: 3434); at: 78 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 2378 scaledBlue: 2906); at: 79 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 3170 scaledBlue: 2642); at: 80 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 264 scaledBlue: 0); at: 81 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 528 scaledBlue: 0); at: 82 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 6605 scaledBlue: 4227); at: 83 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 2642 scaledBlue: 3170); at: 84 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 1321 scaledBlue: 2378); at: 85 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 3434 scaledBlue: 4227); at: 86 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 1056 scaledBlue: 792); at: 87 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 528 scaledBlue: 528); at: 88 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 0 scaledBlue: 0); at: 89 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 0 scaledBlue: 264); at: 90 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 528 scaledBlue: 792); at: 91 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 0 scaledBlue: 1585); at: 92 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 0 scaledBlue: 1321); at: 93 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 8191 scaledBlue: 7926); at: 94 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 8191 scaledBlue: 8191); at: 95 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 7926); at: 96 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 7662); at: 97 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7662); at: 98 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 8191); at: 99 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7398 scaledBlue: 8191); at: 100 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 1056 scaledBlue: 2113); at: 101 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 0 scaledBlue: 1056); at: 102 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 0 scaledBlue: 1321); at: 103 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 264 scaledBlue: 1585); at: 104 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 792 scaledBlue: 1585); at: 105 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 1056); at: 106 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 0 scaledBlue: 0); at: 107 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 264 scaledBlue: 0); at: 108 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 264 scaledBlue: 528); at: 109 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 792 scaledBlue: 528); at: 110 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 0 scaledBlue: 264); at: 111 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 0 scaledBlue: 528); at: 112 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 264 scaledBlue: 792); at: 113 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 1321); at: 114 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 0 scaledBlue: 792); at: 115 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 792 scaledBlue: 0); at: 116 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7662 scaledBlue: 7398); at: 117 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 0 scaledBlue: 1056); at: 118 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 6077); at: 119 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 528 scaledBlue: 0); at: 120 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 4227 scaledBlue: 3963); at: 121 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5284 scaledBlue: 4756); at: 122 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4756 scaledBlue: 6077); at: 123 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 6077 scaledBlue: 2642); at: 124 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 792 scaledBlue: 1321); at: 125 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 1056 scaledBlue: 1321); at: 126 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 0 scaledBlue: 792); at: 127 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 528 scaledBlue: 1321); at: 128 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 1056); at: 129 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 1056 scaledBlue: 0); at: 130 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 1321 scaledBlue: 0); at: 131 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 264 scaledBlue: 0); at: 132 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 0); at: 133 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 264); at: 134 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 6869 scaledBlue: 7134); at: 135 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 8191 scaledBlue: 5284); at: 136 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 1321 scaledBlue: 1585); at: 137 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 0 scaledBlue: 0); at: 138 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 528 scaledBlue: 0); at: 139 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 1321 scaledBlue: 1056); at: 140 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 3170 scaledBlue: 3699); at: 141 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 2642 scaledBlue: 3699); at: 142 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 2378 scaledBlue: 3170); at: 143 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 2906 scaledBlue: 3434); at: 144 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 792 scaledBlue: 1056); at: 145 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 792 scaledBlue: 528); at: 146 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 528 scaledBlue: 0); at: 147 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 3434 scaledBlue: 4227); at: 148 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 5812 scaledBlue: 6605); at: 149 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 2642 scaledBlue: 3170); at: 150 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 1849 scaledBlue: 2378); at: 151 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 264 scaledBlue: 0); at: 152 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 528 scaledBlue: 1056); at: 153 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 3434 scaledBlue: 3963); at: 154 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 2378 scaledBlue: 1849); at: 155 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 264 scaledBlue: 264); at: 156 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 0 scaledBlue: 0); at: 157 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 528 scaledBlue: 1321); at: 158 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 264 scaledBlue: 792); at: 159 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 7662); at: 160 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7398 scaledBlue: 7662); at: 161 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 8191 scaledBlue: 7398); at: 162 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7662 scaledBlue: 7926); at: 163 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 5548 scaledBlue: 5020); at: 164 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 0 scaledBlue: 1056); at: 165 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 2642 scaledBlue: 3434); at: 166 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 0 scaledBlue: 264); at: 167 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 264 scaledBlue: 264); at: 168 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 0 scaledBlue: 0); at: 169 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 264 scaledBlue: 0); at: 170 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 792); at: 171 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 264 scaledBlue: 792); at: 172 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 1056); at: 173 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 792 scaledBlue: 264); at: 174 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 0 scaledBlue: 528); at: 175 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 528 scaledBlue: 264); at: 176 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 528); at: 177 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 7398 scaledBlue: 7398); at: 178 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 528 scaledBlue: 0); at: 179 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 5812); at: 180 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 4491 scaledBlue: 5548); at: 181 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 3699 scaledBlue: 4227); at: 182 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 5020 scaledBlue: 5548); at: 183 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 5020 scaledBlue: 5812); at: 184 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 5020 scaledBlue: 4756); at: 185 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 5548); at: 186 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 1321 scaledBlue: 1056); at: 187 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 1585 scaledBlue: 1321); at: 188 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 0 scaledBlue: 1321); at: 189 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 264 scaledBlue: 0); at: 190 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 792 scaledBlue: 0); at: 191 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 2378 scaledBlue: 3170); at: 192 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 528 scaledBlue: 792); at: 193 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 1321 scaledBlue: 1321); at: 194 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 2906 scaledBlue: 3434); at: 195 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 3170 scaledBlue: 3170); at: 196 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3963 scaledBlue: 4756); at: 197 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 1849 scaledBlue: 2642); at: 198 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 2378 scaledBlue: 3434); at: 199 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 792 scaledBlue: 528); at: 200 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 528 scaledBlue: 0); at: 201 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 1056 scaledBlue: 1056); at: 202 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5812 scaledBlue: 6605); at: 203 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3434 scaledBlue: 3963); at: 204 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 528 scaledBlue: 528); at: 205 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 0 scaledBlue: 0); at: 206 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7926); at: 207 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 8191 scaledBlue: 8191); at: 208 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 7662); at: 209 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 8191); at: 210 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 7926); at: 211 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5284 scaledBlue: 6341); at: 212 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 8191); at: 213 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 6605 scaledBlue: 3699); at: 214 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 6605 scaledBlue: 3434); at: 215 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 3170 scaledBlue: 3963); at: 216 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 264 scaledBlue: 1585); at: 217 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 3699); at: 218 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 792 scaledBlue: 792); at: 219 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 0 scaledBlue: 264); at: 220 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 0 scaledBlue: 0); at: 221 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 264 scaledBlue: 1585); at: 222 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 792 scaledBlue: 528); at: 223 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 0 scaledBlue: 528); at: 224 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 0 scaledBlue: 1056); at: 225 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 264 scaledBlue: 528); at: 226 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 1056 scaledBlue: 0); at: 227 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7926 scaledBlue: 7398); at: 228 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 7134); at: 229 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7662 scaledBlue: 7398); at: 230 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 7398); at: 231 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7398 scaledBlue: 7926); at: 232 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 4756 scaledBlue: 4491); at: 233 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 3963 scaledBlue: 4756); at: 234 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 5020 scaledBlue: 5548); at: 235 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 7926); at: 236 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 2642 scaledBlue: 3434); at: 237 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 528 scaledBlue: 0); at: 238 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 2642 scaledBlue: 3699); at: 239 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 0 scaledBlue: 528); at: 240 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 0 scaledBlue: 264); at: 241 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 6077 scaledBlue: 2906); at: 242 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 0 scaledBlue: 0); at: 243 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 0); at: 244 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 264 scaledBlue: 264); at: 245 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 264); at: 246 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 528); at: 247 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 0); at: 248 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 6341 scaledBlue: 2642); at: 249 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 7662); at: 250 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 5284); at: 251 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 5020); at: 252 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 1056 scaledBlue: 0); at: 253 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 1321 scaledBlue: 0); at: 254 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 1321 scaledBlue: 1056); at: 255 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 792 scaledBlue: 1585); at: 256 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 0 scaledBlue: 264); at: 257 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 258 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 3170 scaledBlue: 3699); at: 259 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 528 scaledBlue: 1056); at: 260 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 1321 scaledBlue: 1056); at: 261 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 1056 scaledBlue: 1321); at: 262 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 264 scaledBlue: 0); at: 263 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7134 scaledBlue: 4227); at: 264 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 2642 scaledBlue: 3170); at: 265 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3699 scaledBlue: 4491); at: 266 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 528 scaledBlue: 0); at: 267 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 528 scaledBlue: 792); at: 268 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 792 scaledBlue: 792); at: 269 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 1849 scaledBlue: 2906); at: 270 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 3434 scaledBlue: 3963); at: 271 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 792 scaledBlue: 1585); at: 272 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 0 scaledBlue: 0); at: 273 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 0 scaledBlue: 264); at: 274 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 7926); at: 275 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 7662); at: 276 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 8191 scaledBlue: 8191); at: 277 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 7926); at: 278 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 7662); at: 279 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7926 scaledBlue: 8191); at: 280 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5284 scaledBlue: 5812); at: 281 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 7398); at: 282 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7398); at: 283 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 2113 scaledBlue: 2113); at: 284 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 1056 scaledBlue: 1585); at: 285 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 1321 scaledBlue: 2113); at: 286 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 0 scaledBlue: 792); at: 287 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 0 scaledBlue: 264); at: 288 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 264 scaledBlue: 1056); at: 289 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 1321); at: 290 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 528 scaledBlue: 264); at: 291 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 792); at: 292 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 528 scaledBlue: 528); at: 293 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 1056); at: 294 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 792 scaledBlue: 264); at: 295 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 264 scaledBlue: 264); at: 296 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 792 scaledBlue: 528); at: 297 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 0 scaledBlue: 0); at: 298 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 528 scaledBlue: 0); at: 299 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 264 scaledBlue: 0); at: 300 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 6605); at: 301 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 5812); at: 302 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 5020 scaledBlue: 5020); at: 303 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 6077); at: 304 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 1585 scaledBlue: 1849); at: 305 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 2642 scaledBlue: 2378); at: 306 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 1056 scaledBlue: 0); at: 307 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 2906 scaledBlue: 2113); yourself)) usingBits: (ByteArray fromPackedString: '@L&lt;@8 A\@L8@3 A]@QL@H@@ @I8AI C1@CL@)P@3@OD@&lt;PB&amp;@@@@@@@@@@@AI0CN@L8@H@@ @B@@G @^@A8@@@C#@CP@  @''@HH@@@@ @B@@H@BC@CL@L0D(@J\@)0CZ@R @)0C1@HL@&lt;PC1@CT@@@@ @B@@H@@ @B@@H@@^@@@AJP@@@@@@H@@@@@@@MP@_@I&lt;@U D(@H,@0PBT@N @#@@N@A(@C0B4@P\A@P@3@JT@H@@ @B@@H@@ @B@@H@@@@HL@ 0@ @QD@H@BD@@@@H@CM@J\AJ@@E@R&lt;@ZPC[@O8@^0D[@L0@&amp;0D\@@ @60@3@B@@H@@ @B@@H@CN@B@@@@@@@OHAD @ @B@@@@C3@B@@G B(@OD@FP@3@N\@L0C[@G0@3@AW@I,@&amp;0DB@R @&lt;P@ @B@@H@@ @L8@3 @ @@@@@@@@@CT@H@BD@M$@@@A3@B@@ 0@3@D,@L0@3@F(AJ@B9@E\@H0A7@I,@V@@3@CL@H@@ @B@@H@CN@L8@H@@@@OD@M C4@Q4@=PD]@OP@G0A^@J\@ZPAJ@R @60C[@F$@$@C[@R @)0A)@L@@&lt;P@@@B@@H@@ @B@@H@CN@B@@@@C4@HP@*PC5@C\@=P@"@M@@G0B''@R @0 AE@M,@ZP@I@K(@1 A)@CLA@0DK@HL@ 0@ @B@@H@@ @B@@H@@ @@@@N@@8@KT@5 CC@C\@M0@_@M@AG B''@@P@DP@#@H\@#0@R@@$@DPAG@DXAA@C1@HL@H@@ @A&lt;@'' @ @B@@9@@@@F @* B6@DL@;PB+@Q&lt;@H@@ @OD@L0@3@I(@ZPB''@J\@ZPD(@CL@L0D(@J\@VP@@@B@@H@@ @A8@4PB @A8@@@D_@C\@4 B+@R@@7@@7@ML@H@@_@L4@L0BC@HL@*@BC@CL@L0B&amp;@HL@&lt;P@3@A&lt;@H@@ @B@@9P@^@E&lt;@G CO@@@@=PB\@C\@*0B+@J,@M0@ @ML@H@@ @@@AHP@A@JH@^@@)@B$@-0D0@F,@ 0DQ@B@@H@@ @L4@H@CQ@MD@G @@@OT@M0A(@C\@D@@-@OTAH @@@M4@@@@@@@@@  BB@@@@@@@@@J0@= @5@@@@[@@@@OL@@@@@@@@@@@@9@B@@@@BD@HP@=PC)@L(@=PB)@OP@''P@3@CL@)0B''@J\@L0B''@R @&lt;PBC@HL@&lt;PD^@@@@!@@@@HP@+PBD@HP@!@BD@@@@H@D#@HP@!@@:@CX@7 A)@P0@A @=@IT@/ CD@B(@T0BM@A,@O @G@H8@S@AR@IH@+PC4@C(@$0DM@C AC @@@B@@@@@@@OP@M D^@BP@1PA#@C&lt;@K A=@BD@(0@/@M\@_ DO@I,@H0@#@M,@[P@6@Q4@=PD$@C\@U@A(@C\@@@@ @B@@M BC@F8@)0DP@DP@.0A?@FT@Y@@0@N8@L@A&amp;@E\@60A)@F$@)0C1@F&lt;@=P@7@J,@^P@%@J,@*0@7@@@@H@@ @QP@Z0C1@J\@60AM@F\@?0D@@N&lt;@;0@1@I\@P@B?@Q(@L @S@CX@!@B$@P @Z@@7@I @:0@7@C\AG0@@@B@@J@@ @B@@ 0@3@A0@&amp;PDE@H@@"@B&lt;@N0@"@@J@@,@U0A)@F$@[ AZ@RP@\@@7@HPAI0D%@RT@  @@@B@@@@@ @B@@(P@ @HL@&lt;PB''@D8@C@C;@@,@"PD1@HD@PPC&lt;@O4@H0A)@F4@V0A1@M&lt;@+PBC@@@@@@@@@OH@30DU@@@@H@A3@B@ADPDQ@HL@&lt;PA)@H(@GP@M@ID@GPAO@L\@T@BV@P$@?P@T@APAB @U@L,@2@AH@AXAJ C1@F@@X@@@@A8@4P@ @B@@H@@5@HL@L0B''@F$@H0C[@BL@H0D(@R @60D(@R AJ@D(@F$@)0B''@CL@L0@3@OD@&lt;PA @L&lt;@@@@^@A8@\0B0@B@@H@@@@HL@&lt;PD(@J\@)0@3@CL@8@BC@OD@ 0BC@OH@ 0A2@@@@@@@5@HP@M0C5@B@@H@@ @@@@30@^@B@@H@@ @FD@H@@ @B@AEP@_@A&lt;@M BD@NX@J0D-@B0AL @@@HHAJ0CO@QH@H@A!@B@@H@A]@B@@H@@@@L&lt;@G DQ@B@@H@@ @B@@H@@ @B@@H@@ @@@@!@C5@OT@M0B+@C\@]@C5@A&lt;@G0CP@A&lt;@: @ @B@@H@@ @B@@@@@^@A8@3P@ @B@@(P@ @B@@H@@ @B@@H@@@@BXAE DW@L$@,0CX@J,@*PA"@M@@G0@_@E8@G0@ @B@@H@@ @@@@G @ @B@@H@@ @B@@H@BE@RD@@@@@@@@@+ @@@@@@!@BD@J&lt;@@@@@@@@@,PB1@HL@@@@ @B@@H@@ @B@@H@@@@B@@H@@ @B@AE@@ @I8@UP@@@CP@M@BB@HH@@@C2@CP@  @@@@@@  C!@HH@@@@@@HL@@@B^@B@@H@@ @Q @@@@ @B@@H@@ @A&lt;@H@DY@@@@M@B2@HX@&gt;P@W@@H@.@C2@HL@*@A5@DH@@0C:@O(AK@C1@CL@4@@_@B@@H@@ @@@@H@CS@B@@H@@ @B@@30A2@HHAK @W@MP@F@AI@O@@] C1@R(@N0DF@G(@=0CU@ED@ 0C1@A&lt;@4@CP@B@@H@@@@B@@H@@ @B@@H@C8@I8@@@@@@OH@@@BC@HL@*@C1@OD@Z0@@@@@@&lt; @4@HH@/P@@@@@@@@@&lt;@ML@H@@ @B@@@@A\@B@@H@@ @B@@H@@ @@@@@@@@@@@@ 0BC@ODAG C1@OT@=PD#@@@@@@C6@HH@  BB@@@@H@CN@B@@3 @ @@@b'))</body></methods><methods><class-id>RobotState</class-id> <category>accessing</category><body package="Robot - Primera Practica" selector="robot">robot		^robot.</body><body package="Robot - Primera Practica" selector="robot:">robot: aRobot 		robot:=aRobot.</body></methods><methods><class-id>RobotState</class-id> <category>testing</category><body package="Robot - Primera Practica" selector="isBrushDown">isBrushDown		^self subclassResponsibility.</body><body package="Robot - Primera Practica" selector="isBrushUp">isBrushUp		^self subclassResponsibility.</body></methods><methods><class-id>RobotState</class-id> <category>robot functions</category><body package="Robot - Primera Practica" selector="move:">move: aDistance		^self subclassResponsibility.</body></methods><methods><class-id>RobotState</class-id> <category>state changes</category><body package="Robot - Primera Practica" selector="liftBrush">liftBrush		^self subclassResponsibility.</body><body package="Robot - Primera Practica" selector="lowerBrush">lowerBrush		^self subclassResponsibility.</body></methods><methods><class-id>RobotState class</class-id> <category>instance creation</category><body package="Robot - Primera Practica" selector="robot:">robot: aRobot		^super new robot: aRobot.</body></methods><methods><class-id>BrushDown</class-id> <category>testing</category><body package="Robot - Primera Practica" selector="isBrushDown">isBrushDown		^true.</body><body package="Robot - Primera Practica" selector="isBrushUp">isBrushUp		^false.</body></methods><methods><class-id>BrushDown</class-id> <category>state changes</category><body package="Robot - Primera Practica" selector="liftBrush">liftBrush		self robot state: (BrushUp robot: self robot).</body><body package="Robot - Primera Practica" selector="lowerBrush">lowerBrush		"Do nothing - the brush is already down"</body></methods><methods><class-id>InMotionBrushDown</class-id> <category>robot functions</category><body package="Robot - Primera Practica" selector="move:">move: aDistance		self robot doMove: aDistance.		self robot recordPosition.</body></methods><methods><class-id>InMotionBrushDown</class-id> <category>state changes</category><body package="Robot - Primera Practica" selector="liftBrush">liftBrush		self robot endPath.		super liftBrush.</body></methods><methods><class-id>InPlaceBrushDown</class-id> <category>robot functions</category><body package="Robot - Primera Practica" selector="move:">move: aDistance		self robot startNewPath.		self robot state: (InMotionBrushDown robot: self robot).		self robot state move: aDistance.</body></methods><methods><class-id>BrushUp</class-id> <category>testing</category><body package="Robot - Primera Practica" selector="isBrushDown">isBrushDown		^false.</body><body package="Robot - Primera Practica" selector="isBrushUp">isBrushUp		^true.</body></methods><methods><class-id>BrushUp</class-id> <category>robot functions</category><body package="Robot - Primera Practica" selector="move:">move: aDistance		self robot doMove: aDistance.</body></methods><methods><class-id>BrushUp</class-id> <category>state changes</category><body package="Robot - Primera Practica" selector="liftBrush">liftBrush		"Do nothing - brush is already up"</body><body package="Robot - Primera Practica" selector="lowerBrush">lowerBrush		self robot state: (InPlaceBrushDown robot: self robot).</body></methods><methods><class-id>RobotWorld</class-id> <category>accessing</category><body package="Robot - Primera Practica" selector="clear">clear		self clearPaths.		self clearRobots.</body><body package="Robot - Primera Practica" selector="namedRobots">namedRobots		^namedRobots.</body><body package="Robot - Primera Practica" selector="paths">paths		^paths.</body><body package="Robot - Primera Practica" selector="robots">robots		^self namedRobots values.</body></methods><methods><class-id>RobotWorld</class-id> <category>initialize</category><body package="Robot - Primera Practica" selector="initialize">initialize		self namedRobots: Dictionary new.		self paths: OrderedCollection new.</body></methods><methods><class-id>RobotWorld</class-id> <category>robot management</category><body package="Robot - Primera Practica" selector="addRobot:named:">addRobot: aRobot named: aName		self namedRobots at: aName put: aRobot.		aRobot world: self.		self changed: #robotAdded with: aRobot.</body><body package="Robot - Primera Practica" selector="clearRobots">clearRobots		self namedRobots keys do:[:name | self removeRobotNamed: name].</body><body package="Robot - Primera Practica" selector="getRobotName:">getRobotName: aRobot		^self namedRobots keyAtValue: aRobot.</body><body package="Robot - Primera Practica" selector="getRobotNamed:">getRobotNamed: aName		^self namedRobots at: aName.</body><body package="Robot - Primera Practica" selector="removeRobotNamed:">removeRobotNamed: aName		| r |		r:=self namedRobots removeKey: aName.		r world: nil.		self changed: #robotRemoved with: r.</body></methods><methods><class-id>RobotWorld</class-id> <category>path management</category><body package="Robot - Primera Practica" selector="addPath:">addPath: aPath		^self error: 'NOOO'."		self paths add: aPath.		self changed: #newPath with: aPath."</body><body package="Robot - Primera Practica" selector="addPath:for:">addPath: aPath for: aRobot		self paths add: aPath.		self changed: #newPath with: (Array with:aPath with: aRobot).</body><body package="Robot - Primera Practica" selector="clearPaths">clearPaths		self paths: OrderedCollection new.		self changed: #pathsCleared.</body></methods><methods><class-id>RobotWorld</class-id> <category>private - accessing</category><body package="Robot - Primera Practica" selector="namedRobots:">namedRobots: aNamedRobots 		namedRobots:=aNamedRobots.</body><body package="Robot - Primera Practica" selector="paths:">paths: aPaths 		paths:=aPaths.</body></methods><methods><class-id>RobotWorld class</class-id> <category>instance creation</category><body package="Robot - Primera Practica" selector="new">new		^super new initialize.</body></methods><methods><class-id>Battery</class-id> <category>accessing</category><body package="Robot - Primera Practica" selector="capacity">capacity		^capacity.</body><body package="Robot - Primera Practica" selector="charge">charge		^charge.</body><body package="Robot - Primera Practica" selector="charge:">charge: aCharge 		charge:=aCharge.</body><body package="Robot - Primera Practica" selector="chargeYourself">chargeYourself		self charge: self capacity.</body></methods><methods><class-id>Battery</class-id> <category>initialize</category><body package="Robot - Primera Practica" selector="initialize:">initialize: aCapacity		self capacity: aCapacity.		self charge: aCapacity.</body></methods><methods><class-id>Battery</class-id> <category>private - accessing</category><body package="Robot - Primera Practica" selector="capacity:">capacity: aCapacity 		capacity:=aCapacity.</body></methods><methods><class-id>Battery</class-id> <category>printing</category><body package="Robot - Primera Practica" selector="printOn:">printOn: aStream		aStream nextPutAll: 'Battery at '.		(self charge * 100 / self capacity) rounded printOn: aStream.		aStream nextPut: $%.</body></methods><methods><class-id>Battery class</class-id> <category>instance creation</category><body package="Robot - Primera Practica" selector="capacity:">capacity: aCapacity		^super new initialize: aCapacity.</body><body package="Robot - Primera Practica" selector="new">new		^self error: 'Batteries must be created sending #capacity: to the class'.</body></methods><methods><class-id>Robot</class-id> <category>accessing</category><body package="Robot - Primera Practica" selector="battery">battery		^battery.</body><body package="Robot - Primera Practica" selector="position">position		^position.</body><body package="Robot - Primera Practica" selector="position:">position: aPosition 		position:=aPosition.		self changed: #position.</body><body package="Robot - Primera Practica" selector="world">world		^world.</body><body package="Robot - Primera Practica" selector="world:">world: aWorld 		world:=aWorld.</body></methods><methods><class-id>Robot</class-id> <category>brush</category><body package="Robot - Primera Practica" selector="brushDown">brushDown		self state lowerBrush.</body><body package="Robot - Primera Practica" selector="brushUp">brushUp		self state liftBrush.</body><body package="Robot - Primera Practica" selector="isBrushDown">isBrushDown		^self state isBrushDown.</body><body package="Robot - Primera Practica" selector="isBrushUp">isBrushUp		^self state isBrushUp.</body></methods><methods><class-id>Robot</class-id> <category>initialize</category><body package="Robot - Primera Practica" selector="initialize">initialize		self position: 0@0.		self north.		self state: (BrushUp robot:self).		self battery: (Battery capacity: 1000).</body></methods><methods><class-id>Robot</class-id> <category>path</category><body package="Robot - Primera Practica" selector="clearPaths">clearPaths"		self currentPath clear.		self changed: #clearPaths with: self."</body><body package="Robot - Primera Practica" selector="endPath">endPath		self currentPath: nil.</body><body package="Robot - Primera Practica" selector="recordPosition">recordPosition		self currentPath addPoint: self position.</body><body package="Robot - Primera Practica" selector="startNewPath">startNewPath		self currentPath: Path new.		self recordPosition.		self world addPath: self currentPath for: self.</body></methods><methods><class-id>Robot</class-id> <category>positioning</category><body package="Robot - Primera Practica" selector="move:">move: aDistance		(self battery charge &gt;= aDistance abs)				ifTrue:[						self state move: aDistance.						self battery charge: self battery charge - (aDistance abs).						].</body></methods><methods><class-id>Robot</class-id> <category>printing</category><body package="Robot - Primera Practica" selector="printOn:">printOn: aStream		aStream nextPutAll: 'Robot'.		aStream cr.		aStream nextPutAll: 'at '.		self position printOn: aStream.		aStream cr.		aStream nextPutAll: 'direction '.		self direction printOn: aStream.</body></methods><methods><class-id>Robot</class-id> <category>private - accessing</category><body package="Robot - Primera Practica" selector="battery:">battery: aBattery 		battery:=aBattery.</body><body package="Robot - Primera Practica" selector="currentPath">currentPath		^currentPath.</body><body package="Robot - Primera Practica" selector="currentPath:">currentPath: aCurrentPath 		currentPath:=aCurrentPath.</body><body package="Robot - Primera Practica" selector="state">state		^state.</body><body package="Robot - Primera Practica" selector="state:">state: aState 		state:=aState.</body></methods><methods><class-id>Robot</class-id> <category>private - positioning</category><body package="Robot - Primera Practica" selector="doMove:">doMove: aDistance		self position: (self position + (Point r: aDistance theta: ((Float pi / 180) * (self direction negated - 90)))) rounded</body></methods><methods><class-id>Robot</class-id> <category>direction</category><body package="Robot - Primera Practica" selector="direction">direction		^direction.</body><body package="Robot - Primera Practica" selector="direction:">direction: aDirection 		direction:=aDirection.		self changed: #direction.</body><body package="Robot - Primera Practica" selector="east">east		direction:=270.</body><body package="Robot - Primera Practica" selector="north">north		direction:=0.</body><body package="Robot - Primera Practica" selector="south">south		direction:=180.</body><body package="Robot - Primera Practica" selector="west">west		direction:=90.</body></methods><methods><class-id>Robot class</class-id> <category>instance creation</category><body package="Robot - Primera Practica" selector="new">new		^self error: 'Robots should be created using the message #named:position:'.</body><body package="Robot - Primera Practica" selector="position:">position: aPosition		^super new initialize; position: aPosition; yourself.</body></methods><methods><class-id>Path</class-id> <category>accessing</category><body package="Robot - Primera Practica" selector="points">points		^points.</body></methods><methods><class-id>Path</class-id> <category>initialize</category><body package="Robot - Primera Practica" selector="initialize">initialize		self points: OrderedCollection new.</body></methods><methods><class-id>Path</class-id> <category>path functions</category><body package="Robot - Primera Practica" selector="addPoint:">addPoint: aPoint		self points add: aPoint.		self changed: #pointAdded.</body></methods><methods><class-id>Path</class-id> <category>private - accessing</category><body package="Robot - Primera Practica" selector="points:">points: aPoints 		points:=aPoints.</body></methods><methods><class-id>Path class</class-id> <category>instance creation</category><body package="Robot - Primera Practica" selector="new">new		^super new initialize.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('d:\Smalltalks\vw7.3.1nc\image\Objetos-1-2007.im' 'September 9, 2007' '11:14:09 pm')""An image file d:\Smalltalks\vw7.3.1nc\image\Objetos-1-2007.im was created at 11:14:09 pm on September 9, 2007."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('image\Objetos-1-2007.im' 'September 9, 2007' '11:25:39 pm')""An image file image\Objetos-1-2007.im was created at 11:25:39 pm on September 9, 2007."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('image\Objetos-1-2007.im' 'September 9, 2007' '11:25:47 pm')""An image file image\Objetos-1-2007.im was created at 11:25:47 pm on September 9, 2007."</do-it><component-unloaded><name>SLesson Intro Content</name> <type>parcel</type></component-unloaded><component-unloaded><name>SLesson Base</name> <type>parcel</type></component-unloaded><component-unloaded><name>SLesson Tests PreLoad</name> <type>parcel</type></component-unloaded><do-it>'----SNAPSHOT----'</do-it><do-it>"#('image\Objetos-1-2007.im' 'September 9, 2007' '11:34:32 pm')""An image file image\Objetos-1-2007.im was created at 11:34:32 pm on September 9, 2007."</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 5000</do-it><do-it>robotech move: 5000</do-it><do-it>robotech move: 5000</do-it><do-it>robotech move: 5000</do-it><do-it>robotech move: 5000</do-it><do-it>robotech move: 500</do-it><do-it>robotech move: 500</do-it><do-it>robotech move: 500</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><methods><class-id>UI.ScrollWrapper</class-id> <category>scrolling</category><body package="Interface-Support" selector="scrollToCenter">scrollToCenter	| coordinate |	coordinate := self scrollableExtent / 2 				- ((self scrollableExtent - self visibleExtent) / 2).	self		scroll: ((coordinate x / 2) @ coordinate y)negated</body></methods><methods><class-id>RobotApplication</class-id> <category>interface opening</category><body package="Robot - Primera Practica" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	(self builder componentAt: #InspectorSubcanvas) widget							client: self inspector							spec: #windowSpec							builder: builder newSubBuilder.	self worldView container scrollToCenter.	self refreshInspector.</body></methods><do-it>robotech move: 500</do-it><do-it>robotech move: 500</do-it><do-it>robotech move: 500</do-it><do-it>robotech move: 500</do-it><do-it>robotech move: 500</do-it><do-it>robotech move: 500</do-it><do-it>robotech move: 500</do-it><do-it>robotech move: 500</do-it><do-it>robotech move: 500</do-it><do-it> robotech south</do-it><do-it>robotech brushDown</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech south.robotech brushDown.</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech south.robotech brushDown.</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech south.robotech brushDown.robotech move: 250</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech south.robotech brushDown.robotech move: 350</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech south.robotech brushDown.robotech move: 750</do-it><do-it>robotech move: 50</do-it><do-it>robotech move: 50</do-it><do-it>robotech south.robotech brushDown.robotech move: 800</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech move: 10</do-it><do-it>robotech south.robotech brushDown.robotech move: 950</do-it><do-it>robotech south.robotech brushDown.robotech move: 1000</do-it><do-it>robotech south.robotech brushDown.robotech move: 1000</do-it><do-it>robotech south.robotech brushDown.robotech move: 1000</do-it><methods><class-id>UI.ScrollWrapper</class-id> <category>scrolling</category><body package="Interface-Support" selector="scrollToCenter">scrollToCenter	| coordinate |	coordinate := self scrollableExtent / 2 				- ((self scrollableExtent - self visibleExtent) / 2).	self		scroll: ((coordinate x / 2) @ coordinate y)negated</body></methods><methods><class-id>RobotApplication</class-id> <category>interface opening</category><body package="Robot - Primera Practica" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	(self builder componentAt: #InspectorSubcanvas) widget							client: self inspector							spec: #windowSpec							builder: builder newSubBuilder.	self worldView container scrollToCenter.	self refreshInspector.</body></methods><methods><class-id>UI.ScrollWrapper</class-id> <category>scrolling</category><body package="Interface-Support" selector="scrollToCenter">scrollToCenter	| coordinate |	coordinate := self scrollableExtent / 2 				- ((self scrollableExtent - self visibleExtent) / 2).	self		scroll: ((coordinate x / 2) @ coordinate y)negated</body></methods><methods><class-id>RobotApplication</class-id> <category>interface opening</category><body package="Robot - Primera Practica" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	(self builder componentAt: #InspectorSubcanvas) widget							client: self inspector							spec: #windowSpec							builder: builder newSubBuilder.	self worldView container scrollToCenter.	self refreshInspector.</body></methods><methods><class-id>UI.ScrollWrapper</class-id> <category>scrolling</category><body package="Interface-Support" selector="scrollToCenter">scrollToCenter	| coordinate |	coordinate := self scrollableExtent / 2 				- ((self scrollableExtent - self visibleExtent) / 2).	self		scroll: ((coordinate x / 2) @ coordinate y)negated</body></methods><methods><class-id>RobotApplication</class-id> <category>interface opening</category><body package="Robot - Primera Practica" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	(self builder componentAt: #InspectorSubcanvas) widget							client: self inspector							spec: #windowSpec							builder: builder newSubBuilder.	self worldView container scrollToCenter.	self refreshInspector.</body></methods><do-it>robotech position: 0@0</do-it><do-it>RobotApplication open</do-it><do-it>RobotApplication open</do-it><do-it>RobotApplication open</do-it><do-it>RobotApplication open</do-it><methods><class-id>RobotApplication</class-id> <category>initialize</category><body package="Robot - Primera Practica" selector="initialize">initialize		super initialize.		self text: self defaultText asValue.		self inspector: (WorkspaceInspectorPage with: (WorldTempRobotInspector on: NameSpace new)).		self world: RobotWorld new.		self worldView: (TranslatingWrapper on:(RobotWorldView world: self world) at:250@250).		self world addRobot: (Robot position:(0@0)) named: 'robotech'.</body></methods><methods><class-id>UI.ScrollWrapper</class-id> <category>scrolling</category><body package="Interface-Support" selector="scrollToCenter">scrollToCenter	| coordinate |	coordinate := self scrollableExtent / 2 				- ((self scrollableExtent - self visibleExtent) / 2).	self		scroll: ((coordinate x / 2) @ coordinate y)negated</body></methods><methods><class-id>RobotApplication</class-id> <category>interface opening</category><body package="Robot - Primera Practica" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	(self builder componentAt: #InspectorSubcanvas) widget							client: self inspector							spec: #windowSpec							builder: builder newSubBuilder.	self worldView container scrollToCenter.	self refreshInspector.</body></methods><methods><class-id>RobotApplication</class-id> <category>initialize</category><body package="Robot - Primera Practica" selector="initialize">initialize		super initialize.		self text: self defaultText asValue.		self inspector: (WorkspaceInspectorPage with: (WorldTempRobotInspector on: NameSpace new)).		self world: RobotWorld new.		self worldView: (TranslatingWrapper on:(RobotWorldView world: self world) at:250@250).		self world addRobot: (Robot position:(0@0)) named: 'robotech'.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('image\Objetos-1-2009.im' 'September 11, 2009' '12:47:06 pm')""An image file image\Objetos-1-2009.im was created at 12:47:06 pm on September 11, 2009."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('image\Objetos-1-2009.im' 'September 11, 2009' '12:47:43 pm')""An image file image\Objetos-1-2009.im was created at 12:47:43 pm on September 11, 2009."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('image\Objetos-1-2009.im' 'September 11, 2009' '12:48:21 pm')""An image file image\Objetos-1-2009.im was created at 12:48:21 pm on September 11, 2009."</do-it><component-created><name>Robot - Segunda Practica</name> <type>package</type></component-created><class><name>Rectangle</name><environment>Graphics</environment><super>Graphics.Geometric</super><private>false</private><indexed-type>none</indexed-type><inst-vars>origin corner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Robot - Segunda Practica</package></attributes></class><comment><class-id>Graphics.Rectangle</class-id><body>Class Rectangle usually represents a rectangular area on the screen.  Arithmetic functions take points as arguments and carry out scaling and translating operations to create new Rectangles.  Rectangle functions create new Rectangles by determining intersections of rectangles with rectangles. Instance Variables:	origin	&lt;Point&gt;	upper left corner position	corner	&lt;Point&gt;	lower right corner positionObject Reference:A Rectangle represents a rectangular region whose axes are aligned with the x and y axes -- that is, it does not support a tilted rectangle. A common usage of a rectangle is to represent an area on the screen or in a window, such as the bounds of a widget. A rectangle is typically created by sending an #origin: or #corner: message to a Point that represents the origin of the rectangle. The Rectangle class also supports a variety of creation methods, including the ability to prompt the user for the origin and opposing corner. Many of a Rectangle's abilities are inherited, including the ability to wrap itself in a StrokingWrapper (#asStroker) or FillingWrapper (#asFiller) so it can be displayed like a visual component (see Geometric). In addition, a Rectangle knows how to: 	-Calculate various corner points, midpoints and edge coordinates (accessing protocol) 	-Measure its width, height and area (accessing) 	-Inset or expand its borders (rectangle functions) 	-Determine its overlap with another rectangle (rectangle functions) 	-Merge with another rectangle (rectangle functions) 	-Test whether it intersects another rectangle, or contains a point (testing) 	-Convert its coordinates to integers (truncation and round off) 	-Shift its size and location (transforming) 	-Convert itself to an equivalent Polyline or array of vertex points (converting) </body></comment><class><name>RobotApplication</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>world worldView text inspector workspace localVars classBrowserTabs </inst-vars><class-inst-vars>definedClasses </class-inst-vars><imports></imports><category>Robot - App</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>RobotTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>robot </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Segunda Practica</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>Path</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>points </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Model</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Robot - Segunda Practica</package></attributes></class><comment><class-id>Tools.VisualLauncher</class-id><body>VisualLauncher provides complete and convenient access to the VisualWorks functionality. It enables user  to save the image, change system settings, access Smalltalk programming tools, start up Data Base application development tools, UIPainter and its auxiliary tools, manage multiple windows and access the VW Online Documentation.VisualLauncher openInstance Variables:	menuBar			&lt;Menu&gt; The menu for the main window of VisualWorks launcher. A convenient way to access menu items.	toolBar				&lt;ValueHolder&gt; The tool bar of buttons.	textCollector		&lt;TextCollector&gt;	the text collector to be used.	toolDock	&lt;VisualLauncherToolDock&gt; The subapplication managing the status bar of the launcher.</body></comment><class><name>PathView</name><environment>Smalltalk</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Views</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>WorldTempRobotInspector</name><environment>Smalltalk</environment><super>Tools.Trippy.PoolDictionaryInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Inspector</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>InstanceBehaviorInspector</name><environment>Smalltalk</environment><super>Tools.Trippy.BehaviorInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Inspector</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>SimpleClassCreationDialog</name><environment>Smalltalk</environment><super>Tools.ClassCreationDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Application</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>Battery</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>charge capacity </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Model</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>Robot</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position direction battery state world currentPath autochargeBattery </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Model</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>NewRobot</name><environment>Smalltalk</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name xPos yPos world </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>RobotWorldView</name><environment>Smalltalk</environment><super>Graphics.CompositePart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>world paths </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Views</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>InstanceClassBehaviorInspector</name><environment>Smalltalk</environment><super>Tools.Trippy.BehaviorInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Inspector</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>RobotView</name><environment>Smalltalk</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>preferredBounds image oldPosition oldDirection updateThread color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Views</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>RobotWorldTextEditorController</name><environment>Smalltalk</environment><super>UI.TextEditorController</super><private>false</private><indexed-type>none</indexed-type><inst-vars>world </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - App</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>RobotController</name><environment>Smalltalk</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Views</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>RobotWorld</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>namedRobots paths </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Model</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>NoRenamingInspector</name><environment>Smalltalk</environment><super>Tools.PrimitiveObjectInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Inspector</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>RobotInspector</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>robot name direction battery position tabs myselfText inspector browser explanationText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - Inspector</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>RobotState</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>robot </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - State</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>BrushDown</name><environment>Smalltalk</environment><super>RobotState</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - State</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>InPlaceBrushDown</name><environment>Smalltalk</environment><super>BrushDown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - State</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>InMotionBrushDown</name><environment>Smalltalk</environment><super>BrushDown</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - State</category><attributes><package>Robot - Segunda Practica</package></attributes></class><class><name>BrushUp</name><environment>Smalltalk</environment><super>RobotState</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Robot - State</category><attributes><package>Robot - Segunda Practica</package></attributes></class><shared-variable><name>Index</name><environment>RobotView</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Robot - Segunda Practica</package></attributes></shared-variable><methods><class-id>PathView class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="model:color:">model: aModel color: aColor		^(super model: aModel) color: aColor; yourself.</body></methods><methods><class-id>PathView</class-id> <category>displaying</category><body package="Robot - Segunda Practica" selector="displayOn:">displayOn: aGraphicsContext		aGraphicsContext paint: self color.		aGraphicsContext lineWidth: 3.		aGraphicsContext displayPolyline: (self model points).</body></methods><methods><class-id>PathView</class-id> <category>bounds accessing</category><body package="Robot - Segunda Practica" selector="preferredBounds">preferredBounds				| minX minY maxX maxY |				minX:=maxX:=self model points first x.		minY:=maxY:=self model points first y.		self model points do:[:p | 								minX:=minX min: p x.								minY:=minY min: p y.								maxX:=maxX max: p x.								maxY:=maxY max: p y.								].		^((minX@minY) corner: (maxX@maxY)) expandedBy: 3.</body></methods><methods><class-id>PathView</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="color:">color: aColor 		color:=aColor.</body></methods><methods><class-id>PathView</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="color">color		^color.</body></methods><methods><class-id>RobotWorldView class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="world:">world: aRobotWorld		^super new world: aRobotWorld.</body></methods><methods><class-id>RobotWorld class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="new">new		^super new initialize.</body></methods><methods><class-id>InstanceBehaviorInspector class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="methodListMenu">methodListMenu	"Tools.MenuEditor new openOnClass: self andSelector: #methodListMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #SendIt 					#defaultString: 'Sen&amp;d It' 					#catalogID: #menus ) 				#nameKey: #methodsSendIt 				#value: #sendIt 				#enablementSelector: #singleUnaryMethodIsSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Remove 					#defaultString: '&amp;Remove' 					#catalogID: #menus ) 				#value: #removeMethods 				#enablementSelector: #canRemoveMethods ) ) #(1 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>InstanceBehaviorInspector class</class-id> <category>interface specs</category><body package="Robot - Segunda Practica" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 512 384 936 710 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.4 0 0.4 ) 					#name: #protocolList 					#model: #protocolListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: #updateRequest ) 					#menu: #protocolListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 0 1 0 0.4 ) 					#name: #methodList 					#model: #methodListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #selectorDoubleClicked 						#requestValueChangeSelector: #updateRequest ) 					#menu: #methodListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.4 0 1 0 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: 						#requestValueChangeSelector: 						#textAcceptAllowed: ) 					#isReadOnly: false 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>InstanceBehaviorInspector</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="buildMethodListMenu">buildMethodListMenu	| menu |	menu := self class methodListMenu.	menu		augmentFrom: self class		to: InstanceBehaviorInspector		menuName: #methodList		for: self.	^menu</body></methods><methods><class-id>InstanceBehaviorInspector</class-id> <category>private-text</category><body package="Robot - Segunda Practica" selector="computeText">computeText	^self methodListHolder selections isEmpty		ifTrue:			[self protocolListHolder selections isEmpty				ifTrue:					['']									ifFalse: 					[self classObject sourceCodeTemplate]]		ifFalse: 			[self computeMethodSourceText]</body></methods><methods><class-id>RobotTest</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="testAutochargeBatteryOn">testAutochargeBatteryOn	"Testea que en modo autocharge el robot cargue su bateria si queda menos del 10%."		self robot autochargeBatteryOn.	self moveRobotUntilBatteryChargePercentage: 10.	self		assert: (self batteryChargePercentage: self robot) = 10		description: 'Recarga antes del 10 %'.	self robot move: 100.	self		deny: (self batteryChargePercentage: self robot) &gt; 10		description: ' Posiblemente realiza la carga despues de mover'.	self robot move: 100.	"Debe cargar a 50 %, luego mueve 100 y queda en 40%"	self		assert: (self batteryChargePercentage: self robot) = 40		description: 'No recarga correctamente cuando baja del 10 % de carga'</body></methods><methods><class-id>RobotTest</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="testAutochargeBatteryOff">testAutochargeBatteryOff	"Testea que en modo autocharge el robot este desactivado y no cargue su bateria si queda menos del 10%."      self robot autochargeBatteryOff.      self moveRobotUntilBatteryChargePercentage: 10.      self robot move: 20.      self robot move: 20.      self deny:(self batteryChargePercentage: self robot)&gt;10 description: 'Recarga en modo autocarga-desactivado'.</body></methods><methods><class-id>RobotTest</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="testChargeBattery">testChargeBattery "Testea que el cargue su su bateria correctamente mediante el mensaje chargeBattery."	self moveRobotUntilBatteryChargePercentage: 50.	self assert: self robot battery charge ~= self robot battery capacity.	self robot chargeBattery: 20.	self		assert: (self robot battery percentageCharge) = 70		description: 'Fallo en la carga de bateria por debajo del maximo'.	self robot chargeBattery: 40.	self		assert: (self robot battery percentageCharge = 100)		description: 'Fallo al cargar mas de la capacidad de la bateria '</body></methods><methods><class-id>RobotTest</class-id> <category>initialize-release</category><body package="Robot - Segunda Practica" selector="setUp">setUp	self robot: (Robot position: 0 @ 0).      self robot battery: (Battery capacity: 1000).  "todos los valores estan en base a la interaccion con esta bateria"</body></methods><methods><class-id>RobotTest</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="robot">robot	^robot</body></methods><methods><class-id>RobotTest</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="robot:">robot: anObject	robot := anObject</body></methods><methods><class-id>RobotTest</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="moveRobotUntilBatteryChargePercentage:">moveRobotUntilBatteryChargePercentage: aPercentage	"Mueve el robot hasta que la carga de la bateria sea igual a aPercentage"		((self batteryChargePercentage: self robot) &gt; aPercentage)		ifTrue:			[[(self batteryChargePercentage: self robot) = aPercentage]				whileFalse: [self robot move: 1]]</body></methods><methods><class-id>RobotTest</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="batteryChargePercentage:">batteryChargePercentage: aRobot"Calcula el porcentaje de carga de la bateria del robot"^(aRobot battery charge * 100 / aRobot battery capacity) rounded.</body></methods><methods><class-id>RobotWorldView</class-id> <category>bounds changing</category><body package="Robot - Segunda Practica" selector="changedPreferredBounds:forComponent:">changedPreferredBounds: oldPreferredBoundsOrNil forComponent: aVisualPart		self computePreferredBounds.		self invalidateRectangle: oldPreferredBoundsOrNil repairNow: true.		super changedPreferredBounds: oldPreferredBoundsOrNil forComponent: aVisualPart.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="paths:">paths: aPaths 		paths:=aPaths.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="paths">paths		^paths.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="setWorld:">setWorld: aWorld 		world isNil ifFalse:[self removeDependencies].		world:= aWorld.		world isNil ifFalse:[self setDependencies].		self worldChanged.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - paths</category><body package="Robot - Segunda Practica" selector="clearPaths">clearPaths		self paths notNil ifTrue:[self paths do:[:p | p release; container: nil]].		self paths: OrderedCollection new.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - paths</category><body package="Robot - Segunda Practica" selector="clearAllPaths">clearAllPaths		self clearPaths.		self invalidate.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - paths</category><body package="Robot - Segunda Practica" selector="setUpPaths">setUpPaths		self clearPaths.		self world paths do:[:p | self addPath: p].</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - paths</category><body package="Robot - Segunda Practica" selector="addPath:">addPath: anArray		| view robot |		robot:=anArray at:2.		view:=PathView 						model: (anArray at:1)						color: (self components detect:[:c | c component model = robot]) component color.		self paths add: view.		view container: self.		self invalidateRectangle: view bounds.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - robots</category><body package="Robot - Segunda Practica" selector="addRobot:">addRobot: aRobot		self add: (RobotView model: aRobot)."		aRobot expressInterestIn: #clearPaths for: self sendBack: #clearRobotPaths:."</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - robots</category><body package="Robot - Segunda Practica" selector="setUpRobots">setUpRobots		self clearRobots.		self world robots do:[:r | self add: (RobotView model: r)].</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - robots</category><body package="Robot - Segunda Practica" selector="removeRobot:">removeRobot: aRobot		| view | 		view:=self components detect: [:c | c component model = aRobot].		self remove: view.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - robots</category><body package="Robot - Segunda Practica" selector="clearRobots">clearRobots		self components do:[:c | c release; container: nil].		super initialize.</body></methods><methods><class-id>RobotWorldView</class-id> <category>initialize</category><body package="Robot - Segunda Practica" selector="initialize">initialize		super initialize.		self clearPaths.</body></methods><methods><class-id>RobotWorldView</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="world">world		^world.</body></methods><methods><class-id>RobotWorldView</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="world:">world: aWorld 		self setWorld: aWorld.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - dependencies</category><body package="Robot - Segunda Practica" selector="removeDependencies">removeDependencies		self world retractInterestIn: #robotAdded for: self.		self world retractInterestIn: #robotRemoved for: self.		self world retractInterestIn: #newPath for: self.		self world retractInterestIn: #pathsCleared for: self.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - dependencies</category><body package="Robot - Segunda Practica" selector="setDependencies">setDependencies		self world expressInterestIn: #robotAdded for: self sendBack: #addRobot:.		self world expressInterestIn: #robotRemoved for: self sendBack: #removeRobot:.		self world expressInterestIn: #newPath for: self sendBack: #addPath:.		self world expressInterestIn: #pathsCleared for: self sendBack: #clearAllPaths.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private - dependencies</category><body package="Robot - Segunda Practica" selector="release">release		self removeDependencies.		self clearPaths.		super release.		self components do: [:v | v container:nil].</body></methods><methods><class-id>RobotWorldView</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="minBounds">minBounds		^(-500@-250) extent: 1000@500.</body></methods><methods><class-id>RobotWorldView</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="invalidateRectangle:repairNow:forComponent:">invalidateRectangle: aRectangle repairNow: aBoolean	forComponent: aVisualComponent		(self preferredBounds sharesSideWith: aRectangle)			ifTrue: [self invalidateRectangle: self bounds repairNow: aBoolean.]			ifFalse:[super invalidateRectangle: aRectangle repairNow: aBoolean forComponent: aVisualComponent].</body></methods><methods><class-id>RobotWorldView</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="layoutComponentsForBounds:">layoutComponentsForBounds: newBounds		| oldBounds |		oldBounds:=preferredBounds.		super layoutComponentsForBounds: newBounds.		preferredBounds:=preferredBounds merge: self minBounds.		oldBounds notNil ifTrue:[preferredBounds:=preferredBounds merge: oldBounds].		self container setOrigin: (self preferredBounds origin abs).</body></methods><methods><class-id>RobotWorldView</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="worldChanged">worldChanged		self setUpPaths.		self setUpRobots.</body></methods><methods><class-id>RobotWorldView</class-id> <category>displaying</category><body package="Robot - Segunda Practica" selector="displayOn:">displayOn: aGraphicsContext		self displayBackgroungOn: aGraphicsContext.		self displayPathsOn:  aGraphicsContext copy.		super displayOn: aGraphicsContext.</body></methods><methods><class-id>RobotWorldView</class-id> <category>displaying</category><body package="Robot - Segunda Practica" selector="displayPathsOn:">displayPathsOn: aGraphicsContext		self paths do:[:pv | pv displayOn: aGraphicsContext].</body></methods><methods><class-id>RobotWorldView</class-id> <category>displaying</category><body package="Robot - Segunda Practica" selector="displayBackgroungOn:">displayBackgroungOn: aGraphicsContext		| box x y x0 y0 x1 y1 deltaX deltaY |		box:=self preferredBounds.		x0:=box origin x.		x:=(x0 / 100) truncated * 100.		y0:=box origin y.		y:=(y0 / 100) truncated * 100.		deltaX:=box extent x // 100.		deltaY:=box extent y // 100.		x1:=box corner x.		y1:=box corner y.		aGraphicsContext paint: (ColorValue lightGray).		aGraphicsContext displayRectangle: box.		aGraphicsContext paint: (ColorValue darkGray).		(deltaX+1) timesRepeat:[aGraphicsContext displayLineFrom: (x@y0) to: (x@y1).								x:=x + 100].		(deltaY+1) timesRepeat:[aGraphicsContext displayLineFrom: (x0@y) to: (x1@y).								y:=y + 100].</body></methods><methods><class-id>RobotWorldView</class-id> <category>bounds accessing</category><body package="Robot - Segunda Practica" selector="computePreferredBounds">computePreferredBounds		| oldBounds |		oldBounds:=preferredBounds.		super computePreferredBounds.		preferredBounds:=preferredBounds merge: self minBounds.		oldBounds notNil ifTrue:[preferredBounds:=preferredBounds merge: oldBounds].		self container setOrigin: (self preferredBounds origin abs).		^preferredBounds.</body></methods><methods><class-id>RobotView class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="mask">mask	"UIMaskEditor new openOnClass: self andSelector: #mask"	&lt;resource: #image&gt;	^(Image extent: 50@50 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O @@@@@@@@G?0@@@@@@@C??8@@@@@@A???&lt;@@@@@@_???&lt;@@@@@C????8@@@@@O???? @@@@@????&gt;@@@@A??????8@@@O??????0@@@???????@@@C??????&lt;@@@O??????0@@@???????@@@C??????&lt;@@@O??????0@@@???????@@@C??????&lt;@@@O??????0@@@???????@@@C??????&lt;@@@O??????0@@@???????@@@C??????&lt;@@@O??????0@@@???????@@@A??????8@@@@_????0@@@@@????&gt;@@@@@C????8@@@@@O????@@@@@@O???0@@@@@@O??&lt;@@@@@@@O??@@@@@@@@G?0@@@@@@@@G&lt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@a'))</body></methods><methods><class-id>RobotView class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="image">image		^OpaqueImage figure: self basicImage shape: self mask.</body></methods><methods><class-id>RobotView class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="basicImage">basicImage	"UIMaskEditor new openOnClass: self andSelector: #basicImage"	&lt;resource: #image&gt;	^(Image extent: 50@50 depth: 8 bitsPerPixel: 8 palette: (MappedPalette withColors: ((Array new: 184) at: 1 put: (ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 7662); at: 2 put: (ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 6605); at: 3 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 6077); at: 4 put: (ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 6341); at: 5 put: (ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 5812); at: 6 put: (ColorValue scaledRed: 7926 scaledGreen: 7134 scaledBlue: 7134); at: 7 put: (ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 7134); at: 8 put: (ColorValue scaledRed: 7134 scaledGreen: 6869 scaledBlue: 5548); at: 9 put: (ColorValue scaledRed: 7398 scaledGreen: 6869 scaledBlue: 5284); at: 10 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 5548); at: 11 put: (ColorValue scaledRed: 6605 scaledGreen: 6341 scaledBlue: 5284); at: 12 put: (ColorValue scaledRed: 7134 scaledGreen: 6341 scaledBlue: 4756); at: 13 put: (ColorValue scaledRed: 5812 scaledGreen: 5548 scaledBlue: 5548); at: 14 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 4227); at: 15 put: (ColorValue scaledRed: 6341 scaledGreen: 6077 scaledBlue: 4491); at: 16 put: (ColorValue scaledRed: 5812 scaledGreen: 5548 scaledBlue: 4227); at: 17 put: (ColorValue scaledRed: 6341 scaledGreen: 5548 scaledBlue: 3699); at: 18 put: (ColorValue scaledRed: 6869 scaledGreen: 5812 scaledBlue: 4227); at: 19 put: (ColorValue scaledRed: 5812 scaledGreen: 4227 scaledBlue: 4227); at: 20 put: (ColorValue scaledRed: 5812 scaledGreen: 5020 scaledBlue: 3434); at: 21 put: (ColorValue scaledRed: 5548 scaledGreen: 4491 scaledBlue: 2906); at: 22 put: (ColorValue scaledRed: 5020 scaledGreen: 4756 scaledBlue: 3170); at: 23 put: (ColorValue scaledRed: 4756 scaledGreen: 3963 scaledBlue: 2906); at: 24 put: (ColorValue scaledRed: 4756 scaledGreen: 3699 scaledBlue: 3170); at: 25 put: (ColorValue scaledRed: 4491 scaledGreen: 3699 scaledBlue: 2113); at: 26 put: (ColorValue scaledRed: 5020 scaledGreen: 4227 scaledBlue: 2378); at: 27 put: (ColorValue scaledRed: 4756 scaledGreen: 3434 scaledBlue: 2113); at: 28 put: (ColorValue scaledRed: 4227 scaledGreen: 2906 scaledBlue: 1849); at: 29 put: (ColorValue scaledRed: 4756 scaledGreen: 4227 scaledBlue: 2642); at: 30 put: (ColorValue scaledRed: 3434 scaledGreen: 2906 scaledBlue: 1321); at: 31 put: (ColorValue scaledRed: 3963 scaledGreen: 2113 scaledBlue: 1585); at: 32 put: (ColorValue scaledRed: 3170 scaledGreen: 2906 scaledBlue: 1585); at: 33 put: (ColorValue scaledRed: 2906 scaledGreen: 2378 scaledBlue: 1056); at: 34 put: (ColorValue scaledRed: 3170 scaledGreen: 1056 scaledBlue: 792); at: 35 put: (ColorValue scaledRed: 2906 scaledGreen: 1321 scaledBlue: 792); at: 36 put: (ColorValue scaledRed: 2378 scaledGreen: 792 scaledBlue: 528); at: 37 put: (ColorValue scaledRed: 1849 scaledGreen: 264 scaledBlue: 264); at: 38 put: (ColorValue scaledRed: 2113 scaledGreen: 264 scaledBlue: 0); at: 39 put: (ColorValue scaledRed: 2378 scaledGreen: 0 scaledBlue: 0); at: 40 put: ColorValue white; at: 41 put: (ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 7398); at: 42 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7134); at: 43 put: (ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 5812); at: 44 put: (ColorValue scaledRed: 7134 scaledGreen: 6869 scaledBlue: 5284); at: 45 put: (ColorValue scaledRed: 7398 scaledGreen: 6869 scaledBlue: 5020); at: 46 put: (ColorValue scaledRed: 6341 scaledGreen: 5812 scaledBlue: 5812); at: 47 put: (ColorValue scaledRed: 7134 scaledGreen: 6341 scaledBlue: 4491); at: 48 put: (ColorValue scaledRed: 7134 scaledGreen: 5548 scaledBlue: 5284); at: 49 put: (ColorValue scaledRed: 6605 scaledGreen: 5812 scaledBlue: 4227); at: 50 put: (ColorValue scaledRed: 6869 scaledGreen: 6341 scaledBlue: 4756); at: 51 put: (ColorValue scaledRed: 6341 scaledGreen: 4491 scaledBlue: 4491); at: 52 put: (ColorValue scaledRed: 6077 scaledGreen: 5548 scaledBlue: 3699); at: 53 put: (ColorValue scaledRed: 6341 scaledGreen: 5284 scaledBlue: 3699); at: 54 put: (ColorValue scaledRed: 5020 scaledGreen: 4491 scaledBlue: 4491); at: 55 put: (ColorValue scaledRed: 5284 scaledGreen: 4227 scaledBlue: 3170); at: 56 put: (ColorValue scaledRed: 5284 scaledGreen: 3699 scaledBlue: 3699); at: 57 put: (ColorValue scaledRed: 5020 scaledGreen: 4491 scaledBlue: 3170); at: 58 put: (ColorValue scaledRed: 4756 scaledGreen: 4227 scaledBlue: 2378); at: 59 put: (ColorValue scaledRed: 4227 scaledGreen: 2906 scaledBlue: 2906); at: 60 put: (ColorValue scaledRed: 4756 scaledGreen: 3170 scaledBlue: 2113); at: 61 put: (ColorValue scaledRed: 4227 scaledGreen: 3699 scaledBlue: 2113); at: 62 put: (ColorValue scaledRed: 3699 scaledGreen: 3170 scaledBlue: 1849); at: 63 put: (ColorValue scaledRed: 4227 scaledGreen: 2642 scaledBlue: 1849); at: 64 put: (ColorValue scaledRed: 3170 scaledGreen: 2642 scaledBlue: 1585); at: 65 put: (ColorValue scaledRed: 3699 scaledGreen: 1849 scaledBlue: 1849); at: 66 put: (ColorValue scaledRed: 3170 scaledGreen: 1849 scaledBlue: 1056); at: 67 put: (ColorValue scaledRed: 3434 scaledGreen: 1321 scaledBlue: 1321); at: 68 put: (ColorValue scaledRed: 3699 scaledGreen: 2113 scaledBlue: 1585); at: 69 put: (ColorValue scaledRed: 2906 scaledGreen: 1056 scaledBlue: 792); at: 70 put: (ColorValue scaledRed: 2378 scaledGreen: 1056 scaledBlue: 1321); at: 71 put: (ColorValue scaledRed: 2642 scaledGreen: 528 scaledBlue: 264); at: 72 put: (ColorValue scaledRed: 2378 scaledGreen: 528 scaledBlue: 528); at: 73 put: (ColorValue scaledRed: 2906 scaledGreen: 264 scaledBlue: 264); at: 74 put: (ColorValue scaledRed: 2378 scaledGreen: 792 scaledBlue: 264); at: 75 put: (ColorValue scaledRed: 2113 scaledGreen: 0 scaledBlue: 0); at: 76 put: (ColorValue scaledRed: 1849 scaledGreen: 264 scaledBlue: 0); at: 77 put: (ColorValue scaledRed: 1585 scaledGreen: 264 scaledBlue: 264); at: 78 put: (ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 7926); at: 79 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 6869); at: 80 put: (ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 6077); at: 81 put: (ColorValue scaledRed: 7662 scaledGreen: 6341 scaledBlue: 6341); at: 82 put: (ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 5548); at: 83 put: (ColorValue scaledRed: 7398 scaledGreen: 5812 scaledBlue: 5812); at: 84 put: (ColorValue scaledRed: 7134 scaledGreen: 6605 scaledBlue: 5284); at: 85 put: (ColorValue scaledRed: 6869 scaledGreen: 6341 scaledBlue: 4491); at: 86 put: (ColorValue scaledRed: 6869 scaledGreen: 5812 scaledBlue: 5020); at: 87 put: (ColorValue scaledRed: 6605 scaledGreen: 5812 scaledBlue: 3963); at: 88 put: (ColorValue scaledRed: 6869 scaledGreen: 4756 scaledBlue: 4756); at: 89 put: ColorValue magenta; at: 90 put: (ColorValue scaledRed: 6341 scaledGreen: 5812 scaledBlue: 4227); at: 91 put: (ColorValue scaledRed: 6077 scaledGreen: 5284 scaledBlue: 3699); at: 92 put: (ColorValue scaledRed: 5812 scaledGreen: 5284 scaledBlue: 3963); at: 93 put: (ColorValue scaledRed: 5548 scaledGreen: 5020 scaledBlue: 3170); at: 94 put: (ColorValue scaledRed: 5284 scaledGreen: 4491 scaledBlue: 2642); at: 95 put: (ColorValue scaledRed: 5020 scaledGreen: 3699 scaledBlue: 3699); at: 96 put: (ColorValue scaledRed: 5020 scaledGreen: 4491 scaledBlue: 2906); at: 97 put: (ColorValue scaledRed: 4491 scaledGreen: 3963 scaledBlue: 2642); at: 98 put: (ColorValue scaledRed: 4756 scaledGreen: 3963 scaledBlue: 2378); at: 99 put: (ColorValue scaledRed: 4491 scaledGreen: 3170 scaledBlue: 2113); at: 100 put: (ColorValue scaledRed: 4227 scaledGreen: 3434 scaledBlue: 2113); at: 101 put: (ColorValue scaledRed: 3434 scaledGreen: 3170 scaledBlue: 1849); at: 102 put: (ColorValue scaledRed: 3699 scaledGreen: 2378 scaledBlue: 2378); at: 103 put: (ColorValue scaledRed: 3434 scaledGreen: 2378 scaledBlue: 1321); at: 104 put: (ColorValue scaledRed: 3699 scaledGreen: 2113 scaledBlue: 1321); at: 105 put: (ColorValue scaledRed: 2906 scaledGreen: 1849 scaledBlue: 1056); at: 106 put: (ColorValue scaledRed: 3170 scaledGreen: 1585 scaledBlue: 1056); at: 107 put: (ColorValue scaledRed: 3699 scaledGreen: 1849 scaledBlue: 1585); at: 108 put: (ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 1585); at: 109 put: (ColorValue scaledRed: 2378 scaledGreen: 1321 scaledBlue: 792); at: 110 put: (ColorValue scaledRed: 2113 scaledGreen: 792 scaledBlue: 264); at: 111 put: (ColorValue scaledRed: 2378 scaledGreen: 528 scaledBlue: 264); at: 112 put: (ColorValue scaledRed: 1585 scaledGreen: 264 scaledBlue: 0); at: 113 put: (ColorValue scaledRed: 1849 scaledGreen: 0 scaledBlue: 0); at: 114 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7926); at: 115 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 7398); at: 116 put: (ColorValue scaledRed: 7662 scaledGreen: 7662 scaledBlue: 6077); at: 117 put: (ColorValue scaledRed: 7398 scaledGreen: 7134 scaledBlue: 5548); at: 118 put: (ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 5284); at: 119 put: (ColorValue scaledRed: 7134 scaledGreen: 6605 scaledBlue: 5020); at: 120 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 6077); at: 121 put: (ColorValue scaledRed: 6869 scaledGreen: 5284 scaledBlue: 5284); at: 122 put: (ColorValue scaledRed: 7398 scaledGreen: 6605 scaledBlue: 4756); at: 123 put: (ColorValue scaledRed: 6077 scaledGreen: 5812 scaledBlue: 4227); at: 124 put: (ColorValue scaledRed: 6341 scaledGreen: 5548 scaledBlue: 4227); at: 125 put: (ColorValue scaledRed: 6341 scaledGreen: 5812 scaledBlue: 3963); at: 126 put: (ColorValue scaledRed: 6077 scaledGreen: 5284 scaledBlue: 3434); at: 127 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 4756); at: 128 put: (ColorValue scaledRed: 5812 scaledGreen: 4491 scaledBlue: 3170); at: 129 put: (ColorValue scaledRed: 5548 scaledGreen: 4756 scaledBlue: 3170); at: 130 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 3434); at: 131 put: (ColorValue scaledRed: 5284 scaledGreen: 3434 scaledBlue: 3434); at: 132 put: (ColorValue scaledRed: 5812 scaledGreen: 5020 scaledBlue: 3963); at: 133 put: (ColorValue scaledRed: 5020 scaledGreen: 4491 scaledBlue: 2642); at: 134 put: (ColorValue scaledRed: 4491 scaledGreen: 3170 scaledBlue: 3170); at: 135 put: (ColorValue scaledRed: 4491 scaledGreen: 3963 scaledBlue: 2378); at: 136 put: (ColorValue scaledRed: 4756 scaledGreen: 3699 scaledBlue: 2378); at: 137 put: (ColorValue scaledRed: 3963 scaledGreen: 3434 scaledBlue: 2113); at: 138 put: (ColorValue scaledRed: 4491 scaledGreen: 2642 scaledBlue: 2378); at: 139 put: (ColorValue scaledRed: 5812 scaledGreen: 5284 scaledBlue: 3699); at: 140 put: (ColorValue scaledRed: 3699 scaledGreen: 2906 scaledBlue: 1585); at: 141 put: (ColorValue scaledRed: 3963 scaledGreen: 2378 scaledBlue: 1849); at: 142 put: (ColorValue scaledRed: 3170 scaledGreen: 1849 scaledBlue: 1849); at: 143 put: (ColorValue scaledRed: 2906 scaledGreen: 2378 scaledBlue: 1585); at: 144 put: (ColorValue scaledRed: 3434 scaledGreen: 1056 scaledBlue: 1056); at: 145 put: (ColorValue scaledRed: 2906 scaledGreen: 1585 scaledBlue: 1056); at: 146 put: (ColorValue scaledRed: 2906 scaledGreen: 1321 scaledBlue: 1321); at: 147 put: (ColorValue scaledRed: 2378 scaledGreen: 1056 scaledBlue: 792); at: 148 put: (ColorValue scaledRed: 1849 scaledGreen: 528 scaledBlue: 528); at: 149 put: (ColorValue scaledRed: 2378 scaledGreen: 264 scaledBlue: 264); at: 150 put: (ColorValue scaledRed: 1585 scaledGreen: 0 scaledBlue: 0); at: 151 put: (ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 7398); at: 152 put: (ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 6869); at: 153 put: (ColorValue scaledRed: 7926 scaledGreen: 6605 scaledBlue: 6605); at: 154 put: (ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 6077); at: 155 put: (ColorValue scaledRed: 7398 scaledGreen: 6869 scaledBlue: 6869); at: 156 put: (ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 5020); at: 157 put: (ColorValue scaledRed: 6869 scaledGreen: 6077 scaledBlue: 4227); at: 158 put: (ColorValue scaledRed: 6341 scaledGreen: 6077 scaledBlue: 4756); at: 159 put: (ColorValue scaledRed: 6869 scaledGreen: 4491 scaledBlue: 4491); at: 160 put: (ColorValue scaledRed: 6341 scaledGreen: 5548 scaledBlue: 3963); at: 161 put: (ColorValue scaledRed: 6341 scaledGreen: 4756 scaledBlue: 4756); at: 162 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 4491); at: 163 put: (ColorValue scaledRed: 5812 scaledGreen: 5020 scaledBlue: 3699); at: 164 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 3170); at: 165 put: (ColorValue scaledRed: 5548 scaledGreen: 3963 scaledBlue: 3699); at: 166 put: (ColorValue scaledRed: 5020 scaledGreen: 4227 scaledBlue: 2642); at: 167 put: (ColorValue scaledRed: 4756 scaledGreen: 4227 scaledBlue: 2906); at: 168 put: (ColorValue scaledRed: 5284 scaledGreen: 3963 scaledBlue: 2642); at: 169 put: (ColorValue scaledRed: 4756 scaledGreen: 3434 scaledBlue: 2378); at: 170 put: (ColorValue scaledRed: 4227 scaledGreen: 2906 scaledBlue: 2113); at: 171 put: (ColorValue scaledRed: 3963 scaledGreen: 2642 scaledBlue: 2642); at: 172 put: (ColorValue scaledRed: 3963 scaledGreen: 3434 scaledBlue: 1849); at: 173 put: (ColorValue scaledRed: 3434 scaledGreen: 2906 scaledBlue: 1585); at: 174 put: (ColorValue scaledRed: 3699 scaledGreen: 2906 scaledBlue: 1321); at: 175 put: (ColorValue scaledRed: 3434 scaledGreen: 1849 scaledBlue: 1321); at: 176 put: (ColorValue scaledRed: 2642 scaledGreen: 2378 scaledBlue: 1585); at: 177 put: (ColorValue scaledRed: 3170 scaledGreen: 1321 scaledBlue: 792); at: 178 put: (ColorValue scaledRed: 2378 scaledGreen: 1056 scaledBlue: 528); at: 179 put: (ColorValue scaledRed: 2642 scaledGreen: 792 scaledBlue: 528); at: 180 put: (ColorValue scaledRed: 2378 scaledGreen: 792 scaledBlue: 792); at: 181 put: (ColorValue scaledRed: 1849 scaledGreen: 528 scaledBlue: 264); at: 182 put: (ColorValue scaledRed: 2642 scaledGreen: 0 scaledBlue: 0); at: 183 put: (ColorValue scaledRed: 2113 scaledGreen: 264 scaledBlue: 264); at: 184 put: (ColorValue scaledRed: 1321 scaledGreen: 0 scaledBlue: 0); yourself)) usingBits: (ByteArray fromPackedStringlt;?O5!XVE!XVE!XVE!XVE!XVE!XVE!XVE!X@@AXVE!XVE!XVE!XVE!XVE!XVE!XO3&lt;?_W5\DG4?O3=XVE!XVE!XVE!XVE!XVE!XVE!XV@@@VE!XVE!XVE!XVE!XVE!XVC&lt;?O75=WJU"Y&amp;M]_UXPO3&lt;?VE!XVE!XVE!XVE!XVE!XVE @@E!XVE!XVE!XVE!XVE ?O3==DG5]X6Y,[6=/[H,XWAB\U#&lt;?O5!XVE!XVE!XVE!XVE!X@@AXVE!XVE!XVE!XVC&lt;?DEXP H^K$KQ/%YVU-6=/[YB-)W5TK ,?O5!XVE!XVE!XVE!XV@@@VE!XVE!XVE!XVC&lt;G]!B%"6!-[9VU%WA0%YVU%YVU[;E(X1QT%0(?VE!XVE!XVE!XVE @@E!XVE!XVE!XVE ?@".",RRU%YU0\IU0%WA0R$)0\IVU[;Q,LD&gt;WO5!XVE!XVE!XVE!X@@AXVE!XVE!XVE!XO0QS#D.U%YU0R$)0\IVU\D)J\GA0%YV7R8\G%#=XVE!XVE!XVE!XV@@@VE!XVE ?O3&lt;?O48+($YG$YVU%WA0%WBU%YVU\GA0\IT$"RV2L@FWO3&lt;?O3&lt;?VE!XVE @@E!XVE ?]D9OL0]OBJ:5PH%@%YU0\IU0%YVU%YU0\GBQ(E]BIVHH%%L*%""](3=XVE!X@@AXVE!XO2()@3LGS0!A-TBIYYVU\GBU\IVU%YU0\GAK$U]WP"U"A9X3AIZV''U0?VE!XV@@@VE!XVC&lt;GJWYYS"06RH&gt;B)HJB$[YJR$)J\D)JR$)G)EBX&amp;EJTRU(AJUPASR$MO5!XVE @@E!XVE ?&amp;T:!]GM6,KVB''*B L!I@\IU0R+Y0\IV3^@T@\WE1*+X[T9X3]IX)CS=XVE!X@@AXVE!XO4=3VT8+_9QBK2=RT"=8L+NU\GAF\IVU!P@''I2\''I7^SRU*WJ@^VJE$?VE!XV@@@VE!XVC&lt;DVWQOB4EJD)"X&amp;I"XT(I0R$)0,D)JR+LFI2]MI2]1YT,[A9X3@R%5O5!XVE @@E!XVE ?]G)NJ1QFQI!2@@@@\%BQIKIIPZ!)IKQKMR\''I2\''I25KRY&gt;W%3MN]#=XVE!X@@AXVE!XO3@3\7Y''R!I2\)(-_#U^%RRR,QZ_*T24%TT5_ 17&amp;''E1#[ZGJ"$3&amp;UP?VE!XV@@@VE!XVC&gt;#L7T+P2ZEW!^*$YNU%WBU%YT"E9J7%WA0%YVR#S(7M4@%E")N R(KO5!XVE @@E!XVE ?V8 ,](MHR''A0\GA0\GA0%YVU%X67%WA0\GA0\GA0R$)JRSE3BE&lt;CB3=XVE!X@@AXVE!XO0^F''7$G,BY0R7A0\GA0\GBU%YVQ%WA0R''A0\GA0\GA0R*$H@%2]S''T?VE!XV@@@VE!XVC&lt;G^(Y9]#X&amp;R$)0\GA0\D)J\GBU,7A0\GA0\GA0\GA0\F9;TUFD%2$MO5!XVE @@E!XVE ?^ &lt;=LEQS,+UJ\GA0\GA0\GA0\D.6I"YJ\GA0\GA0R$)C] %=C"$)UC=XVE!X@@AXVE!XO3E:!*YTT3,&amp;R''A0\IVU\GBU\IVUR4)J\IVU\IUJR$(%V7%QXUL)S%P?VE!XV@@@VE!XVC&gt;!C%&lt;]L@5URD)J\GBU-9VU-9V7-;^7-9VU%WA0-+X%,B.[U!%TS7PPO5!XVE @@E!XVE  *:M OS"\A6(&amp;R''BU-;^U%[^7-;^7%YVU%YV7\GAJI#XK&amp;6DYL05\+S=XVE!X@@AXVE!XHJ,UXC5_''@\^I$)0-;^7%YV7%[^7-9VU%YVU-9U0R"X6B9-!NX)&lt; J4?VE!XV@@@VE!XVE ?O3&lt;?+G00UT &amp;R+^7%YU0\GB7-9U0R''AK%[^U\D)DJ7$PO3&lt;?O3&lt;?VE!XVE @@E!XVE!XVE!XVH9__@\^Q''BU-;^U%YV7-;^7%YVU%YV7%T,#M%Q9O3=XVE!XVE!XVE!X@@AXVE!XVE!XVE!XOSLPDQ*.QD.U%YU0\IV7%T-KR;Y0[&amp;&amp;.EI1VU#=XVE!XVE!XVE!XV@@@VE!XVE!XVE!XVJ&gt;&amp;XU4SDW&lt;&gt;Z$%0\GBU-9VU\BT!Y1,4U!NDGA0?VE!XVE!XVE!XVE @@E!XVE!XVE!XVE ?O3&lt;=!(Z#U%XZ*V%K%YU0[&amp;(&gt;)5Y=(6FF+C&lt;?VE!XVE!XVE!XVE!X@@AXVE!XVE!XVE!XVE ?O3&lt;?OC2DD:DT*J%AN3,SDE1!!(",O3=XVE!XVE!XVE!XVE!XV@@@VE!XVE!XVE!XVE!XVE ?O6,?OX &lt; EZ_EEXSWVL&lt;OZ0?O5!XVE!XVE!XVE!XVE!XVE @@E!XVE!XVE!XVE!XVE!XVE ?O3&lt;?G8 =!HBFX8",G3&lt;?VE!XVE!XVE!XVE!XVE!XVE!X@@AXVE!XVE!XVE!XVE!XVE!XVE!XO3&lt;?G36HOVP?O3=XVE!XVE!XVE!XVE!XVE!XVE!XV@@@VE!XVE!XVE!XVE!XVE!XVE!XVE!XO3&lt;?O3&ltb'))</body></methods><methods><class-id>RobotView class</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="colorArray">colorArray		| res |				res:=Array new:11.		res at:1  put: ColorValue navy.		res at:2  put: ColorValue black.		res at:3  put: ColorValue brown.		res at:4  put: ColorValue darkCyan.		res at:5  put: ColorValue darkGreen.		res at:6  put: ColorValue darkRed.		res at:7  put: ColorValue olive.		res at:8  put: ColorValue orange.		res at:9  put: ColorValue red.		res at:10 put: ColorValue salmon.		res at:11 put: ColorValue yellow.		^res.</body></methods><methods><class-id>RobotView class</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="index">index		Index isNil ifTrue:[Index:=0].		Index:=Index+1.		Index:=Index rem: self colorArray size.		^Index+1.</body></methods><methods><class-id>RobotView</class-id> <category>displaying</category><body package="Robot - Segunda Practica" selector="displayOn:">displayOn: aGraphicsContext		self image displayOn: aGraphicsContext at:(self preferredBounds origin).</body></methods><methods><class-id>RobotView</class-id> <category>update</category><body package="Robot - Segunda Practica" selector="updateDirection">updateDirection		self oldDirection: self model direction.		self updateImage: self model direction.</body></methods><methods><class-id>RobotView</class-id> <category>update</category><body package="Robot - Segunda Practica" selector="updateView">updateView		self model notNil ifTrue:[								(self oldPosition ~= self model position) 										ifTrue:[^self updatePosition].								(self oldDirection ~= self model direction)										ifTrue:[^self updateDirection]								].</body></methods><methods><class-id>RobotView</class-id> <category>update</category><body package="Robot - Segunda Practica" selector="updatePosition">updatePosition		self oldPosition: self model position.		self updateBounds.		self invalidateRectangle: self bounds repairNow: true.</body></methods><methods><class-id>RobotView</class-id> <category>update</category><body package="Robot - Segunda Practica" selector="update:">update: anAspect		(anAspect == #position)	ifTrue:[self updatePosition].		(anAspect == #direction)	ifTrue:[self updateDirection].		self invalidateRectangle: self bounds repairNow: true.</body></methods><methods><class-id>RobotView</class-id> <category>controller accessing</category><body package="Robot - Segunda Practica" selector="defaultController">defaultController		| rc |		rc:=RobotController new.		^rc.</body></methods><methods><class-id>RobotView</class-id> <category>update - private</category><body package="Robot - Segunda Practica" selector="updateBounds">updateBounds		| oldBounds |		oldBounds:=self preferredBounds.		self preferredBounds: (self image preferredBounds centeredIn: self model position).		self changedPreferredBounds: oldBounds.</body></methods><methods><class-id>RobotView</class-id> <category>update - private</category><body package="Robot - Segunda Practica" selector="updateImage:">updateImage: anAngle		self image: (OpaqueImage figure: (self class basicImage rotatedByDegrees: anAngle) 						shape: (self class mask rotateByDegrees: anAngle to: self class mask copyEmpty interpolate: false)).		self invalidate.</body></methods><methods><class-id>RobotView</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="color:">color: aColor 		color:=aColor.</body></methods><methods><class-id>RobotView</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="model:">model: aModel		super model: aModel.		self color: (self class colorArray at: self class index).		self updateImage: aModel direction.		self oldDirection: aModel direction.		self oldPosition: aModel position.		self updateBounds.		self launchThread.</body></methods><methods><class-id>RobotView</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="color">color		^color.</body></methods><methods><class-id>RobotView</class-id> <category>release</category><body package="Robot - Segunda Practica" selector="release">release	"Remove the receiver as a dependent of its model."		self updateThread terminate.		^super release.</body></methods><methods><class-id>RobotView</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="launchThread">launchThread		self updateThread: ([[true] whileTrue:[(Delay forMilliseconds: 20) wait. self updateView]] fork).</body></methods><methods><class-id>RobotView</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="oldPosition:">oldPosition: anOldPosition 		oldPosition:=anOldPosition.</body></methods><methods><class-id>RobotView</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="image:">image: anImage 		image:=anImage.</body></methods><methods><class-id>RobotView</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="preferredBounds:">preferredBounds: aRectangle		preferredBounds:=aRectangle.</body></methods><methods><class-id>RobotView</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="image">image		^image.</body></methods><methods><class-id>RobotView</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="oldDirection:">oldDirection: anOldDirection 		oldDirection:=anOldDirection.</body></methods><methods><class-id>RobotView</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="updateThread:">updateThread: anUpdateThread 		updateThread:=anUpdateThread.</body></methods><methods><class-id>RobotView</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="oldPosition">oldPosition		^oldPosition.</body></methods><methods><class-id>RobotView</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="updateThread">updateThread		^updateThread.</body></methods><methods><class-id>RobotView</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="oldDirection">oldDirection		^oldDirection.</body></methods><methods><class-id>RobotView</class-id> <category>bounds accessing</category><body package="Robot - Segunda Practica" selector="preferredBounds">preferredBounds		^preferredBounds.</body></methods><methods><class-id>BrushDown</class-id> <category>robot functions</category><body package="Robot - Segunda Practica" selector="position:">position: aPosition	self robot startNewPath.	super position: aPosition.</body></methods><methods><class-id>BrushDown</class-id> <category>state changes</category><body package="Robot - Segunda Practica" selector="liftBrush">liftBrush		self robot state: (BrushUp robot: self robot).</body></methods><methods><class-id>BrushDown</class-id> <category>state changes</category><body package="Robot - Segunda Practica" selector="lowerBrush">lowerBrush		"Do nothing - the brush is already down"</body></methods><methods><class-id>BrushDown</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="isBrushDown">isBrushDown		^true.</body></methods><methods><class-id>BrushDown</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="isBrushUp">isBrushUp		^false.</body></methods><methods><class-id>Battery class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="capacity:">capacity: aCapacity		^super new initialize: aCapacity.</body></methods><methods><class-id>Battery class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="new">new		^self error: 'Batteries must be created sending #capacity: to the class'.</body></methods><methods><class-id>Battery</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="capacity:">capacity: aCapacity 		capacity:=aCapacity.</body></methods><methods><class-id>Battery</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="charge">charge		^charge.</body></methods><methods><class-id>Battery</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="capacity">capacity		^capacity.</body></methods><methods><class-id>Battery</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="charge:">charge: aCharge 		charge:=aCharge.</body></methods><methods><class-id>Battery</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="chargeYourself">chargeYourself		self charge: self capacity.</body></methods><methods><class-id>Battery</class-id> <category>printing</category><body package="Robot - Segunda Practica" selector="printOn:">printOn: aStream		aStream nextPutAll: 'Battery at '.		(self charge * 100 / self capacity) rounded printOn: aStream.		aStream nextPut: $%.</body></methods><methods><class-id>Battery</class-id> <category>initialize</category><body package="Robot - Segunda Practica" selector="initialize:">initialize: aCapacity		self capacity: aCapacity.		self charge: aCapacity.</body></methods><methods><class-id>Battery</class-id> <category>initialize</category><body package="Robot - Segunda Practica" selector="percentageCharge">percentageCharge	^(self charge / self capacity * 100)  rounded.</body></methods><methods><class-id>RobotApplication class</class-id> <category>interface specs</category><body package="Robot - Segunda Practica" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Robot World' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 691 378 1435 848 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -200 1 -300 1 -1 1 ) 					#name: #transcript 					#model: #text 					#tabRequiresControl: true ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 5 0 -1 0.6 -230 1 ) 					#flags: 11 					#component: #worldView ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -295 1 -200 1 0 1 0 1 ) 					#name: #InspectorSubcanvas 					#flags: 0 					#clientKey: #inspector ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -227 1 91 0 -203 1 ) 					#name: #ActionButton1 					#model: #addRobot 					#label: 'Agregar Robot' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 101 0 -227 1 195 0 -202 1 ) 					#name: #ActionButton2 					#model: #cleanWorld 					#label: 'Limpiar Mundo' 					#defaultable: true ) 				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.6 5 0 0 1 -230 1 ) 					#name: #BrowserTabs 					#model: #classBrowserTabs 					#labels: #() ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.6 -227 1 95 0.6 -201 1 ) 					#name: #ActionButton3 					#model: #addClass 					#label: 'Agregar Clase' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>RobotApplication class</class-id> <category>private-accessing</category><body package="Robot - Segunda Practica" selector="addNewClass:">addNewClass: aClass		self definedClasses add: aClass.</body></methods><methods><class-id>RobotApplication class</class-id> <category>private-accessing</category><body package="Robot - Segunda Practica" selector="definedClasses">definedClasses		"definedClasses:=nil"		definedClasses ifNil:[							definedClasses:=OrderedCollection new.							definedClasses add: Robot.							].		 ^definedClasses.</body></methods><methods><class-id>RobotApplication class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="robotIcon">robotIcon	"Tools.UIMaskEditor new openOnClass: self andSelector: #robotIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 31@32 depth: 9 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 307) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 7134 scaledBlue: 6605); at: 3 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 4756); at: 4 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 4491); at: 5 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 3699 scaledBlue: 3963); at: 6 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 3699 scaledBlue: 3699); at: 7 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 2906 scaledBlue: 3699); at: 8 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 3434 scaledBlue: 3963); at: 9 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 792 scaledBlue: 1321); at: 10 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 1056 scaledBlue: 1321); at: 11 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 0 scaledBlue: 0); at: 12 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 528 scaledBlue: 0); at: 13 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 1056 scaledBlue: 264); at: 14 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 792 scaledBlue: 528); at: 15 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 2378 scaledBlue: 3170); at: 16 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 2906 scaledBlue: 3170); at: 17 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 3963 scaledBlue: 4756); at: 18 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 792 scaledBlue: 1056); at: 19 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 528 scaledBlue: 792); at: 20 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 1056 scaledBlue: 1321); at: 21 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 792 scaledBlue: 792); at: 22 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 1056 scaledBlue: 1056); at: 23 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 1321 scaledBlue: 1056); at: 24 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 7134 scaledBlue: 4227); at: 25 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 7134 scaledBlue: 3963); at: 26 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 3434 scaledBlue: 2906); at: 27 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 2113 scaledBlue: 2642); at: 28 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 2378 scaledBlue: 2642); at: 29 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 528 scaledBlue: 264); at: 30 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 0 scaledBlue: 0); at: 31 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 7926); at: 32 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 8191); at: 33 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 8191); at: 34 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 0 scaledBlue: 1585); at: 35 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 264 scaledBlue: 1056); at: 36 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 0 scaledBlue: 0); at: 37 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 0 scaledBlue: 264); at: 38 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 1585); at: 39 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 792 scaledBlue: 1056); at: 40 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7926 scaledBlue: 7662); at: 41 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 7926); at: 42 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5020 scaledBlue: 5020); at: 43 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 3170 scaledBlue: 4227); at: 44 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5020 scaledBlue: 5548); at: 45 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5548 scaledBlue: 5020); at: 46 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 2642 scaledBlue: 3434); at: 47 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 0 scaledBlue: 1321); at: 48 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 0 scaledBlue: 1056); at: 49 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 0 scaledBlue: 792); at: 50 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 0 scaledBlue: 528); at: 51 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 2113 scaledBlue: 2113); at: 52 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 0 scaledBlue: 0); at: 53 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 528 scaledBlue: 0); at: 54 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 264); at: 55 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 0 scaledBlue: 264); at: 56 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 792); at: 57 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 264 scaledBlue: 528); at: 58 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 264); at: 59 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 528); at: 60 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 5812); at: 61 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 7134 scaledBlue: 7398); at: 62 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 2906 scaledBlue: 3699); at: 63 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 3699 scaledBlue: 3963); at: 64 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 0 scaledBlue: 1056); at: 65 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 0 scaledBlue: 528); at: 66 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 1056 scaledBlue: 0); at: 67 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 4756); at: 68 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 4491 scaledBlue: 5284); at: 69 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 2378 scaledBlue: 3699); at: 70 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 1056 scaledBlue: 1056); at: 71 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 1056 scaledBlue: 1321); at: 72 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 1321 scaledBlue: 1321); at: 73 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 1585 scaledBlue: 1321); at: 74 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7398 scaledBlue: 4227); at: 75 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 3170 scaledBlue: 3170); at: 76 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 3699 scaledBlue: 3170); at: 77 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 2642 scaledBlue: 3434); at: 78 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 2378 scaledBlue: 2906); at: 79 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 3170 scaledBlue: 2642); at: 80 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 264 scaledBlue: 0); at: 81 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 528 scaledBlue: 0); at: 82 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 6605 scaledBlue: 4227); at: 83 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 2642 scaledBlue: 3170); at: 84 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 1321 scaledBlue: 2378); at: 85 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 3434 scaledBlue: 4227); at: 86 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 1056 scaledBlue: 792); at: 87 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 528 scaledBlue: 528); at: 88 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 0 scaledBlue: 0); at: 89 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 0 scaledBlue: 264); at: 90 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 528 scaledBlue: 792); at: 91 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 0 scaledBlue: 1585); at: 92 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 0 scaledBlue: 1321); at: 93 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 8191 scaledBlue: 7926); at: 94 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 8191 scaledBlue: 8191); at: 95 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 7926); at: 96 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 7662); at: 97 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7662); at: 98 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 8191); at: 99 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7398 scaledBlue: 8191); at: 100 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 1056 scaledBlue: 2113); at: 101 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 0 scaledBlue: 1056); at: 102 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 0 scaledBlue: 1321); at: 103 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 264 scaledBlue: 1585); at: 104 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 792 scaledBlue: 1585); at: 105 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 1056); at: 106 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 0 scaledBlue: 0); at: 107 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 264 scaledBlue: 0); at: 108 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 264 scaledBlue: 528); at: 109 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 792 scaledBlue: 528); at: 110 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 0 scaledBlue: 264); at: 111 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 0 scaledBlue: 528); at: 112 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 264 scaledBlue: 792); at: 113 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 1321); at: 114 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 0 scaledBlue: 792); at: 115 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 792 scaledBlue: 0); at: 116 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7662 scaledBlue: 7398); at: 117 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 0 scaledBlue: 1056); at: 118 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 6077); at: 119 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 528 scaledBlue: 0); at: 120 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 4227 scaledBlue: 3963); at: 121 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5284 scaledBlue: 4756); at: 122 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4756 scaledBlue: 6077); at: 123 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 6077 scaledBlue: 2642); at: 124 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 792 scaledBlue: 1321); at: 125 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 1056 scaledBlue: 1321); at: 126 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 0 scaledBlue: 792); at: 127 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 528 scaledBlue: 1321); at: 128 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 1056); at: 129 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 1056 scaledBlue: 0); at: 130 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 1321 scaledBlue: 0); at: 131 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 264 scaledBlue: 0); at: 132 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 0); at: 133 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 264); at: 134 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 6869 scaledBlue: 7134); at: 135 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 8191 scaledBlue: 5284); at: 136 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 1321 scaledBlue: 1585); at: 137 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 0 scaledBlue: 0); at: 138 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 528 scaledBlue: 0); at: 139 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 1321 scaledBlue: 1056); at: 140 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 3170 scaledBlue: 3699); at: 141 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 2642 scaledBlue: 3699); at: 142 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 2378 scaledBlue: 3170); at: 143 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 2906 scaledBlue: 3434); at: 144 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 792 scaledBlue: 1056); at: 145 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 792 scaledBlue: 528); at: 146 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 528 scaledBlue: 0); at: 147 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 3434 scaledBlue: 4227); at: 148 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 5812 scaledBlue: 6605); at: 149 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 2642 scaledBlue: 3170); at: 150 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 1849 scaledBlue: 2378); at: 151 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 264 scaledBlue: 0); at: 152 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 528 scaledBlue: 1056); at: 153 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 3434 scaledBlue: 3963); at: 154 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 2378 scaledBlue: 1849); at: 155 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 264 scaledBlue: 264); at: 156 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 0 scaledBlue: 0); at: 157 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 528 scaledBlue: 1321); at: 158 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 264 scaledBlue: 792); at: 159 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 7662); at: 160 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7398 scaledBlue: 7662); at: 161 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 8191 scaledBlue: 7398); at: 162 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7662 scaledBlue: 7926); at: 163 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 5548 scaledBlue: 5020); at: 164 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 0 scaledBlue: 1056); at: 165 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 2642 scaledBlue: 3434); at: 166 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 0 scaledBlue: 264); at: 167 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 264 scaledBlue: 264); at: 168 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 0 scaledBlue: 0); at: 169 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 264 scaledBlue: 0); at: 170 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 792); at: 171 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 264 scaledBlue: 792); at: 172 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 1056); at: 173 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 792 scaledBlue: 264); at: 174 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 0 scaledBlue: 528); at: 175 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 528 scaledBlue: 264); at: 176 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 528); at: 177 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 7398 scaledBlue: 7398); at: 178 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 528 scaledBlue: 0); at: 179 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 5812); at: 180 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 4491 scaledBlue: 5548); at: 181 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 3699 scaledBlue: 4227); at: 182 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 5020 scaledBlue: 5548); at: 183 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 5020 scaledBlue: 5812); at: 184 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 5020 scaledBlue: 4756); at: 185 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 5548); at: 186 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 1321 scaledBlue: 1056); at: 187 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 1585 scaledBlue: 1321); at: 188 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 0 scaledBlue: 1321); at: 189 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 264 scaledBlue: 0); at: 190 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 792 scaledBlue: 0); at: 191 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 2378 scaledBlue: 3170); at: 192 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 528 scaledBlue: 792); at: 193 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 1321 scaledBlue: 1321); at: 194 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 2906 scaledBlue: 3434); at: 195 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 3170 scaledBlue: 3170); at: 196 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3963 scaledBlue: 4756); at: 197 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 1849 scaledBlue: 2642); at: 198 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 2378 scaledBlue: 3434); at: 199 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 792 scaledBlue: 528); at: 200 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 528 scaledBlue: 0); at: 201 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 1056 scaledBlue: 1056); at: 202 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5812 scaledBlue: 6605); at: 203 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3434 scaledBlue: 3963); at: 204 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 528 scaledBlue: 528); at: 205 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 0 scaledBlue: 0); at: 206 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7926); at: 207 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 8191 scaledBlue: 8191); at: 208 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 7662); at: 209 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 8191); at: 210 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 7926); at: 211 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5284 scaledBlue: 6341); at: 212 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 8191); at: 213 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 6605 scaledBlue: 3699); at: 214 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 6605 scaledBlue: 3434); at: 215 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 3170 scaledBlue: 3963); at: 216 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 264 scaledBlue: 1585); at: 217 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 3699); at: 218 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 792 scaledBlue: 792); at: 219 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 0 scaledBlue: 264); at: 220 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 0 scaledBlue: 0); at: 221 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 264 scaledBlue: 1585); at: 222 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 792 scaledBlue: 528); at: 223 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 0 scaledBlue: 528); at: 224 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 0 scaledBlue: 1056); at: 225 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 264 scaledBlue: 528); at: 226 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 1056 scaledBlue: 0); at: 227 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7926 scaledBlue: 7398); at: 228 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 7134); at: 229 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7662 scaledBlue: 7398); at: 230 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 7398); at: 231 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7398 scaledBlue: 7926); at: 232 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 4756 scaledBlue: 4491); at: 233 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 3963 scaledBlue: 4756); at: 234 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 5020 scaledBlue: 5548); at: 235 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 7926); at: 236 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 2642 scaledBlue: 3434); at: 237 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 528 scaledBlue: 0); at: 238 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 2642 scaledBlue: 3699); at: 239 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 0 scaledBlue: 528); at: 240 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 0 scaledBlue: 264); at: 241 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 6077 scaledBlue: 2906); at: 242 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 0 scaledBlue: 0); at: 243 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 0); at: 244 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 264 scaledBlue: 264); at: 245 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 264); at: 246 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 528); at: 247 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 0); at: 248 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 6341 scaledBlue: 2642); at: 249 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 7662); at: 250 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 5284); at: 251 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 5020); at: 252 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 1056 scaledBlue: 0); at: 253 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 1321 scaledBlue: 0); at: 254 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 1321 scaledBlue: 1056); at: 255 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 792 scaledBlue: 1585); at: 256 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 0 scaledBlue: 264); at: 257 put: (Graphics.ColorValue scaledRed: 6605 scaledGreen: 0 scaledBlue: 0); at: 258 put: (Graphics.ColorValue scaledRed: 5812 scaledGreen: 3170 scaledBlue: 3699); at: 259 put: (Graphics.ColorValue scaledRed: 3699 scaledGreen: 528 scaledBlue: 1056); at: 260 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 1321 scaledBlue: 1056); at: 261 put: (Graphics.ColorValue scaledRed: 2906 scaledGreen: 1056 scaledBlue: 1321); at: 262 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 264 scaledBlue: 0); at: 263 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7134 scaledBlue: 4227); at: 264 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 2642 scaledBlue: 3170); at: 265 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3699 scaledBlue: 4491); at: 266 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 528 scaledBlue: 0); at: 267 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 528 scaledBlue: 792); at: 268 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 792 scaledBlue: 792); at: 269 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 1849 scaledBlue: 2906); at: 270 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 3434 scaledBlue: 3963); at: 271 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 792 scaledBlue: 1585); at: 272 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 0 scaledBlue: 0); at: 273 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 0 scaledBlue: 264); at: 274 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 7926); at: 275 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 7662); at: 276 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 8191 scaledBlue: 8191); at: 277 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 7926); at: 278 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 7662); at: 279 put: (Graphics.ColorValue scaledRed: 7398 scaledGreen: 7926 scaledBlue: 8191); at: 280 put: (Graphics.ColorValue scaledRed: 5020 scaledGreen: 5284 scaledBlue: 5812); at: 281 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 7398); at: 282 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7398); at: 283 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 2113 scaledBlue: 2113); at: 284 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 1056 scaledBlue: 1585); at: 285 put: (Graphics.ColorValue scaledRed: 5284 scaledGreen: 1321 scaledBlue: 2113); at: 286 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 0 scaledBlue: 792); at: 287 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 0 scaledBlue: 264); at: 288 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 264 scaledBlue: 1056); at: 289 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 1321); at: 290 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 528 scaledBlue: 264); at: 291 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 792); at: 292 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 528 scaledBlue: 528); at: 293 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 1056); at: 294 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 792 scaledBlue: 264); at: 295 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 264 scaledBlue: 264); at: 296 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 792 scaledBlue: 528); at: 297 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 0 scaledBlue: 0); at: 298 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 528 scaledBlue: 0); at: 299 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 264 scaledBlue: 0); at: 300 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 6605); at: 301 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 5812); at: 302 put: (Graphics.ColorValue scaledRed: 4756 scaledGreen: 5020 scaledBlue: 5020); at: 303 put: (Graphics.ColorValue scaledRed: 7926 scaledGreen: 8191 scaledBlue: 6077); at: 304 put: (Graphics.ColorValue scaledRed: 3963 scaledGreen: 1585 scaledBlue: 1849); at: 305 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 2642 scaledBlue: 2378); at: 306 put: (Graphics.ColorValue scaledRed: 6341 scaledGreen: 1056 scaledBlue: 0); at: 307 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 2906 scaledBlue: 2113); yourself)) usingBits: (ByteArray fromPackedString: '@L&lt;@8 A\@L8@3 A]@QL@H@@ @I8AI C1@CL@)P@3@OD@&lt;PB&amp;@@@@@@@@@@@AI0CN@L8@H@@ @B@@G @^@A8@@@C#@CP@  @''@HH@@@@ @B@@H@BC@CL@L0D(@J\@)0CZ@R @)0C1@HL@&lt;PC1@CT@@@@ @B@@H@@ @B@@H@@^@@@AJP@@@@@@H@@@@@@@MP@_@I&lt;@U D(@H,@0PBT@N @#@@N@A(@C0B4@P\A@P@3@JT@H@@ @B@@H@@ @B@@H@@@@HL@ 0@ @QD@H@BD@@@@H@CM@J\AJ@@E@R&lt;@ZPC[@O8@^0D[@L0@&amp;0D\@@ @60@3@B@@H@@ @B@@H@CN@B@@@@@@@OHAD @ @B@@@@C3@B@@G B(@OD@FP@3@N\@L0C[@G0@3@AW@I,@&amp;0DB@R @&lt;P@ @B@@H@@ @L8@3 @ @@@@@@@@@CT@H@BD@M$@@@A3@B@@ 0@3@D,@L0@3@F(AJ@B9@E\@H0A7@I,@V@@3@CL@H@@ @B@@H@CN@L8@H@@@@OD@M C4@Q4@=PD]@OP@G0A^@J\@ZPAJ@R @60C[@F$@$@C[@R @)0A)@L@@&lt;P@@@B@@H@@ @B@@H@CN@B@@@@C4@HP@*PC5@C\@=P@"@M@@G0B''@R @0 AE@M,@ZP@I@K(@1 A)@CLA@0DK@HL@ 0@ @B@@H@@ @B@@H@@ @@@@N@@8@KT@5 CC@C\@M0@_@M@AG B''@@P@DP@#@H\@#0@R@@$@DPAG@DXAA@C1@HL@H@@ @A&lt;@'' @ @B@@9@@@@F @* B6@DL@;PB+@Q&lt;@H@@ @OD@L0@3@I(@ZPB''@J\@ZPD(@CL@L0D(@J\@VP@@@B@@H@@ @A8@4PB @A8@@@D_@C\@4 B+@R@@7@@7@ML@H@@_@L4@L0BC@HL@*@BC@CL@L0B&amp;@HL@&lt;P@3@A&lt;@H@@ @B@@9P@^@E&lt;@G CO@@@@=PB\@C\@*0B+@J,@M0@ @ML@H@@ @@@AHP@A@JH@^@@)@B$@-0D0@F,@ 0DQ@B@@H@@ @L4@H@CQ@MD@G @@@OT@M0A(@C\@D@@-@OTAH @@@M4@@@@@@@@@  BB@@@@@@@@@J0@= @5@@@@[@@@@OL@@@@@@@@@@@@9@B@@@@BD@HP@=PC)@L(@=PB)@OP@''P@3@CL@)0B''@J\@L0B''@R @&lt;PBC@HL@&lt;PD^@@@@!@@@@HP@+PBD@HP@!@BD@@@@H@D#@HP@!@@:@CX@7 A)@P0@A @=@IT@/ CD@B(@T0BM@A,@O @G@H8@S@AR@IH@+PC4@C(@$0DM@C AC @@@B@@@@@@@OP@M D^@BP@1PA#@C&lt;@K A=@BD@(0@/@M\@_ DO@I,@H0@#@M,@[P@6@Q4@=PD$@C\@U@A(@C\@@@@ @B@@M BC@F8@)0DP@DP@.0A?@FT@Y@@0@N8@L@A&amp;@E\@60A)@F$@)0C1@F&lt;@=P@7@J,@^P@%@J,@*0@7@@@@H@@ @QP@Z0C1@J\@60AM@F\@?0D@@N&lt;@;0@1@I\@P@B?@Q(@L @S@CX@!@B$@P @Z@@7@I @:0@7@C\AG0@@@B@@J@@ @B@@ 0@3@A0@&amp;PDE@H@@"@B&lt;@N0@"@@J@@,@U0A)@F$@[ AZ@RP@\@@7@HPAI0D%@RT@  @@@B@@@@@ @B@@(P@ @HL@&lt;PB''@D8@C@C;@@,@"PD1@HD@PPC&lt;@O4@H0A)@F4@V0A1@M&lt;@+PBC@@@@@@@@@OH@30DU@@@@H@A3@B@ADPDQ@HL@&lt;PA)@H(@GP@M@ID@GPAO@L\@T@BV@P$@?P@T@APAB @U@L,@2@AH@AXAJ C1@F@@X@@@@A8@4P@ @B@@H@@5@HL@L0B''@F$@H0C[@BL@H0D(@R @60D(@R AJ@D(@F$@)0B''@CL@L0@3@OD@&lt;PA @L&lt;@@@@^@A8@\0B0@B@@H@@@@HL@&lt;PD(@J\@)0@3@CL@8@BC@OD@ 0BC@OH@ 0A2@@@@@@@5@HP@M0C5@B@@H@@ @@@@30@^@B@@H@@ @FD@H@@ @B@AEP@_@A&lt;@M BD@NX@J0D-@B0AL @@@HHAJ0CO@QH@H@A!@B@@H@A]@B@@H@@@@L&lt;@G DQ@B@@H@@ @B@@H@@ @B@@H@@ @@@@!@C5@OT@M0B+@C\@]@C5@A&lt;@G0CP@A&lt;@: @ @B@@H@@ @B@@@@@^@A8@3P@ @B@@(P@ @B@@H@@ @B@@H@@@@BXAE DW@L$@,0CX@J,@*PA"@M@@G0@_@E8@G0@ @B@@H@@ @@@@G @ @B@@H@@ @B@@H@BE@RD@@@@@@@@@+ @@@@@@!@BD@J&lt;@@@@@@@@@,PB1@HL@@@@ @B@@H@@ @B@@H@@@@B@@H@@ @B@AE@@ @I8@UP@@@CP@M@BB@HH@@@C2@CP@  @@@@@@  C!@HH@@@@@@HL@@@B^@B@@H@@ @Q @@@@ @B@@H@@ @A&lt;@H@DY@@@@M@B2@HX@&gt;P@W@@H@.@C2@HL@*@A5@DH@@0C:@O(AK@C1@CL@4@@_@B@@H@@ @@@@H@CS@B@@H@@ @B@@30A2@HHAK @W@MP@F@AI@O@@] C1@R(@N0DF@G(@=0CU@ED@ 0C1@A&lt;@4@CP@B@@H@@@@B@@H@@ @B@@H@C8@I8@@@@@@OH@@@BC@HL@*@C1@OD@Z0@@@@@@&lt; @4@HH@/P@@@@@@@@@&lt;@ML@H@@ @B@@@@A\@B@@H@@ @B@@H@@ @@@@@@@@@@@@ 0BC@ODAG C1@OT@=PD#@@@@@@C6@HH@  BB@@@@H@CN@B@@3 @ @@@b'))</body></methods><methods><class-id>RobotApplication</class-id> <category>update</category><body package="Robot - Segunda Practica" selector="tabsChanged">tabsChanged		"Every time a tab is changed, a new sub canvas gets installed."		| className |		className:=self classBrowserTabs selection.		className ifNotNil:[		(self builder componentAt: #BrowserTabs) widget client: (Tools.Trippy.InstanceClassBehaviorInspector on: (Smalltalk at: className) basicNew). "BIG hack"							]</body></methods><methods><class-id>RobotApplication</class-id> <category>update</category><body package="Robot - Segunda Practica" selector="refreshInspector">refreshInspector		self localVars: NameSpace new.		"self localVars at: 'world'  put: self world."		self world namedRobots keysAndValuesDo: [:key :value | self localVars at: key put: value].		self inspector inspector initialize: self localVars.</body></methods><methods><class-id>RobotApplication</class-id> <category>events</category><body package="Robot - Segunda Practica" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow 			self world retractInterestIn: #robotAdded for: self.		self world retractInterestIn: #robotRemoved for: self.		^super noticeOfWindowClose: aWindow</body></methods><methods><class-id>RobotApplication</class-id> <category>initialize</category><body package="Robot - Segunda Practica" selector="initialize">initialize		super initialize.		self text: self defaultText asValue.		self inspector: (WorkspaceInspectorPage with: (WorldTempRobotInspector on: NameSpace new)).		self world: RobotWorld new.		self worldView: (TranslatingWrapper on:(RobotWorldView world: self world) at:250@250).</body></methods><methods><class-id>RobotApplication</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="world:">world: aWorld 		world isNil ifFalse:						[							world retractInterestIn: #robotAdded for: self.						world retractInterestIn: #robotRemoved for: self.						].		world:=aWorld.		aWorld expressInterestIn: #robotAdded for: self sendBack: #refreshInspector.		aWorld expressInterestIn: #robotRemoved for: self sendBack: #refreshInspector.</body></methods><methods><class-id>RobotApplication</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="classBrowserTabs">classBrowserTabs		classBrowserTabs isNil			ifTrue: 				[(classBrowserTabs := SelectionInList with: self labelArray) selectionIndex: 1.				classBrowserTabs selectionIndexHolder onChangeSend: #tabsChanged to: self].		^classBrowserTabs.</body></methods><methods><class-id>RobotApplication</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="worldView">worldView		^worldView.</body></methods><methods><class-id>RobotApplication</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="world">world		^world.</body></methods><methods><class-id>RobotApplication</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="text">text		^text</body></methods><methods><class-id>RobotApplication</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="inspector">inspector		^inspector.</body></methods><methods><class-id>RobotApplication</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="addClass">addClass		| dialog |		dialog := SimpleClassCreationDialog new.		dialog 			category: 'Robot - Model';			superclass: Object;			indexedType: #none;			package: (Store.Registry pundleNamed: 'Robot - Model');			nameSpace: Smalltalk.		dialog open ifTrue: 						[ | cls |						cls:=(dialog nameSpaceOrDo:[nil]) 								defineClass: (dialog nameOrDo: [^nil])								superclass: #{Core.Object}								indexedType: #none 								private: false  								instanceVariableNames: dialog instanceVariables 								classInstanceVariableNames: ''								imports: '' 								category:'Robot - Model'.						cls ifNotNil:[									self definedClasses add: cls.									(Store.Registry pundleNamed: 'Robot - Segunda Practica') addEntiretyOfClass: cls.									]].		self classBrowserTabs list: self labelArray.</body></methods><methods><class-id>RobotApplication</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="cleanWorld">cleanWorld		self world clear.</body></methods><methods><class-id>RobotApplication</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="addRobot">addRobot		NewRobot new world: self world; open.</body></methods><methods><class-id>RobotApplication</class-id> <category>interface opening</category><body package="Robot - Segunda Practica" selector="postBuildWith:">postBuildWith: aBuilder		"Post-building stuff. Set the transcript's controller and set it transparent."		| widget win |		widget := (aBuilder componentAt: #transcript) widget.		widget controller: RobotWorldTextEditorController new.		widget controller world: self world.		widget controller initializeMenuForCode.		widget controller keyboardProcessor: builder keyboardProcessor.		widget controller autoAccept: false.		widget controller supportCodeEditingFeels: true.		widget controller flushFeels.		widget widgetState colors notNil ifTrue:[widget widgetState colors setBackgroundColor: nil].		widget widgetState hasBackgroundColor: false.		(win := aBuilder window) notNil ifTrue: [win label: 'Robot World'].</body></methods><methods><class-id>RobotApplication</class-id> <category>interface opening</category><body package="Robot - Segunda Practica" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	(self builder componentAt: #InspectorSubcanvas) widget							client: self inspector							spec: #windowSpec							builder: builder newSubBuilder.	self refreshInspector.	self tabsChanged.</body></methods><methods><class-id>RobotApplication</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="inspector:">inspector: anInspector 		inspector:=anInspector.</body></methods><methods><class-id>RobotApplication</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="labelArray">labelArray		^(self definedClasses collect:[:class | class name]) asArray.</body></methods><methods><class-id>RobotApplication</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="text:">text: aText 		text:=aText.</body></methods><methods><class-id>RobotApplication</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="localVars:">localVars: anObject	localVars := anObject</body></methods><methods><class-id>RobotApplication</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="defaultText">defaultText^''</body></methods><methods><class-id>RobotApplication</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="localVars">localVars	^localVars</body></methods><methods><class-id>RobotApplication</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="definedClasses">definedClasses			^self class definedClasses.</body></methods><methods><class-id>RobotApplication</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="worldView:">worldView: aWorldView 		worldView:=aWorldView.</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="BWAppFinder24">BWAppFinder24	"UIMaskEditor new openOnClass: self andSelector: #BWAppFinder24"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 127 255 254 0 64 0 2 0 127 255 250 0 127 255 250 0 95 255 250 0 84 0 10 0 74 0 10 0 73 255 106 0 72 137 106 0 72 127 10 0 68 41 106 0 68 31 106 0 68 9 10 0 68 5 106 0 68 3 106 0 68 1 10 0 71 240 138 0 65 254 74 0 64 15 42 0 64 1 242 0 64 0 122 0 127 255 254 0 0 0 0 0 ])</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="CGAppFinder24">CGAppFinder24	"UIMaskEditor new openOnClass: self andSelector: #CGAppFinder24"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 8) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 4369 scaledGreen: 4369 scaledBlue: 4369); at: 3 put: (ColorValue scaledRed: 6553 scaledGreen: 6553 scaledBlue: 6553); at: 4 put: (ColorValue scaledRed: 3822 scaledGreen: 3822 scaledBlue: 3822); at: 5 put: ColorValue white; at: 6 put: ColorValue cyan; at: 7 put: ColorValue yellow; at: 8 put: ColorValue blue; yourself)) usingBits: (ByteArray fromPackedString: 'H"H"H"H"H"H"H"H"H@@@@@@@@@@@@@@BHEIRT%H%IRIRT%TBH@L@@@@@@@@@@@HBH@A7]7]7]7]7]0TBHE@C@@@@@@@@@@HBHB@ Y&amp;Y&amp;Y&amp;Y&amp;Y TBHEHBA&amp;Y&amp;Y&amp;Y&amp;Y HBHBTDHCL3L3M#M TBHEHBP QDMDM#M HBHBTDIB@3L3M&amp;Y TBHEIPP$HDMDM#M HBHBT QBP L3M#M TBHEIPQDIBADM&amp;Y HBHBT IDP$HDM#M TBHEIPH$QBP M#M HBHBT H"QDIBA&amp;Y HBHEIP@@@@P$HFY TBHBT%HQDQ@@P Y HBHEIRT%H%DQ@BA TBHBT%IRURT%DP@EHBHEIRT%H%IRIQD@TBH@@@@@@@@@@@@@@BH"H"H"H"H"H"H"H"'))</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_File 					#defaultString: '&amp;File' 					#catalogID: #menus ) 				#nameKey: #file 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #saveImage 								#defaultString: '&amp;Save Image' 								#catalogID: #menus ) 							#nameKey: #imageSave 							#value: #imageSave 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #saveImageAs 								#defaultString: 'Save Image &amp;As...' 								#catalogID: #menus ) 							#nameKey: #imageSaveAs 							#value: #imageSaveAs ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #permSaveImageAs 								#defaultString: '&amp;Perm Save Image As...' 								#catalogID: #menus ) 							#nameKey: #filePermSaveAs 							#value: #filePermSaveAs ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #permUndoAs 								#defaultString: 'Perm &amp;Undo As...' 								#catalogID: #menus ) 							#nameKey: #filePermUndoAs 							#value: #filePermUndoAs ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #exitVW 								#defaultString: 'E&amp;xit VisualWorks...' 								#catalogID: #menus ) 							#nameKey: #visualWorksExit 							#value: #visualWorksExit ) ) #(4 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_System 					#defaultString: '&amp;System' 					#catalogID: #menus ) 				#nameKey: #system 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Changes 								#defaultString: 'Changes' 								#catalogID: #menus ) 							#nameKey: #changes 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #condenseChanges 											#defaultString: '&amp;Condense Changes' 											#catalogID: #menus ) 										#value: #changesFileCondense ) ) #(1 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #collectGarbage 								#defaultString: 'Collect &amp;Garbage' 								#catalogID: #menus ) 							#nameKey: #collectGarbage 							#value: #collectGarbage ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #collectAllGarbage 								#defaultString: 'Collect &amp;All Garbage' 								#catalogID: #menus ) 							#nameKey: #collectAllGarbage 							#value: #collectAllGarbage ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ClearTranscript 								#defaultString: '&amp;Clear Transcript' 								#catalogID: #menus ) 							#nameKey: #clearTranscript 							#value: #clearTranscript 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #delete ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Browse 					#defaultString: '&amp;Browse' 					#catalogID: #menus ) 				#nameKey: #browse 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #system 								#defaultString: 'S&amp;ystem' 								#catalogID: #menus ) 							#nameKey: #browseSystem 							#value: #browseSystem 							#shortcutKeyCharacter: #F5 							#shortcutModifiers: 0 							#labelImage: #(#{UI.ResourceRetriever} nil #systemIcon ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ClassVariableNameSpaceDots 								#defaultString: '&amp;Class/Variable/Name Space...' 								#catalogID: #menus ) 							#nameKey: #browseGlobalName 							#value: #browseGlobalName 							#shortcutKeyCharacter: $F 							#shortcutModifiers: 3 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #findClass ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #sendersOfSelector 								#defaultString: '&amp;Senders of Selector...' 								#catalogID: #menus ) 							#nameKey: #browseSendersOf 							#value: #browseSendersOf 							#shortcutKeyCharacter: #F6 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #selectorReferences ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #implementorsOfSelector 								#defaultString: 'I&amp;mplementors of Selector...' 								#catalogID: #menus ) 							#nameKey: #browseImplementorsOf 							#value: #browseImplementorsOf 							#shortcutKeyCharacter: #F7 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #selectorImplementors ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #referencesToVariable 								#defaultString: 'References to &amp;Variable...' 								#catalogID: #menus ) 							#nameKey: #browseGlobal 							#value: #browseGlobal 							#shortcutKeyCharacter: #F5 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Inspect 								#defaultString: '&amp;Inspect' 								#catalogID: #menus ) 							#nameKey: #inspect 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_Variable 											#defaultString: '&amp;Variable...' 											#catalogID: #menus ) 										#value: #browseInspect 										#shortcutKeyCharacter: #F5 										#shortcutModifiers: 8 ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #Processor 											#defaultString: 'Processor' 											#catalogID: #menus ) 										#value: #inspectProcessor ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #ScheduledControllers 											#defaultString: 'ScheduledControllers' 											#catalogID: #menus ) 										#value: #inspectScheduledControllers ) ) #(1 2 ) nil ) ) ) #(1 4 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Tools 					#defaultString: '&amp;Tools' 					#catalogID: #menus ) 				#nameKey: #tools 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #advanced 								#defaultString: '&amp;Advanced' 								#catalogID: #menus ) 							#nameKey: #advanced ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #dllAndCConnect 								#defaultString: '&amp;DLL and C Connect' 								#catalogID: #menus ) 							#nameKey: #dllcc 							#value: #openExternalFinder 							#labelImage: #(#{UI.ResourceRetriever} nil #extFinderIcon ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #database 								#defaultString: '&amp;Database' 								#catalogID: #menus ) 							#nameKey: #database 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #adHocSQL 											#defaultString: 'Ad Hoc &amp;SQL' 											#catalogID: #menus ) 										#nameKey: #adHoc 										#value: #openAdHocQuery ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #dataModelr 											#defaultString: 'Data &amp;Modeler' 											#catalogID: #menus ) 										#nameKey: #dataModeler 										#value: #openDataModelBrowser 										#labelImage: #(#{UI.ResourceRetriever} nil #dbToolIcon ) ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #canvasComposer 											#defaultString: 'Canvas &amp;Composer' 											#catalogID: #menus ) 										#nameKey: #canvasComposer 										#value: #openCanvasComposer ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #newDataForm 											#defaultString: 'New Data &amp;Form...' 											#catalogID: #menus ) 										#nameKey: #dataForm 										#value: #newDataForm ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #newDatabseApplication 											#defaultString: 'New Database &amp;Application...' 											#catalogID: #menus ) 										#nameKey: #dataBaseAp 										#value: #newDataMain ) ) #(1 4 ) nil ) ) ) #(2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #windowMenu 					#defaultString: '&amp;Window' 					#catalogID: #menus ) 				#nameKey: #window ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Help 					#defaultString: '&amp;Help' 					#catalogID: #menus ) 				#nameKey: #help 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #aboutVWNC 								#defaultString: 'About &amp;VisualWorks NonCommercial...' 								#catalogID: #menus ) 							#value: #helpAbout ) ) #(1 ) nil ) ) ) #(6 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="launcherToolBar">launcherToolBar	"Tools.MenuEditor new openOnClass: self andSelector: #launcherToolBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #saveImage 					#defaultString: 'Save image' 					#catalogID: #labels ) 				#value: #imageSave 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileSave ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #SaveTheVisualWorksImage 					#defaultString: 'Save the VisualWorks Image' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #browseSystem 					#defaultString: 'Browse System' 					#catalogID: #menus ) 				#nameKey: #systemButton 				#value: #browseSystem 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #systemBrowser ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #OpenASystemBrowser 					#defaultString: 'Open a System Browser' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseClassVariableNameSpace 					#defaultString: 'Browse Class/Variable/Name Space' 					#catalogID: #menus ) 				#value: #browseGlobalName 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #findClass ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #BrowseClassVariableNameSpaceDots 					#defaultString: 'Browse Class/Variable/Name Space...' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseSendersOf 					#defaultString: 'Browse Senders Of' 					#catalogID: #menus ) 				#value: #browseSendersOf 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #selectorReferences ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #BrowseSendersOfSelector 					#defaultString: 'Browse Senders of Selector...' 					#catalogID: #menus ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseImplementorsOf 					#defaultString: 'Browse Implementors Of' 					#catalogID: #menus ) 				#value: #browseImplementorsOf 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #selectorImplementors ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #BrowseImplementors 					#defaultString: 'Browse Implementors of Selector...' 					#catalogID: #menus ) ) ) #(1 4 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="windowMenu">windowMenu	"MenuEditor new openOnClass: self andSelector: #windowMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Toolbar #defaultString: '&amp;Toolbar' #catalogID: #menus) 				#nameKey: #toolbar 				#value: #toggleToolbar 				#indication: true ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #refreshAll 					#defaultString: 'Re&amp;fresh All' 					#catalogID: #menus ) 				#value: #winRefreshAll ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #collapseAll 					#defaultString: '&amp;Collapse All' 					#catalogID: #menus ) 				#value: #winCollapseAll ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #restoreAll 					#defaultString: '&amp;Restore All' 					#catalogID: #menus ) 				#value: #winRestoreAll ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #newLauncher 					#defaultString: '&amp;New Launcher' 					#catalogID: #menus ) 				#value: #winNewLauncher ) ) #(1 3 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>interface specs</category><body package="Robot - Segunda Practica" selector="interfaceSpecFor:">interfaceSpecFor: aSymbol	| spec |	spec := super interfaceSpecFor: aSymbol.	aSymbol == #windowSpec		ifTrue: [spec window toolBar: #launcherToolBar].	^spec</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>interface specs</category><body package="Robot - Segunda Practica" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 			#label: 'VisualWorks team' 			#min: #(#{Core.Point} 300 125 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 515 414 1015 614 ) 			#flags: 4 			#menu: #newMenuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -25 1 ) 					#name: #textViewID 					#flags: 9 					#component: #textView ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -25 1 0 1 0 1 ) 					#name: #statusBar 					#flags: 0 ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="allParcelsIcon">allParcelsIcon	^ToolbarIconLibrary visualFor: #parcelBrowser</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="finderIcon">finderIcon	^ToolbarIconLibrary visualFor: #resourceFinder</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="extFinderIcon">extFinderIcon	^ToolbarIconLibrary visualFor: #cpokBrowser</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="cardfile">cardfile	^ToolbarIconLibrary visualFor: #cardfile</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="helpIcon">helpIcon	^ToolbarIconLibrary visualFor: #thought</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="properties">properties	^ToolbarIconLibrary visualFor: #properties</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="fileBrowser">fileBrowser	^ToolbarIconLibrary visualFor: #fileBrowser</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="dbToolIcon">dbToolIcon	^ToolbarIconLibrary visualFor: #database</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="systemIcon">systemIcon	^ToolbarIconLibrary visualFor: #systemBrowser</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="fullMenuBar">fullMenuBar	| menu |	menu := self menuBar.	(menu atNameKey: #advanced)		submenu: [self regenerateAdvancedMenu];		enabled: [self hasAdvancedTools].	(menu atNameKey: #dllcc)		enabled: [#{ExternalInterfaceFinder} isDefined].	(menu atNameKey: #window)		submenu: [self buildWindowMenu].	(menu atNameKey: #adHoc) 		enabled: [#{AdHocQueryTool} isDefined].	(menu atNameKey: #dataModeler) 		enabled: [#{LensEditor} isDefined].	(menu atNameKey: #canvasComposer) 		enabled: [#{LensApplicationSpec} isDefined].	(menu atNameKey: #dataForm) 		enabled: [#{UIFinderVW2} isDefined				and: [#{LensApplicationSpecEditor} isDefined]].	(menu atNameKey: #dataBaseAp) 		enabled: [(#{UIFinderVW2} isDefined)				and: [#{LensMainApplication} isDefined]].	^menu</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="allClassesIcon">allClassesIcon		^ToolbarIconLibrary visualFor: #classBrowser</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="workspaceIcon">workspaceIcon	^ToolbarIconLibrary visualFor: #workspace</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="fileListIcon">fileListIcon	^ToolbarIconLibrary visualFor: #fileFinder</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="newCanvasIcon">newCanvasIcon	^ToolbarIconLibrary visualFor: #canvas</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="allPackagesIcon">allPackagesIcon	^ToolbarIconLibrary visualFor: #storeBrowser</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Robot - Segunda Practica" selector="robotIcon">robotIcon	^RobotApplication robotIcon</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private-interface building</category><body package="Robot - Segunda Practica" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>class initialization</category><body package="Robot - Segunda Practica" selector="instanceMethodsChanged">instanceMethodsChanged	"A Menu has changed.  Update all open Launcher menuBars."	ScheduledWindow scheduledControllers do: 		[:each | 		(each model isKindOf: self) ifTrue: 			[(each model)				rebuildMenu;				updateToolBar]]</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>class initialization</category><body package="Robot - Segunda Practica" selector="classMethodsChanged">classMethodsChanged	^self instanceMethodsChanged</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="title">title	"Return a title for the launcher which includes the image name"	^(#VWLauncherLabelNC &lt;&lt; #labels &gt;&gt; 'VisualWorks NonCommercial  &lt;1s&gt;') expandMacrosWith: ObjectMemory imagePrefix</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="raiseOrOpen">raiseOrOpen	"This is used by the warp-to-launcher hot key feature	which runs at priority 90. If opening a new launcher,	make sure it runs at a more reasonable one."	self raiseSingleInstance ifNil: 		[[self open] forkAt: Processor userSchedulingPriority]</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="checkInstalledComponents">checkInstalledComponents	"Get all open Launchers to update their buttons, menus etc so	 that they accurately reflect the current set of loaded components.	 This is usually used on load and unload of any component that is	 accessible via the Launcher."	"VisualLauncher checkInstalledComponents"	ScheduledWindow scheduledControllers do: 		[:each | 		(each model isKindOf: self) ifTrue: [each model enableConnections]]</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="menuItemFor:at:">menuItemFor: labelViewAssociation at: anInteger	| label |	label := '&amp;&lt;1p&gt;. [&lt;2s&gt;] &lt;3s&gt;'		expandMacrosWith: anInteger		with: (self classNameInitials: labelViewAssociation value model)		with: labelViewAssociation key.	^(MenuItem labeled: (label contractTo: 70))		value: [self bringToFront: labelViewAssociation value]</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="addTo:label:forClass:openWith:">addTo: aMenu label: aString forClass: aClassIdentifier openWith: anOpeningSymbol	| mi |	mi := MenuItem labeled: aString.	mi enabled: [aClassIdentifier asQualifiedReference isDefined].	aMenu addItem: mi value: [aClassIdentifier asQualifiedReference value perform: anOpeningSymbol]</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="addNine:toMenu:">addNine: labelsAndViews toMenu: aMenu 	| partial |	partial := labelsAndViews copyFrom: 1 to: 9.	partial keysAndValuesDo: 		[:index :each |		aMenu addItem: (self menuItemFor: each at: index)].	aMenu		addLine;		addItem: ((MenuItem labeled: (#_0MoreWindows &lt;&lt; #dialogs &gt;&gt; '&amp;0. More Windows...')) 					value: [self selectAndRaiseViewAmong: labelsAndViews])</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="regenerateAdvancedMenu">regenerateAdvancedMenu	"Reconstruct the Advanced Tools shared menu, if it's nil.  In either case, reset which elements are and are not enables.  This message should be sent after filing in any launchable APOK file."	| menu pmenu pitem|	pmenu := Menu new.	self  addTo: pmenu label: (#ATTime &lt;&lt; #menus &gt;&gt; 'Time') forClass: #{TimeProfiler} openWith: #openView.	self  addTo: pmenu label: (#ATAllocations &lt;&lt; #menus &gt;&gt; 'Allocations') forClass: #{AllocationProfiler} openWith: #openView.	self  addTo: pmenu label: (#ATMultiTime &lt;&lt; #menus &gt;&gt; 'MultiTime') forClass: #{MultiTimeProfiler} openWith: #openView.	self  addTo: pmenu label: (#ATMultiAllocations &lt;&lt; #menus &gt;&gt; 'MultiAllocations') forClass: #{MultiAllocationProfiler} openWith: #openView.	self  addTo: pmenu label: (#ATObjectEngine &lt;&lt; #menus &gt;&gt; 'Object engine') forClass: #{OEProfiler} openWith: #open.	#{BenchmarkRunner} isDefined ifTrue:		[self  addTo: pmenu label: (#ATbenchmarkRunner &lt;&lt; #menus &gt;&gt; 'Benchmark runner') forClass: #{BenchmarkRunner} openWith: #open].	pitem := MenuItem labeled: (#ATProfiles &lt;&lt; #menus &gt;&gt; 'Profiles').	pitem enabled: [#{TimeProfiler} isDefined						or: [#{AllocationProfiler} isDefined							or: [#{OEProfiler} isDefined								or: [#{BenchmarkRunner} isDefined]]]].	pitem submenu: pmenu.	menu := Menu new.	menu addItem: pitem.	self addTo: menu label: (#ATClassReports &lt;&lt; #menus &gt;&gt; 'Class reports') forClass: #{ClassReporter} openWith: #open.	self addTo: menu label: (#ATBenchmarks &lt;&lt; #menus &gt;&gt; 'Benchmarks') forClass: #{SystemBenchmark} openWith: #open.	#{ProjectBrowser} isDefined		ifTrue:			[self addTo: menu label: (#ATProjectBrowser &lt;&lt; #menus &gt;&gt; 'Project browser') forClass: #{ProjectBrowser} openWith: #open].	self addTo: menu label: (#ATFullBrowser &lt;&lt; #menus &gt;&gt; 'Full browser') forClass: #{FullNotebookSystemBrowser} openWith: #openOnSystemFull.	self addTo: menu label: (#ATCodingAssistant &lt;&lt; #menus &gt;&gt; 'Coding assistant') forClass: #{CodingAssistant} openWith: #open.	^menu</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="buildWindowMenu">buildWindowMenu	| menu |	menu := self windowMenu.	menu addLine.	self addCurrentWindowsTo: menu.	(menu atNameKey: #toolbar) ifNotNil:		[:item | item indicationSelector: #toolbarVisible].	^menu</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="hasAdvancedTools">hasAdvancedTools	^#{TimeProfiler} isDefined		or: [#{AllocationProfiler} isDefined		or: [#{OEProfiler} isDefined		or: [#{ClassReporter} isDefined		or: [#{SystemBenchmark} isDefined		or: [#{ProjectBrowser} isDefined		or: [#{FullBrowserTabApplication} isDefined			]]]]]]</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="addCurrentWindowsTo:">addCurrentWindowsTo: aMenu	"Add items for all VisualWorks windows to aMenu. The window 	selected by the user will be expanded, if necessary, and brought to 	front."	| labelsAndViews |	labelsAndViews := self currentWindowLabelsAndViews.	labelsAndViews size &lt; 10		ifTrue: [self addAll: labelsAndViews toMenu: aMenu]		ifFalse: [self addNine: labelsAndViews toMenu: aMenu]</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="openHelpBrowser">openHelpBrowser	#{VWHelp.HelpBrowser}		ifDefinedDo: [:helpBrowser | helpBrowser open]		elseDo:			[ | loadMessage |			loadMessage := (#helpNotLoadedSuggestToLoad &lt;&lt; #dialogs &gt;&gt; 				'VWHelp parcel is not loaded. Load it now?') expandMacros.			(Dialog confirm: loadMessage) ifTrue:				[[Notice 					show: (#LoadingParcelN1S &lt;&lt; #dialogs &gt;&gt; 'Loading Parcel&lt;n&gt;&lt;1s&gt;' expandMacrosWith: 'VWHelp')					while: [Parcel ensureLoadedParcel: 'VWHelp' withVersion: String new]]					on: Parcel missingParcelSignal					do: [:ex |						^Dialog warn: (#helpParcelNotFound &lt;&lt; #dialogs &gt;&gt;							'The VWHelp parcel could not be located.&lt;n&gt;Check that the VisualWorks home directory is set properly&lt;n&gt;and that the parcel is in the parcel path.') expandMacros].					self openHelpBrowser]]</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="currentWindowLabelsAndViews">currentWindowLabelsAndViews	| labelsAndViews |	labelsAndViews := OrderedCollection new.	ScheduledWindow scheduledControllers do: 		[:each | 			[(each model isKindOf: self) ifFalse: 			[labelsAndViews add: each view label asString -&gt; each view]]				on: Object errorSignal 				do: [:error | error return]].	labelsAndViews := labelsAndViews asSortedCollection: [:first :next | first key &lt;= next key].	^labelsAndViews asArray</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="selectAndRaiseViewAmong:">selectAndRaiseViewAmong: labelsAndViews	| choice |	choice := Dialog		choose: (#SwitchToWindowC &lt;&lt; #dialogs &gt;&gt; 'Switch to window:')		fromList: (labelsAndViews collect: [:each | each key])		values: (labelsAndViews collect: [:each | each value])		lines: 20		cancel: [^self].	self bringToFront: choice</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="addAll:toMenu:">addAll: labelsAndViews toMenu: aMenu	labelsAndViews keysAndValuesDo:		[:index :each |		aMenu addItem: (self menuItemFor: each at: index)]</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="bringToFront:">bringToFront: view 	view isCollapsed ifTrue: [view expand].	^view raise</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="classNameInitials:">classNameInitials: anObject	^anObject class name select: [:each | each isUppercase]</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>interface opening</category><body package="Robot - Segunda Practica" selector="open">open	^[super open]		on: GetWindowManagerUsagePolicy		do: [:ex | ex resume: MakeNewWindowManagerUsagePolicy new]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>changing</category><body package="Robot - Segunda Practica" selector="changeRequest">changeRequest	"The receiver wants to change; check with all dependents that it is 	OK."	^self myDependents updateRequest and: [self closeDialog]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>initialize-release</category><body package="Robot - Segunda Practica" selector="winNewLauncher">winNewLauncher	"Create a new launcher."	self class open.	self closeAndUnschedule.	self release</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>initialize-release</category><body package="Robot - Segunda Practica" selector="initialize">initialize	super initialize.	toolBar := nil asValue.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus</category><body package="Robot - Segunda Practica" selector="updateToolBar">updateToolBar	| menu |	menu := self class launcherToolBar.	menu		augmentFrom: self class		to: VisualLauncher		menuName: #launcherToolBar.	toolBar value: menu</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus</category><body package="Robot - Segunda Practica" selector="newMenuBar">newMenuBar	menuBar := self class fullMenuBar.	menuBar isNil ifTrue: [^self].	self rebuildMenu.	^menuBar</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus</category><body package="Robot - Segunda Practica" selector="launcherToolBar">launcherToolBar	self updateToolBar.	^toolBar</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="toggleDebuggingLabel">toggleDebuggingLabel	^PDPManager getEnableProbeDebuggingLabel</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="clearTestExpressionLibrary">clearTestExpressionLibrary	&lt;menuItem: #(#_ClearDot #pdp '&amp;Clear...')		icon: nil		nameKey: nil		menu: #(#menuBar #probes #testLibrary)		position: 20.2&gt;	ProbeTestExpressionEditor clearLibrary</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="inspectDebugVars">inspectDebugVars	&lt;menuItem: #(#_InspectDebugVariables #pdp '&amp;Inspect Debug Variables') 		icon: nil		nameKey: nil		menu: #(#menuBar #probes)		position: 30.2&gt;	PDPManager debugVariables inspect</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="probeLibraryMenu">probeLibraryMenu	&lt;submenu: #(#Probe_Library #pdp 'Probe &amp;Library')		nameKey: #probeLibrary		menu: #(#menuBar #probes)		position: 50.1&gt;</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="inspectWatchExpressionLibrary">inspectWatchExpressionLibrary	&lt;menuItem: #(#_Inspect #pdp '&amp;Inspect')		icon: nil		nameKey: nil		menu: #(#menuBar #probes #watchLibrary)		position: 20.1&gt;	ProbeActionExpressionEditor inspectLibrary</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="loadTestExpressionLibrary">loadTestExpressionLibrary	&lt;menuItem: #(#_LoadDot #pdp '&amp;Load...')		icon: nil		nameKey: nil		menu: #(#menuBar #probes #testLibrary)		position: 10.1&gt;	ProbeTestExpressionEditor readLibrary</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="saveTestExpressionLibrary">saveTestExpressionLibrary	&lt;menuItem: #(#_SaveDot #pdp '&amp;Save...')		icon: nil		nameKey: nil		menu: #(#menuBar #probes #testLibrary)		position: 10.2&gt;	ProbeTestExpressionEditor saveLibrary</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="testLibraryMenu">testLibraryMenu	&lt;submenu: #(#_TestLibrary #pdp '&amp;Test Library')		nameKey: #testLibrary		menu: #(#menuBar #probes)		position: 50.3&gt;</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="toggleDebugging">toggleDebugging	&lt;menuItem: #toggleDebuggingLabel		icon: nil		nameKey: nil		menu: #(#menuBar #probes)		position: 10.1&gt;	PDPManager toggleDebugging</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="purgeUnusedWatches">purgeUnusedWatches	&lt;menuItem: #(#RemoveUnused_WatchWindowsDots #pdp 'Remove Unused &amp;Watch Windows...') 		icon: nil		nameKey: nil		menu: #(#menuBar #probes)		position: 20.2&gt;	(Dialog confirm: (#PurgeUnusedWatches &lt;&lt; #pdp &gt;&gt; 'Purge unused watches?'))			ifTrue: [PDPManager purgeUnusedWatchWindows]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="watchLibraryMenu">watchLibraryMenu	&lt;submenu: #(#_WatchLibrary #pdp '&amp;Watch Library')		nameKey: #watchLibrary		menu: #(#menuBar #probes)		position: 50.2&gt;</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="browseAllProbedMethods">browseAllProbedMethods	&lt;menuItem: #(#_BrowseProbes #pdp '&amp;Browse Probes')		icon: nil		nameKey: nil		menu: #(#menuBar #probes)		position: 30.1&gt;	PDPManager browseAllProbedMethods</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="loadWatchExpressionLibrary">loadWatchExpressionLibrary	&lt;menuItem: #(#_LoadDot #pdp '&amp;Load...')		icon: nil		nameKey: nil		menu: #(#menuBar #probes #watchLibrary)		position: 10.1&gt;	ProbeActionExpressionEditor readLibrary</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="inspectTestExpressionLibrary">inspectTestExpressionLibrary	&lt;menuItem: #(#_Inspect #pdp '&amp;Inspect')		icon: nil		nameKey: nil		menu: #(#menuBar #probes #testLibrary)		position: 20.1&gt;	ProbeTestExpressionEditor inspectLibrary</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="readProbeLibrary">readProbeLibrary	&lt;menuItem: #(#_LoadDot #pdp '&amp;Load...')		icon: nil		nameKey: nil		menu: #(#menuBar probes #probeLibrary)		position: 10.1&gt;	ProbedCompiledMethod readProbesFromFile</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="probes">probes	&lt;submenu: #(#_Debug #menus '&amp;Debug')		nameKey: #probes		menu: #(#menuBar)		position: 10.031&gt;</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="removeAllProbes">removeAllProbes	&lt;menuItem: #(#_RemoveAllProbesDots #pdp '&amp;Remove All Probes...') 		icon: nil		nameKey: nil		menu: #(#menuBar #probes)		position: 20.1&gt;	(Dialog confirm: (#RemoveAllProbesFromSystem &lt;&lt; #pdp &gt;&gt; 'Remove all probes from system?'))		ifTrue: [ProbedCompiledMethod revertAllProbedMethodsInSystem]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="clearWatchExpressionLibrary">clearWatchExpressionLibrary	&lt;menuItem: #(#_ClearDot #pdp '&amp;Clear...')		icon: nil		nameKey: nil		menu: #(#menuBar #probes #watchLibrary)		position: 20.2&gt;	ProbeActionExpressionEditor clearLibrary</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="saveWatchExpressionLibrary">saveWatchExpressionLibrary	&lt;menuItem: #(#_SaveDot #pdp '&amp;Save...')		icon: nil		nameKey: nil		menu: #(#menuBar #probes #watchLibrary)		position: 10.2&gt;	ProbeActionExpressionEditor saveLibrary</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="saveProbeLibrary">saveProbeLibrary	&lt;menuItem: #(#_SaveDot #pdp '&amp;Save...')		icon: nil		nameKey: nil		menu: #(#menuBar #probes #probeLibrary)		position: 10.2&gt;	ProbedCompiledMethod saveProbesToFile</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Robot - Segunda Practica" selector="purgeUnusedVars">purgeUnusedVars	&lt;menuItem: #(#RemoveUnusedDebug_VariablesDots #pdp 'Remove Unused Debug &amp;Variables...') 		icon: nil		nameKey: nil		menu: #(#menuBar #probes)		position: 20.3&gt;	(Dialog confirm: (#PurgeUnusedDebugVariables &lt;&lt; #pdp &gt;&gt; 'Purge unused debug variables?'))			ifTrue: [PDPManager purgeUnusedDebugVariables]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="textCollector:">textCollector: aTextCollector	textCollector := aTextCollector</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="textCollector">textCollector	textCollector == nil		ifTrue: [textCollector := Transcript].	^textCollector</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="textView">textView	"Conjure up a view for the system transcript in the Visual Launcher."	| tcv |	tcv := TextCollectorView new model: self textCollector.	tcv controller: TextEditorController new.	tcv controller initializeMenuForCode.	tcv controller keyboardProcessor: builder keyboardProcessor.	^tcv</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="statusBarSubapplication">statusBarSubapplication	"This method is called only once to the create the subapplication.	Therefore, if there is an old one, we need to release it properly	to make all the dependents go away."	toolDock notNil ifTrue: [toolDock release].	toolDock := VisualLauncherToolDock new.	^toolDock</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="changesOpenChangeSets">changesOpenChangeSets	&lt;menuItem: #(#openChangeSets #menus 'Change &amp;Sets')		icon: nil		nameKey: nil		shortcutKeyCharacter: #F4		shortcutModifiers: 0		menu: #(#menuBar system changes)		position: 10.001&gt;	self openApplicationForClassNamed: #{ChangeSetManager}</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="openFileBrowser">openFileBrowser	&lt;menuItem: #(#fileBrowser #menus 'File Browser' )		icon: #fileBrowser		nameKey: #openParcelManager		menu: #(#launcherToolBar)		position: 30.01		helpText: #(#OpenAFileBrowser #menus 'Open a File Browser')&gt;	&lt;menuItem: #(#FileBrowserLabel #menus '&amp;File Browser')		icon: #fileBrowser		nameKey: nil		shortcutKeyCharacter: #F2		shortcutModifiers: 0		menu: #(#menuBar file)		position: 9.01&gt;	self openApplicationForClassNamed: #{Tools.FileTools.FileBrowser}</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="toolsMaskEditor">toolsMaskEditor	"Open mask editor."	&lt;menuItem: #(#_ImageEditor #UIPainter '&amp;Image Editor')		nameKey: nil		menu: #(#menuBar painter)		position: 10.50&gt;	self openApplicationForClassNamed: #{UIMaskEditor}</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="winRestoreAll">winRestoreAll	"Expand (maximize) all of the windows under VisualWorks control."	| win |	win := Window currentWindow.	ScheduledWindow scheduledWindows do:		[:each |		[each isCollapsed ifTrue: [each expand]]			on: Object errorSignal 			do: [:ex | ex return]].	win raise.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="browseSendersOf">browseSendersOf	self applicationForClassNamed: #{SmalltalkWorkbench}		do: [:class| class promptThenBrowseCallsFrom: builder window]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="inspectScheduledControllers">inspectScheduledControllers	ScheduledControllers scheduledControllers inspect</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="setVisualWorksHome">setVisualWorksHome	"VisualLauncher someInstance setVisualWorksHome"	&lt;menuItem: #(#_SetVisualWorksHome #menus '&amp;Set VisualWorks Home...' )		nameKey: nil		menu: #(#menuBar file)		position: 19.1&gt;	VisualWorksSettings openManagerPage: #(system)</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="browseInspect">browseInspect	"Inspect a global variable (either in Smalltalk or Undeclared).	 Try to track down references that go through the global's name as well as	 direct references via its association."	self applicationForClassNamed: #{SmalltalkWorkbench}		do: [:workbench| | answer |		answer := workbench pickASomething: (#InspectSharedVariableNamedColon &lt;&lt; #dialogs &gt;&gt; 'Inspect Shared Variable Named:').		answer = '' ifTrue: [^self].		( answer == false or: [answer == nil] )			ifTrue: [ Dialog warn: (#VariableDoesNotExist &lt;&lt; #dialogs &gt;&gt; 'Variable does not exist') ] 			ifFalse:				[answer isBindingReference ifFalse: [answer := answer fullyQualifiedReference].				answer value inspect]]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="openOverrideList">openOverrideList	&lt;menuItem: #(#openOverrideList #menus 'Open &amp;Override List')		icon: nil		nameKey: nil		menu: #(#menuBar #system changes)		position: 30.02&gt;	OverrideList open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="helpNoncommercialWorkspace">helpNoncommercialWorkspace	&lt;menuItem: #(#helpNoncommercialWorkspace #menus 'Features Workspace...')		nameKey: nil		menu: #(#menuBar #help)		position: 6.02&gt;		Workspace openNonCommercialWorkspace.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="visualWorksExit">visualWorksExit	ObjectMemory quitDialog</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="toggleToolbar">toggleToolbar	builder window toolbarVisible: builder window toolbarVisible not</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="helpSystemWorkspace">helpSystemWorkspace	&lt;menuItem: #(#systemWorkspaceMenu #menus 'System Workspace')		nameKey: nil		menu: #(#menuBar #help)		position: 5.03&gt;	Workbook systemWorkbook		open;		selectPageLabeled: 				(#systemWorkspace &lt;&lt; #labels &gt;&gt; 'System Workspace')</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="helpAbout">helpAbout	"Display the dialog containing the version identification and	 copyright notice."	AboutVisualWorksDialog open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="browseGlobalName">browseGlobalName	"Open a browser on a class, shared variable, or a namespace after	having the user select it in an incremental search dialog"	self applicationForClassNamed: #{SmalltalkWorkbench}		do: [:class| class promptThenBrowseGlobalNameFrom: builder window]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="helpIvanTomekWorkspace">helpIvanTomekWorkspace	&lt;menuItem: #(#ivanTomekWorkspace #menus 'Introductory Workspace...')		nameKey: nil		menu: #(#menuBar #help)		position: 6.03&gt;		Workspace openIvanTomekWorkspace.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="clearTranscript">clearTranscript	self textCollector clear</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="openCanvasComposer">openCanvasComposer	| panGen sc cl |	cl := #{LensApplicationSpecEditor} valueOrDo: [^self].	sc := #{LensApplicationSpec} valueOrDo: [^self].	panGen := cl new.	panGen spec: sc new.	panGen open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="imageSave">imageSave	ObjectMemory snapshot.	self builder window label: self class title</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="browseGlobal">browseGlobal	"Browse references to a global variable (either in Smalltalk or Undeclared).	 Try to track down references that go through the global's name as well as	 direct references via its association."	self applicationForClassNamed: #{SmalltalkWorkbench}		do: [:class| class browseGlobalFrom: builder window]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="imageSaveAs">imageSaveAs	ObjectMemory saveDialogThenQuit: false.	self builder window label: self class title</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="browseAmbiguousReferences">browseAmbiguousReferences	&lt;menuItem: #browseAmbiguousReferencesLabel		nameKey: nil		menu: #(#menuBar #browse)		position: 25.5&gt;	| mc calls |	mc := MethodCollector new.	calls := mc methodsSelect:					[:m|					[m allLiteralsDo:						[:lit|						lit isBindingReference							ifTrue: [lit bindingOrNil]							ifFalse:								[(lit isVariableBinding and: [lit isDeferred]) ifTrue:									[lit resolveBinding]]].					 false]						on: DuplicateBindingsError						do: [:ex| ex return: true]].	calls := Cursor execute showWhile: [calls select].	DuplicateBindingsError ambiguousReferencesExist: calls size &gt; 0.	mc		openListBrowserOn: calls		label: (#AmbiguousBindings &lt;&lt; #dialogs &gt;&gt; 'Ambiguous Binding References (accept to discover)')		initialSelection: nil</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="openAdHocQuery">openAdHocQuery	self openApplicationForClassNamed: #{AdHocQueryTool}</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="toolsLoadParcelByName">toolsLoadParcelByName	&lt;menuItem: #(#loadParcelNamed #menus '&amp;Load Parcel Named...')	nameKey: nil	menu: #(#menuBar #tools)	position: 15.2&gt;	^Parcel loadParcelByNameFor: self mainWindow</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="inspectDependentsFields">inspectDependentsFields	&lt;menuItem: #inspectDependentsFieldsLabel		nameKey: nil		menu: #(menuBar browse inspect)		position: 15.0&gt;	DependentsFields inspect</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="collectGarbage">collectGarbage	ObjectMemory verboseCompactingGC</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="openProcessMonitor">openProcessMonitor	&lt;menuItem: #(#OpenProcess_Monitor #pdp 'Open Process &amp;Monitor')		icon: nil		nameKey: nil		menu: #(#menuBar #probes)		position: 100&gt;	ProcessMonitorService open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="painterMenu">painterMenu	&lt;submenu: #(#_Painter #UIPainter '&amp;Painter')		nameKey: #painter		menu: #(menuBar)		position: 10.034&gt;</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="visualWorksLauncher">visualWorksLauncher	 self class open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="winCollapseAll">winCollapseAll	"Collapse (minimize) all windows under VisualWorks control except 	for the launcher causing this 	method to execute."	| actController |	actController := self builder window controller.	ScheduledWindow scheduledControllers do: 		[:each | 		[each == actController ifFalse: [each collapse]] 			on: Object errorSignal			do: [:error | error return]]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="helpInstallationWorkspace">helpInstallationWorkspace	&lt;menuItem: #(#installWorkspace #menus 'Installation Workspace')		nameKey: nil		menu: #(#menuBar #help)		position: 5.02&gt;	Workbook systemWorkbook		open;		selectPageLabeled: 			(#installationWorkspace &lt;&lt; #labels &gt;&gt; 'Installation Workspace')</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="helpObjectReference">helpObjectReference	&lt;menuItem: #(#objectReferenceMenu #menus 'Object Reference')		nameKey: nil		menu: #(#menuBar #help)		position: 5.01&gt;	| objectReference text list b table |	objectReference := Dictionary new.	Cursor wait showWhile:		[SystemUtils allClassesDo:			[:class | | comment index str |			str := 'Object Reference:'.			(index := (comment := class comment) indexOfSubCollection: str startingAt: 1) &gt; 0 ifTrue:				[index := index + str size.				[(comment at: index) isSeparator] whileTrue: [index := index + 1].				objectReference at: class fullName put: (comment copyFrom: index to: comment size)]]].	text := '' asValue.	list := SelectionInList new.	list list: (table := objectReference keys asSortedStrings asArray).	list selectionIndexHolder: ((PluggableAdaptor on: 0 asValue)							getBlock: [:m | m value]							putBlock:								[:m :v |								m value: v.								text value: (v = 0											ifTrue: ['']											ifFalse: [objectReference at: (table at: v)])]							updateBlock: [:m :a :p | false ];							yourself).	list selectionIndex: 0.	b := UIBuilder new.	b		add: ((WindowSpec label: (#objectReferenceLabel &lt;&lt; #labels &gt;&gt; 'Object Reference')) min:300@350; yourself);		add: (SequenceViewSpec model: list layout: ((LayoutFrame new) rightFraction: 1; bottomFraction: 0.3));		add: (TextEditorSpec model: text layout: ((LayoutFrame new) rightFraction: 1; topFraction: 0.3; bottomFraction: 1)).	b open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="changesOpenChangeList">changesOpenChangeList	&lt;menuItem: #(#_ChangeList #menus '&amp;Change List')		icon: nil		nameKey: nil		shortcutKeyCharacter: #F7		shortcutModifiers: 0		menu: #(#menuBar tools)		position: 9.02&gt;	self openApplicationForClassNamed: #{ChangeList}</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="openHotRegionsEditor">openHotRegionsEditor	&lt;menuItem: #(#_HotRegionsEditor #UIPainter '&amp;Hot Regions Editor')		nameKey: nil		menu: #(#menuBar #painter)		position: 10.91&gt;	self applicationForClassNamed: #{UIHotRegionEditor} do: [:class| class open]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="openParcelManager">openParcelManager	"Open a new ParcelManager." 	&lt;menuItem: #(#ParcelManager #menus 'Parcel Manager')		icon: #cardfile		nameKey: #openParcelManager		menu: #(#launcherToolBar)		position: 10.01		helpText: #(#OpenAParcelManager #menus 'Open a Parcel Manager')&gt;	&lt;menuItem: #(#_ParcelManager #menus '&amp;Parcel Manager')		icon: #cardfile		nameKey: nil		shortcutKeyCharacter: #F3		shortcutModifiers: 0		menu: #(#menuBar system)		position: 9.01&gt;	self openApplicationForClassNamed: #{ParcelManager}</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="changesFileCondense">changesFileCondense	(Dialog confirm: (#verifyCondense &lt;&lt; #dialogs &gt;&gt; 'Really condense the changes file?')) ifTrue: [		SourceFileManager default condenseChanges]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="filePermSaveAs">filePermSaveAs	ObjectMemory permSaveDialogThenQuit: false.	self builder window label: self class title</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="browseApplications">browseApplications	"Open a new UIFinder."	&lt;menuItem: #(#BrowseApplications #UIPainter 'Browse Applications')		icon: #finderIcon		nameKey: nil		menu: #(#launcherToolBar)		position: 25.02		helpText: #(#OpenAResourceFinder #UIPainter 'Open a Resource Finder')&gt;	&lt;menuItem: #(#_ResourceFinder #UIPainter '&amp;Resource Finder')		icon: #finderIcon		nameKey: nil		menu: #(#menuBar painter)		position: 20.1&gt;	self openApplicationForClassNamed: #{UIFinderVW2}</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="inspectProcessor">inspectProcessor	Processor inspect</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="filePermUndoAs">filePermUndoAs	ObjectMemory permUndoDialogThenQuit: false.	self builder window label: self class title</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="collectAllGarbage">collectAllGarbage	ObjectMemory verboseGlobalCompactingGC</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="toolsNewWorkspace">toolsNewWorkspace	"Open a new workspace."	&lt;menuItem: #(#Workspace #labels 'Workspace')		icon: #workspaceIcon		nameKey: nil		menu: #(#launcherToolBar)		position: 30.5		helpText: #(#OpenANewWorkspace #labels 'Open a new workspace')&gt;	&lt;menuItem: #(#_Workspace #menus '&amp;Workspace')		icon: #workspaceIcon		nameKey: nil		shortcutKeyCharacter: #F6		shortcutModifiers: 0		menu: #(#menuBar tools)		position: 9.00&gt;	self openApplicationForClassNamed:		(AbstractWorkspace useMultiPageWorkspaces			ifTrue: [#Workbook]			ifFalse: [#Workspace])</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="visualWorksSettings">visualWorksSettings	"Open a new Settings control panel."	&lt;menuItem: #(#Settings #menus 'Settings')		icon: #properties		nameKey: #visualWorksSettings		menu: #(#launcherToolBar)		position: 10.02		helpText: #(#EditTheSystemOptions #menus 'Edit the system options')&gt;	&lt;menuItem: #(#settings #menus '&amp;Settings')		icon: #properties		nameKey: #visualWorksSettings		menu: #(#menuBar system)		position: 9.02&gt;	SettingsManager 		openOrRaise: VisualWorksSettings 		selectPage: #()</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="helpGettingStartedWorkspace">helpGettingStartedWorkspace	&lt;menuItem: #(#gettingStartedWorkspace #menus 'Getting Started Workspace...')		nameKey: nil		menu: #(#menuBar #help)		position: 6.01&gt;		Workspace openGettingStartedWorkspace.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="helpLoadHelp">helpLoadHelp	&lt;menuItem: #(#loadHelp #menus 'Load &amp;Help')		icon: #helpIcon		nameKey: nil		menu: #(#menuBar #help)		position: 4.01&gt;	Notice 		show: (#LoadingParcelN1S &lt;&lt; #dialogs &gt;&gt; 'Loading Parcel&lt;n&gt;&lt;1s&gt;' expandMacrosWith: 'VWHelp')		while: [Parcel ensureLoadedParcel: 'VWHelp' withVersion: '']</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="browseSystem">browseSystem	self openApplicationForClassNamed: #{Refactory.Browser.RefactoringBrowser}</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="toolsUnloadParcelByName">toolsUnloadParcelByName	&lt;menuItem: #(#unloadParcelNamed #menus '&amp;Unload Parcel Named...')	nameKey: nil	menu: #(#menuBar #tools)	position: 15.3&gt;	^Parcel unloadParcelByNameFor: builder window</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="winRefreshAll">winRefreshAll	"Repaint all of the windows under VisualWorks control."	WindowManager restoreAll</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="fileOpen">fileOpen	&lt;menuItem: #(#OpenFileItemLabel #menus '&amp;Open File...')		icon: nil		nameKey: #fileOpen		menu: #(#menuBar file)		position: 9.02&gt;	| name ws |	name := (Dialog requestFileName: (#OpenFile &lt;&lt; #dialogs &gt;&gt; 'Open File') default: '*.ws') trimBlanks.	name isEmpty ifFalse:		[ws := Workspace withFile: name.		 ws encodingChannel value: #default.		 ws open]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="inspectUndeclared">inspectUndeclared	&lt;menuItem: #inspectUndeclaredLabel		nameKey: nil		menu: #(menuBar browse inspect)		position: 15.1&gt;	Undeclared inspect</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="openRobotWorld">openRobotWorld	"openRobotWorld" 	&lt;menuItem: #(#OpenRobot #robot 'Open robotworld ')		icon: #robotIcon		nameKey: nil		menu: #(#launcherToolBar)		position: 110.01		helpText: #(#OpenRobotWorkd #labels 'Open the Robot world')&gt;   RobotApplication new open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="browseImplementorsOf">browseImplementorsOf	self applicationForClassNamed: #{SmalltalkWorkbench}		do: [:class| class promptThenBrowseImplementorsFrom: builder window]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="toolsMenuEditor">toolsMenuEditor	"Open menu editor."	&lt;menuItem: #(#_MenuEditor #UIPainter '&amp;Menu Editor')		nameKey: nil		menu: #(#menuBar painter)		position: 10.10&gt;	self openApplicationForClassNamed: #{MenuEditor}</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="toolsNewCanvas">toolsNewCanvas	"Open a new Canvas."	&lt;menuItem: #(#NewCanvas #UIPainter 'New Canvas')		icon: #newCanvasIcon		nameKey: nil		menu: #(#launcherToolBar)		position: 25.01		helpText: #(#EditANewCanvas #UIPainter 'Edit a New Canvas')&gt;	&lt;menuItem: #(#_NewCanvas #UIPainter '&amp;New Canvas')		icon: #newCanvasIcon		nameKey: nil		menu: #(#menuBar painter)		position: 5.0&gt;	self applicationForClassNamed: #{UIPainter} do: [:class| class new openNewWindowCanvas]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="browseSystemOverrides">browseSystemOverrides	&lt;menuItem: #(#browseSystemOverrides #menus 'Browse &amp;System Overrides')		icon: nil		nameKey: nil		menu: #(#menuBar #system changes)		position: 30.04&gt;	OverrideList new openOn: Override overrideList</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="inspectDependentsFieldsLabel">inspectDependentsFieldsLabel	^(#DependentsFields1p &lt;&lt; #dialogs &gt;&gt; 'DependentsFields (&lt;1p&gt;)') 		expandMacrosWith: DependentsFields size</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="enableConnections">enableConnections	"Do anything you might want to do to enable or disable external components.	 As a side-effect update the title.  This allows Parcels to change the Launcher's	 title."	self builder window label: self class title</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="openApplicationForClassNamed:">openApplicationForClassNamed: aSymbol	self openApplicationForClassNamed: aSymbol withSelector: #open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	toolDock release.	^super noticeOfWindowClose: aWindow</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="inspectUndeclaredLabel">inspectUndeclaredLabel	^(#Undeclared1p &lt;&lt; #dialogs &gt;&gt; 'Undeclared (&lt;1p&gt;)') 		expandMacrosWith: Undeclared size</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="applicationForClassNamed:do:">applicationForClassNamed: aSymbol do: aBlock	"Evaluate aBlock with the class named aSymbol, if it exists.  If it	 does not exist issue a warning."	| cl |	cl := aSymbol asQualifiedReference valueOrDo:		[^Dialog warn: ((#warnClassNotInSystem &lt;&lt; #dialogs &gt;&gt; 'Class &lt;1s&gt; not in system.')				expandMacrosWith: aSymbol asString)].	^aBlock value: cl</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="toolbarVisible">toolbarVisible	^builder window toolbarVisible</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="closeDialog">closeDialog	"The Launcher is uncloseable if it is the last open window"	| result labels values |	labels := OrderedCollection new.	values := OrderedCollection new.	ScheduledWindow scheduledControllers size = 1 ifFalse: 		[labels add: (#closeLauncherWindow &lt;&lt; #dialogs &gt;&gt; 'Close this Window').		values add: #close].	labels		add: (#SaveThenExit &lt;&lt; #dialogs &gt;&gt; 'Save then Exit');		add: (#ExitWithoutSaving &lt;&lt; #dialogs &gt;&gt; 'Exit without Saving');		add: (#Cancel &lt;&lt; #dialogs &gt;&gt; 'Cancel').	values addAll: #(#save #exit #cancel).	result := Dialog choose: (#closeOrExit &lt;&lt; #dialogs &gt;&gt; 'Close Window or Exit?')		fromVerticallyAlignedButtonsWithLabels: labels		values: values		default: #cancel		for: builder window.	result == #close ifTrue: [^true].	result == #exit ifTrue: [ObjectMemory quit].	result == #save ifTrue: [ObjectMemory saveDialogThenQuit: true].	^false</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="windowEvent:from:">windowEvent: anEvent from: aWindow	super windowEvent: anEvent from: aWindow.	(anEvent key == #newGraphicsDevice or: [anEvent key == #reopen])		ifTrue: [self reInstallInterface]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="updateStatusBar">updateStatusBar	(self widgetAt: #statusBar)		client: self statusBarSubapplication</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="browseAmbiguousReferencesLabel">browseAmbiguousReferencesLabel	^(#AmbiguousReferencesExist &lt;&lt; #menus &gt;&gt; '&amp;Ambiguous References&lt;1? (exist):&gt;')		expandMacrosWith: DuplicateBindingsError ambiguousReferencesExist</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="reInstallInterface">reInstallInterface	"Install the receiver's user interface again. Keep the same window. 	This happens when changing projects, restarting, and look and feel 	changes."	| spec window wid cp wid2 |	wid := builder componentAt: #textViewID.	wid container removeComponent: wid.	window := builder window.	window component release.	"event dispatcher has to be reset so that it doesn't hold on to	old objects, such as keyboardProcessor, etc"	window controller reInstallEventDispatcher.	builder := UIBuilder new.	builder setWindow: window.	builder source: self.	spec := self class interfaceSpecFor: #windowSpec.	self preBuildWith: builder.	builder add: spec.	wid2 := builder componentAt: #textViewID.	cp := wid2 container.	cp removeComponent: wid2.	wid2 release.	wid2 widget release.    "It doesn't get sent to the edge decorators component unless it has created the edge widgets"	cp addWrapper: wid.	builder componentAt: #textViewID put: wid.	wid widget controller keyboardProcessor: builder keyboardProcessor.	self postBuildWith: builder.	builder doFinalHookup.	self postOpenWith: builder.	(menuBar atNameKey: #toolbar) indication: builder window toolbarVisible.	^builder</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="rebuildMenu">rebuildMenu	menuBar notNil		ifTrue:			[self				rebuildMenu: menuBar				with: self class fullMenuBar				augmentTo: VisualLauncher]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="openApplicationForClassNamed:withSelector:">openApplicationForClassNamed: aSymbol withSelector: aSelectorSymbol	self applicationForClassNamed: aSymbol do: [:class| class perform: aSelectorSymbol]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="checkConsistency">checkConsistency	&lt;menuItem: 'Check Consistency'		icon: nil		nameKey: nil		menu: #(#menuBar #store)		position: 90.99&gt;	| strm warning |	strm := WriteStream on: String new.	Cursor wait showWhile: [ Registry checkConsistencyOn: strm ].	warning := strm contents.	Dialog warn: 		( warning size = 0			ifTrue: [ 'Everything checks out fine' ]			ifFalse: [ warning ] )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="switchDatabases">switchDatabases	&lt;menuItem: 'Switch Databases'		icon: nil		nameKey: nil		enablement: #areAttached		indication: nil		menu: #(#menuBar #store)		position: 90.08&gt;	Store.Registry switchDatabases.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="administration">administration	&lt;submenu: '&amp;Administration'		nameKey: #administration		menu: #(#menuBar #store)		position: 90.01&gt;</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="storeRepositoryLabelPart">storeRepositoryLabelPart	| profileName |	profileName := 'Repository'.	DbRegistry connectedProfile ifNotNil: 		[:profile | 		profile name ifNotNil: 			[:name | profileName := name]].	^profileName</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="openMergeTool">openMergeTool	&lt;menuItem: 'Merge &amp;Tool'		icon: nil		nameKey: nil		enablement: #areAttached		indication: nil		menu: #(#menuBar #store )		position: 20.09&gt;	Store.MergeTool open.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="toggleStoreRepositoryConnection">toggleStoreRepositoryConnection	&lt;menuItem: #toggleStoreConnectionItemLabel		nameKey: nil		menu: #(#menuBar #store)		position: 10.5&gt;	DbRegistry isConnected 		ifTrue: [DbRegistry disconnect]		ifFalse: [DbRegistry restoreConnection]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="browseSelector">browseSelector	&lt;menuItem: 'Selector...'		icon: nil		nameKey: #browseSelector		enablement: #areAttached		indication: nil		menu: #(#menuBar #store #browseDefinitions)		position: 90.03&gt;	| name list classes cls |	name := ParagraphEditor currentSelection.	name  := Dialog request: 'Selector'.	name isEmpty ifTrue: [ ^self ].	( name := Store.Method chooseNameMatching: name description: 'selector' ) == nil		ifTrue: [ ^nil ].	list := Store.Method allVersionsWithName: name.	classes := list collect: [ :m | m classNameWithMeta asSymbol ].	classes := classes asSet asSortedCollection asOrderedCollection.	cls := classes size == 1		ifTrue: [ classes first ]		ifFalse: 			[ Dialog 				choose: ( '#&lt;1s&gt; in which class...'  expandMacrosWith: name )				fromList: classes values: classes				lines: 10 cancel: [ ^nil ]				for: nil.			].	TabApplicationSystemBrowser 		browseVersionsOfMethodNamed: name		inClassNamed: cls asClassNameOnly		meta: cls namesMetaClass</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="packageOwnershipManagement">packageOwnershipManagement	&lt;menuItem: 'Package &amp;Ownership'		icon: nil		nameKey: #packageOwnershipManagement		enablement: #areAttached		indication: nil		menu: #(#menuBar #store #administration)		position: 90.05&gt;	Store.DbRegistry doIfImageAdministrator:		[ Store.PrivilegeGraph open ] label: 'manage ownership'.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="openRecentPublishedItems">openRecentPublishedItems	&lt;menuItem: '&amp;More Recently Published Items'		icon: nil		nameKey: nil		enablement: #areAttached		indication: nil		menu: #(#menuBar #store)		position: 20.05&gt;	| list list2 |	DbRegistry doIfOnlineImage: 		[ list := (Registry allPackagesWithNewerInDB collect: [ :pkg | pkg name ]) asSet.		list2  := (Registry allBundlesWithNewerInDB collect: [ :bundle | bundle name ]) asSet.		Store.PublishedPundlesTool openOnBundles: list2 packages: list title: 'More Recently Published Items'		]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="openLoadedItems">openLoadedItems	&lt;menuItem: '&amp;Loaded Items'		icon: nil		nameKey: nil		menu: #(#menuBar #store)		position: 20.01&gt;	Store.PundlesTool openOnAllLoadedPundles</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="currentPackage">currentPackage	&lt;menuItem: '&amp;Current Package...'		icon: nil 		nameKey: #currentPackage		menu: #(#menuBar #store)		position: 50.05&gt;	| pkg |	pkg := Registry currentPackage.	pkg := PackageChooser		chooseOrAdd: ( 'Current Package: ', pkg name )		 withDefault: pkg 		onCancelDo: [ ^self ].	Registry currentPackage: pkg.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="browseStatic">browseStatic	&lt;menuItem: 'Shared Variable...'		icon: nil		nameKey: #browseStatic		enablement: #areAttached		indication: nil		menu: #(#menuBar #store #browseDefinitions)		position: 90.05&gt;	| name list owners owner |	name := ParagraphEditor currentSelection.	name  := Dialog request: 'Shared Variable'.	name isEmpty ifTrue: [ ^self ].	( name := Store.DataElement chooseNameMatching: name description: 'shared variable' ) == nil		ifTrue: [ ^nil ].	list := Store.DataElement allVersionsWithName: name.	owners := list collect: [ :m | m ownerName asSymbol ].	owners := owners asSet asSortedCollection asOrderedCollection.	owner := owners size == 1		ifTrue: [ owners first ]		ifFalse: 			[ Dialog 				choose: ( '#&lt;1s&gt; in which class...'  expandMacrosWith: name )				fromList: owners values: owners				lines: 10 cancel: [ ^nil ]				for: nil.			].	TabApplicationSystemBrowser 		browseVersionsOfStaticNamed: name		inNamed: owner</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="browseClassDefinitions">browseClassDefinitions	&lt;menuItem: 'Class named...'		icon: nil		nameKey: #browseClassDefinitions		enablement: #areAttached		indication: nil		menu: #(#menuBar #store #browseDefinitions)		position: 90.03&gt;	| name list |	name  := Dialog request: 'Class name'.	name isEmpty ifTrue: [ ^self ].	( name := Store.ClassRecord chooseNameMatching: name description: 'class' ) == nil		ifTrue: [ ^self ].	list := Store.ClassRecord allVersionsNamed: name.	list isEmpty ifTrue: [ ^Dialog warn: name, ' has not been published.' ].	TabApplicationSystemBrowser browseNamespaceOrClassList: list.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="browseDefinitions">browseDefinitions	&lt;submenu: 'Browse &amp;Definitions'		nameKey: #browseDefinitions		menu: #(#menuBar #store)		position: 20.09&gt;</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="openGarbageCollectionDialog">openGarbageCollectionDialog	&lt;menuItem: '&amp;Garbage Collection'		icon: nil		nameKey: nil		enablement: #areAttached		indication: nil		menu: #(#menuBar #store #administration)		position: 90.99&gt;	Store.DbRegistry doIfImageAdministrator:		[ Store.GarbageCollectSpecEditor open ] label: 'run garbage collection'.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="toggleStoreConnectionItemLabel">toggleStoreConnectionItemLabel	^DbRegistry isConnected		ifTrue:  ['Disconnect from ', self storeRepositoryLabelPart]		ifFalse: ['Connect to Repository...']</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="removeDatabaseLinks">removeDatabaseLinks	&lt;menuItem: 'Remove Database Links...'		icon: nil		nameKey: nil		menu: #(#menuBar #store)		position: 90.10&gt;	Store.Registry removeDatabaseLinks.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="browseNameSpaceDefinitions">browseNameSpaceDefinitions	&lt;menuItem: 'NameSpace named...'		icon: nil		nameKey: #browseNameSpaceDefinitions		enablement: #areAttached		indication: nil		menu: #(#menuBar #store #browseDefinitions)		position: 90.02&gt;	| name list |	name  := Dialog request: 'NameSpace name'.	name isEmpty ifTrue: [ ^self ].	( name := Store.NameSpaceRecord chooseNameMatching: name description: 'namespace' ) == nil		ifTrue: [ ^self ].	list := Store.NameSpaceRecord allVersionsNamed: name.	list isEmpty ifTrue: [ ^Dialog warn: name, ' has not been published.' ].	TabApplicationSystemBrowser browseNamespaceOrClassList: list.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="renameBundleInDatabase">renameBundleInDatabase	&lt;menuItem: 'Rename Bundle in Database...'		icon: nil		nameKey: #renameBundle		enablement: #areAttached		indication: nil		menu: #(#menuBar #store #administration)		position: 90.10&gt;	Store.DbRegistry doIfImageAdministrator:		[ ( Dialog confirm: 'Renaming a bundle in the database will require all existing images to rename to match.&lt;ntttttttt&gt;Continue?' expandMacros )			ifFalse: [ ^self ].		Store.Bundle rename.		] label: 'rename bundles'.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="openPublishedItems">openPublishedItems	&lt;menuItem: '&amp;Published Items'		icon: nil		nameKey: nil		enablement: #areAttached		indication: nil		menu: #(#menuBar #store)		position: 20.02&gt;	DbRegistry doIfOnlineImage: 		[ Store.PublishedPundlesTool openOnAllPublishedPundles ]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="browseUnpackaged">browseUnpackaged	&lt;menuItem: 'Browse &amp;Unpackaged'		icon: nil		nameKey: nil		menu: #(#menuBar #store)		position: 20.07&gt;	Store.PundleAccess moveUnpackagedToNullPackage.	Refactory.Browser.RefactoringBrowser openOnEnvironment:  (Refactory.Browser.PundleEnvironment new pundles: (List with: Store.Registry nullPackage))</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="userGroupManagement">userGroupManagement	&lt;menuItem: 'User/Group &amp;Management'		icon: nil		nameKey: #userGroupManagement		enablement: #areAttached		indication: nil		menu: #(#menuBar #store #administration)		position: 90.03&gt;	Store.DbRegistry doIfImageAdministrator:		[ Store.GroupGraph open ] label: 'manage user/groups'.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="openUISettings">openUISettings	&lt;menuItem: '&amp;Settings'		icon: nil		nameKey: nil		menu: #(#menuBar #store)		position: 50.01&gt;	SettingsManager 		openOrRaise: VisualWorksSettings 		selectPage: #(#store)</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="bundleOwnershipManagement">bundleOwnershipManagement	&lt;menuItem: '&amp;Bundle Ownership'		icon: nil		nameKey: #bundleOwnershipManagement		enablement: #areAttached		indication: nil		menu: #(#menuBar #store #administration)		position: 90.05&gt;	Store.DbRegistry doIfImageAdministrator:		[ Store.BundlePrivilegeGraph open ] label: 'manage bundle ownership'.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="renamePackageInDatabase">renamePackageInDatabase	&lt;menuItem: 'Rename Package in Database...'		icon: nil		nameKey: #renamePackage		enablement: #areAttached		indication: nil		menu: #(#menuBar #store #administration)		position: 90.11&gt;	Store.DbRegistry doIfImageAdministrator:		[ ( Dialog confirm: 'Renaming a package in the database will require all existing images to rename to match.&lt;ntttttttt&gt;Continue?' expandMacros )			ifFalse: [ ^self ].		Store.Package rename		] label: 'rename packages'.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="Robot - Segunda Practica" selector="store">store	&lt;submenu: 'St&amp;ore'		nameKey: #store		menu: #(#menuBar)		position: 10.035&gt;</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store</category><body package="Robot - Segunda Practica" selector="openLoadedPundleGraph">openLoadedPundleGraph	"obsolete?"	Store.PundleGraph openOnImage</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store</category><body package="Robot - Segunda Practica" selector="notAttached">notAttached	^self areAttached not</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store</category><body package="Robot - Segunda Practica" selector="areAttached">areAttached	^DbRegistry isConnected</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>interface opening</category><body package="Robot - Segunda Practica" selector="postBuildWith:">postBuildWith: aBuilder 	"Do anything you might want to do prior to the builder constructing a 	canvas."	super postBuildWith: aBuilder.	builder window icon: (Icon constantNamed: #launcher).	builder window application: self.	builder window sendWindowEvents: #(#newGraphicsDevice #reopen).	self enableConnections.	(builder componentAt: #textViewID) widgetState canTakeFocus: true; isTabStop: true.	aBuilder sendKeyboardTo: (builder componentAt: #textViewID) widget</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>interface opening</category><body package="Robot - Segunda Practica" selector="postOpenWith:">postOpenWith: aBuilder 	builder window windowManager activeControllerProcess 		environmentAt: #WindowManagerUsagePolicy		put: MakeNewWindowManagerUsagePolicy new.	self changed: #newInterface.		self updateStatusBar</body></methods><methods><class-id>Robot class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="position:">position: aPosition		^super new initialize; position: aPosition; yourself.</body></methods><methods><class-id>Robot class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="new">new		^self error: 'Robots should be created using the message #position:'.</body></methods><methods><class-id>Robot</class-id> <category>printing</category><body package="Robot - Segunda Practica" selector="printOn:">printOn: aStream		aStream nextPutAll: 'Robot'.		aStream cr.		aStream nextPutAll: 'at '.		self position printOn: aStream.		aStream cr.		aStream nextPutAll: 'direction '.		self direction printOn: aStream.</body></methods><methods><class-id>Robot</class-id> <category>positioning</category><body package="Robot - Segunda Practica" selector="move:">move: aDistance		self battery charge &gt;= aDistance abs		ifTrue:			[self state move: aDistance.			self battery charge: self battery charge - aDistance abs].</body></methods><methods><class-id>Robot</class-id> <category>private - positioning</category><body package="Robot - Segunda Practica" selector="doMove:">doMove: aDistance		self position: (self position + (Point r: aDistance theta: ((Float pi / 180) * (self direction negated - 90)))) rounded</body></methods><methods><class-id>Robot</class-id> <category>direction</category><body package="Robot - Segunda Practica" selector="south">south		direction:=180.</body></methods><methods><class-id>Robot</class-id> <category>direction</category><body package="Robot - Segunda Practica" selector="north">north		direction:=0.</body></methods><methods><class-id>Robot</class-id> <category>direction</category><body package="Robot - Segunda Practica" selector="direction">direction		^direction.</body></methods><methods><class-id>Robot</class-id> <category>direction</category><body package="Robot - Segunda Practica" selector="east">east		direction:=270.</body></methods><methods><class-id>Robot</class-id> <category>direction</category><body package="Robot - Segunda Practica" selector="west">west		direction:=90.</body></methods><methods><class-id>Robot</class-id> <category>brush</category><body package="Robot - Segunda Practica" selector="brushDown">brushDown		self state lowerBrush.</body></methods><methods><class-id>Robot</class-id> <category>brush</category><body package="Robot - Segunda Practica" selector="isBrushUp">isBrushUp		^self state isBrushUp.</body></methods><methods><class-id>Robot</class-id> <category>brush</category><body package="Robot - Segunda Practica" selector="isBrushDown">isBrushDown		^self state isBrushDown.</body></methods><methods><class-id>Robot</class-id> <category>brush</category><body package="Robot - Segunda Practica" selector="brushUp">brushUp		self state liftBrush.</body></methods><methods><class-id>Robot</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="battery">battery		^battery.</body></methods><methods><class-id>Robot</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="position:">position: aPosition 		self state position: aPosition</body></methods><methods><class-id>Robot</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="world">world		^world.</body></methods><methods><class-id>Robot</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="position">position		^position.</body></methods><methods><class-id>Robot</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="world:">world: aWorld 		world:=aWorld.</body></methods><methods><class-id>Robot</class-id> <category>initialize</category><body package="Robot - Segunda Practica" selector="initialize">initialize		self state: (BrushUp robot:self).		self battery: (Battery capacity: 1000).		self position: 0@0.		self north.</body></methods><methods><class-id>Robot</class-id> <category>path</category><body package="Robot - Segunda Practica" selector="clearPaths">clearPaths"		self currentPath clear.		self changed: #clearPaths with: self."</body></methods><methods><class-id>Robot</class-id> <category>path</category><body package="Robot - Segunda Practica" selector="recordPosition">recordPosition		self currentPath addPoint: self position.</body></methods><methods><class-id>Robot</class-id> <category>path</category><body package="Robot - Segunda Practica" selector="endPath">endPath		self currentPath: nil.</body></methods><methods><class-id>Robot</class-id> <category>path</category><body package="Robot - Segunda Practica" selector="startNewPath">startNewPath		self currentPath: Path new.		self recordPosition.		self world addPath: self currentPath for: self.</body></methods><methods><class-id>Robot</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="setPosition:">setPosition: aPosition 		position:=aPosition.		self changed: #position.</body></methods><methods><class-id>Robot</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="state:">state: aState 		state:=aState.</body></methods><methods><class-id>Robot</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="direction:">direction: aDirection 		direction:=aDirection.		self changed: #direction.</body></methods><methods><class-id>Robot</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="currentPath:">currentPath: aCurrentPath 		currentPath:=aCurrentPath.</body></methods><methods><class-id>Robot</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="state">state		^state.</body></methods><methods><class-id>Robot</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="battery:">battery: aBattery 		battery:=aBattery.</body></methods><methods><class-id>Robot</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="currentPath">currentPath		^currentPath.</body></methods><methods><class-id>WorldTempRobotInspector class</class-id> <category>interface specs</category><body package="Robot - Segunda Practica" selector="unsegmentedSpec">unsegmentedSpec	"Tools.UIPainter new openOnClass: self andSelector: #unsegmentedSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 562 362 869 697 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEntry: #dragOverSelector 						#dragOver: #dragStartSelector 						#doDrag: #dropSelector 						#drop: #dragExitSelector 						#dragExit: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 0.4 0 1 ) 					#name: #fieldList 					#flags: 15 					#model: #fieldListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #dive 						#requestValueChangeSelector: #changeRequest ) 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 0 1 0 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: 						#requestValueChangeSelector: 						#textAcceptAllowed: ) 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>InMotionBrushDown</class-id> <category>robot functions</category><body package="Robot - Segunda Practica" selector="move:">move: aDistance        ((self robot world paths) includes: self robot currentPath)            ifFalse:[self robot startNewPath.].        self robot doMove: aDistance.        self robot recordPosition.</body></methods><methods><class-id>InMotionBrushDown</class-id> <category>state changes</category><body package="Robot - Segunda Practica" selector="liftBrush">liftBrush		self robot endPath.		super liftBrush.</body></methods><methods><class-id>InstanceClassBehaviorInspector class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="methodListMenu">methodListMenu	"Tools.MenuEditor new openOnClass: self andSelector: #methodListMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #SendIt 					#defaultString: 'Sen&amp;d It' 					#catalogID: #menus ) 				#nameKey: #methodsSendIt 				#value: #sendIt 				#enablementSelector: #singleUnaryMethodIsSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Remove 					#defaultString: '&amp;Remove' 					#catalogID: #menus ) 				#value: #removeMethods 				#enablementSelector: #canRemoveMethods ) ) #(1 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>InstanceClassBehaviorInspector</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="buildMethodListMenu">buildMethodListMenu	| menu |	menu := self class methodListMenu.	menu		augmentFrom: self class		to: InstanceClassBehaviorInspector		menuName: #methodList		for: self.	^menu</body></methods><methods><class-id>SimpleClassCreationDialog class</class-id> <category>interface specs</category><body package="Robot - Segunda Practica" selector="detailsSpec">detailsSpec	"Tools.UIPainter new openOnClass: self andSelector: #detailsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #NewClass 				#defaultString: 'New Class' 				#catalogID: #dialogs ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 512 384 972 638 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 84 0 -10 1 109 0 ) 					#name: #nameField 					#model: #nameHolder ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 109 0 0 1 ) 					#name: #nameLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #NameC 						#defaultString: 'Name:' 						#catalogID: #labels ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 114 0 -10 1 139 0 ) 					#name: #superclassModule 					#flags: 32 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec 					#clientKey: #superclassModule ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 139 0 0 1 ) 					#name: #superclassLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #SuperclassC 						#defaultString: 'Superclass:' 						#catalogID: #labels ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 144 0 -10 1 169 0 ) 					#name: #instanceVariablesField 					#model: #instanceVariablesHolder ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 169 0 0 1 ) 					#name: #instanceVariablesLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #InstanceVariablesC 						#defaultString: 'Instance Variables:' 						#catalogID: #labels ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 10 0 -10 1 70 0 ) 					#name: #locationSubcanvas 					#flags: 32 					#majorKey: #{Tools.DefinitionCreationDialog} 					#minorKey: #locationSpecWithPackage ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 74 0 -10 1 76 0 ) 					#name: #divider ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 138 0 87 0 18 18 ) 					#name: #nameErrorLabel 					#flags: 16 					#label: #errorIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 138 0 117 0 18 18 ) 					#name: #superclassErrorLabel 					#flags: 16 					#label: #errorIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 138 0 147 0 18 18 ) 					#name: #instanceVariablesErrorLabel 					#flags: 16 					#label: #errorIcon 					#hasCharacterOrientedLabel: false ) ) ) )</body></methods><methods><class-id>SimpleClassCreationDialog</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="postOpenWith:">postOpenWith: aBuilder 	super postOpenWith: aBuilder.	packageModule entryHolder value: 'Robot - Segunda Practica'</body></methods><methods><class-id>SimpleClassCreationDialog</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="pageDefinitions">pageDefinitions	^Array		with: (#BasicCDLabel &lt;&lt; #labels &gt;&gt; 'Basic') -&gt; #installDetailsPage.</body></methods><methods><class-id>SimpleClassCreationDialog</class-id> <category>validation</category><body package="Robot - Segunda Practica" selector="validateEverything">validateEverything	| firstPageOK |	firstPageOK := self 		validateInView: (lastSubBuilder componentAt: #nameField)		indicator: (lastSubBuilder componentAt: #nameErrorLabel)		using: #validateNameIfFails:.	firstPageOK := firstPageOK &amp; (self 		validateInView: superclassModule entryWidget		indicator: (lastSubBuilder componentAt: #superclassErrorLabel)		using: #validateSuperclassIfFails:).	firstPageOK := firstPageOK &amp; (self 		validateInView: packageModule entryWidget		indicator: (lastSubBuilder componentAt: #packageErrorLabel)		using: #validatePackageIfFails:).	firstPageOK := firstPageOK &amp; (self 		validateInView: categoryModule entryWidget		indicator: (lastSubBuilder componentAt: #categoryErrorLabel)		using: #validateCategoryIfFails:).	firstPageOK := firstPageOK &amp; (self 		validateInView: namespaceModule entryWidget		indicator: (lastSubBuilder componentAt: #namespaceErrorLabel)		using: #validateNameSpaceIfFails:).	firstPageOK := firstPageOK &amp; (self 		validateInView: (lastSubBuilder componentAt: #instanceVariablesField)		indicator: (lastSubBuilder componentAt: #instanceVariablesErrorLabel)		using: #validateInstanceVariablesIfFails:).	self showError: firstPageOK not inTabLabel: 1.		firstPageOK 		ifTrue: [self enableAccept]		ifFalse: [self disableAccept]</body></methods><methods><class-id>RobotState class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="robot:">robot: aRobot		^super new robot: aRobot.</body></methods><methods><class-id>RobotWorld</class-id> <category>path management</category><body package="Robot - Segunda Practica" selector="clearPaths">clearPaths		self paths: OrderedCollection new.		self changed: #pathsCleared.</body></methods><methods><class-id>RobotWorld</class-id> <category>path management</category><body package="Robot - Segunda Practica" selector="addPath:for:">addPath: aPath for: aRobot		self paths add: aPath.		self changed: #newPath with: (Array with:aPath with: aRobot).</body></methods><methods><class-id>RobotWorld</class-id> <category>path management</category><body package="Robot - Segunda Practica" selector="addPath:">addPath: aPath		^self error: 'NOOO'."		self paths add: aPath.		self changed: #newPath with: aPath."</body></methods><methods><class-id>RobotWorld</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="clear">clear		self clearPaths.		self clearRobots.</body></methods><methods><class-id>RobotWorld</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="namedRobots">namedRobots		^namedRobots.</body></methods><methods><class-id>RobotWorld</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="robots">robots		^self namedRobots values.</body></methods><methods><class-id>RobotWorld</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="paths">paths		^paths.</body></methods><methods><class-id>RobotWorld</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="namedRobots:">namedRobots: aNamedRobots 		namedRobots:=aNamedRobots.</body></methods><methods><class-id>RobotWorld</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="paths:">paths: aPaths 		paths:=aPaths.</body></methods><methods><class-id>RobotWorld</class-id> <category>robot management</category><body package="Robot - Segunda Practica" selector="addRobot:named:">addRobot: aRobot named: aName		self namedRobots at: aName put: aRobot.		aRobot world: self.		self changed: #robotAdded with: aRobot.</body></methods><methods><class-id>RobotWorld</class-id> <category>robot management</category><body package="Robot - Segunda Practica" selector="getRobotNamed:">getRobotNamed: aName		^self namedRobots at: aName.</body></methods><methods><class-id>RobotWorld</class-id> <category>robot management</category><body package="Robot - Segunda Practica" selector="removeRobotNamed:">removeRobotNamed: aName		| r |		r:=self namedRobots removeKey: aName.		r world: nil.		self changed: #robotRemoved with: r.</body></methods><methods><class-id>RobotWorld</class-id> <category>robot management</category><body package="Robot - Segunda Practica" selector="getRobotName:">getRobotName: aRobot		^self namedRobots keyAtValue: aRobot.</body></methods><methods><class-id>RobotWorld</class-id> <category>robot management</category><body package="Robot - Segunda Practica" selector="clearRobots">clearRobots		self namedRobots keys do:[:name | self removeRobotNamed: name].</body></methods><methods><class-id>RobotWorld</class-id> <category>initialize</category><body package="Robot - Segunda Practica" selector="initialize">initialize		self namedRobots: Dictionary new.		self paths: OrderedCollection new.</body></methods><methods><class-id>NewRobot class</class-id> <category>interface specs</category><body package="Robot - Segunda Practica" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 'Agregar Robot' 			#min: #(#{Core.Point} 248 137 ) 			#max: #(#{Core.Point} 248 137 ) 			#bounds: #(#{Graphics.Rectangle} 720 450 968 587 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 7 10 ) 					#name: #Label1 					#label: 'Nombre Variable' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 28 61 ) 					#name: #Label2 					#label: 'X' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 127 61 ) 					#name: #Label3 					#label: 'Y' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 9 0 40 0 -9 1 93 0 ) 					#name: #GroupBox1 					#label: 'PosiciÃ³n' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 105 0 10 0 -9 1 32 0 ) 					#name: #InputField1 					#model: #name ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 46 61 95 81 ) 					#name: #InputField2 					#model: #xPos 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 145 61 194 81 ) 					#name: #InputField3 					#model: #yPos 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 15 104 87 129 ) 					#name: #ActionButton1 					#model: #createRobot 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 159 104 231 129 ) 					#name: #ActionButton2 					#model: #cancel 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="left:right:top:bottom:">left: leftNumber right: rightNumber top: topNumber bottom: bottomNumber 	"Answer an instance of the receiver whose left, right, top, and bottom coordinates are 	determined by the arguments."	^self origin: leftNumber @ topNumber corner: rightNumber @ bottomNumber</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="decodeFromLiteralArray:">decodeFromLiteralArray: anArray	"Return an instance based on the information encoded in anArray."	^(anArray at: 2) @ (anArray at: 3) corner: (anArray at: 4)@(anArray at: 5)</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="fromUser:phase:">fromUser: gridPoint phase: phasePoint 	"Answer an instance of the receiver that is determined by having the 	user designate the top left and bottom right corners. The gridding for 	user selection is represented by gridPoint and phasePoint, where 	gridPoint specifies the grid spacing and phasePoint specifies the 	grid alignment."	"Rectangle fromUser: 100@100 phase: 7@7."	^Cursor crossHair showWhile: 		[| originPoint rectangle |		originPoint := Screen default						dragShape: (0 @ 0 extent: gridPoint) asPointArray						offset: 0 @ 0						gridPhase: phasePoint						gridSpacing: gridPoint						boundedBy: nil						whileButton: 0						isDown: false.		#{ScheduledControllers} ifDefinedDo: [:sc| sc checkForEvents].		rectangle := Screen default						resizeRectangle: (Rectangle origin: originPoint extent: gridPoint)						minimumExtent: gridPoint						resizeIncrement: gridPoint						boundedBy: nil						whileButton: 0						isDown: true.		#{ScheduledControllers} ifDefinedDo: [:sc| sc checkForEvents].		rectangle]</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="origin:corner:">origin: originPoint corner: cornerPoint 	"Answer an instance of the receiver whose corners (top left and bottom right) are	determined by the arguments."	^self new origin: originPoint corner: cornerPoint</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="left:top:width:height:">left: left top: top width: width height: height	"Answer an instance of the receiver with the given top and left edge, width, and height."	^self left: left right: left + width top: top bottom: top + height</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="fromUser:">fromUser: gridPoint	"Answer an instance of the receiver that is determined by having the	user designate the top left and bottom right corners.  The gridding for	user selection is gridPoint."	^self fromUser: gridPoint phase: 0@0	"Rectangle fromUser: 100@100."</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="originFromUser:grid:">originFromUser: extentPoint grid: scalePoint	"Answer an instance of the receiver that is determined by having the 	user designate the top left corner.  The width and height are 	determined by extentPoint.  The gridding for user selection is 	scalePoint. Assume that the sender has determined an extent 	that is a proper multiple of scalePoint.  Assume that a button is	already down; the user is allowed to drag an outline of the rectangle	while any button is down."	^self originFromUser: extentPoint grid: scalePoint whileButton: 0 isDown: true</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="originFromUser:">originFromUser: extentPoint 	"Answer an instance of the receiver that is determined by having the	user designate the top left corner.  The width and height are determined	by extentPoint.  The gridding for user selection is 1@1."	^self originFromUser: extentPoint grid: 1 @ 1</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="origin:extent:">origin: originPoint extent: extentPoint 	"Answer an instance of the receiver whose top left corner is originPoint and width by	height is extentPoint."	^self new origin: originPoint extent: extentPoint</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="fromUser">fromUser	"Answer an instance of the receiver that is determined by having the	user designate the top left and bottom right corners."	^self fromUser: 1@1</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="originFromUser:grid:whileButton:isDown:">originFromUser: extentPoint grid: scalePoint whileButton: button isDown: aBoolean 	"Answer an instance of the receiver that is determined by having the 	user designate the top left corner while the specified button (1 = 	left button, 2 = middle button, 3 = right button) is either down 	(aBoolean is true) or up (aBoolean is false). If button = 0, the user 	designates the origin while either any button is down (aBoolean is 	true) or all are up (aBoolean is false). The width and height are 	determined by extentPoint. The gridding for user selection is 	scalePoint. Assume that the sender has determined an extent that 	is a proper multiple of scalePoint. Assume that a button is already 	down; the user is allowed to drag an outline of the rectangle while 	any button is down."	| position |	position := Screen default				dragShape: (self origin: 0 @ 0 extent: extentPoint) asPointArray				offset: 0 @ 0				gridPhase: 0 @ 0				gridSpacing: scalePoint				boundedBy: nil				whileButton: button				isDown: aBoolean.	^self origin: position extent: extentPoint</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="vertex:vertex:">vertex: vertexPoint1 vertex: vertexPoint2 	"Answer an instance of the receiver whose diagonally opposite vertices are specified by the arguments."	^self		origin: (vertexPoint1 min: vertexPoint2)		corner: (vertexPoint1 max: vertexPoint2)</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="origin:width:height:">origin: originPoint width: width height: height	"Answer an instance of the receiver whose top left corner is originPoint and width by height is as given."	^self origin: originPoint corner: (originPoint x + width)@(originPoint y + height)</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="new">new	"Override for backwards compatability"	^self basicNew</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="containsPoint:">containsPoint: aPoint 	"Answer whether the argument aPoint is within the receiver."	^origin &lt;= aPoint and: [aPoint &lt; corner]</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="sharesSideWith:">sharesSideWith: aRectangle		^(((self top = aRectangle top or:[self top = aRectangle bottom])		 or:[(self bottom = aRectangle top or:[self bottom = aRectangle bottom])])	 	 or:[(self left = aRectangle left or:[self left = aRectangle right])])		 or:[(self right = aRectangle left or:[self right = aRectangle left])].</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="regionIntersects:">regionIntersects: aRectangle	"Answer whether the receiver's, display area intersects aRectangle under filling."	^self intersects: aRectangle</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="contains:">contains: aRectangle 	"Answer whether the receiver is equal to aRectangle or whether aRectangle 	is contained within the receiver."	^aRectangle origin &gt;= origin and: [aRectangle corner &lt;= corner]</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="intersects:">intersects: aRectangle 	"Answer whether aRectangle intersects the receiver anywhere."	^ origin &lt; aRectangle corner		and: [aRectangle origin &lt;  corner		and: [ origin &lt; corner		and: [aRectangle origin &lt; aRectangle corner]]]</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="outlineIntersects:">outlineIntersects: aRectangle	"Answer whether the receiver's display area intersects aRectangle 	under stroking."	"Eliminate the trivial failures"	(super outlineIntersects: aRectangle)		ifFalse:	[^false].	^self class vertices: self asPointArray intersectsRectangle: aRectangle</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="canBeFilled">canBeFilled	"Answer whether filling makes sense for this Geometric"	^true</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>converting</category><body package="Robot - Segunda Practica" selector="asLayoutFrameWith:">asLayoutFrameWith: aRectangle	"Answer a LayoutFrame appropriate for the receiver"	^self asOffsetLayout</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>converting</category><body package="Robot - Segunda Practica" selector="asAlignmentOrigin">asAlignmentOrigin	"Answer a LayoutFrame appropriate for the receiver"	^AlignmentOrigin new		leftOffset: self left;		topOffset: self top.</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>converting</category><body package="Robot - Segunda Practica" selector="asPointArray">asPointArray	"Answer a point array representing myself as a polyline."	| polyline |	polyline := Array new: 5.	polyline		at: 1 put: self topLeft;		at: 2 put: self topRight;		at: 3 put: self bottomRight;		at: 4 put: self bottomLeft;		at: 5 put: self topLeft.	^polyline</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>converting</category><body package="Robot - Segunda Practica" selector="asOffsetLayout">asOffsetLayout	"Answer a LayoutFrame based on the reciever as offset values for the LayoutFrame."	| layout |	layout := LayoutFrame new.	layout leftOffset: self left.	layout rightOffset: self right.	layout topOffset: self top.	layout bottomOffset: self bottom.	^layout</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>converting</category><body package="Robot - Segunda Practica" selector="compute:whenRelativeTo:preferred:">compute: aRectangle whenRelativeTo: containingRectangle preferred: preferredRectangle	"Answer a new instance of the receiver's class that computes aRectangle	when sent  rectangleRelativeTo: containingRectangle preferred: preferredRectangle"	^self asLayout 		compute: aRectangle		whenRelativeTo: containingRectangle		preferred: preferredRectangle</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>converting</category><body package="Robot - Segunda Practica" selector="literalArrayEncoding">literalArrayEncoding	"Return a literal suitable for reconstituting the receiver."	| a |	a := Array new: 5.	a at: 1 put: self class fullyQualifiedReference.	a at: 2 put: self left literalArrayEncoding.	a at: 3 put: self top literalArrayEncoding.	a at: 4 put: self right literalArrayEncoding.	a at: 5 put: self bottom literalArrayEncoding.	^a</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>converting</category><body package="Robot - Segunda Practica" selector="rectangleRelativeTo:preferred:">rectangleRelativeTo: aRectangle preferred: aPreferredRectangle	"Answer a rectangular object that is relative to aRectangle based on	the receiver's constraints and aPreferredRectangle."	^self asLayout rectangleRelativeTo: aRectangle preferred: aPreferredRectangle</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>converting</category><body package="Robot - Segunda Practica" selector="asFractionalLayout">asFractionalLayout	"Answer a LayoutFrame based on the reciever as fractional values for the LayoutFrame."	| layout |	layout := LayoutFrame new.	layout leftFraction: self left.	layout rightFraction: self right.	layout topFraction: self top.	layout bottomFraction: self bottom.	^layout</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>converting</category><body package="Robot - Segunda Practica" selector="asPolyline">asPolyline	"Answer a point array representing myself as a polyline."	| polyline |	polyline := Array new: 5.	polyline		at: 1 put: self topLeft;		at: 2 put: self topRight;		at: 3 put: self bottomRight;		at: 4 put: self bottomLeft;		at: 5 put: self topLeft.	^Polyline vertices: polyline</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>converting</category><body package="Robot - Segunda Practica" selector="asLayout">asLayout	"Answer a LayoutFrame appropriate for the receiver as fractional values (if all values are between 0 and 1) or offset values otherwise."	^((self left between: 0 and: 1)		and: [(self top between: 0 and: 1)		and: [(self right between: 0 and: 1)		and: [self bottom between: 0 and: 1]]])		ifTrue: [self asFractionalLayout]		ifFalse: [self asOffsetLayout].</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>converting</category><body package="Robot - Segunda Practica" selector="asOriginSizeLayoutWith:">asOriginSizeLayoutWith: aRectangle	"Answer a LayoutSizedOrigin appropriate for the receiver"	^LayoutSizedOrigin new		leftOffset: self left;		topOffset: self top;		width: self width;		height: self height</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>printing</category><body package="Robot - Segunda Practica" selector="printOn:">printOn: aStream 	"Append to the argument aStream a sequence of characters that identifies the receiver.	The general format is		originPoint corner: cornerPoint."	origin printOn: aStream.	aStream nextPutAll: ' corner: '.	corner printOn: aStream</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>printing</category><body package="Robot - Segunda Practica" selector="storeOn:">storeOn: aStream	"Append to the argument aStream a sequence of characters that is an expression 	whose evaluation creates a rectangle similar to the receiver.  The general format	for rectangles is		( class-name origin: aNumber corner: aNumber)"	aStream nextPut: $(;		store: self class;		nextPutAll: ' origin: ';		store: origin;		nextPutAll: ' corner: ';		store: corner;		nextPut: $).</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="Robot - Segunda Practica" selector="areasOutside:">areasOutside: aRectangle	"Answer a Collection of Rectangles comprising the parts of the	receiver that do not lie within aRectangle."	| areas yOrigin yCorner |		"Make sure the intersection is non-empty"	(self intersects: aRectangle)		ifFalse: [^Array with: self].	areas := OrderedCollection new.	aRectangle origin y &gt; origin y		ifTrue: [areas add: (origin corner: corner x @ (yOrigin := aRectangle origin y))]		ifFalse: [yOrigin := origin y].	aRectangle corner y &lt; corner y		ifTrue: [areas add: (origin x @ (yCorner := aRectangle corner y) corner: corner)]		ifFalse: [yCorner := corner y].	aRectangle origin x &gt; origin x 		ifTrue: [areas add: (origin x @ yOrigin corner: aRectangle origin x @ yCorner)].	aRectangle corner x &lt; corner x 		ifTrue: [areas add: (aRectangle corner x @ yOrigin corner: corner x @ yCorner)].	^areas</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="Robot - Segunda Practica" selector="intersect:">intersect: aRectangle 	"Answer a Rectangle that is the area in which the receiver overlaps with 	aRectangle. Note, if the receiver and the argument do not intersect, then	the resulting rectangle will be degenerate, i.e. it will have negative width 	or height."	^self species 		origin: (origin max: aRectangle origin)		corner: (corner min: aRectangle corner)</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="Robot - Segunda Practica" selector="rectangleRelativeTo:">rectangleRelativeTo: aRectangle 	"The receiver is being used as a relative rectangle.  If the receiver's left, right, top, and bottom	are all &lt;= 1.0 then Answer a rectangle relative to aRectangle using the receiver's left, right, top,	 and bottom as scaling factors otherwise just translate into the coordinate system of aRectangle."	"Overloaded but usefull."	| left right top bottom width height |	width := aRectangle width.	height := aRectangle height.	(1.0 &gt;= self left and: [1.0 &gt;= self top and: [1.0 &gt;= self right and: [1.0 &gt;= self bottom]]])		ifTrue: [left := aRectangle left + (width * self left).				right := aRectangle left + (width * self right).				top := aRectangle top + (height * self top).				bottom := aRectangle top + (height * self bottom)]		ifFalse: [left := aRectangle left + self left.				right := aRectangle left + self right.				top := aRectangle top + self top.				bottom := aRectangle top + self bottom].	^self class		left: left rounded		right: right rounded		top: top rounded		bottom: bottom rounded</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="Robot - Segunda Practica" selector="insetBy:">insetBy: delta 	"Answer a Rectangle that is inset from the receiver by delta.   	 delta is a Rectangle, Point, or scalar."	^delta insetRectangle: self</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="Robot - Segunda Practica" selector="amountToTranslateWithin:">amountToTranslateWithin: aRectangle	"Answer a Point, delta, such that the origin of the receiver translated 	by delta will lie within aRectangle, and the translated rectangle's corner 	will also lie within aRectangle, if it will fit ."	| deltaX deltaY |	deltaX := deltaY := 0.	self right &gt; aRectangle right ifTrue: [deltaX := aRectangle right - self right].	self bottom &gt; aRectangle bottom ifTrue: [deltaY := aRectangle bottom - self bottom].	self left + deltaX &lt; aRectangle left ifTrue: [deltaX := aRectangle left - self left].	self top + deltaY &lt; aRectangle top ifTrue: [deltaY := aRectangle top - self top].	^deltaX @ deltaY</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="Robot - Segunda Practica" selector="centeredIn:">centeredIn: aPoint		^Rectangle origin: ((aPoint x - (self width // 2)) @ (aPoint y - (self height // 2))) extent:(self width @ self height).</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="Robot - Segunda Practica" selector="expandedBy:">expandedBy: delta 	"Answer a Rectangle that is outset from the receiver by delta.   	 delta is a Rectangle, Point, or scalar."	^delta expandRectangle: self</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="Robot - Segunda Practica" selector="merge:">merge: aRectangle 	"Answer a Rectangle that contains both the receiver and  the	argument aRectangle."	^self species 		origin: (origin min: aRectangle origin)		corner: (corner max: aRectangle corner)</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="Robot - Segunda Practica" selector="insetOriginBy:cornerBy:">insetOriginBy: originDeltaPoint cornerBy: cornerDeltaPoint 	"Answer a Rectangle that is inset from the receiver by a given amount in the 	origin and corner."	^self species		origin: origin + originDeltaPoint		corner: corner - cornerDeltaPoint</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>truncation and round off</category><body package="Robot - Segunda Practica" selector="truncated">truncated	"Answer a Rectangle whose origin and corner are truncated."	^self species origin: origin truncated corner: corner truncated</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>truncation and round off</category><body package="Robot - Segunda Practica" selector="rounded">rounded	"Answer a Rectangle whose origin and corner are rounded."	^self species origin: origin rounded corner: corner rounded</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="left">left	"Answer the position of the receiver's left vertical line."	^origin x</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="top">top	"Answer the position of the receiver's top horizontal line."	^origin y</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="center">center	"Answer the point at the center of the receiver."	^((origin x + corner x) // 2) @ ((origin y + corner y) // 2)</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="origin:corner:">origin: originPoint corner: cornerPoint	"Set the points at the top left corner and the bottom right corner of the receiver."	origin := originPoint.	corner := cornerPoint</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="origin:extent:">origin: originPoint extent: extentPoint	"Set the point at the top left corner of the receiver to be originPoint and	set the width and height of the receiver to be extentPoint."	origin := originPoint.	corner := origin + extentPoint</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="extent:">extent: extentPoint 	"Set the extent (width and height) of the receiver to be the 	argument extentPoint."	corner := origin + extentPoint</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="origin">origin	"Answer the point at the top left corner of the receiver."	^origin</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="corner">corner	"Answer the point at the bottom right corner of the receiver."	^corner</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="origin:">origin: originPoint 	"Set the point at the top left corner of the receiver."	origin := originPoint</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="corner:">corner: cornerPoint 	"Set the point at the bottom right corner of the receiver."	corner := cornerPoint</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="bottomLeft">bottomLeft	"Answer the point at the left edge of the bottom horizontal line of the receiver."	^origin x @ corner y</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="topLeft">topLeft	"Answer the point at the top left corner of the receiver's top horizontal line."	^origin</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="right:">right: anInteger 	"Set the position of the receiver's right vertical line."	corner x: anInteger</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="topCenter">topCenter	"Answer the point at the center of the receiver's top horizontal line."	^((origin x + corner x) // 2) @ origin y</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="left:">left: anInteger 	"Set the position of the receiver's left vertical line."	origin x: anInteger</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="extent">extent	"Answer a Point representing the extent of the receiver, that is	one whose x coordinate is the width and whose y coordinate is the height."	^corner - origin</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="bottomCenter">bottomCenter	"Answer the point at the center of the bottom horizontal line of the receiver."	^((origin x + corner x) // 2) @ corner y</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="leftCenter">leftCenter	"Answer the point at the center of the receiver's left vertical line."	^self left @ self center y</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="bottomRight">bottomRight	"Answer the point at the right edge of the bottom horizontal line of the receiver."	^corner</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="bottom">bottom	"Answer the position of the receiver's bottom horizontal line."	^corner y</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="width:">width: widthInteger 	"Change the receiver's right vertical line to make its width widthInteger."	corner x: origin x + widthInteger</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="top:">top: anInteger 	"Set the position of the receiver's top horizontal line."	origin y: anInteger</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="topLeft:">topLeft: topLeftPoint 	"Set the point at the top left corner of the receiver's top horizontal line."	origin := topLeftPoint</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="height">height	"Answer the height of the receiver."	^corner y - origin y</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="area">area	"Answer the receiver's area, the product of width and height."	^self width * self height</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="rightCenter">rightCenter	"Answer the point at the center of the receiver's right vertical line."	^self right @ self center y</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="bottomRight:">bottomRight: bottomRightPoint 	"Set the position of the right corner of the bottom horizontal line of the receiver."	corner := bottomRightPoint</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="width">width	"Answer the width of the receiver."	^corner x - origin x</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="height:">height: heightInteger 	"Change the receiver's bottom y to make its height 	the argument heightInteger."	corner y: origin y + heightInteger</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="right">right	"Answer the position of the receiver's right vertical line."	^corner x</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="topRight">topRight	"Answer the point at the top right corner of the receiver's top horizontal line."	^corner x @ origin y</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="bottom:">bottom: anInteger 	"Set the position of the bottom horizontal line of the receiver."	corner y: anInteger</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>copying</category><body package="Robot - Segunda Practica" selector="postCopy">postCopy	super postCopy.	origin := origin copy.	corner := corner copy</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>transforming</category><body package="Robot - Segunda Practica" selector="moveTo:">moveTo: aPoint 	"Change the corners of the receiver so that its top left position is aPoint."	corner := corner + aPoint - origin.	origin := aPoint</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>transforming</category><body package="Robot - Segunda Practica" selector="translatedBy:">translatedBy: amount 	"Answer a new object translated by amount, which can be	a Point or a scalar value."	^self species origin: origin + amount corner: corner + amount</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>transforming</category><body package="Robot - Segunda Practica" selector="moveBy:">moveBy: aPoint 	"Change the corner positions of the receiver so that its area translates by	the amount defined by the argument, aPoint."	origin := origin + aPoint.	corner := corner + aPoint</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>transforming</category><body package="Robot - Segunda Practica" selector="scaledBy:">scaledBy: amount 	"Answer a new object scaled by the argument amount, which can be	a Point or a scalar value."	^ self species vertex: origin * amount vertex: corner * amount</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>transforming</category><body package="Robot - Segunda Practica" selector="align:with:">align: aPoint1 with: aPoint2 	"Answer a new Rectangle that is a translated by aPoint2 - aPoint1."	^self translatedBy: aPoint2 - aPoint1</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="computeBounds">computeBounds	"Answer the Rectangle which minimally bounds the coordinate region used	by the receiver, independent of considerations such as line width."	^self</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="insetRectangle:">insetRectangle: aRect	^aRect species origin: aRect origin + origin 					corner: aRect corner - corner</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="expandRectangle:">expandRectangle: aRect	^aRect species origin: aRect origin - origin 					corner: aRect corner + corner</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>comparing</category><body package="Robot - Segunda Practica" selector="=">= aRectangle 	"Answer whether the receiver's species, origin and corner match those of	the argument, aRectangle."	self species = aRectangle species		ifTrue: [^origin = aRectangle origin and: [corner = aRectangle corner]]		ifFalse: [^false]</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>comparing</category><body package="Robot - Segunda Practica" selector="hash">hash	^origin hash bitXor: corner hash</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>displaying</category><body package="Robot - Segunda Practica" selector="displayStrokedOn:">displayStrokedOn: aGraphicsContext	"Stroke the receiver's edges on the supplied GraphicsContext."	aGraphicsContext displayRectangularBorder: self</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>displaying</category><body package="Robot - Segunda Practica" selector="displayFilledOn:">displayFilledOn: aGraphicsContext	"Stroke the receiver's edges on the supplied GraphicsContext."	aGraphicsContext displayRectangle: self</body></methods><methods><class-id>NoRenamingInspector</class-id> <category>interface opening</category><body package="Robot - Segunda Practica" selector="postBuildWith:">postBuildWith: aBuilder	| win |	(aBuilder componentAt: #text) widget controller autoAccept: false.	(win := aBuilder window) notNil		ifTrue: [win icon: (Icon constantNamed: #inspector)].</body></methods><methods><class-id>NoRenamingInspector</class-id> <category>initialize-release</category><body package="Robot - Segunda Practica" selector="resetLabel">resetLabel	"Reset the receiver's label"	| win |	(win := builder window) notNil		ifTrue:			[win icon: (Icon constantNamed: #inspector)].</body></methods><methods><class-id>NoRenamingInspector</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="fieldMenu">fieldMenu	"Inspector flushMenus"	| m |	m := Menu		labels: 'inspect'		values: #(inspectField).	^m</body></methods><methods><class-id>RobotInspector class</class-id> <category>interface specs</category><body package="Robot - Segunda Practica" selector="myself">myself	"UIPainter new openOnClass: self andSelector: #myself"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Robot Inspector' 			#min: #(#Point 398 405 ) 			#max: #(#Point 398 405 ) 			#bounds: #(#Rectangle 281 158 679 563 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#TextEditorSpec 					#layout: #(#LayoutFrame 1 0 0 0.5 -1 1 -1 1 ) 					#model: #myselfText 					#menu: #myselfTextMenu ) 				#(#TextEditorSpec 					#layout: #(#LayoutFrame 1 0 7 0.2 -1 1 -1 0.5 ) 					#flags: 4 					#model: #explanationText 					#alignment: #center 					#style: #systemDefault 					#isReadOnly: true ) ) ) )</body></methods><methods><class-id>RobotInspector class</class-id> <category>interface specs</category><body package="Robot - Segunda Practica" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Robot Inspector' 			#min: #(#Point 398 405 ) 			#max: #(#Point 398 405 ) 			#bounds: #(#Rectangle 281 158 679 563 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#TabControlSpec 					#layout: #(#LayoutFrame 1 0 8 0 -1 1 -30 1 ) 					#name: #tabbing 					#model: #tabs 					#labels: #() ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -61 1 -26 1 -1 1 -1 1 ) 					#model: #closeRequest 					#label: 'Close' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>RobotInspector class</class-id> <category>interface specs</category><body package="Robot - Segunda Practica" selector="presentation">presentation	"UIPainter new openOnClass: self andSelector: #presentation"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Robot Inspector' 			#min: #(#Point 398 405 ) 			#max: #(#Point 398 405 ) 			#bounds: #(#Rectangle 470 139 868 544 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#InputFieldSpec 					#layout: #(#Rectangle 192 33 349 58 ) 					#flags: 0 					#model: #position 					#tabable: false 					#isReadOnly: true ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 192 57 349 82 ) 					#flags: 0 					#model: #direction 					#tabable: false 					#isReadOnly: true ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 192 81 349 106 ) 					#flags: 0 					#model: #battery 					#tabable: false 					#isReadOnly: true ) 				#(#LabelSpec 					#layout: #(#Rectangle 30 30 156 139 ) 					#label: #image 					#hasCharacterOrientedLabel: false ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -56 1 -25 1 -2 1 -2 1 ) 					#model: #refresh 					#label: 'Refresh' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>RobotInspector class</class-id> <category>interface specs</category><body package="Robot - Segunda Practica" selector="inspector">inspector	"UIPainter new openOnClass: self andSelector: #inspector"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Robot Inspector' 			#min: #(#Point 398 405 ) 			#max: #(#Point 398 405 ) 			#bounds: #(#Rectangle 281 158 679 563 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#SubCanvasSpec 					#layout: #(#LayoutFrame 0 0 0 0 0 1 -30 1 ) 					#flags: 0 					#majorKey: #NoRenamingInspector 					#minorKey: #windowSpec 					#clientKey: #theInspector ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -56 1 -25 1 -2 1 -2 1 ) 					#model: #refresh 					#label: 'Refresh' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>RobotInspector class</class-id> <category>interface specs</category><body package="Robot - Segunda Practica" selector="robotBrowser">robotBrowser	"UIPainter new openOnClass: self andSelector: #robotBrowser"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Robot Inspector' 			#min: #(#Point 398 405 ) 			#max: #(#Point 398 405 ) 			#bounds: #(#Rectangle 281 158 679 563 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#SubCanvasSpec 					#layout: #(#LayoutFrame 0 0 0 0 0 1 0 1 ) 					#flags: 0 					#majorKey: #InstanceBehaviorInspector 					#minorKey: #windowSpec 					#clientKey: #browser ) ) ) )</body></methods><methods><class-id>RobotInspector class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="mask">mask	"UIMaskEditor new openOnClass: self andSelector: #mask"	&lt;resource: #image&gt;	^(Image extent: 126@109 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A8@@@@@@@@@@@@@@@@@@@C? @@@@@@@@@@@@@@@@@@G??@@@@@@@@@@@@@@@@@@G??&gt;@@@@@@@@@@@@@@@@@O???8@@@@@@@@@@@@@@@@_????0@@@@@@@@@@@@@@@_?????@@@@@@@@@@@@@@@_?????&gt;@@@@@@@@@@@@@@???????8@@@@@@@@@@@@@????????0@@@@@@@@@@@A?????????@@@@@@@@@@@A?????????&gt;@@@@@@@@@@C??????????8@@@@@@@@@C???????????0@@@@@@@@C????????????@@@@@@@@A????????????0@@@@@@@@????????????&gt;@@@@@@@@O????????????0@@@@@@@G????????????&lt;@@@@@@@A?????????????@@@@@@@@?????????????8@@@@@@@O????????????&gt;@@@@@@@G?????????????0@@@@@@A?????????????&lt;@@@@@@@?????????????? @@@@@@O?????????????8@@@@A??????????????????@@@??????????????????&lt;@A??????????????????? @???????????????????&lt;@O???????????????????@G???????????????????8A???????????????????&gt;@_???????????????????0G???????????????????&lt;A????????????????????@_???????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0O???????????????????&lt;C????????????????????@????????????????????0G???????????????????&lt;A????????????????????@O???????????????????0C???????????????????&lt;@???????????????????&gt;@G???????????????????@@G?????????????????? @@@G??????????????@@@@@@A?????????????? @@@@@@O?????????????8@@@@@@C?????????????&gt;@@@@@@@_?????????????@@@@@@@G?????????????0@@@@@@@?????????????8@@@@@@@G????????????&gt;@@@@@@@A?????????????@@@@@@@@O????????????0@@@@@@@A????????????8@@@@@@@@G???????????8@@@@@@@@@_??????????8@@@@@@@@@A??????????8@@@@@@@@@@G?????????8@@@@@@@@@@@O????????8@@@@@@@@@@@@????????0@@@@@@@@@@@@A???????0@@@@@@@@@@@@@G?????? @@@@@@@@@@@@@@O????? @@@@@@@@@@@@@@@?????@@@@@@@@@@@@@@@@A????@@@@@@@@@@@@@@@@@G??&gt;@@@@@@@@@@@@@@@@@@O?&gt;@@@@@@@@@@@@@@@@@@@?&gt;@@@@@@@@@@@@@@@@@@@A&lt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@a'))</body></methods><methods><class-id>RobotInspector class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="image">image		&lt;resource: #image&gt;		^OpaqueImage figure: self basicImage shape: self mask.</body></methods><methods><class-id>RobotInspector class</class-id> <category>resources</category><body package="Robot - Segunda Practica" selector="basicImage">basicImage	"UIMaskEditor new openOnClass: self andSelector: #basicImage"	&lt;resource: #image&gt;	^(Image extent: 126@109 depth: 8 bitsPerPixel: 8 palette: (MappedPalette withColors: ((Array new: 205) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 7662); at: 3 put: (ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 7134); at: 4 put: (ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 6341); at: 5 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 5548); at: 6 put: (ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 5812); at: 7 put: (ColorValue scaledRed: 7662 scaledGreen: 6869 scaledBlue: 5020); at: 8 put: (ColorValue scaledRed: 7398 scaledGreen: 6869 scaledBlue: 5284); at: 9 put: (ColorValue scaledRed: 6869 scaledGreen: 6341 scaledBlue: 5020); at: 10 put: (ColorValue scaledRed: 7134 scaledGreen: 6341 scaledBlue: 4756); at: 11 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 4227); at: 12 put: (ColorValue scaledRed: 6869 scaledGreen: 5020 scaledBlue: 5020); at: 13 put: (ColorValue scaledRed: 5812 scaledGreen: 5548 scaledBlue: 4227); at: 14 put: (ColorValue scaledRed: 6341 scaledGreen: 5548 scaledBlue: 3699); at: 15 put: (ColorValue scaledRed: 6077 scaledGreen: 5548 scaledBlue: 3963); at: 16 put: (ColorValue scaledRed: 5812 scaledGreen: 5020 scaledBlue: 3434); at: 17 put: (ColorValue scaledRed: 5284 scaledGreen: 4491 scaledBlue: 3170); at: 18 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 2906); at: 19 put: (ColorValue scaledRed: 5548 scaledGreen: 3699 scaledBlue: 3699); at: 20 put: (ColorValue scaledRed: 4756 scaledGreen: 3434 scaledBlue: 3434); at: 21 put: (ColorValue scaledRed: 4756 scaledGreen: 4227 scaledBlue: 2642); at: 22 put: (ColorValue scaledRed: 5812 scaledGreen: 4227 scaledBlue: 2906); at: 23 put: (ColorValue scaledRed: 3963 scaledGreen: 3699 scaledBlue: 2642); at: 24 put: (ColorValue scaledRed: 5020 scaledGreen: 2642 scaledBlue: 2642); at: 25 put: (ColorValue scaledRed: 3699 scaledGreen: 3170 scaledBlue: 2113); at: 26 put: (ColorValue scaledRed: 3963 scaledGreen: 3170 scaledBlue: 1849); at: 27 put: (ColorValue scaledRed: 4227 scaledGreen: 2906 scaledBlue: 1849); at: 28 put: (ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 2113); at: 29 put: (ColorValue scaledRed: 3170 scaledGreen: 2906 scaledBlue: 1585); at: 30 put: (ColorValue scaledRed: 3434 scaledGreen: 1849 scaledBlue: 1056); at: 31 put: (ColorValue scaledRed: 2906 scaledGreen: 2378 scaledBlue: 1056); at: 32 put: (ColorValue scaledRed: 2642 scaledGreen: 2378 scaledBlue: 1321); at: 33 put: (ColorValue scaledRed: 3170 scaledGreen: 2642 scaledBlue: 1849); at: 34 put: (ColorValue scaledRed: 2906 scaledGreen: 1321 scaledBlue: 792); at: 35 put: (ColorValue scaledRed: 3434 scaledGreen: 2906 scaledBlue: 1321); at: 36 put: (ColorValue scaledRed: 1585 scaledGreen: 1321 scaledBlue: 792); at: 37 put: (ColorValue scaledRed: 2378 scaledGreen: 1056 scaledBlue: 264); at: 38 put: (ColorValue scaledRed: 2642 scaledGreen: 792 scaledBlue: 264); at: 39 put: (ColorValue scaledRed: 1849 scaledGreen: 264 scaledBlue: 264); at: 40 put: (ColorValue scaledRed: 2113 scaledGreen: 264 scaledBlue: 0); at: 41 put: (ColorValue scaledRed: 2378 scaledGreen: 0 scaledBlue: 0); at: 42 put: (ColorValue scaledRed: 792 scaledGreen: 792 scaledBlue: 792); at: 43 put: ColorValue white; at: 44 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7134); at: 45 put: (ColorValue scaledRed: 8191 scaledGreen: 7662 scaledBlue: 7398); at: 46 put: (ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 6341); at: 47 put: (ColorValue scaledRed: 8191 scaledGreen: 6869 scaledBlue: 6869); at: 48 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 5812); at: 49 put: (ColorValue scaledRed: 7926 scaledGreen: 6341 scaledBlue: 6341); at: 50 put: (ColorValue scaledRed: 7662 scaledGreen: 5812 scaledBlue: 5812); at: 51 put: (ColorValue scaledRed: 7398 scaledGreen: 6869 scaledBlue: 5020); at: 52 put: (ColorValue scaledRed: 7134 scaledGreen: 6869 scaledBlue: 5284); at: 53 put: (ColorValue scaledRed: 7134 scaledGreen: 6341 scaledBlue: 4491); at: 54 put: (ColorValue scaledRed: 6869 scaledGreen: 6341 scaledBlue: 4756); at: 55 put: (ColorValue scaledRed: 6869 scaledGreen: 5812 scaledBlue: 3963); at: 56 put: (ColorValue scaledRed: 6341 scaledGreen: 4491 scaledBlue: 4491); at: 57 put: (ColorValue scaledRed: 6077 scaledGreen: 5548 scaledBlue: 3699); at: 58 put: (ColorValue scaledRed: 5812 scaledGreen: 5020 scaledBlue: 3170); at: 59 put: (ColorValue scaledRed: 5548 scaledGreen: 5020 scaledBlue: 3434); at: 60 put: (ColorValue scaledRed: 4756 scaledGreen: 4491 scaledBlue: 3434); at: 61 put: (ColorValue scaledRed: 5020 scaledGreen: 4491 scaledBlue: 3170); at: 62 put: (ColorValue scaledRed: 5284 scaledGreen: 4491 scaledBlue: 2906); at: 63 put: (ColorValue scaledRed: 3434 scaledGreen: 3170 scaledBlue: 2113); at: 64 put: (ColorValue scaledRed: 3699 scaledGreen: 3170 scaledBlue: 1849); at: 65 put: (ColorValue scaledRed: 3170 scaledGreen: 2113 scaledBlue: 2113); at: 66 put: (ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 1849); at: 67 put: (ColorValue scaledRed: 3434 scaledGreen: 2642 scaledBlue: 1321); at: 68 put: (ColorValue scaledRed: 3699 scaledGreen: 2378 scaledBlue: 1321); at: 69 put: (ColorValue scaledRed: 2378 scaledGreen: 2113 scaledBlue: 1585); at: 70 put: (ColorValue scaledRed: 3699 scaledGreen: 1849 scaledBlue: 1849); at: 71 put: (ColorValue scaledRed: 2642 scaledGreen: 2378 scaledBlue: 1056); at: 72 put: (ColorValue scaledRed: 3170 scaledGreen: 2642 scaledBlue: 1585); at: 73 put: (ColorValue scaledRed: 1849 scaledGreen: 792 scaledBlue: 792); at: 74 put: (ColorValue scaledRed: 2378 scaledGreen: 792 scaledBlue: 264); at: 75 put: (ColorValue scaledRed: 2906 scaledGreen: 264 scaledBlue: 264); at: 76 put: (ColorValue scaledRed: 1056 scaledGreen: 792 scaledBlue: 264); at: 77 put: (ColorValue scaledRed: 2113 scaledGreen: 0 scaledBlue: 0); at: 78 put: (ColorValue scaledRed: 528 scaledGreen: 264 scaledBlue: 0); at: 79 put: (ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 264); at: 80 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 6869); at: 81 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 6341); at: 82 put: (ColorValue scaledRed: 7926 scaledGreen: 7662 scaledBlue: 6077); at: 83 put: (ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 6869); at: 84 put: (ColorValue scaledRed: 7662 scaledGreen: 7134 scaledBlue: 5548); at: 85 put: (ColorValue scaledRed: 7398 scaledGreen: 7134 scaledBlue: 5812); at: 86 put: (ColorValue scaledRed: 7134 scaledGreen: 6605 scaledBlue: 6605); at: 87 put: (ColorValue scaledRed: 7398 scaledGreen: 6605 scaledBlue: 5020); at: 88 put: (ColorValue scaledRed: 6341 scaledGreen: 5812 scaledBlue: 5548); at: 89 put: (ColorValue scaledRed: 6869 scaledGreen: 6077 scaledBlue: 4756); at: 90 put: (ColorValue scaledRed: 7134 scaledGreen: 5284 scaledBlue: 5284); at: 91 put: (ColorValue scaledRed: 6605 scaledGreen: 5812 scaledBlue: 3963); at: 92 put: (ColorValue scaledRed: 6341 scaledGreen: 5812 scaledBlue: 4227); at: 93 put: (ColorValue scaledRed: 5812 scaledGreen: 5284 scaledBlue: 5284); at: 94 put: (ColorValue scaledRed: 7134 scaledGreen: 6077 scaledBlue: 4491); at: 95 put: (ColorValue scaledRed: 6341 scaledGreen: 5020 scaledBlue: 3699); at: 96 put: (ColorValue scaledRed: 5812 scaledGreen: 4491 scaledBlue: 3434); at: 97 put: (ColorValue scaledRed: 5812 scaledGreen: 5020 scaledBlue: 2906); at: 98 put: (ColorValue scaledRed: 5548 scaledGreen: 5020 scaledBlue: 3170); at: 99 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 3699); at: 100 put: (ColorValue scaledRed: 5020 scaledGreen: 4491 scaledBlue: 2906); at: 101 put: (ColorValue scaledRed: 5812 scaledGreen: 3963 scaledBlue: 3963); at: 102 put: (ColorValue scaledRed: 4227 scaledGreen: 3963 scaledBlue: 2906); at: 103 put: (ColorValue scaledRed: 4756 scaledGreen: 3963 scaledBlue: 2378); at: 104 put: (ColorValue scaledRed: 4227 scaledGreen: 3434 scaledBlue: 2113); at: 105 put: (ColorValue scaledRed: 3963 scaledGreen: 3434 scaledBlue: 2378); at: 106 put: (ColorValue scaledRed: 4227 scaledGreen: 3699 scaledBlue: 1849); at: 107 put: (ColorValue scaledRed: 3434 scaledGreen: 2906 scaledBlue: 2113); at: 108 put: (ColorValue scaledRed: 4756 scaledGreen: 3699 scaledBlue: 2642); at: 109 put: (ColorValue scaledRed: 4491 scaledGreen: 2642 scaledBlue: 2642); at: 110 put: (ColorValue scaledRed: 4227 scaledGreen: 2378 scaledBlue: 1849); at: 111 put: (ColorValue scaledRed: 3699 scaledGreen: 2378 scaledBlue: 2378); at: 112 put: (ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 1585); at: 113 put: (ColorValue scaledRed: 3170 scaledGreen: 1585 scaledBlue: 1056); at: 114 put: (ColorValue scaledRed: 2378 scaledGreen: 2113 scaledBlue: 1321); at: 115 put: (ColorValue scaledRed: 3170 scaledGreen: 1321 scaledBlue: 1321); at: 116 put: (ColorValue scaledRed: 1849 scaledGreen: 1585 scaledBlue: 1056); at: 117 put: (ColorValue scaledRed: 2906 scaledGreen: 792 scaledBlue: 792); at: 118 put: (ColorValue scaledRed: 3434 scaledGreen: 3170 scaledBlue: 1849); at: 119 put: (ColorValue scaledRed: 1321 scaledGreen: 1056 scaledBlue: 792); at: 120 put: (ColorValue scaledRed: 3699 scaledGreen: 3170 scaledBlue: 1585); at: 121 put: (ColorValue scaledRed: 3170 scaledGreen: 2642 scaledBlue: 1321); at: 122 put: (ColorValue scaledRed: 1056 scaledGreen: 1056 scaledBlue: 1056); at: 123 put: (ColorValue scaledRed: 1585 scaledGreen: 264 scaledBlue: 0); at: 124 put: (ColorValue scaledRed: 1849 scaledGreen: 0 scaledBlue: 0); at: 125 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7926); at: 126 put: (ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 6869); at: 127 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 6605); at: 128 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 7398); at: 129 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 6077); at: 130 put: (ColorValue scaledRed: 7398 scaledGreen: 7134 scaledBlue: 5548); at: 131 put: (ColorValue scaledRed: 7926 scaledGreen: 6077 scaledBlue: 6077); at: 132 put: (ColorValue scaledRed: 6869 scaledGreen: 6605 scaledBlue: 5284); at: 133 put: (ColorValue scaledRed: 7134 scaledGreen: 6605 scaledBlue: 5020); at: 134 put: (ColorValue scaledRed: 6869 scaledGreen: 6341 scaledBlue: 4227); at: 135 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 4756); at: 136 put: (ColorValue scaledRed: 6869 scaledGreen: 6077 scaledBlue: 4491); at: 137 put: (ColorValue scaledRed: 6341 scaledGreen: 5812 scaledBlue: 3963); at: 138 put: (ColorValue scaledRed: 6077 scaledGreen: 5548 scaledBlue: 4491); at: 139 put: (ColorValue scaledRed: 6341 scaledGreen: 5548 scaledBlue: 4227); at: 140 put: (ColorValue scaledRed: 6077 scaledGreen: 5284 scaledBlue: 3434); at: 141 put: (ColorValue scaledRed: 5812 scaledGreen: 5284 scaledBlue: 3699); at: 142 put: (ColorValue scaledRed: 6077 scaledGreen: 5020 scaledBlue: 3699); at: 143 put: (ColorValue scaledRed: 5548 scaledGreen: 4756 scaledBlue: 3170); at: 144 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 3434); at: 145 put: (ColorValue scaledRed: 5812 scaledGreen: 4491 scaledBlue: 4491); at: 146 put: (ColorValue scaledRed: 5020 scaledGreen: 4227 scaledBlue: 2906); at: 147 put: (ColorValue scaledRed: 5284 scaledGreen: 3434 scaledBlue: 3434); at: 148 put: (ColorValue scaledRed: 4491 scaledGreen: 3170 scaledBlue: 3170); at: 149 put: (ColorValue scaledRed: 6605 scaledGreen: 5284 scaledBlue: 4227); at: 150 put: (ColorValue scaledRed: 4227 scaledGreen: 3434 scaledBlue: 1849); at: 151 put: (ColorValue scaledRed: 3170 scaledGreen: 2906 scaledBlue: 2113); at: 152 put: (ColorValue scaledRed: 3699 scaledGreen: 2906 scaledBlue: 1585); at: 153 put: (ColorValue scaledRed: 3963 scaledGreen: 2642 scaledBlue: 1585); at: 154 put: (ColorValue scaledRed: 3434 scaledGreen: 3170 scaledBlue: 1585); at: 155 put: (ColorValue scaledRed: 3170 scaledGreen: 2378 scaledBlue: 1321); at: 156 put: (ColorValue scaledRed: 3699 scaledGreen: 3170 scaledBlue: 1321); at: 157 put: (ColorValue scaledRed: 2906 scaledGreen: 1849 scaledBlue: 792); at: 158 put: (ColorValue scaledRed: 2642 scaledGreen: 1585 scaledBlue: 1321); at: 159 put: (ColorValue scaledRed: 3434 scaledGreen: 2906 scaledBlue: 1849); at: 160 put: (ColorValue scaledRed: 1585 scaledGreen: 1585 scaledBlue: 1056); at: 161 put: (ColorValue scaledRed: 2378 scaledGreen: 1321 scaledBlue: 528); at: 162 put: (ColorValue scaledRed: 2906 scaledGreen: 2642 scaledBlue: 1321); at: 163 put: (ColorValue scaledRed: 1849 scaledGreen: 792 scaledBlue: 264); at: 164 put: (ColorValue scaledRed: 792 scaledGreen: 528 scaledBlue: 264); at: 165 put: (ColorValue scaledRed: 1585 scaledGreen: 0 scaledBlue: 0); at: 166 put: (ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 0); at: 167 put: (ColorValue scaledRed: 8191 scaledGreen: 7926 scaledBlue: 7662); at: 168 put: (ColorValue scaledRed: 8191 scaledGreen: 8191 scaledBlue: 7398); at: 169 put: (ColorValue scaledRed: 7926 scaledGreen: 7926 scaledBlue: 6605); at: 170 put: (ColorValue scaledRed: 7926 scaledGreen: 7398 scaledBlue: 5812); at: 171 put: (ColorValue scaledRed: 7662 scaledGreen: 7398 scaledBlue: 6077); at: 172 put: (ColorValue scaledRed: 7926 scaledGreen: 6605 scaledBlue: 6605); at: 173 put: (ColorValue scaledRed: 7662 scaledGreen: 6869 scaledBlue: 5284); at: 174 put: (ColorValue scaledRed: 7398 scaledGreen: 6869 scaledBlue: 5548); at: 175 put: (ColorValue scaledRed: 7398 scaledGreen: 5548 scaledBlue: 5548); at: 176 put: (ColorValue scaledRed: 7134 scaledGreen: 6605 scaledBlue: 4756); at: 177 put: (ColorValue scaledRed: 7398 scaledGreen: 6341 scaledBlue: 4756); at: 178 put: (ColorValue scaledRed: 6869 scaledGreen: 6077 scaledBlue: 4227); at: 179 put: (ColorValue scaledRed: 6341 scaledGreen: 6077 scaledBlue: 4756); at: 180 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 4491); at: 181 put: (ColorValue scaledRed: 6341 scaledGreen: 5548 scaledBlue: 3963); at: 182 put: (ColorValue scaledRed: 6605 scaledGreen: 6077 scaledBlue: 5812); at: 183 put: (ColorValue scaledRed: 5284 scaledGreen: 4756 scaledBlue: 3170); at: 184 put: (ColorValue scaledRed: 5548 scaledGreen: 4756 scaledBlue: 2906); at: 185 put: (ColorValue scaledRed: 5020 scaledGreen: 4227 scaledBlue: 2642); at: 186 put: (ColorValue scaledRed: 5284 scaledGreen: 3963 scaledBlue: 2642); at: 187 put: (ColorValue scaledRed: 4491 scaledGreen: 3699 scaledBlue: 2378); at: 188 put: (ColorValue scaledRed: 4227 scaledGreen: 2906 scaledBlue: 2113); at: 189 put: (ColorValue scaledRed: 3170 scaledGreen: 2906 scaledBlue: 1849); at: 190 put: (ColorValue scaledRed: 3699 scaledGreen: 2906 scaledBlue: 1321); at: 191 put: (ColorValue scaledRed: 3963 scaledGreen: 2378 scaledBlue: 1585); at: 192 put: (ColorValue scaledRed: 3170 scaledGreen: 1585 scaledBlue: 1849); at: 193 put: (ColorValue scaledRed: 2642 scaledGreen: 2378 scaledBlue: 1585); at: 194 put: (ColorValue scaledRed: 2906 scaledGreen: 2378 scaledBlue: 1321); at: 195 put: (ColorValue scaledRed: 2113 scaledGreen: 1849 scaledBlue: 1321); at: 196 put: (ColorValue scaledRed: 2642 scaledGreen: 1321 scaledBlue: 1321); at: 197 put: (ColorValue scaledRed: 3170 scaledGreen: 1321 scaledBlue: 792); at: 198 put: (ColorValue scaledRed: 2378 scaledGreen: 792 scaledBlue: 792); at: 199 put: (ColorValue scaledRed: 3434 scaledGreen: 2906 scaledBlue: 1585); at: 200 put: (ColorValue scaledRed: 1056 scaledGreen: 1056 scaledBlue: 528); at: 201 put: (ColorValue scaledRed: 2113 scaledGreen: 264 scaledBlue: 264); at: 202 put: (ColorValue scaledRed: 2378 scaledGreen: 264 scaledBlue: 0); at: 203 put: (ColorValue scaledRed: 2642 scaledGreen: 0 scaledBlue: 0); at: 204 put: (ColorValue scaledRed: 528 scaledGreen: 528 scaledBlue: 264); at: 205 put: (ColorValue scaledRed: 1321 scaledGreen: 0 scaledBlue: 0); yourself)) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%@JT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)PAM],B_)ZV%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%)ZV#0&amp;!%N3-%0$-M@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JV%)T4#0AX&lt;X6NN#+ZOY[2_SZV%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%S\/BZARQX1F7XC&amp;KN[^N-)DV\ZN%)PB%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SRMAYS1#OQF7XC$9"8.K"8- XX:OOK13(:V%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JV%S\H&gt;YS1#D[] NS&amp;K"8,M"8.K"8.KNVFN#30V0JN%)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JV#H6)%OC0=#&amp;D9"8.K"8.KCP4MCP64CP4M"8.KXX:O#393(:V%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)ZV#QA TX6N6-3&amp;K"8.K"8.KCX"HCP64"@6H"H"HCP6K"3%!#+XV0D.%)ZT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%)ZM6%#,&lt;-!E!XC&amp;K"8.K"04MCX"4"1F:EH:KCP6H"H!ZV#YZCX.KNX:OOF"_(:V%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%)T-DZC,&lt;X89!NX.K"8.KCX.K-@4MXK!''%1:ZFVX=C8,M"E)ZM#X6M( M"0=!#6HVP\^%)PB%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%27Y*YS26-(8O"8.K"04MCP4MCX.KO[*UP)0$^*J &amp;)\Y.FFKC[QZM#X6,[D6V 6KNS*OOF"_2:V%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JV%],HVN6N6#(8ON@4M"H M-KPMCX.7Y)VW&amp;*@$(''+L^*R"()2Z%;(=XH,MV#Z1!XT4![EZ"8,ON(9%PWYM)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JUMH6)%OKZ6XP&lt;8C[RH"H"HC[PM"3&amp;8.)UB''J@$(''+L3L3L3L2"("P$&amp;)!''Y(:KCU(6,SP4MCR1M%(8C3*OOF!3SZV%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)T56QFT&lt;OH:NC8,M-H!ZV%*HC[PMNQF:FY"Z(BR"^''*$3L3L3L3L3L3L(*J"()2Z%6^8NX.HM(T4MJ&lt;4MCR1"C ON(&lt;&lt;Z''YM)ZT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D6_%&amp;T&lt;-(8ON@6HV#YZV%*H-@6KX[":FY*\ID&amp;"^''*$)JR$)JSL3L3L3L3L3G):("R ''K6UY+^K-CX4MJ&gt;/+:&gt;/!SZ4C3(:OA[BSP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AM%#,;-#(OCX!ZM#X6M#ZHCX,9OVXY/Y2 ID&amp;"^*R$)JR$)JR$)JR$)JSL3L3L3L1:^*J"IJBZ&amp;F^8NX-Z,SR/L XFL*&lt;4,S"L#FI%2:T@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)RM%X(XN"E*1,SX6M%*HCX.7Y&amp;&amp;X&amp;)0$IJI:^*R$)JR$)JR$)JR$)JR$)JSL3L3L3L2$^''*"(*H$''DHYY!FK"KD4+0Z,+@Z,U  3BFH#)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AM0C22 ELI!XVE,SZ4"3$=.)V=''J@$(*I:)JR$)JR$)JR$^7-;^7.$)JR$)JR$3L3L)JR$)JQ:^*J"IJBZ&amp;IV8NX,6MCHFA@PETD&gt;*CAYM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)\\VX*4CTP^G,U(MNS5&amp;%Y^Z''BQI(''):)JR$)JR$)JR$)G-;^7-;^:R$)JR$)JR$)JR$)JR$)JR$)G):(*H$''DHYY#49V(T2+@L+@''4HX)&gt;%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%QC2IKW9QA0(NC36:%Y^\''BP%(''*$)JR$)JR$)JQ;)JQ;^7-;^7.$)JR$)JR$)G,&amp;^7-;^:R$)JR$3JQ:^*J"II0^FYTTNP6D@2.''@**L%$4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)T5%X#M&gt;_*$I+0!&amp;&amp;DJ IJJ"I*SL)JR$)JR$^7-;^7.$)G.$)G.$)JR$)JR$^7-;^7-;^7-;^7.$)JR$)JSL3G):(*H$''DHYV0&amp;*J:^''_[H;]*T@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%0&amp;TL G8C [LE*QB IJJ"^*R$)JR$)JR$)JQ;SG-;^:R$)JR$)JR$)JR$)JQ;^7-;SD1;^7,''^:R$)JR$)L3L3L3L^''*"II\G+8Q=@*\BUH1A)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JL&gtgt;*ST3@86;IT0''^:R$)JR$)JR$)JQ;^41LSD1LSG-;^7-;)JR$)JQ;^40''SD1LSB];^7-;^7-;^:R$)JR$)JR$)G-;I7@=+CV-J:^''J8M"0*V%)ZV%)ZT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)ZUMST7K12OG],^&lt;OHXC_ LG,8B-Z7CII2]L1W.$)JR$)G.$)G-;SD1LSB]L^:QLI7.$)JR$)JQ;^41LSD1LSG-;^7-;^7-;)JR$)JR$I,M;SD1LHTN3A0"(@*^''T@1(R4-K14.#2&lt;-MSZV%)PB%@@@@@@@@@@@@@@@@@@@@22MD%!X;X&amp;I"#6TVZARLUD== CVD H5C]B (JL!2\,"$)JR$)JR$)G-;^2]LI7.$)G-;^:R$)JR$)JR$)JR$)G-;^41;^7-;^7.$)JR$^&lt;U,D&lt;#HSD0''HV^)!8AO):\+BH26-(&lt;L,+JI"S,VF&lt;I62:T@@@@@@@@@@@@@@@@@)RL&gt;YS-"CKHH 8RFC6LTEHXCS7:AMXF-Y7CI2" (]DUE/&lt;"$)JR$)JR$)G-;^7-;)JR$)G.$)JR$)JR$)JR$)JR$)JQ;SD1;^7-;^:R$)JSE[AI$QR]LSB\%&amp; &amp;/!J B)0J*#H"HV8ET*%RC,+JI#C-(]*V%@@@@@@@@@@@@)ZWBE#26N%.C*"4CTUNHC;Z6*$=O@8PHTH5C]B#JJB!E[V9.Q\V$)JR$)JR$)G.$)JR$)JR$)JR$)JR$)JR$)JR$)JR$)G-LSD1;^7.$)JR$\!I$$IBRIR]L2T''DOZ23*".'')76F"CHG@4&lt;+@"-=TJ6F#C(&lt;H:T@@@@@@@@@@@B%11X&lt;OS!V J!OS78C P:HDU,CS78E!8EPY17IJL((]F1,[F1.[,V$)JR$)JR$^7-;^:R$)JR$)JR$)JR$)JR$)JR$)JR$^41LSG-;^:R$)GJPM3\7M3^?SB]LI2F&gt;,@$3_Z^''J5RHL ^@J0J''):]=*(RHC3(&gt;SZT@@@@@@@@@@D5AYQP=N(YT_R,+S0N/"C"NL79O@5ZG E!CHR (JB!E[F1,[F1,[LN$)JR$^7-;I41;^7-;^7-;^:R$)JR$)G-;^7-;^7-;^7-;^7-;)BY.M0,KVU%YVQH''I41LRWA_A3UP@*\B_[N/!EQ=)71&lt;_@I=U@*KN#0#)P@@@@@@@@B%(;2QX82DKT&lt;+@ IO* :H#%-PS78E!0\E.WCIJB (]A^S$9NS$9NS[K&lt;&amp;)G-;I7,''SD1LSD1LSD1;^:R$)G-;SD1LSG-LSD1L^7-;^7/H[@-Y+*:.+#F.+''KHSD0''HTN,MZ4+@*\++[MSAW6''_G1&lt;)76*!E(O-$F%@@@@@@@@@JV_E&amp;N6#E,3*B,B@$=T"H :L75O_ ^3*U"X1B (2"!E$)JRD9JRD9JS$4T&amp;SD1LSB]LSD1LSD1LSD1;)JQ;^7-LSB (SD1LSD1L^7-;2IMYLSD1LXJB (JBYL (SD0%HX)VBJ B)0IPV5ZD*"-&lt;_G1&lt;@*)["0&gt;6FJL@@@@@@@@@S\HXEID:,5R(J0H+KXX8XP9PS4=Q!8R)OQ4%JL((]IJRD!HRD!HR$)JRD&amp;7HSD1LI40''SD1LJB!LSG-;^7-;SD0(JB!LSD1LSD1LSGQ$ (H0LJ.+*:.+K*../2\(JL$!Y5ZGUB.'')2.-B%Z-J:]&lt;_G2''J:!VCX9(]*T@@@@@@@AM\S&gt;QXZ&gt;@_$&lt;+J76-V066BG9O_%N3 UZX\B (R,(ZYFQ$YFQ$YAI$YAI$$&amp;3E^41LSD0''I41LSD1LSG-L^7-LSB]LSB\''SB]LSD14M8JB*28.K"9?_21?_28SI2\(SGRZV0&amp;D_Z\B@"5[ XAO@*Y&lt;_J]=+[L8C313)P@@@@@@@JL&gt;EFM!#KMT_$&lt;+S0VGC82*S4&lt;-!CV@W14%JL+J]FP7M3\7M9BP$IBPYFQ$YIOC^:R$)JR$^7-;SD1;^2]L^41L^7-;)JQ;SB\''/5$0K"9?_20,@PDA)*Z&amp;KJ/E^2]L2JA''A(^*@*^''J8R3 X@+)71&lt;)76CC &lt;O%WEM@@@@@@@@(&lt;DY.K :MR5OS4&gt;*!H"6!*!O_%R3 P^U\L$(2,)-M3\7B0,KM3\7M3\7M9BPYIKC^7.$)JQ;^40''I41;2B];I2]L^7.$)JQ;^;=YK"9?_20A)''1&lt;J"(*J"*&amp;@V:$^2\''(GB1BSL+@*\B*%.DL:"''_G2''@*!SV &gt;:G44@@@@@@@CG[6"6NEZ@_$=OKSN3C0&gt;*S4=&gt;!H^)#TM4JB (R)HKB0,KB0,KB0,KB0,7M3\7$II2^7-;)G-;SD1;^7/H2T1LSG-;^7-;^7-. "8._22&amp;_B(*J"(*J"(*J"*&amp;-T!;SG,''H[%V,5@B):]=!*=QS:]&lt;_G0BT@VE"895(0@@@@@@@I&lt;V$VD8BXDCS4&lt;-AX\Q,:!O_(B3U(E''G\%LJB!EM0,KVU%YVU%YVU%YVP,KB3\7M1KH^:R$)JR$)G-;SL%JSG-;)JR$)JR$1U$._22&amp;_B(*J"(*J"(*J"(*J")?[*Q;^2\%P;FG+T&gt;'')0ITV8AO@*]&lt;)0ITV3$9EA"#@@@@@@@@\12:$[ O,8AOS7:@C6F-S4&lt;C+P(E"DODJD0(JFQYVU&amp;.+*:.+*:.+*:.VU$KB0,7[L!;^:R$^7-;^7-LR$)L^7.$)JR$)JR$$G&lt;,)"(*J"(*J"(*J"(*J"(*J''1\RBY;^4%0W:&gt;3TJ]&lt;)76F!%Q=@ J''@*"-NC&amp;:1,^%@@@@@@CBG1&amp;8-8"DKZ -UCU#V:!OS8@5!J%''G\$(JB!2VZ81LSFB (JB (H1LSF.+%%YB3_C^7-;^7-;^7-;^2!J]B!L^7-;^7-;^:R]_:X*J"(*J"(*J"(*J"(*J"(*J''=@)G-L^2FXWX^-J:^''@%Q[ Z +@*\BS0L2V+](H:T@@@@@)\I5E@&lt;J+HB@*#LHC883S4&lt;C [LEVDODJB (JIH1 #@0LC@0LC@0LC@0 (H1+*9Y$,!;^7-;SD1LSG-;2T)42T1LSD1LSD1L^4"5)"(*J"(*J"(*J"(*J"(*J"(*))CL^7,''IY2M,CUO):^''*E,HS0HB@".(AUYZN[+B)P@@@@AMPVU#N("/ X@-KXQ#V24BS8@5!0U+P4$(JB!2VS@0 #B+K"8.K":+*:,0LHJBLZ92^41LSB (JB (SD3IR''SJJB (SD1LSD1L)AX,J"(*_B(*J"(*J")&lt;J"(*J"(*T,L&amp;I40''HQ*0B*(B):\+L5,-J0HBJ:)[NVA&amp;&amp;WF%@@@@@L,_1!R8OS 5 G8CV;X3S4=&gt;T0(2BY#D2R (SIL0LJ,.K"8.K''=?_28.K":+LCBBB2];^41LJB (2"!LSB_IR" (JB!LSD1LSB];0;U&lt;J"(*J"(*J"(*J"(*J"(*J"(AD2YLI2\%\KQX 76'')0H-V0!=J0H+*CLMNVZW\ZT@@@@@S\IFY+ =N@(GTZ5##B5OS0ND!0P=GRT(JD3HLS@.K''=?_7&lt;,KB1?_7=?K"8.LCA,^7-;^40(JB (SB_H1K--]L ''I7-;^7-LI2^$D E&lt;J"(*J"(*J"(*J"(*J"(*J''25''R]LSD$!Y;A[* J'')2.CC(A=@"-OTSIZXYW@)P@@@@B#G3&gt;QN%.DU(R/#FLHS2.(AP)VA;8]2R (SF0.K"9?KB0,)*XA) D,KB1?_28.V\N$)G-;I2\''I2\''^&amp;,UNU&gt;9[R];^7-;^2]L^:QHKJY&lt;J"(*J"(*J"(*J"(*J"(*J FSI$1LI2VZ-KNCJ:^''@%@NA78+J4=Q+KFKY"B%@@@@@L_AY[ZLV:=VU#V6#J(+S0ND,0POGWP(JB#HB29?_20A)*Z&amp;J"(*_G2&amp;) D,_28R^*R$)G(&amp;($$!HZJ\#[RHCU8P(JIHI*R$)JR$)L1\)"(*J"(*J"(*J"(*J"(*J")&lt;_KWL^40''RRE+,KMP@*^''J8Y[@2-OUKNH"1F:/D4@@@@@1&lt;F:X88OV8PEB&amp;LH*D=O KN/U)U02T0(I680_7&lt;,)*Y&lt;J"(*J")&lt;J")&lt;) D,*94&amp;RLUI(I2\''I2 ''FNHNH.K-H4?(*IHRD!HI"X&amp;I$ARJ''0*J"(*J"(*J"(*J"(*J"(*))6$^2\''(I)[V:5O@*\B* :DS7:-C#$9ZTI/SP@@@@A6Q!9&amp;.K :V5ZN#(EOS78GB(FMP2ELSB#H$B8,KJY&lt;_G1&lt;J")&lt;_G1&lt;)*Z&amp;@R1\)BX&amp;1T&amp;"RT$$IBR %U,M";R4")):3L3L3L0&amp;I"Z$RE^&amp;_G1&lt;J"(*J"(*J"(*J''0*J"*&amp;WBX''I2]I(KZG!"4+)0J(! 8C_%DG"H-&amp;%&lt;EM@@@@@GYFG+(=-# 5C&amp;X8U@LCASV/AV-0I40(I7J+_22&amp;)''0,T%IRUUUUUU]WU50SD96$)JR$)JR$^''):^*J"#X*J-H(&lt;3L3L3L3L3JR$)BZ$PALSWE]WU;UUUUURT%HA)''2&amp;) EUPB\''SB^ ]0&amp;3AT&lt;B@* HN(PC@2&lt;2M(.:Q44@@@@@H&lt;E($P&gt;HBU-)H+*F Z&amp;A+8P-#Q5LSD1LQYBP$ANS$1]@[$B]''Y7C^&lt;3L3JR$)JR$^:R$)JR$)L2$3L3C.5&lt;P%&lt;WL3L3L3L2$)G-;^7.$)JSL3L3L1Y6]04A@[&amp;2S$1L7$IA.I41L^2PP*Z&lt;ES2-OUC))N(@CTZ21"6X\(0@@@@B_0[*6C8"GMQQ8%81VA@R/!8BC.2\(JD1;I"X&amp;)JP&amp;)JR$^7-;)JQ;)JQ;^7-;^7-;^:R$)JR$)JR$)L1:(LWL3L3L3L2$)JQ;^7-L^7-;^7-;)JR$)JR$)G-;^2_HI&lt;WHR\!LJD3I''HNA!EE&gt;S0N3.!&amp;L@5R3CX.7Z[1K@@@@@I?AO6N6C8 IV9]8$X^,ACJG+U@PHR (JD1;^7-;^7-;^41LSD1LSD1;^7-;^7-;^7-;)JR$)JQ;)JR$)D"?/4#L3L3L)JR$^7-;^7-LSG-;^7-;^7-;^7-;^41LI2 ''I2\''2R (JBU'' HRA@79&gt; C(Y.#M&gt;UE,9XF&amp;=GL\@@@@@H4X^Y+"QN%.DEA8YC#J,+@$H@5 ]2\+JJD1L^7-;^7-;^7-;^7-;^7-;^7-;^:R$^7.$)G-;^7-;)JR$1TA@1\3L3L2$)G-;^7-;^7-;^7-;^41;^7-;^7-;^7-LSD1LSD0(JD3IHX(E+:$C_ LGY).6KW9QA0*KY)-GR0@@@@@#Q!::X;XN,0^LH''!#+:2,+8\ETK-4R$+JJD1;SG-;^7-;^7-;^7-L^7-;^7-;^:Q;^7-;^7.$^:R$)JSE[$CE3L2$)JR$^41L^7-;^7-;^7-;^7-;^7-;^7-;^7-LSD1LSD0(SB\ZA5ZDTW9&gt; E.[%XY&gt;_ L/L#ZK.,[G@@@@@G[AO9D:C+N3! 8?G+(J+J1VMHR(#WIJ2,((SG-;^7-;^7-;^7-;^41;^7-;^7-;^7-;^7.$)JR$)JR$)LU@/4"$)JR$)JQ;^41;^7-;^7-;^7-;^7-;^7-;^7-;^7-;SD1LSD0''(AB)BUMQ_ NAOY-#KT=&gt;@2&lt;2M(-&amp;1''X@@@@@''&lt;E(X0&lt;8V;LHBKY8^@&lt;I+CJ/MX@3.2WJ2"!L^7-;^7-;^7-;^7-;^7-;^7-;^7-;SD1;^7.$)JR$)JR$1TB?)L2$)JR$)G-L^7-;^7-;^7-;^7.$^7-;^7-;^7-LSG-L^41LSB\]!HF/*PLCTP*U%P +J4&lt;E!8,9-9WFH:T@@JU3Q#&lt;TOX8NMPT-L3&lt;^.KEVL*&gt;3+U@P]B#JJD1;^7-;^7-;^7-;^7-;^7-;^7-;^7-LSD1;^:R$)JR$)JP&amp;/96$)JR$)JQ;^7-L^7-;^7-;^7-;^:R$^7-;^7-;^7-;^7-LSD1LIV^)+0]QK0MSXY,T*",BS8BGNS%&amp;/\Y6)P@@)ROA^APTX805 J -EA:[NK@2U(\5*E"&gt;2,((JD1LSB];I41;^7-;^7-;^7-;^40''SB\''I41;)JR$^:R$)JR?0:R$)G-;^41LSB\''^40''^7-;^7-;^7-;^7-LSD0''SD1L^7-LSB_D"%NFT2&lt;/TZ=)&amp;80-J2-O@:$I-C4Y1$.%@@B%H&lt;EBEC6NC(ZC 0"OH''!#!3IV+5.**&amp;]42,((SD1LSD1L^7-;^7-;^7-;^7-;^41LSD1LSG-;^7-;^7.$)K?C)JQ;^40''2B\''SD1;SD1;^7-;^7-;^7-;^41LSD1LSG-;^40''IQ*-A:&lt;DK2&lt;ENI-)L: +J4&lt;C*SIZNYV^1:T@@@B_0\XT# &lt;NV;J2"X1(G&amp;&amp;H+5Z/,3N(#W@(2"!LSD1LSG-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^:R$0&lt;"$^7-;^41LSG-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;I43DW:$5U"&lt;/K5Z8&amp;0&gt;(J0HBS8BDV(.7FY8#@@@@)Y?AP!Q## :3+Z(-* 18P#(4U*&lt;I,25T.&lt;$(JB!LSD1L^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^:SCI*Q;^7-;^7-;^7-;^41;^7-;^7-;^7-;^7-;^7-;^7-L^40''I4LHT8]SK2&lt;DV)U)!D&lt;B@ H+ KNKNV&amp;=GGX@@@@@''&lt;F!EK =C(P-_$=&gt;UI%FEE./+0%[+UA_H\+JJB!LJD1;^7.$^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7.$)L"$^7-;^41LSD1LSG-LSG-;^7-;^7.$)G-;^7-;^7-;^7-LSB]IZ8BD+0P/K3J7&amp;;"C*B,B@",CA;FKY)]GR0@@@@@#0Q::$X9[B@"F,($L.''"WC8^/MKD5*@!-R$+JJB (SG-;^:R$^7.$^7-;^:Q;^7-;^7-;^7-;^7-;^:R$)JQ;I2\(JB (JB!LSD1L^7-;^7-;^:R$^7-;^7-;^7-;SD1LI91X*[L2AB&lt;DM&amp;&amp;[V:6(J0HBJ0N)BP67]99K@@@@@I?AG)U#N 9[,+JI"P0&lt;&amp;W"QV:&lt;4!U.@TF-4R$+JJB ''SG-;^7-;^:R$^7-;^7-;SD1LSB\''I2]LSD1;)JR$^7-LJB#J2,+JJB!LSB];^7-;^7-;)JQ;^7-LSD1LSD1LSD1I.0TGBZ0DK5NK&amp;1R)_ J'')0IO @$MNV&amp;WGJL@@@@@H1&lt;^O; =C(P-@0N(@3NQG!&amp;4!Z&gt;EB(R("''AJR,((SD1;^7-;^7-;)JQ;^:R$^7-;SD1LSG-;^41LSG.$)JQ;^40(JB#JJB (SD1;^7-;^7-;^7-;)G-;SD1LSD1LSD1LSBFM*P&amp;/AJ$D+6Z[N(EPJ0HBJ78E,X,=&amp;1%GSP@@@@CGG197$S6L!*6*UCNC,;Y8P+Z1MCR1,5B*[RWJ2"!L^7-;^7-;^7-;)JR$)JR$)G-LSD1L^7-;^2];)JR$)JR$^2]LSD1LSD1L^7.$)JR$)G-;^7-;^7-LSB ''I41LSD0''/(QS,SHDAZ2HF[(NBEQOJ2-O_%EVV &gt;UO2AM@@@@@JO@G''!)X0&lt;N,8Z2CH2OX6 ^Y+REMH][+UA_1B (JD1;^7-;^7-;^7.$)JR$)JR$^41LSG.$)JR$^:R$)JSL)JR$)G-;^7-;^7-;)JR$)JR$^7-;^7-;^41LSB\''SD0''SBV9 J&lt;4+@PD+1F[XP]Q*B,BJ4&lt;CA8"KOW\?Z$4@@@@@(&lt;CAG!&amp;QN%.A EF@ @][X7 "C;FE!U,HT@"&gt;JB (SD0''SG-;^41;^:R$)JR$)JQ;^7-;)JR$)JR$)JSL3L3L3L2$)JSL3L2$)JR$)JR$)JR$^7-;^7-;SD1;^7-LSD0''HP"@B*&lt;DA@QZZYVKMXF@_W5O*HB/CVE)]6!A)P@@@@AM0F&lt;^FQRNC#UVL8R3C(&lt;TP!9#"HVEB%.*TK$%2,((SD1LSG-;^7-;)JR$3L3L)JR$)JSL3L3L3L3L3L3L3L3L3L3L3L3L3L2$)JR$)JR$)JQ;^7-;^2\''SB\''I40(SBTZ @^EL PDL+^[Y(,8,:4-T@N)T0%ZC6&amp;=FDR%@@@@@JUD[4YF^ARN#H![,80:-)FUG!$O!8V1"HN("Q5JR,((SD1L^7-;^:R$3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L)L3L3L3L3JR$)JR$)JR$)JQ;^7-;I2\''I2]LSB#IHX6@MSPFAJ2EZY,QCP)VAXB@*UN/C[])%3&lt;&gt;QJT@@@@@)TP (TX"$S(8,;L5V3(&lt;EA$^P+Y[,XVH,0MP/$)J2"!LSD1;^:R$)JSL3L3L3L3L3L3L3L3L3L2$3L3L3L3L3L2$)L3L3L3L)JR$)JR$)JSL)JR$^7-;^7-;SD0(JB^&gt; 8F1+:0DL(.[&amp;34QNP:3+:&lt;4!5(OY$JWO3:_@@@@@@B%H4E/G!8^G''^Q-(&gt;6EFV:ZLX^. :1,[FH+W5_H\+JJD1LSD1;)JR$3L3L3L2$)JR$)JR$)JR$)JR$3L3L3L3L3JR$)JR$)JR$)JR$)JR$)L3L)JQ;^41;^7-LJB (IQB@!KD2+J04O[6[.C66C08NNH-!.IV[%9\XO$,@@@@@@JWGPRA/(Q9FH''\YZC?FQ7!8(ZD"C5*1B("F*HN&gt;R$+JJD1LSD2$)L3L3L3L3JR$)G-;^7-;)JR$)JR$3L3L3L2$)JR$)JQ;^:R$)JR$)JSL3L3L)JQ;SG-;SD0(JL%0VH@JMCJ,L+Q)%2JY]9%(FQ$Y];5BH)]7FA!A20@@@@@@@D7BF2@\Q7"!G!:!(Q;AQ$Y8^A:QNKE[V%.**+$%R,+JJB (I7.$3L3L3L2$)JR$^41LSD1LSG-;^:SL3L3L3JR$^7-;SD1;^7-;)JR$)L3L3L3L)G-;^41;SB (I[.@A5*/L X4DY\Y1''!GQ12^&amp;\[F&amp;Y$?FC&lt;?O,J%@@@@@@B%)WYA%+2&lt;Z+2&lt;''):&lt;/K0\Z"AGG!$O"KEZC(R("!5JR,+JJB ''^:SL3L3L3JR$)JQ;SD1LSD1L^7-;)L3L3L3L)G-;SD1LSB]LSD1;^7.$)L3L3L2$^7-;^2]LSL$!"(BG!Z&lt;FL%*:]3=80\GA0\EGGI:^]S8X''&amp;+@10@@@@@@@@B%SY?@0LC@G&lt;C@0A&lt;_G1&lt;_G4^!^FNHB("HV:"*[T)J2,((JD1;)L3L3L3L)JR$)G-;^7-;^7-;^:R$3L3L3L2$)G-;^7-LSG-LSG-;^:R$3L3L3L2$^7-;^41L2[:- P(4L Z/"9-7''$YF\WE1\TX_G1&lt;_0A=AQGZ%@@@@@@@@@@B%SWZ_0$S@0LC@0LC@0L@_Q$\^ZP&gt;HV( 8+Z"M1D+JJD1L^:R$3L3L3L3L3JR$)JR$)JR$)JR$)L3L3L3L3JR$)JR$)JR$^7-;^7-;)JSL3L3L3JR$^7-LSB\%W:&amp;/B#P2L+DTH!#AG4QDQDQDQDQDQLKB\2N#)P@@@@@@@@@@@@@@@JWK(2''G]"L#''7OB0''M1GA9BXP8J"H"F*J5C2R (SD1;)JSL3L3L3L3L3JR$)JR$)L3L3L3L3L3L3L3L)JR$3JSL3JR$)JR$)JR$)L3L3L2$)JQ;^7,''I15X*P*1+3J/CQ$?FGGB\2M6]"M61&lt;\)(&lt;-M@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)PB%SRMAQ18TNH!ZC%.*TA@%I41LSD1;)JR$3L3L3L3L)JR$)JR$)JR$)L3L3L3L3L3L)JR$)JR$)JR$)JR$)JR$3L3L)JR$^7-;^7,$Z:%V"HV/,HT=%3&gt;&lt;0*N%@@B%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(4P G#&lt;O"H"4NHR@"!+DRR\''2R];^7.$)JR$)JR$)JR$^7.$)JQ;)JR$3L3L3L2$)JR$^7-;^7-;^7-;^:R$)JR$^7-;^2\''HY"M*[D6MJ&gt;/"F&amp;WFDE6)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%H;1/G&amp;L8-H 8"J&gt;0,U9+P2GII41LSG-;^:R$)JR$)JR$)JQ;)G.$)JSL3L3L3JR$^7-;^7-;^7-;SD1L^7.$)G,''I2\%G[.M" &amp;/"KD4+3Q!&amp;7\&gt;QD4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B#QD\^F@&gt;4"C"K"8"E,KB4EV7D2T1;SB]L^7.$)JR$)JR$)JR$)JR$3L3L3L3L3JR$)JR$^:Q;^7-LSD1;^7-;I4$!/+!^WSRE,X M,SP4M&amp;ZWFDD#)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JT#P\D"- 88XVE "8,MM+B0WU&lt;Z\BT''I2]LSG.$)JR$)JR$)JR$)L3L3L2$3JR$)JR$)JQ;^7-LSD0(SD1LI4$]F!VTWSR1V 6K"3&amp;K,XVK]7\&gt;0,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D7B[18T#)D=D[^7XF@9"5(4A+B4E[8!RR]LSG-;^7-;SD1L^7.$)JSL3JSL)JQ;)JR$^41LSB (JB!L2RF&gt;Z59]MKD6CX.KNS$9#!D=NIFWFDEM)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@GYA0T\?H)TTOQF7-6@9NX.H!PXF,QTZ\D$''I2\''SD0''SD1L^7.$)L3L3L2$I"Y;^7-LSB\(JB!L2RE-E[Q]MKFH"8,9NS%!-8:8Z[4YFY%(H:T@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@S\@ [7"!G$I7.)D=DQF7XS$9"3Z0A Z4.[8!I2\''I2\''I41;)JSL3L3L3JR$^7-LSD1LSD3II[9+W+D4ME*K"3$9XFB7OS5&amp;]4IBP)''FO$GK@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%0!-*GD]8^A:!&amp;[(TX1DQ-;] NX-ZMJ2,,QU-HT$''SD1;^7.$)JSL3L2$)JQ;^7,''SB_I1K:9-E44,U*K"3$9-;^7D[!)]4IBP)&amp;YO1 &gt;\:T@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B#PYZ&lt;Z+0\Q7"!G'' Y.+ QO[^7-3&amp;KC[D2+KA^Z14%I2];^7.$)JR$)G-;SD1LI2\%GV]_,[@4M(.KNS% -;^7OVZUH$IB1)$?]WU5%,B#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JV#''&lt;@[Z&amp;*^GD]G(Q98%6&amp;8X34Q-6E NX.H,J2,,QB&gt;HR\''I2];^7-;^2\''I&lt;$!/+&amp;4MK@4"H,9NVB7-;^7.F%7P$H"1)$XO7U5/LB_(0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%(2O@P[15]T\\(ZE8^DHYEID=DQF7XC&amp;K"CR,+KBM.7AII2]L^41LI4%0F!V1,J&gt;1CS$9XFB7DQD=.IV=^DJY1)%5FGV^HDE3(:T@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SROB0F&lt; Z):^GD]8(Q98];(TOS4=D[^7XH.1L R,%AU-HR\''I2F&gt;.YR0A#RH"3$9-;^7DS68.'']BP"KF&amp;S&lt;XFGV&lt;Q6?B\:L@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SRMDQGEA/K2^'',YGQ7 ^^BJU.C4=OQDQ-3&amp;KV%XD+KBMY4LZW560A+F4"3% -;\QDQF8%RIBP"KF''#&lt;XFGV&lt;[&lt;H_0GOK@JT@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)WYD0GE10V&gt;&lt;''):^GD]8(Q8^];*QOS4QDQE NP4I+J&amp;,,[B,MCZKXFB7D[\QO[!&ampamp;Y&amp;YFA!5]T]1G1=/GK0[F4R#)P@@@@@@@@@@@@@@JR$)JW%9JP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D7GQA,[%$E/G4Y1[;2^]Y:&lt;GD^!(W "FQP=OS4QDS4=.IT"^BKF1)%5FA!5''&amp;=10&amp;=//K2V%$P#20@@@@@@@@@@@@@@@@@)^W%9^W$)S @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AMH4P[Z"B&lt;[6=1Q,EA/GU5/A0\^LD^^I&amp;:.FNQZW]B^BKF&amp;WU5FGV^GDYFQ$F&lt;Z)ZV%,B_(0@@@@@@@@@@@@@@@@@@@GY9JR%9^R$)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@27L[F9ZV/DE/0TY1[;15]Y:^Q7"!(W "&amp;Y%8^L[F&amp;WTXFA"^[1=FQ$\\/F)*Z)[B(:T@@@@@@@@@@@@@@@@@@@@@JR%NS''$)S"%N@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)ZM3F9ZV%)X PV&lt;_G1=G''''V^''!1G^JE8P,ZY&amp;S&lt;XFI8\0TYFQ11*/F)*%!-D(:T@@@@@@@@@@@@@@@@@@@@@@@A9^R$)^ZL@S"%N@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)ZWG\&lt;@[%)ZV/BCAQ$[AQ9:^]Y8\Q&lt;Z^FA X]WT\G1?AQ;2&lt;Z&amp;*V%!/B]$4@@@@@@@@@@@@@@@@@@@@@@@@@@B$)S,-9(0@@(2$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%SZN_QDD[%)ZVPV?B0,EG''''V^FA!5'')9GG1=/HK2VZ)ZV0DQ62:T@)P@@@@@@@@@@@@@@@@@@@@@@@@@@JR$)JR%N@@@@S @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@JUM(2OBPQ,[PTEA\Q&lt;_PV(&gt;Z+0_G1=APYZVF1-D\&lt;]M)ZV%)P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@S AN@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D6#12M30$QDQDR_0!/@QDS@QLJ_''9&lt;#(46%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B%)ZV%)T6%(:N#]''[G(&lt;-M)PB%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body></methods><methods><class-id>RobotInspector class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="robot:">robot: aRobot		^self new initialize; robot: aRobot; open.</body></methods><methods><class-id>BrushUp</class-id> <category>robot functions</category><body package="Robot - Segunda Practica" selector="move:">move: aDistance		self robot doMove: aDistance.</body></methods><methods><class-id>BrushUp</class-id> <category>state changes</category><body package="Robot - Segunda Practica" selector="lowerBrush">lowerBrush		self robot state: (InPlaceBrushDown robot: self robot).</body></methods><methods><class-id>BrushUp</class-id> <category>state changes</category><body package="Robot - Segunda Practica" selector="liftBrush">liftBrush		"Do nothing - brush is already up"</body></methods><methods><class-id>BrushUp</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="isBrushUp">isBrushUp		^true.</body></methods><methods><class-id>BrushUp</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="isBrushDown">isBrushDown		^false.</body></methods><methods><class-id>InPlaceBrushDown</class-id> <category>robot functions</category><body package="Robot - Segunda Practica" selector="move:">move: aDistance		self robot startNewPath.		self robot state: (InMotionBrushDown robot: self robot).		self robot state move: aDistance.</body></methods><methods><class-id>RobotState</class-id> <category>robot functions</category><body package="Robot - Segunda Practica" selector="position:">position: aPosition		self robot setPosition: aPosition</body></methods><methods><class-id>RobotState</class-id> <category>robot functions</category><body package="Robot - Segunda Practica" selector="move:">move: aDistance		^self subclassResponsibility.</body></methods><methods><class-id>RobotState</class-id> <category>state changes</category><body package="Robot - Segunda Practica" selector="lowerBrush">lowerBrush		^self subclassResponsibility.</body></methods><methods><class-id>RobotState</class-id> <category>state changes</category><body package="Robot - Segunda Practica" selector="liftBrush">liftBrush		^self subclassResponsibility.</body></methods><methods><class-id>RobotState</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="isBrushUp">isBrushUp		^self subclassResponsibility.</body></methods><methods><class-id>RobotState</class-id> <category>testing</category><body package="Robot - Segunda Practica" selector="isBrushDown">isBrushDown		^self subclassResponsibility.</body></methods><methods><class-id>RobotState</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="robot">robot		^robot.</body></methods><methods><class-id>RobotState</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="robot:">robot: aRobot 		robot:=aRobot.</body></methods><methods><class-id>NewRobot</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="yPos">yPos	^yPos</body></methods><methods><class-id>NewRobot</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="xPos">xPos	^xPos</body></methods><methods><class-id>NewRobot</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="name">name	^name</body></methods><methods><class-id>NewRobot</class-id> <category>initialize-release</category><body package="Robot - Segunda Practica" selector="initialize">initialize		super initialize.		self name: '' asValue.		self xPos: 0 asValue.		self yPos: 0 asValue.</body></methods><methods><class-id>NewRobot</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="yPos:">yPos: anObject	yPos := anObject</body></methods><methods><class-id>NewRobot</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="name:">name: anObject	name := anObject</body></methods><methods><class-id>NewRobot</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="xPos:">xPos: anObject	xPos := anObject</body></methods><methods><class-id>NewRobot</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="createRobot">createRobot		world 			addRobot: (Robot position: (self xPos value @ self yPos value))			named: self name value.		self close.</body></methods><methods><class-id>NewRobot</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="world:">world: anObject	world := anObject</body></methods><methods><class-id>NewRobot</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="world">world	^world</body></methods><methods><class-id>RobotWorldTextEditorController</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="doItEnvironment">doItEnvironment		| env |		env:=NameSpace new.		env name: 'RobotNameSpace'.		"env at: 'Robot' put: Robot."		"env at: 'world'  put: self world."		self world namedRobots keysAndValuesDo: [:key :value | env at: key put: value].		RobotApplication definedClasses do: [:cls | env at: cls name put: cls].		^env.</body></methods><methods><class-id>RobotWorldTextEditorController</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="world">world		^world.</body></methods><methods><class-id>RobotWorldTextEditorController</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="world:">world: aWorld 		world:=aWorld.</body></methods><methods><class-id>Path class</class-id> <category>instance creation</category><body package="Robot - Segunda Practica" selector="new">new		^super new initialize.</body></methods><methods><class-id>Path</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="points:">points: aPoints 		points:=aPoints.</body></methods><methods><class-id>Path</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="points">points		^points.</body></methods><methods><class-id>Path</class-id> <category>path functions</category><body package="Robot - Segunda Practica" selector="addPoint:">addPoint: aPoint		self points add: aPoint.		self changed: #pointAdded.</body></methods><methods><class-id>Path</class-id> <category>initialize</category><body package="Robot - Segunda Practica" selector="initialize">initialize		self points: OrderedCollection new.</body></methods><methods><class-id>RobotInspector</class-id> <category>changing</category><body package="Robot - Segunda Practica" selector="tabsChanged">tabsChanged	"Every time a tab is changed, a new sub canvas gets installed."		| index |		index := self tabs selectionIndex.		(self builder componentAt: #tabbing) widget client: self spec: (self specArray at: index)</body></methods><methods><class-id>RobotInspector</class-id> <category>initialize</category><body package="Robot - Segunda Practica" selector="initialize">initialize		super initialize.		self myselfText: self defaultText asText asValue.		self inspector: NoRenamingInspector new.		self browser: (InstanceBehaviorInspector on: nil).		self explanationText: 'Mientras que los objetos se refieren a mi con el nombre de ''robotech'' yo me refiero a mi mismos como self' asText.		self explanationText emphasizeFrom: (self explanationText size - 4) to: self explanationText size with: #bold.		self direction: '' asValue.		self battery: '' asValue.		self position: '' asValue.</body></methods><methods><class-id>RobotInspector</class-id> <category>menus</category><body package="Robot - Segunda Practica" selector="myselfTextMenu">myselfTextMenu		^[Menu				labelList: ParagraphEditor editGroupLabels, #(('do it' 'print it' 'inspect'))				values: ParagraphEditor editGroupSelectors, #(doIt printIt inspectIt)].</body></methods><methods><class-id>RobotInspector</class-id> <category>menus</category><body package="Robot - Segunda Practica" selector="doItContext">doItContext		^nil</body></methods><methods><class-id>RobotInspector</class-id> <category>menus</category><body package="Robot - Segunda Practica" selector="doItReceiver">doItReceiver		^self robot.</body></methods><methods><class-id>RobotInspector</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="inspector">inspector		^inspector.</body></methods><methods><class-id>RobotInspector</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="tabs">tabs		tabs isNil			ifTrue: 				[(tabs := SelectionInList with: self labelArray) selectionIndex: 1.				tabs selectionIndexHolder onChangeSend: #tabsChanged to: self].		^tabs</body></methods><methods><class-id>RobotInspector</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="myselfText">myselfText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^myselfText</body></methods><methods><class-id>RobotInspector</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="battery">battery	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^battery isNil		ifTrue:			[battery := String new asValue]		ifFalse:			[battery]</body></methods><methods><class-id>RobotInspector</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="name">name	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^name isNil		ifTrue:			[name := String new asValue]		ifFalse:			[name]</body></methods><methods><class-id>RobotInspector</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="explanationText">explanationText		^explanationText.</body></methods><methods><class-id>RobotInspector</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="position">position	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^position isNil		ifTrue:			[position := String new asValue]		ifFalse:			[position]</body></methods><methods><class-id>RobotInspector</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="direction">direction	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^direction isNil		ifTrue:			[direction := String new asValue]		ifFalse:			[direction]</body></methods><methods><class-id>RobotInspector</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="browser">browser		^browser.</body></methods><methods><class-id>RobotInspector</class-id> <category>aspects</category><body package="Robot - Segunda Practica" selector="theInspector">theInspector		^inspector.</body></methods><methods><class-id>RobotInspector</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="robot">robot		^robot.</body></methods><methods><class-id>RobotInspector</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="robot:">robot: aRobot 		robot:=aRobot.		self updateValueHolders.</body></methods><methods><class-id>RobotInspector</class-id> <category>accessing</category><body package="Robot - Segunda Practica" selector="tabs:">tabs: aTabs 		tabs:=aTabs.</body></methods><methods><class-id>RobotInspector</class-id> <category>actions</category><body package="Robot - Segunda Practica" selector="refresh">refresh		self updateValueHolders.</body></methods><methods><class-id>RobotInspector</class-id> <category>private</category><body package="Robot - Segunda Practica" selector="updateValueHolders">updateValueHolders		| bat |		bat:=self robot battery.		self direction value: ('DirecciÃ³n : ' , self robot direction printString , 'Â°').		self battery value:  ('BaterÃ­a : ' , (bat charge printString) , '  (' , (bat charge * 100 / bat capacity) rounded printString , '%)').		self position value: ('PosiciÃ³n : ' , self robot position printString).		self inspector inspect: self robot.		self browser initialize: self robot.</body></methods><methods><class-id>RobotInspector</class-id> <category>interface opening</category><body package="Robot - Segunda Practica" selector="postOpenWith:">postOpenWith: aBuilder 		super postOpenWith: aBuilder.		self tabsChanged</body></methods><methods><class-id>RobotInspector</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="explanationText:">explanationText: anExplanationText 		explanationText:=anExplanationText.</body></methods><methods><class-id>RobotInspector</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="direction:">direction: aDirection 		direction:=aDirection.</body></methods><methods><class-id>RobotInspector</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="browser:">browser: aBrowser 		browser:=aBrowser.</body></methods><methods><class-id>RobotInspector</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="defaultText">defaultText^'"Me envÃ­o a mi mismo el mensaje #direction:, con parÃ¡metro 180"self direction: 180"Avanzo 30 pasos"self move: 30"Mensajes en cascada: dejo marcado mi recorrido y avanzo 20 pasos"self brushDown; move: 30'</body></methods><methods><class-id>RobotInspector</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="labelArray">labelArray		^Array			with: (self robot world getRobotName: self robot)"			with: 'self'"			with: 'Inside an inspector'"			with: 'Definition'"</body></methods><methods><class-id>RobotInspector</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="name:">name: aName 		name:=aName.</body></methods><methods><class-id>RobotInspector</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="myselfText:">myselfText: aText		myselfText:=aText.</body></methods><methods><class-id>RobotInspector</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="battery:">battery: aBattery 		battery:=aBattery.</body></methods><methods><class-id>RobotInspector</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="position:">position: aPosition 		position:=aPosition.</body></methods><methods><class-id>RobotInspector</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="specArray">specArray	"Private - The list of associated sub canvaes. See also #labelArray."	^#(#presentation #inspector #robotBrowser).</body></methods><methods><class-id>RobotInspector</class-id> <category>private - accessing</category><body package="Robot - Segunda Practica" selector="inspector:">inspector: anInspector 		inspector:=anInspector.</body></methods><methods><class-id>RobotController</class-id> <category>control</category><body package="Robot - Segunda Practica" selector="isControlWanted">isControlWanted		^self viewHasCursor.</body></methods><methods><class-id>RobotController</class-id> <category>control</category><body package="Robot - Segunda Practica" selector="isControlActive">isControlActive		^self viewHasCursor.</body></methods><methods><class-id>RobotController</class-id> <category>events</category><body package="Robot - Segunda Practica" selector="redButtonPressedEvent:">redButtonPressedEvent: event		RobotInspector robot: self model.</body></methods><do-it>(5 max: 10 * 10) min: 101-1</do-it><do-it>(5 max: 10 * 10)</do-it><do-it>(16 + 9 sqrt max:5) odd</do-it><do-it>(16 + 9 sqrt max:5)</do-it><do-it>(16 + 9 sqrt max:5)</do-it><do-it>(16 + 9 sqrt max:5)</do-it><do-it>9 sqrt</do-it><do-it>(16 + 9 sqrt max:5) odd</do-it><do-it>(16 + 9 sqrt max:5)</do-it><do-it>(5 max: 10 * 10) min: 101-1</do-it><do-it>(5 max: 10 * 10) min: 101-1</do-it><do-it>3 factorial + 4 sqrt between: 8 and: 100</do-it><do-it>3 factorial + 4 sqrt between: 8 and: 100</do-it><do-it>3 factorial + 4 sqrt between: 8 and: 100</do-it><do-it>(5 max: 10) * 10 min: 101</do-it><do-it>(5 max: 10) * 10 min: 101</do-it><do-it>3 factorial + 4 sqrt between: 8 and: 100</do-it><do-it>(5 max: 10) * 10 min: 101</do-it><do-it>3 factorial + 4 sqrt between: 8 and: 100</do-it><do-it>Transcript dependents first</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('image\Objetos-1-2010.im' 'August 23, 2011' '6:37:06 pm')""An image file image\Objetos-1-2010.im was created at 6:37:06 pm on August 23, 2011."</do-it>