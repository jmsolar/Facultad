<?xml version="1.0"?><st-source><!-- Name: SMTPNotice: Copyright © 1999, 2000, 2002, 2002, 2001 Cincom Systems, Inc.  All Rights Reserved.Comment: SMTPSupport provides a very basic SMTP Client that alllows you to send rfc822 messages to a SMTP server.DbIdentifier: bear73DbTrace: 53250DevelopmentPrerequisites: #(#(#any 'Mail' ''))PackageName: SMTPParcel: #('SMTP')ParcelName: SMTPPrerequisiteParcels: #(#('Mail' ''))PrintStringCache: (7.4  0,tkogan)Version: 7.3.1Date: 6:45:50 pm April 10, 2005 --><time-stamp>From VisualWorks®, 7.3.1 of April 10, 2005 on April 10, 2005 at 6:45:50 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SimpleSMTPClient</name><environment>Net</environment><super>Net.NetClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars>connection stream serverResponse </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-SMTP-Support</category><attributes><package>SMTP</package></attributes></class><comment><class-id>Net.SimpleSMTPClient</class-id><body>SMPT Client. Sends rfc822 messages to SMTP serverInstance Variables:	server	&lt;String&gt;  comment	user	&lt;String&gt;  comment	connection	&lt;ExternalConnection&gt;  SMTP Server socket	stream	&lt;Stream&gt;  Socket stream	serverResponse	&lt;String&gt;  commentShared Variables:	CRLF	&lt;String&gt;  comment	DebugLevels	&lt;Set of: ?type?&gt;  comment	DebugStream	&lt;type&gt;  comment	DefaultPort	&lt;Integer&gt;  comment	ENDDATA	&lt;type&gt;  comment</body></comment><shared-variable><name>DebugLevels</name><environment>Net.SimpleSMTPClient</environment><private>false</private><constant>true</constant><category>debugging</category><initializer>Core.Set new</initializer><attributes><package>SMTP</package></attributes></shared-variable><shared-variable><name>DebugStream</name><environment>Net.SimpleSMTPClient</environment><private>false</private><constant>false</constant><category>debugging</category><attributes><package>SMTP</package></attributes></shared-variable><shared-variable><name>ENDDATA</name><environment>Net.SimpleSMTPClient</environment><private>false</private><constant>false</constant><category>constants</category><attributes><package>SMTP</package></attributes></shared-variable><shared-variable><name>CRLF</name><environment>Net.SimpleSMTPClient</environment><private>false</private><constant>true</constant><category>constants</category><initializer>Core.String with: (Core.Character cr) with: (Core.Character lf)</initializer><attributes><package>SMTP</package></attributes></shared-variable><methods><class-id>Net.SimpleSMTPClient</class-id> <category>accessing</category><body package="SMTP" selector="serverResponse">serverResponse	^serverResponse isNil		ifTrue: [serverResponse := String new]		ifFalse: [serverResponse]</body><body package="SMTP" selector="serverResponse:">serverResponse: aString 	self class log: [ ('R: &lt;1s&gt;' expandMacrosWith: aString) ] level: #SMTPServer.	serverResponse := aString.	self serverErrorCheck</body><body package="SMTP" selector="username:">username: aString	self user isNil		ifTrue: 			[ self user: 					(NetUser new 						username: aString;						yourself)]		ifFalse: [ self user username: aString]</body></methods><methods><class-id>Net.SimpleSMTPClient</class-id> <category>private</category><body package="SMTP" selector="closeConnection">closeConnection	stream ~~ nil		ifTrue: [stream close]</body><body package="SMTP" selector="createConnection">createConnection	| socket  |	socket := SocketAccessor newTCPclientToHost: self hostName port: self portNumber.	connection := ExternalConnection new.	connection input: socket; output: socket.	stream := connection readAppendStream.	stream lineEndTransparent.	self waitForResponse.</body><body package="SMTP" selector="sendLine:">sendLine: string	"Will CRLF terminate"	self class log: [ ('S: &lt;1s&gt;' expandMacrosWith: string) ] level: #SMTPClient.	MailIncrementNotification signalWith: string size. 	stream 		nextPutAll: string;		nextPutAll: CRLF;		commit</body><body package="SMTP" selector="serverErrorCheck">serverErrorCheck	"Raise an error if the last response from the SMTP server has an error."		| replyCode |	replyCode := (self serverResponse copyUpTo: Character space) asNumber.	replyCode &gt;= 400 ifTrue: 		[^self error: ((#SMTPError1s &lt;&lt; #net &gt;&gt; 'SMTP Error &lt;1s&gt;') expandMacrosWith: self serverResponse)].</body><body package="SMTP" selector="waitForResponse">waitForResponse	| result |	result := stream throughAll: CRLF.	self serverResponse: result</body></methods><methods><class-id>Net.SimpleSMTPClient</class-id> <category>sending</category><body package="SMTP" selector="sendMessage:">sendMessage: rfc822Message	^self 		sendMessage: rfc822Message 		toAll: rfc822Message destinationAddresses</body><body package="SMTP" selector="sendMessage:toAll:">sendMessage: rfc822Message toAll: receivers	self createConnection.	[self sendLine: ('HELO &lt;1s&gt;' expandMacrosWith: self hostName).	self waitForResponse. 	self sendLine: ('MAIL FROM:%&lt;&lt;1s&gt;%&gt;' expandMacrosWith: (self user isNil				ifTrue: [rfc822Message fromSendStrings first]				ifFalse: [self username])).	self waitForResponse.	receivers do: [:receiver |		self sendLine: ('RCPT TO:%&lt;&lt;1s&gt;%&gt;' expandMacrosWith: receiver).		self waitForResponse].	self sendLine: 'DATA'.	self waitForResponse.	[stream lineEndCRLF.	rfc822Message writeOn: stream]		ensure: [stream lineEndTransparent].		self sendLine: CRLF , '.'.	self waitForResponse.	self sendLine: 'QUIT'.	self waitForResponse]		ensure: [self closeConnection]</body></methods><methods><class-id>Net.SimpleSMTPClient</class-id> <category>connection</category><body package="SMTP" selector="isConnected">isConnected	^connection notNil</body></methods><methods><class-id>Net.SimpleSMTPClient class</class-id> <category>testing</category><body package="SMTP" selector="isIncomingMailClient">isIncomingMailClient	^false</body><body package="SMTP" selector="isMailClient">isMailClient	^true</body><body package="SMTP" selector="isOutgoingMailClient">isOutgoingMailClient	^true</body></methods><methods><class-id>Net.SimpleSMTPClient class</class-id> <category>private</category><body package="SMTP" selector="update:with:from:">update: anAspect with: arguments from: anObject</body></methods><methods><class-id>Net.SimpleSMTPClient class</class-id> <category>class initialization</category><body package="SMTP" selector="initialize">initialize	"self initialize."	super initialize.	self registerToDebug.</body><body package="SMTP" selector="registerClass">registerClass	self mailRegistry at: self serverType put: self name</body></methods><methods><class-id>Net.SimpleSMTPClient class</class-id> <category>constants</category><body package="SMTP" selector="description">description	^(#outgoingMailServer &lt;&lt; #net &gt;&gt; 'outgoing mail server') asString</body><body package="SMTP" selector="serverType">serverType	^#SMTP</body></methods><methods><class-id>Net.SimpleSMTPClient class</class-id> <category>debugging</category><body package="SMTP" selector="debugLabelsAndValues">debugLabelsAndValues	^OrderedCollection new		add: ((#SMTPClientMessages &lt;&lt; #net &gt;&gt; 'SMTP Client Messages')-&gt;#SMTPClient);		add: ((#SMTPServerMessages &lt;&lt; #net &gt;&gt; 'SMTP Server Messages')-&gt;#SMTPServer);		yourself</body><body package="SMTP" selector="menuItemName">menuItemName	^(#SMTPClientMessages &lt;&lt; #net &gt;&gt; 'SMTP Client Messages')</body></methods><methods><class-id>Net.SimpleSMTPClient class</class-id> <category>defaults</category><body package="SMTP" selector="defaultPortNumber">defaultPortNumber	^SocketAccessor IPPORT_SMTP</body></methods><initialize><class-id>Net.SimpleSMTPClient</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>NetClient</name><environment>Net</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>user hostName portNumber clientPI retries timeout delaySeconds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-Clients</category><attributes><package>NetClientBase</package></attributes></class></st-source>