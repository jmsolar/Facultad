<?xml version="1.0"?><st-source><!-- Name: HTTPSNotice: Copyright © 1999, 2000, 2002, 2002, 2001 Cincom Systems, Inc.  All Rights Reserved.Comment: This parcel adds HttpsStreamHandler extending the regular HttpClient with the ability to conduct an HTTP conversation over a securechannel established using SSL. A new type of URI corresponding to the 'https://' convention is added as well. Note that secure usageof SSL requires certain level of understanding of the issues involved, therefore we urge you to consult available SSL documentation,before relying on security of HTTPS.DbIdentifier: bear73DbTrace: 53238DevelopmentPrerequisites: #(#(#any 'HTTP' '') #(#any 'SSL' ''))PackageName: HTTPSParcel: #('HTTPS')ParcelName: HTTPSPrerequisiteParcels: #(#('HTTP' '') #('SSL' ''))PrintStringCache: (7.4  0,tkogan)Version: 7.3.1Date: 6:45:26 pm April 10, 2005 --><time-stamp>From VisualWorks®, 7.3.1 of April 10, 2005 on April 10, 2005 at 6:45:26 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>HttpsURL</name><environment>Net</environment><super>Net.HttpURL</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-Resources</category><attributes><package>HTTPS</package></attributes></class><comment><class-id>Net.HttpsURL</class-id><body>HttpsURL describes resources accessed using the HTTP protocol over SSL connection.</body></comment><class><name>HttpsStreamHandler</name><environment>Net</environment><super>Net.HttpStreamHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sslContext sslConnection validationBlock hostName </inst-vars><class-inst-vars></class-inst-vars><imports>			Security.*			</imports><category>Net-HTTP-Support</category><attributes><package>HTTPS</package></attributes></class><comment><class-id>Net.HttpsStreamHandler</class-id><body>HttpsStreamHandler is a stream wrapper over a secure channel established using SSL. It integrates necessary SSL infrastructure with the client. For detailed explanation of various SSL components, refer to the comments in the SSL package.Instance Variables:	sslConnection	&lt;SSLConnection&gt;	SSL connection between two parties	sslContext	&lt;SSLContext&gt;	environment for SSL communication	validationBlock	&lt;BlockClosure&gt;	subject validation block for server certificate</body></comment><class><name>HttpsClient</name><environment>Net</environment><super>Net.HttpClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			Security.*			</imports><category>Net-HTTP-Support</category><attributes><package>HTTPS</package></attributes></class><comment><class-id>Net.HttpsClient</class-id><body>HttpsClient is obsolete and will be removed eventually. The HttpClient creates http or https connection based on URL protocol.</body></comment><methods><class-id>Net.HttpsURL class</class-id> <category>defaults</category><body package="HTTPS" selector="defaultPortNumber">defaultPortNumber	^443</body></methods><methods><class-id>Net.HttpsURL class</class-id> <category>accessing</category><body package="HTTPS" selector="protocol">protocol	^'https'</body></methods><methods><class-id>Net.HttpsStreamHandler</class-id> <category>accessing</category><body package="HTTPS" selector="getResponseStream">getResponseStream	^(sslConnection withEncoding: self defaultEncoding )			readStream			lineEndCRLF;			yourself.</body><body package="HTTPS" selector="sslContext">sslContext	^sslContext ifNil: [ sslContext := SSLContext newWithSecureCipherSuites ].</body><body package="HTTPS" selector="sslContext:">sslContext: anSSLContext	sslContext := anSSLContext</body><body package="HTTPS" selector="validationBlock">validationBlock	^validationBlock isNil		ifTrue: [ [ :dnd | "Let's emulate web browser validation as default"				 hostName = (dnd at: 'CN') ] ]		ifFalse: [ validationBlock ]</body><body package="HTTPS" selector="validationBlock:">validationBlock: aBlock	validationBlock := aBlock</body></methods><methods><class-id>Net.HttpsStreamHandler</class-id> <category>initialize-release</category><body package="HTTPS" selector="openStreamFor:port:timeout:">openStreamFor: hNameString port: aNumber timeout: tmNumber	self disconnect.	hostName := hNameString.	sslConnection := self sslContext connectionFor: 						(self 							socketStreamWithEncoding: #binary							host: hNameString 							port: aNumber 							timeout: tmNumber).	[	sslConnection connectSubject: self validationBlock.	] ifCurtailed: [ sslConnection shutdown. ].	^stream :=		(sslConnection withEncoding: self defaultEncoding)			readAppendStream				lineEndCRLF;				yourself</body><body package="HTTPS" selector="sslContext:validationBlock:">sslContext: aSSLContext validationBlock: aBlock	sslContext := aSSLContext.	validationBlock := aBlock</body></methods><methods><class-id>Net.HttpsStreamHandler</class-id> <category>testing</category><body package="HTTPS" selector="isSecure">isSecure	^true</body></methods><methods><class-id>Net.HttpsStreamHandler</class-id> <category>stream</category><body package="HTTPS" selector="disconnect">disconnect	sslConnection notNil ifTrue: [		sslConnection close.		sslConnection := nil ].	hostName := nil.	super disconnect.</body></methods><methods><class-id>Net.HttpsStreamHandler class</class-id> <category>defaults</category><body package="HTTPS" selector="defaultPortNumber">defaultPortNumber	^443</body></methods><methods><class-id>Net.HttpsStreamHandler class</class-id> <category>instance creation</category><body package="HTTPS" selector="sslContext:">sslContext: aSSLContext	^self new 		sslContext: aSSLContext;		yourself</body><body package="HTTPS" selector="sslContext:validationBlock:">sslContext: aSSLContext validationBlock: aBlock	^self new 		sslContext: aSSLContext validationBlock: aBlock;		yourself</body><body package="HTTPS" selector="validationBlock:">validationBlock: aBlock	^self new 		validationBlock: aBlock;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>HttpURL</name><environment>Net</environment><super>Net.URLwithAuthority</super><private>false</private><indexed-type>none</indexed-type><inst-vars>user decompressContents decodeContents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-HTTP-Support</category><attributes><package>HTTP</package></attributes></class><class><name>HttpClient</name><environment>Net</environment><super>Net.NetClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars>request proxyHost keepAlive useProxyAuthorization connection entityParsingOptions cookieAgent enableCookies protocol </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-HTTP-Support</category><attributes><package>HTTP</package></attributes></class><class><name>HttpStreamHandler</name><environment>Net</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream </inst-vars><class-inst-vars>encoding </class-inst-vars><imports></imports><category>Net-HTTP-Support</category><attributes><package>HTTP</package></attributes></class></st-source>