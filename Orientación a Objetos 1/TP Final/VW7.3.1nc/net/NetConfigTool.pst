<?xml version="1.0"?><st-source><!-- Name: NetConfigToolNotice: Copyright © 1999, 2000, 2002, 2002, 2001 Cincom Systems, Inc.  All Rights Reserved.Comment: Contains pages for the Network Settings to store a few default values that are useful while working with NetClients.DbIdentifier: bear73DbTrace: 53612DevelopmentPrerequisites: #(#(#any 'NetClientBase' '') #(#any 'Tools-Settings-VW' ''))PackageName: NetConfigToolParcel: #('NetConfigTool')ParcelName: NetConfigToolPrerequisiteParcels: #(#('NetClientBase' ''))PrintStringCache: (7.4  1,tkogan)Version: 7.3.1Vesion: 7.0Date: 6:44:50 pm April 10, 2005 --><time-stamp>From VisualWorks®, 7.3.1 of April 10, 2005 on April 10, 2005 at 6:44:50 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>NetSettingsPage</name><environment>Net</environment><super>Tools.SettingsManagerPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>userPreferences userListOwner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-Clients</category><attributes><package>NetConfigTool</package></attributes></class><comment><class-id>Net.NetSettingsPage</class-id><body>A NetSettingsPage provides an user-interface for editing a Settings properties. Instance Variables:	identityListAspect	&lt;SelectionInList&gt;	identities list	serverListAspect	&lt;SelectionInList&gt;	mail server list	netUser	&lt;NetUser&gt;	selected instance of NetClient	hostSpec	&lt;HostSpec&gt;	selected instance of HostSpecShared Variables:	UserPreferences	&lt;Dictionary&gt;	The user preference profile is a Dictionary with of value models against subject keys</body></comment><class><name>UserPage</name><environment>Net</environment><super>Net.NetSettingsPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>identityListAspect netUser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-Clients</category><attributes><package>NetConfigTool</package></attributes></class><comment><class-id>Net.UserPage</class-id><body>A UserPage provides an user-interface for editing a Settings properties. Instance Variables:	identityListAspect	&lt;SelectionInList&gt;	identities list	serverListAspect	&lt;SelectionInList&gt;	mail server list	netUser	&lt;NetUser&gt;	selected instance of NetClient	hostSpec	&lt;HostSpec&gt;	selected instance of HostSpecShared Variables:	UserPreferences	&lt;Dictionary&gt;	The user preference profile is a Dictionary with of value models against subject keys</body></comment><class><name>AddNetUser</name><environment>Net</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-Clients</category><attributes><package>NetConfigTool</package></attributes></class><comment><class-id>Net.AddNetUser</class-id><body>A AddNetUser is an application model designed to add new user for UISettings. The only reason to have this class that TabbedDialog as supperclass for UISettings doesn't support two models.Instance Variables:	parent	&lt;UISettings&gt;	an instance of UISettings</body></comment><methods><class-id>Net.NetSettingsPage</class-id> <category>accessing settings</category><body package="NetConfigTool" selector="registry">registry	^self class registry</body><body package="NetConfigTool" selector="resetUserPreferences">resetUserPreferences	userPreferences := Dictionary new.	^userPreferences</body><body package="NetConfigTool" selector="userPreferences">userPreferences	^userPreferences isNil 		ifTrue: [ self resetUserPreferences]		ifFalse: [ userPreferences ]</body><body package="NetConfigTool" selector="userPreferencesAt:">userPreferencesAt: aSymbol	^self  userPreferences at: aSymbol</body><body package="NetConfigTool" selector="userPreferencesAt:ifAbsentPut:">userPreferencesAt: aSymbol ifAbsentPut: aBlock	^self userPreferences at: aSymbol ifAbsentPut: aBlock</body><body package="NetConfigTool" selector="userPreferencesAt:put:">userPreferencesAt: aSymbol put: anObject	self userPreferences at: aSymbol put: anObject</body></methods><methods><class-id>Net.NetSettingsPage</class-id> <category>accessing</category><body package="NetConfigTool" selector="settings">settings	^Array with: Net.Settings new</body><body package="NetConfigTool" selector="userListOwner">userListOwner	^userListOwner</body></methods><methods><class-id>Net.NetSettingsPage</class-id> <category>initialize-release</category><body package="NetConfigTool" selector="manager:">manager: aSettingsManager	super manager: aSettingsManager.	userListOwner := manager pageWithId: #(net).	manager triggerChannel onChangeSend: #triggered to: self</body></methods><methods><class-id>Net.NetSettingsPage</class-id> <category>notifications</category><body package="NetConfigTool" selector="triggered">triggered	manager triggerChannel value 		ifTrue: [self accept]		ifFalse: [ self reset ]</body></methods><methods><class-id>Net.NetSettingsPage</class-id> <category>actions</category><body package="NetConfigTool" selector="accept">accept</body><body package="NetConfigTool" selector="importSnapshots:">importSnapshots: aCollection	Settings importSnapshots: aCollection first stateNodes.	self reset</body><body package="NetConfigTool" selector="reset">reset</body></methods><methods><class-id>Net.NetSettingsPage class</class-id> <category>class initialization</category><body package="NetConfigTool" selector="initialize">initialize	"UISettings initialize "	( Settings dependents includes: self )		ifFalse:	[ Settings addDependent: self ].</body><body package="NetConfigTool" selector="obsolete">obsolete	"Break dependencies"	[Settings dependents includes: self] whileTrue:		[Settings removeDependent: self].	^super obsolete</body></methods><methods><class-id>Net.NetSettingsPage class</class-id> <category>accessing settings</category><body package="NetConfigTool" selector="registry">registry	^Settings</body></methods><methods><class-id>Net.UserPage</class-id> <category>accessing</category><body package="NetConfigTool" selector="accountIdentity">accountIdentity 	^self 		userPreferencesAt: #accountIdentity  		ifAbsentPut: [ self defaultAccountIdentity asValue]</body><body package="NetConfigTool" selector="defaultAccountIdentity">defaultAccountIdentity 	^self netUser isNil		ifTrue: [ '' ]		ifFalse: [ self netUser account ]</body><body package="NetConfigTool" selector="defaultFullNameIdentity">defaultFullNameIdentity  	^self netUser isNil		ifTrue: [ '' ]		ifFalse: [ self netUser fullName ]</body><body package="NetConfigTool" selector="defaultMailAddressIdentity">defaultMailAddressIdentity  	^self netUser isNil		ifTrue: [ '' ]		ifFalse: [ self netUser mailAddress ]</body><body package="NetConfigTool" selector="defaultNetUserMenu">defaultNetUserMenu	| menu |	menu := Menu new.	self defaultUser: self registry defaultIdentity.	self registry identities copy		do: 	[ :each |			menu				addItemLabel: (self userAsString: each)				value: each  ].	^menu</body><body package="NetConfigTool" selector="defaultPasswordIdentity">defaultPasswordIdentity  	^self netUser isNil		ifTrue: [ '' ]		ifFalse: [ self netUser password ]</body><body package="NetConfigTool" selector="defaultRememberPassword">defaultRememberPassword	| pass |	pass := self netUser notNil		ifTrue: [ self netUser savePassword].	^pass isNil 		ifTrue: [false]		ifFalse: [ pass ]</body><body package="NetConfigTool" selector="defaultUser">defaultUser	^self userPreferencesAt: #defaultUser ifAbsentPut: [ nil ]</body><body package="NetConfigTool" selector="defaultUser:">defaultUser: aNetUser	^self userPreferencesAt: #defaultUser put: aNetUser</body><body package="NetConfigTool" selector="defaultUserNameIdentity">defaultUserNameIdentity 	^self netUser isNil		ifTrue: [ '']		ifFalse: [ self netUser username ]</body><body package="NetConfigTool" selector="emailAddressIdentity">emailAddressIdentity  	^self userPreferencesAt: #emailAddressIdentity  		ifAbsentPut: [self defaultMailAddressIdentity  asValue ]</body><body package="NetConfigTool" selector="fullNameIdentity">fullNameIdentity  	^self userPreferencesAt: #fullNameIdentity  			ifAbsentPut: [ self defaultFullNameIdentity asValue]</body><body package="NetConfigTool" selector="helpText">helpText	^(#IdentityHelp &lt;&lt; #net &gt;&gt; 'Network Identities lists user identifications for this client. You may have only one, or several user identities.  To add an ID, click Add and complete the Add Identity dialog. In the Add Identity dialog: - Full name: is your name as it will be displayed - User Name: is your account user ID - Email address: is your email address for this account - Account is the account ID used if an FTP host requires an account (does not accept anonymous FTP)To provide a password for this account: - check Remember password to store this information - enter your password identically twice (Enter: and Confirm:). The password is masked while you type.') asString</body><body package="NetConfigTool" selector="identityListAspect">identityListAspect	identityListAspect isNil		ifTrue: 			[identityListAspect := SelectionInList							adapt: self 							aspect: #selectedIdentity							list: #userIdentities							selection: #selectedIdentity:].	^identityListAspect</body><body package="NetConfigTool" selector="netUser">netUser	^netUser</body><body package="NetConfigTool" selector="netUser:">netUser: aNetUser	netUser := aNetUser.	self updateIdentityValuesFrom: netUser</body><body package="NetConfigTool" selector="netUserMenu">netUserMenu	^self 		userPreferencesAt: #netUserMenu  		ifAbsentPut: [ self defaultNetUserMenu asValue ]</body><body package="NetConfigTool" selector="passwordIdentity">passwordIdentity  	^self userPreferencesAt: #passwordIdentity  			ifAbsentPut: [ self defaultPasswordIdentity asValue]</body><body package="NetConfigTool" selector="proxyUserMenuAspect">proxyUserMenuAspect	^self userPreferences at: #proxyUserMenuAspect ifAbsent: [ nil asValue ]</body><body package="NetConfigTool" selector="rememberPassword">rememberPassword	^self userPreferencesAt: #rememberPassword  			ifAbsentPut: [ self defaultRememberPassword asValue]</body><body package="NetConfigTool" selector="selectedIdentity">selectedIdentity	^self userAsString: self netUser</body><body package="NetConfigTool" selector="selectedIdentity:">selectedIdentity: aNetUserString	self enableButtons: aNetUserString notNil.	aNetUserString notNil ifTrue: [ self netUser: (self detectUser: aNetUserString) ]</body><body package="NetConfigTool" selector="userIdentities">userIdentities	^self netUserMenu value menuItems collect: [ :it | it label ]</body><body package="NetConfigTool" selector="userNameIdentity">userNameIdentity 	^self userPreferencesAt: #userNameIdentity 			ifAbsentPut: [ self defaultUserNameIdentity  asValue]</body><body package="NetConfigTool" selector="verifyPasswordIdentity">verifyPasswordIdentity	^self userPreferencesAt: #verifyPasswordIdentity  ifAbsentPut: [ nil asValue ].</body></methods><methods><class-id>Net.UserPage</class-id> <category>actions</category><body package="NetConfigTool" selector="accept">accept	self registry resetIdentities.	self netUserMenu value menuItems 		do: [ :itemx |			self registry addIdentity: itemx value].	self defaultUser notNil		ifTrue: [ self registry defaultIdentity: self defaultUser].	self updateIdentityListAspects.</body><body package="NetConfigTool" selector="addIdentity">addIdentity	self netUser: (NetUser new savePassword: false; yourself).	AddNetUser openWithSpec: #addIdentitySpec parent: self</body><body package="NetConfigTool" selector="editIdentity">editIdentity	AddNetUser openWithSpec: #addIdentitySpec parent: self</body><body package="NetConfigTool" selector="removeIdentity">removeIdentity	| resp  | 	(self registry hasIdentityReference: self netUser)		ifTrue: 			[ resp := Dialog confirm: ((#IdentityIsUsedInServerSettings &lt;&lt; #net &gt;&gt; '&lt;1s&gt; identity is used in server settings. &lt;n&gt;Do you want to delete it?')			expandMacrosWith: self netUser fullName).			resp ifFalse: [^nil]]. 	self removeMenuItemFor: self netUser.	(self defaultUser notNil and: [self defaultUser fullName =  self netUser fullName])		ifTrue: [ self setAsDefaultIdentity: nil ].	(self proxyUserMenuAspect value notNil		and: [ self proxyUserMenuAspect value fullName =  self netUser fullName ])		ifTrue: [ self proxyUserMenuAspect value: nil ].	self identityListAspect listHolder changed: #value.	manager tickle.</body><body package="NetConfigTool" selector="reset">reset	self resetUIStateToDefault.</body><body package="NetConfigTool" selector="resetUIStateToDefault">resetUIStateToDefault	self netUserMenu  value: self defaultNetUserMenu.	self identityListAspect listHolder changed: #value.</body><body package="NetConfigTool" selector="setAsDefaultIdentity">setAsDefaultIdentity	self setAsDefaultIdentity: self netUser</body></methods><methods><class-id>Net.UserPage</class-id> <category>interface opening</category><body package="NetConfigTool" selector="enableButtons:">enableButtons: aBoolean	self builder isNil ifTrue: [ ^nil ].	(self builder componentAt: #editButton) widget isEnabled: aBoolean.	(self builder componentAt: #removeButton) widget isEnabled: aBoolean.	(self builder componentAt: #setAsDefaultButton) widget isEnabled: aBoolean.</body><body package="NetConfigTool" selector="postBuildWith:">postBuildWith: aBuilder	self enableButtons: false</body></methods><methods><class-id>Net.UserPage</class-id> <category>private</category><body package="NetConfigTool" selector="detectUser:">detectUser: aString	| item |	^(item := self 			netUserMenu value menuItems detect: [ :it | (self userAsString: it value ) = aString ] 			ifNone: [ nil]) isNil		ifTrue: [ NetUser new ]		ifFalse: [ item value]</body><body package="NetConfigTool" selector="removeMenuItemFor:">removeMenuItemFor: aNetUser	|  item |	(item := self netUserMenu value menuItems detect: [ :itemx | itemx value = aNetUser ] ifNone: [ nil ] ) notNil		ifTrue: [	self netUserMenu value removeItem: item].</body><body package="NetConfigTool" selector="setAsDefaultIdentity:">setAsDefaultIdentity: aNetUser	self defaultUser: (aNetUser isNil		ifTrue: 			[ self netUserMenu value menuItems notEmpty 				ifTrue: [self netUserMenu value menuItems first value]				ifFalse: [nil]]		ifFalse: [ aNetUser ]).	self netUserMenu value menuItems do: 		[ :itemx |  itemx label: ( self userAsString: itemx value )  ].	self identityListAspect listHolder changed: #value.	manager tickle.</body><body package="NetConfigTool" selector="updateIdentityListAspects">updateIdentityListAspects	| selectIndex |	selectIndex := self identityListAspect selectionIndex.	self identityListAspect listHolder changed:#value.	self identityListAspect selectionIndex: selectIndex.</body><body package="NetConfigTool" selector="updateIdentityValuesFrom:">updateIdentityValuesFrom: aNetUser	self fullNameIdentity value: aNetUser fullName.	self userNameIdentity value: 	aNetUser username.	self passwordIdentity value: 	aNetUser password.	self emailAddressIdentity value: aNetUser mailAddress.	self accountIdentity value: aNetUser account.	self verifyPasswordIdentity value: aNetUser password.	self rememberPassword value: aNetUser savePassword.</body><body package="NetConfigTool" selector="updateNetUser">updateNetUser	self removeMenuItemFor: self netUser.	netUser := (NetUser new					fullName: self fullNameIdentity value;					username: self userNameIdentity value;					password: self passwordIdentity value;					savePassword: self rememberPassword value;					mailAddress: self emailAddressIdentity value;					account: self accountIdentity value;					yourself).	self defaultUser isNil ifTrue: [ self defaultUser: netUser].	self netUserMenu value		addItemLabel: ( self userAsString: netUser ) 		value: netUser.	self identityListAspect listHolder changed:#value.	manager tickle</body><body package="NetConfigTool" selector="userAsString:">userAsString: aNetUser	| stream |	stream := String new writeStream.	aNetUser printNameOn: stream.	(self defaultUser notNil and: [ aNetUser fullName = self defaultUser fullName])			ifTrue: [ aNetUser printDefaultOn: stream ].	aNetUser printMailAddressOn: stream.		^stream contents</body></methods><methods><class-id>Net.UserPage</class-id> <category>initialize-release</category><body package="NetConfigTool" selector="initialize">initialize	| usr |	super initialize. 	(usr :=self registry httpProxyHost) notNil		ifTrue: [usr := self registry httpProxyHost netUser].	usr := (usr notNil		ifTrue: [ usr ]		ifFalse: [nil ]) asValue.	self  userPreferences 		at: #proxyUserMenuAspect		put: usr</body></methods><methods><class-id>Net.AddNetUser</class-id> <category>accessing</category><body package="NetConfigTool" selector="parent">parent	^parent isNil 		ifTrue: [ parent := UserPage new ]		ifFalse: [ parent ]</body><body package="NetConfigTool" selector="parent:">parent: aUISettings	parent := aUISettings</body></methods><methods><class-id>Net.AddNetUser</class-id> <category>accessing settings</category><body package="NetConfigTool" selector="userNet">userNet	^self parent userNet</body><body package="NetConfigTool" selector="userPreferencesAt:">userPreferencesAt: aSymbol	^self  parent userPreferencesAt: aSymbol</body><body package="NetConfigTool" selector="userPreferencesAt:ifAbsentPut:">userPreferencesAt: aSymbol ifAbsentPut: aBlock	^self parent userPreferencesAt: aSymbol ifAbsentPut: aBlock</body><body package="NetConfigTool" selector="userPreferencesAt:put:">userPreferencesAt: aSymbol put: anObject	self parent userPreferencesAt: aSymbol put: anObject</body></methods><methods><class-id>Net.AddNetUser</class-id> <category>aspects</category><body package="NetConfigTool" selector="accountIdentity">accountIdentity 	^self userPreferencesAt: #accountIdentity  		ifAbsentPut: 			[ (self parent netUser isNil				ifTrue: [ '' ]				ifFalse: [ self parent netUser account  ]) asValue ]</body><body package="NetConfigTool" selector="emailAddressIdentity">emailAddressIdentity  	^self userPreferencesAt: #emailAddressIdentity  		ifAbsentPut: 			[ (self parent netUser isNil				ifTrue: [ '' ]				ifFalse: [ self parent netUser mailAddress ] ) asValue]</body><body package="NetConfigTool" selector="fullNameIdentity">fullNameIdentity  	^self userPreferencesAt: #fullNameIdentity  			ifAbsentPut: 				[ (self parent netUser isNil					ifTrue: [ '' ]					ifFalse: [ self parent netUser fullName ]) asValue]</body><body package="NetConfigTool" selector="passwordIdentity">passwordIdentity  	^self userPreferencesAt: #passwordIdentity  			ifAbsentPut: 				[ (self parent netUser isNil					ifTrue: [ '' ]					ifFalse: [ self parent netUser password ]) asValue]</body><body package="NetConfigTool" selector="rememberPassword">rememberPassword	^self userPreferencesAt: #rememberPassword  			ifAbsentPut: 				[ | pass | 					pass := self parent netUser notNil							ifTrue: [ self parent netUser savePassword].					(pass isNil 						ifTrue: [false]						ifFalse: [ pass ]) asValue]</body><body package="NetConfigTool" selector="userNameIdentity">userNameIdentity 	^self userPreferencesAt: #userNameIdentity 			ifAbsentPut: 				[ (self parent netUser isNil					ifTrue: [ '']					ifFalse: [ self parent netUser username ]) asValue]</body><body package="NetConfigTool" selector="verifyPasswordIdentity">verifyPasswordIdentity	^self userPreferencesAt: #verifyPasswordIdentity  ifAbsentPut: [ nil asValue ].</body></methods><methods><class-id>Net.AddNetUser</class-id> <category>actions</category><body package="NetConfigTool" selector="okToAddIdentity">okToAddIdentity	self rememberPassword value		ifTrue: 			[ (self passwordIdentity value = self verifyPasswordIdentity value)				ifFalse: 					[ self passwordIdentity value: ''.					self verifyPasswordIdentity value: ''. 					^Dialog warn: (#NewPasswordWasNotCorrectlyConfirmed &lt;&lt; #net &gt;&gt; 'The new password was not correctly confirmed')]].	((self fullNameIdentity value isNil or: [self fullNameIdentity value isEmpty])		or: [ self userNameIdentity value isNil or: [self userNameIdentity value isEmpty]])			ifTrue: [ ^Dialog warn: (#UserNameIsEmpty &lt;&lt; #net &gt;&gt; 'User name is empty') ].	self parent updateNetUser.	self accept value: true</body></methods><methods><class-id>Net.AddNetUser class</class-id> <category>instance creation</category><body package="NetConfigTool" selector="openWithSpec:parent:">openWithSpec: aSpec parent: uiSettings	^self openOn: (self new parent: uiSettings)		 withSpec: aSpec.</body></methods><methods><class-id>Net.UserPage class</class-id> <category>interface specs</category><body package="NetConfigTool" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #Identity 				#defaultString: 'Identity' 				#catalogID: #net ) 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 512 384 936 695 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 25 0 -100 1 0 1 ) 					#model: #identityListAspect 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -90 1 25 0 0 1 50 0 ) 					#model: #addIdentity 					#label: 					#(#{Kernel.UserMessage} 						#key: #Add 						#defaultString: 'Add...' 						#catalogID: #net ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -90 1 50 0 0 1 75 0 ) 					#name: #editButton 					#model: #editIdentity 					#label: 					#(#{Kernel.UserMessage} 						#key: #Edit 						#defaultString: 'Edit...' 						#catalogID: #net ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -90 1 75 0 0 1 100 0 ) 					#name: #removeButton 					#model: #removeIdentity 					#label: 					#(#{Kernel.UserMessage} 						#key: #Remove 						#defaultString: 'Remove' 						#catalogID: #net ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -90 1 100 0 0 1 125 0 ) 					#name: #setAsDefaultButton 					#model: #setAsDefaultIdentity 					#label: 					#(#{Kernel.UserMessage} 						#key: #SetAsDefault 						#defaultString: 'Set As Default' 						#catalogID: #net ) 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 0 0 ) 					#name: #Label1 					#label: 					#(#{Kernel.UserMessage} 						#key: #UserIdentitiesC 						#defaultString: 'User identities:' 						#catalogID: #net ) ) ) ) )</body></methods><methods><class-id>Net.AddNetUser class</class-id> <category>interface specs</category><body package="NetConfigTool" selector="addIdentitySpec">addIdentitySpec	"Tools.UIPainter new openOnClass: self andSelector: #addIdentitySpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #AddIdentity 				#defaultString: 'Add Identity' 				#catalogID: #net ) 			#min: #(#{Core.Point} 371 290 ) 			#max: #(#{Core.Point} 371 290 ) 			#bounds: #(#{Graphics.Rectangle} 512 384 883 674 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 98 0 64 0 1 1 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #UserNameC 						#defaultString: 'User Name:' 						#catalogID: #net ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 110 0 91 0 1 1 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #EmailAddress 						#defaultString: 'Email address:' 						#catalogID: #net ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 90 0 37 0 1 1 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #FullName 						#defaultString: 'Full name:' 						#catalogID: #net ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 38 204 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #Enter 						#defaultString: 'Enter:' 						#catalogID: #net ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 85 0 118 0 1 1 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #Account 						#defaultString: 'Account:' 						#catalogID: #net ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 38 233 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #Confirm 						#defaultString: 'Confirm:' 						#catalogID: #net ) ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 22 154 281 269 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #Password 						#defaultString: 'Password' 						#catalogID: #net ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 116 10 269 32 ) 					#model: #fullNameIdentity ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.312668 39 0 0 0.725067 61 0 ) 					#model: #userNameIdentity 					#type: #string ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 116 68 269 90 ) 					#model: #emailAddressIdentity 					#isReadOnly: false ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 116 97 269 119 ) 					#model: #accountIdentity ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 126 175 ) 					#model: #rememberPassword 					#label: 					#(#{Kernel.UserMessage} 						#key: #RememberPassword 						#defaultString: 'Remember password' 						#catalogID: #net ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 131 204 269 227 ) 					#model: #passwordIdentity 					#type: #password ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 131 234 269 255 ) 					#model: #verifyPasswordIdentity 					#type: #password ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 289 10 360 31 ) 					#model: #okToAddIdentity 					#label: 					#(#{Kernel.UserMessage} 						#key: #OK 						#defaultString: 'OK' 						#catalogID: #net ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 289 34 360 55 ) 					#model: #cancel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #net ) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-netClient</category><body package="NetConfigTool" selector="netGeneral">netGeneral	&lt;setting: #(net general)&gt;	^Net.Settings new</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>pages</category><body package="NetConfigTool" selector="netPage">netPage	&lt;settingsPage: #(net )&gt;	^Net.UserPage new		label: #UserIdentity &lt;&lt; #labels &gt;&gt; 'Net';		icon: (ListIconLibrary visualFor: #net);		yourself</body></methods><initialize><class-id>Net.NetSettingsPage</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SettingsManagerPage</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>manager id position label icon children definingMethod </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>Tools-Settings</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class></st-source>