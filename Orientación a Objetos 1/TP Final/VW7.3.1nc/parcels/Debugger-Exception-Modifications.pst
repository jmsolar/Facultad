<?xml version="1.0"?><st-source><!-- Name: Debugger-Exception-ModificationsComment: PDP Exception handling modifications, for VW 7.DbIdentifier: bear73DbTrace: 50570DevelopmentPrerequisites: #(#(#any 'Debugger-Support' ''))PackageName: Debugger-Exception-ModificationsParcel: #('Debugger-Exception-Modifications')PrerequisiteParcels: #(#('Debugger-Support' ''))PrintStringCache: (7.3 - 1.6,bobw)Version: 7.3.1Date: 5:54:18 pm April 10, 2005 --><time-stamp>From VisualWorksÂ®, 7.3.1 of April 10, 2005 on April 10, 2005 at 5:54:18 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Core.GenericException</class-id> <category>private</category><body package="Debugger-Exception-Modifications" selector="findDebugSignalHandlerCtxFrom:orUntil:">findDebugSignalHandlerCtxFrom: startContext orUntil: sigHandlerCtx	"Search for debug signal handler.  Stop if sigHandlerCtx is found first.	We don't deal with the firstUnwindCtx because the prior handler search	addressed it.  Additionally, the search goes strictly up the sender chain."	| ctx cm |	ctx := startContext.	[ctx == nil		ifTrue: [^nil].	"no handler"	ctx == sigHandlerCtx		ifTrue: [^nil].	cm := ctx method.	cm isMarkedForHandle		ifTrue:			[ctx handlerException == GenericException				ifTrue: [^ctx]]		ifFalse:			[cm isMarkedForUnwindInAction				ifTrue:					[ctx := ctx sender.					ctx == nil						ifTrue: [^nil]].	"Go up the normal sender chain."].	ctx := ctx findNextMarkedUpTo: nil] repeat.	^nil</body></methods><methods><class-id>Core.GenericException</class-id> <category>testing</category><body package="Debugger-Exception-Modifications" selector="ifUnhandledOpenDebugger">ifUnhandledOpenDebugger	"Answer if, when an instance of the receiver is raised and not handled,	 a debugger should be opened rather than a Notifier.  By default answer	 false.  The UserInterrupt exceptions override this method."	^false</body></methods><methods><class-id>Core.GenericException</class-id> <category>private - debugger</category><body package="Debugger-Exception-Modifications" selector="rePropagateReturnTo:">rePropagateReturnTo: aContext	"Answer a context of 'propagatePrivateFrom:'."	| ctx propCtx hCtx |	hCtx := self findHandlerContextFrom: searchContext markDebug: false.	ctx := [self performHandler: hCtx] newContext.	propCtx := ctx stepUntilVisibleEffect step.	propCtx sender: aContext.	^propCtx</body></methods><methods><class-id>Core.ControlInterrupt</class-id> <category>testing</category><body package="Debugger-Exception-Modifications" selector="ifUnhandledOpenDebugger">ifUnhandledOpenDebugger	"Override to arrange that when an instance of the receiver is raised	 and not handled, a debugger is opened rather than a Notifier."	^true</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>GenericException</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>messageText originator initialContext firstUnwindContext handlerContext parameter proceedBlock isResumable signal searchContext </inst-vars><class-inst-vars>notifierString </class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>ControlInterrupt</name><environment>Core</environment><super>Core.GenericException</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isInterrupt </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class></st-source>