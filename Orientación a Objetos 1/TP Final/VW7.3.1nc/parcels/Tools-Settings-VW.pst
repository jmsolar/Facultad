<?xml version="1.0"?><st-source><!-- Name: Tools-Settings-VWNotice: Copyright © 1999-2005 Cincom Systems, Inc.  All Rights Reserved.Comment: Tools-Settings-VW uses the Tools-Settings framework to provide a VisualWorks specific settings tool.DbIdentifier: bear73DbTrace: 53637DevelopmentPrerequisites: #(#(#any 'Tools-Settings' ''))PackageName: Tools-Settings-VWParcel: #('Tools-Settings-VW')ParcelName: Tools-Settings-VWPrerequisiteParcels: #(#('Tools-Settings' ''))PrintStringCache: (7.3 - 1.16,bobw)Version: 7.3.1Date: 5:52:57 pm April 10, 2005 --><time-stamp>From VisualWorks®, 7.3.1 of April 10, 2005 on April 10, 2005 at 5:52:57 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>VisualWorksMemoryPolicyPage</name><environment>Tools</environment><super>Tools.SettingsManagerPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>settings localTriggerChannel defaultGrowthRegimeHolder defaultMemoryHolder defaultFreeMemoryHolder currentGrowthRegimeHolder currentMemoryHolder currentFreeMemoryHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-VW</category><attributes><package>Tools-Settings-VW</package></attributes></class><class><name>VisualWorksSettings</name><environment>Tools</environment><super>Tools.SettingsDomain</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-VW</category><attributes><package>Tools-Settings-VW</package></attributes></class><class><name>VisualWorksHomePage</name><environment>Tools</environment><super>Tools.SettingsManagerPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>directoryModule pathHolder setting helpTextHolder hasChanges localTriggerChannel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-VW</category><attributes><package>Tools-Settings-VW</package></attributes></class><comment><class-id>Tools.VisualWorksHomePage</class-id><body>VisualWorksHomePage is the implementation of the System page of the settings tool. It is an example of a settings tool page that has a unique interface and behavior and displays information not managed by the settings framework.Instance Variables:	directoryModule	&lt;DirectorySettingModule&gt; The module for the directory setting.	hasChanges	&lt;Boolean&gt;	Set to true whenever there are unaccepted changes; determines whether changes should indeed be applied when the manager says so.	helpTextHolder	&lt;ValueHolder with: String&gt;	The holder of the blurb text (read-only).	pathHolder	&lt;ValueHolder with: String&gt; The holder of the path string; the aspect of the path input field.	localTriggerChannel	&lt;ValueHolder with: Boolean&gt; The trigger channel used by controls of this page, required to ensure they are all accepted before the page tries to accept.</body></comment><methods><class-id>Tools.VisualWorksMemoryPolicyPage</class-id> <category>aspects</category><body package="Tools-Settings-VW" selector="currentFreeMemoryHolder">currentFreeMemoryHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^currentFreeMemoryHolder isNil		ifTrue:			[currentFreeMemoryHolder := 0 asValue]		ifFalse:			[currentFreeMemoryHolder]</body><body package="Tools-Settings-VW" selector="currentGrowthRegimeHolder">currentGrowthRegimeHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^currentGrowthRegimeHolder isNil		ifTrue:			[currentGrowthRegimeHolder := 0 asValue]		ifFalse:			[currentGrowthRegimeHolder]</body><body package="Tools-Settings-VW" selector="currentMemoryHolder">currentMemoryHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^currentMemoryHolder isNil		ifTrue:			[currentMemoryHolder := 0 asValue]		ifFalse:			[currentMemoryHolder]</body><body package="Tools-Settings-VW" selector="defaultFreeMemoryHolder">defaultFreeMemoryHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^defaultFreeMemoryHolder isNil		ifTrue:			[defaultFreeMemoryHolder := 0 asValue]		ifFalse:			[defaultFreeMemoryHolder]</body><body package="Tools-Settings-VW" selector="defaultGrowthRegimeHolder">defaultGrowthRegimeHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^defaultGrowthRegimeHolder isNil		ifTrue:			[defaultGrowthRegimeHolder := 0 asValue]		ifFalse:			[defaultGrowthRegimeHolder]</body><body package="Tools-Settings-VW" selector="defaultMemoryHolder">defaultMemoryHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^defaultMemoryHolder isNil		ifTrue:			[defaultMemoryHolder := 0 asValue]		ifFalse:			[defaultMemoryHolder]</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage</class-id> <category>accessing</category><body package="Tools-Settings-VW" selector="helpText">helpText	^#MemorySettingsHelp &lt;&lt; #dialogs &gt;&gt; 'These options determine the parameters used by the default memory policy. The "Growth Regime" option 	specifies an upper bound for unrestricted growth of the VisualWorks heap. Above this bound, the garbage collector is invoked to reclaim memory.The "Memory" option specifies the hard upper limit for heap growth. Attempts to grow the heap beyond this limit signal a low-space condition. When this occurrs, the currently active process is interrupted to signal a low-space condition.The "Free Memory" option specifies the upper bound for memory that is permanently allocated to VisualWorks. After garbage collections, the default memory policy attempts to return any free memory above this limit to the host operating system.'</body><body package="Tools-Settings-VW" selector="interestingMethods">interestingMethods	| interestingMethods |	interestingMethods := super interestingMethods asOrderedCollection.	settings do: [:each |		interestingMethods addAll: each interestingMethods].	^interestingMethods</body><body package="Tools-Settings-VW" selector="settings">settings	^settings</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage</class-id> <category>initialize-release</category><body package="Tools-Settings-VW" selector="growthRegime:memory:freeMemory:">growthRegime: growthRegimeSetting memory: memorySetting freeMemory: freeMemorySetting	"The setting should be the memory policy group setting."	settings := Array with: growthRegimeSetting with: memorySetting with: freeMemorySetting.	localTriggerChannel := false asValue.	defaultGrowthRegimeHolder := self modelFor: growthRegimeSetting.	defaultMemoryHolder := self modelFor: memorySetting.	defaultFreeMemoryHolder := self modelFor: freeMemorySetting.	currentGrowthRegimeHolder := nil asValue.	currentMemoryHolder := nil asValue.	currentFreeMemoryHolder := nil asValue.	self loadCurrentValues</body><body package="Tools-Settings-VW" selector="manager:">manager: aSettingsManager	super manager: aSettingsManager.	manager triggerChannel		onChangeSend: #triggered		to: self</body><body package="Tools-Settings-VW" selector="modelFor:">modelFor: aSetting	| holder |	holder := BufferedValueHolder 		subject: aSetting		triggerChannel: localTriggerChannel.	holder onChangeSend: #tickle to: self.	^holder</body><body package="Tools-Settings-VW" selector="release">release	super release.	manager triggerChannel		retractInterestsFor: self</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage</class-id> <category>actions</category><body package="Tools-Settings-VW" selector="accept">accept	localTriggerChannel value: true</body><body package="Tools-Settings-VW" selector="importSnapshots:">importSnapshots: aCollection	"Here we are cheating and applying the saved setting outright	instead of just pushing the values into the widgets. Might want to	work on this part more."	| policySnapshot  |	settings do:		[:each |		policySnapshot := aCollection			detect: [:some | some id = each id]			ifNone: [nil].		policySnapshot ifNotNil: [each restoreFrom: policySnapshot]]</body><body package="Tools-Settings-VW" selector="reset">reset	localTriggerChannel value: false</body><body package="Tools-Settings-VW" selector="resetUIStateToDefault">resetUIStateToDefault	defaultGrowthRegimeHolder value: defaultGrowthRegimeHolder subject default.	defaultMemoryHolder value: defaultMemoryHolder subject default.	defaultFreeMemoryHolder value: defaultFreeMemoryHolder subject default.</body><body package="Tools-Settings-VW" selector="setDefaultsNow">setDefaultsNow	self accept.	ObjectMemory currentMemoryPolicy setDefaults; updateAfterGC.	self loadCurrentValues</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage</class-id> <category>notifications</category><body package="Tools-Settings-VW" selector="triggered">triggered	manager triggerChannel value		ifTrue: [self accept]		ifFalse: [self reset]</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage</class-id> <category>private</category><body package="Tools-Settings-VW" selector="loadCurrentValues">loadCurrentValues	| currentPolicy |	currentPolicy := ObjectMemory currentMemoryPolicy.	currentGrowthRegimeHolder value: currentPolicy growthRegimeUpperBound.	currentMemoryHolder value: currentPolicy memoryUpperBound.	currentFreeMemoryHolder value: currentPolicy freeMemoryUpperBound.</body></methods><methods><class-id>Tools.VisualWorksSettings</class-id> <category>accessing</category><body package="Tools-Settings-VW" selector="label">label	^(#VisualWorksSettings &lt;&lt; #labels &gt;&gt; 'VisualWorks Settings') asString</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>private</category><body package="Tools-Settings-VW" selector="sourceAssociationsModel">sourceAssociationsModel	"Note that this is intended to work in concert with the old framework."	^BlockValue with:		[ | manager list |		manager := SourceFileManager default.		list := (UISettings preferenceModelFor: #sources) value.		list removeAllSuchThat: [:any | true].		manager fileIndicesDo:			[:index |			list addLast: index -&gt; (manager nameStringAt: index)].		list]</body><body package="Tools-Settings-VW" selector="sourceAssociationToStringBlock">sourceAssociationToStringBlock	^[:association | association value]</body><body package="Tools-Settings-VW" selector="sourceDirectoriesModel">sourceDirectoriesModel	"Note that this is intended to work in concert with the old framework."	^BlockValue with:		[ | list |		list := (UISettings preferenceModelFor: #sourceDirs) value.		list removeAllSuchThat: [:ign| true].		list addAll: (SourceFileManager default sourceFileDirectories collect: [:ea| ea asString]) asSortedStrings.		list]</body><body package="Tools-Settings-VW" selector="stringToSourceAssociationBlock">stringToSourceAssociationBlock	^	[:oldAssociation :newName | 	| index manager |	index := oldAssociation key.	manager := SourceFileManager default.	manager 		file: index		name: (SystemUtils makeFilenamePortable: newName)		writable: (manager isReadOnly: index) not]</body><body package="Tools-Settings-VW" selector="stringToSourceDirectoryBlock">stringToSourceDirectoryBlock	^	[:oldName :newName | 	SourceFileManager default		changeSourceDirectoryFrom: oldName to: newName]</body><body package="Tools-Settings-VW" selector="timeZonesTextModel">timeZonesTextModel	^'"UTC"''TimeZone setDefaultTimeZone:	(TimeZone null).''"San Francisco--Pacific Standard:"''TimeZone setDefaultTimeZone: 	(TimeZone timeDifference: -8		DST: 1 at: 2		from: 97 "on April 7"		to: 304 "until October 31"		startDay: #Sunday).''	"New York--Eastern Standard:"''TimeZone setDefaultTimeZone: 	(TimeZone timeDifference: -5		DST: 1 at: 2		from: 97 "on April 7"		to: 304 "until October 31"		startDay: #Sunday).''"UK--GMT/BST:"''TimeZone setDefaultTimeZone:  	(TimeZone timeDifference: 0		DST: 1 start: 1 end: 2		from: 90 "on March 31"		to: 304 "until October 31"		startDay: #Sunday).''"Germany--CET/CEST:"''TimeZone setDefaultTimeZone: 	(TimeZone timeDifference: 1		DST: 1 start: 2 end: 3		from: 90 "on March 31"		to: 304 "until October 31"		startDay: #Sunday).''"Japan:"''TimeZone setDefaultTimeZone:	(TimeZone timeDifference: 9		DST: 0 at: 0		from: 0		to: 0		startDay: #Sunday).''' asValue</body></methods><methods><class-id>Tools.VisualWorksHomePage</class-id> <category>private</category><body package="Tools-Settings-VW" selector="accept">accept	| dir |	localTriggerChannel value: true.	dir := [pathHolder value asFilename] on: OsError do: [:ex | ex return: nil].	(dir notNil and: [dir definitelyExists and: [dir isDirectory]])		ifFalse: [AbortAcceptRequest 			from: self			message: (#errVWHome &lt;&lt; #dialogs &gt;&gt; 'This path is not a directory. Please try again')].	"Close-down all managed files so that the new variable can take effect."	SourceFileManager default close.	SystemUtils setEnvironmentVariable: 'VISUALWORKS' value: pathHolder value.	(pathHolder value = (SystemUtils getEnvironmentVariable: 'VISUALWORKS' ifAbsent: [nil])) ifFalse:		[AbortAcceptRequest			from: self			message: ((#errVWHomeNoSet &lt;&lt; #dialogs &gt;&gt; 'Unable to set the VISUALWORKS enviornment variable.&lt;n&gt;If you are running on Windows 95, 98, NT or 2000 you may&lt;n&gt;not have the proper permissions to write to the system registry.&lt;n&gt;Please contact your system administrator.') expandMacros)].	hasChanges := false</body><body package="Tools-Settings-VW" selector="baseDirectoryNameFrom:">baseDirectoryNameFrom: aFilename	^aFilename tail = 'image'		ifTrue: [aFilename directory]		ifFalse: [aFilename]</body><body package="Tools-Settings-VW" selector="helpText">helpText	^#VisualWorksHomeExplanation &lt;&lt; #dialogs 		&gt;&gt; 'This is the default location of the VisualWorks home directory, $(VISUALWORKS), which is used to find many of the system files, such as parcels that can be loaded or system source code.Supply the name of the main directory, of which "image", "parcels", and "bin" are sub-directories. On Windows, this value is stored in the system registry, and you should not need to set it again. On all other platforms, the location is stored in an environment variable. On UNIX, the value is set only for the current session in VisualWorks.'</body><body package="Tools-Settings-VW" selector="reset">reset	self pathHolder value: 		(SystemUtils			getEnvironmentVariable: 'VISUALWORKS'			ifAbsent: [String new]).	hasChanges := false</body></methods><methods><class-id>Tools.VisualWorksHomePage</class-id> <category>aspects</category><body package="Tools-Settings-VW" selector="helpTextHolder">helpTextHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^helpTextHolder isNil		ifTrue:			[helpTextHolder := String new asValue]		ifFalse:			[helpTextHolder]</body><body package="Tools-Settings-VW" selector="pathHolder">pathHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^pathHolder isNil		ifTrue:			[pathHolder := String new asValue]		ifFalse:			[pathHolder]</body></methods><methods><class-id>Tools.VisualWorksHomePage</class-id> <category>initialize-release</category><body package="Tools-Settings-VW" selector="initialize">initialize	super initialize.	self helpTextHolder value: self helpText asString.	setting := (StringSetting forNameOfDirectory on: self pathHolder)		id: #(directory);		label: (#VisualWorksHomeDirectory &lt;&lt; #dialogs &gt;&gt; 'VisualWorks home directory').	self reset</body><body package="Tools-Settings-VW" selector="manager:">manager: aManager	super manager: aManager.	localTriggerChannel := manager triggerChannel value asValue.	manager triggerChannel		onChangeSend: #triggered		to: self</body></methods><methods><class-id>Tools.VisualWorksHomePage</class-id> <category>notifications</category><body package="Tools-Settings-VW" selector="tickle">tickle	hasChanges := true.	super tickle</body><body package="Tools-Settings-VW" selector="triggered">triggered	localTriggerChannel value: manager triggerChannel value.	manager triggerChannel value		ifTrue: [hasChanges ifTrue: [self accept]]		ifFalse: [self reset]</body></methods><methods><class-id>Tools.VisualWorksHomePage</class-id> <category>accessing</category><body package="Tools-Settings-VW" selector="directoryModule">directoryModule	^directoryModule ifNil: 		[directoryModule := (DirectorySettingModule on: setting) page: self; yourself]</body><body package="Tools-Settings-VW" selector="triggerChannel">triggerChannel	^localTriggerChannel</body></methods><methods><class-id>Tools.VisualWorksHomePage</class-id> <category>actions</category><body package="Tools-Settings-VW" selector="detectAndPasteDirectory">detectAndPasteDirectory	self directoryModule valueHolder value: 		(self baseDirectoryNameFrom: Filename defaultDirectory) asString</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Tools-Settings-VW" selector="properties">properties	^ToolbarIconLibrary visualFor: #properties</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage class</class-id> <category>interface specs</category><body package="Tools-Settings-VW" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #labels) 			#bounds: #(#{Graphics.Rectangle} 512 384 840 728 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0 30 0 0 1 ) 					#name: #Label6 					#label: #(#{Kernel.UserMessage} #key: #UpperBounds #defaultString: 'Upper Bounds' #catalogID: #labels) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.332317 30 0 0 1 ) 					#name: #Label4 					#label: #(#{Kernel.UserMessage} #key: #Default #defaultString: 'Default' #catalogID: #labels) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.667683 30 0 0 1 ) 					#name: #Label5 					#label: #(#{Kernel.UserMessage} #key: #Current #defaultString: 'Current' #catalogID: #labels) ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 35 0 -10 0.333333 38 0 ) 					#name: #Divider1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0 60 0 0 1 ) 					#name: #Label1 					#label: #(#{Kernel.UserMessage} #key: #GrowthRegimeC #defaultString: 'Growth Regime:' #catalogID: #labels) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0 87 0 0 1 ) 					#name: #Label2 					#label: #(#{Kernel.UserMessage} #key: #MemoryC #defaultString: 'Memory:' #catalogID: #labels) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0 114 0 0 1 ) 					#name: #Label3 					#label: #(#{Kernel.UserMessage} #key: #FreeMemoryC #defaultString: 'Free Memory:' #catalogID: #labels) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.332317 35 0 0 0.667683 60 0 ) 					#name: #defaultGrowthRegimeField 					#model: #defaultGrowthRegimeHolder 					#type: #number 					#formatString: '#,##0' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.667683 35 0 0 1.0 60 0 ) 					#name: #currentGrowthRegimeField 					#model: #currentGrowthRegimeHolder 					#isReadOnly: true 					#type: #number 					#formatString: '#,##0' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.332317 62 0 0 0.667683 87 0 ) 					#name: #defaultMemoryField 					#model: #defaultMemoryHolder 					#type: #number 					#formatString: '#,##0' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.667683 62 0 0 1.0 87 0 ) 					#name: #currentMemoryField 					#model: #currentMemoryHolder 					#isReadOnly: true 					#type: #number 					#formatString: '#,##0' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.332317 89 0 0 0.667683 114 0 ) 					#name: #defaultFreeMemoryField 					#model: #defaultFreeMemoryHolder 					#type: #number 					#formatString: '#,##0' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.667683 89 0 0 1.0 114 0 ) 					#name: #currentFreeMemoryField 					#model: #currentFreeMemoryHolder 					#isReadOnly: true 					#type: #number 					#formatString: '#,##0' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.333333 116 0 0 0.666666 141 0 ) 					#name: #setNowButton 					#model: #setDefaultsNow 					#label: #(#{Kernel.UserMessage} #key: #MakeCurrent #defaultString: 'Make Current' #catalogID: #labels) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>pages</category><body package="Tools-Settings-VW" selector="browserPage">browserPage	&lt;settingsPage: #(tools browser)&gt;	^ModularSettingsPage new		label: #Browser &lt;&lt; #labels &gt;&gt; 'Browser';		icon: (ListIconLibrary visualFor: #specs);		settings: (self settingsWithPrefix: #(tools browser))</body><body package="Tools-Settings-VW" selector="flyByHelpPage">flyByHelpPage	&lt;settingsPage: #(system flyByHelp)&gt;	^ModularSettingsPage new		label: #FlyByHelp &lt;&lt; #labels &gt;&gt; 'Fly-by Help';		icon: (ListIconLibrary visualFor: #flyByHelp);		settings: (self settingsWithPrefix: #(flyByHelp))</body><body package="Tools-Settings-VW" selector="loadingOptionsPage">loadingOptionsPage	&lt;settingsPage: #(system loading)&gt;	^ModularSettingsPage new		label: #Loading &lt;&lt; #labels &gt;&gt; 'Loading';		icon: (ListIconLibrary visualFor: #loadOptions);		settings: (self settingsWithPrefix: #(loading))</body><body package="Tools-Settings-VW" selector="lookAndFeelPage">lookAndFeelPage	&lt;settingsPage: #(lookAndFeel) position: -30&gt;	^ModularSettingsPage new		label: #LookAndFeel &lt;&lt; #labels &gt;&gt; 'Look and Feel';		icon: (ListIconLibrary visualFor: #window);		addAllSettings: 			(self settingsWithPrefix: #(lookAndFeel) 				except: #(windowPlacement mouseButtonOrder));		useRadioButtonsForEnumerations;		addSetting:			(self settingWithId: #(lookAndFeel windowPlacement));		addSetting:			(self settingWithId: #(lookAndFeel mouseButtonOrder))</body><body package="Tools-Settings-VW" selector="memoryPolicyPage">memoryPolicyPage	&lt;settingsPage: #(system memoryPolicy)&gt;	^VisualWorksMemoryPolicyPage new		label: #MemoryPolicy &lt;&lt; #labels &gt;&gt; 'Memory Policy';		icon: (ListIconLibrary visualFor: #chip);		growthRegime: (self settingWithId: #(base memoryPolicy growthRegimeUpperBound))			memory: (self settingWithId: #(base memoryPolicy memoryUpperBound))			freeMemory: (self settingWithId: #(base memoryPolicy freeMemoryUpperBound))</body><body package="Tools-Settings-VW" selector="messageCatalogsPage">messageCatalogsPage	&lt;settingsPage: #(system messageCatalogs)&gt;	^SequenceSettingPage new		label: #MessageCatalogs &lt;&lt; #labels &gt;&gt; 'Message Catalogs';		icon: (ListIconLibrary visualFor: #bubble);		setting: (self settingWithId: #(files messageDirectories))</body><body package="Tools-Settings-VW" selector="parcelDirectoriesPage">parcelDirectoriesPage	&lt;settingsPage: #(system parcelDirectories)&gt;	^SequenceSettingPage new		label: #ParcelPath &lt;&lt; #labels &gt;&gt; 'Parcel Path';		icon: (ListIconLibrary visualFor: #loadedParcel);		setting: (self settingWithId: #(files parcelDirectories))</body><body package="Tools-Settings-VW" selector="printingPage">printingPage	&lt;settingsPage: #(system printing)&gt;	^ModularSettingsPage new		label: #Printing &lt;&lt; #labels &gt;&gt; 'Printing';		icon: (ListIconLibrary visualFor: #printer);		useRadioButtonsForEnumerations;		settings: (self settingsWithPrefix: #(printing))</body><body package="Tools-Settings-VW" selector="printingPSOptionsPage">printingPSOptionsPage	&lt;settingsPage: #(system printing psOptions)&gt;	^ModularSettingsPage new		label: #PostScriptOptions &lt;&lt; #labels &gt;&gt; 'PostScript Options';		icon: (ListIconLibrary visualFor: #psPrinter);		settings: (self settingsWithPrefix: #(system printing psOptions))</body><body package="Tools-Settings-VW" selector="sourceDirectoriesPage">sourceDirectoriesPage	"Note that this page does not work with the lower-level settings framework,	it works with the source file manager itself--in other words, this page contains	no Setting."	&lt;settingsPage: #(system source sourceDirectories)&gt;	| sourceDirectoriesModel |	sourceDirectoriesModel := self sourceDirectoriesModel.	^(SequenceSettingPage new)		label: #SourceDirectories &lt;&lt; #labels &gt;&gt; 'Source Directories';		icon: (ListIconLibrary visualFor: #folder);		listHolder: sourceDirectoriesModel			displayBlock: [:string | string]			acceptBlock: self stringToSourceDirectoryBlock			validationBlock: self filenameMustExistValidationBlock;		postAcceptBlock: [sourceDirectoriesModel resetValue];		helpText: #sourceDirectoriesHelpText &lt;&lt; #dialogs &gt;&gt; 'This page displays the names of directories containing the source files of classes in the image. Directories in the list can be renamed, which is necessary if you rename directories on the disk. When a directory in this list is renamed, the new name is used to access any source files contained in that directory. See the help text of the "Source Files" page for more information on the source files.'</body><body package="Tools-Settings-VW" selector="sourceFilesPage">sourceFilesPage	"Note that this page does not work with the lower-level settings framework,	it works with the source file manager itself."	&lt;settingsPage: #(system source sourceFiles)&gt;	| sourceAssociationsModel |	sourceAssociationsModel := self sourceAssociationsModel.	^(SequenceSettingPage new)		label: #SourceFiles &lt;&lt; #labels &gt;&gt; 'Source Files';		icon: (ListIconLibrary visualFor: #twoPages);		listHolder: sourceAssociationsModel			displayBlock: self sourceAssociationToStringBlock			acceptBlock: self stringToSourceAssociationBlock			validationBlock: self filenameMustExistValidationBlock;		postAcceptBlock: [sourceAssociationsModel resetValue];		helpText: #sourceFilesHelpText &lt;&lt; #dialogs &gt;&gt; 'The source code of classes in the image is stored in a number of files on the disk. The system (the Smalltalk image) holds onto the names of those files. The list on this page displays those names. For example, the first entry in this list is always the name of the main sources file, the one that contains the source of all the base classes such as Collections and Streams.If one of the files on the disk is moved or renamed, the system still tries to use the old file name to access the code it contains. When this happens, you get a message notifying you that a file could not be opened. This page allows you to restore such broken source references. To do that, select the name of the file that has been renamed or moved, and change it to the correct name.'</body><body package="Tools-Settings-VW" selector="sourcePage">sourcePage	&lt;settingsPage: #(system source)&gt;	^ModularSettingsPage new		label: #Source &lt;&lt; #labels &gt;&gt; 'Source';		icon: (ListIconLibrary visualFor: #twoPages);		useRadioButtonsForEnumerations;		settings: (self settingsWithPrefix: #(files))</body><body package="Tools-Settings-VW" selector="systemPage">systemPage	&lt;settingsPage: #(system) position: -20&gt;	^VisualWorksHomePage new		label: #System &lt;&lt; #labels &gt;&gt; 'System';		icon: (ListIconLibrary visualFor: #balloon)</body><body package="Tools-Settings-VW" selector="timeZonesPage">timeZonesPage	&lt;settingsPage: #(system timeZones)&gt;	^TextSettingPage new		label: #TimeZones &lt;&lt; #labels &gt;&gt; 'Time Zones';		icon: (ListIconLibrary visualFor: #clock);		textHolder: self timeZonesTextModel;		helpText: #timeZonesHelpText &lt;&lt; #dialogs &gt;&gt; 'This page contains executable expressions to set up the image for various time zones. Select the appropriate expression, and execute it using the "do it" command of the &lt;operate&gt; menu.'</body><body package="Tools-Settings-VW" selector="toolsPage">toolsPage	&lt;settingsPage: #(tools) position: -10&gt;	^ModularSettingsPage new		label: #Tools &lt;&lt; #labels &gt;&gt; 'Tools';		icon: (ListIconLibrary visualFor: #tools);		settings: (self settingsWithPrefix: #(tools))</body><body package="Tools-Settings-VW" selector="uriPage">uriPage	&lt;settingsPage: #(uri)&gt;	^ModularSettingsPage new		label: #URI &lt;&lt; #net &gt;&gt; 'URI';		icon: (ListIconLibrary visualFor: #net);		settings: (self settingsWithPrefix: #(uri ))</body><body package="Tools-Settings-VW" selector="workspacePage">workspacePage	&lt;settingsPage: #(tools workspaces)&gt;	^ModularSettingsPage new		label: #Workspace &lt;&lt; #labels &gt;&gt; 'Workspace';		icon: (ListIconLibrary visualFor: #notepad);		settings: (self settingsWithPrefix: #(tools workspaces))</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-tools</category><body package="Tools-Settings-VW" selector="tools10iconLabelLength">tools10iconLabelLength	&lt;setting: #(tools iconLabelLength)&gt;	| list keys |	list := UISettings iconLengthList.	keys := list collect: [:each | each key].	^((EnumerationSetting				keys: (keys collect: [:each | each asSymbol])				choices: keys				labels: (list collect: [:each | each value asString]))			onUISetting: #iconLabelLength)		label: #IconLabelLength1 &lt;&lt; #labels &gt;&gt; 'Icon label length';		helpText: #IconLabelLengthHelpText &lt;&lt; #dialogs &gt;&gt; 'The number of characters that are displayed in an icon''s label varies depending on the window manager.  Window managers also differ as to how they display icon labels that are longer than the maximum.  Some window managers display only the beginning of such a label, which is usually readable.  Others, however, display the middle of the label, often making a long label unreadable.To make such long labels more readable, you can suggest a maximum icon label length.  Any icon label longer than the maximum is compressed by dropping the middle characters.  The specified maximum size is only a hint, which the window manager is free to ignore.'</body><body package="Tools-Settings-VW" selector="tools20textSize">tools20textSize	&lt;setting: #(tools textSize)&gt;	| adaptor |	adaptor := PluggableAdaptor on: (UISettings preferenceModelFor: #textSize).	adaptor		getBlock: [:m | m value]		putBlock: 			[:m :v | m value: v.			TextAttributes setDefaultTo: v; resetViews]		updateBlock: [:m :a :p | true].	^((EnumerationSetting 				keys: #(small default large fixed)				choices: #(small default large fixed)				labels: (Array with: (#Small &lt;&lt; #dialogs &gt;&gt; 'Small') with: (#Medium &lt;&lt; #dialogs &gt;&gt; 'Medium') with: (#Large &lt;&lt; #dialogs &gt;&gt; 'Large') with: (#Fixed &lt;&lt; #dialogs &gt;&gt; 'Fixed')))			on: adaptor)		default: #default;		label: #TextSizeSetting &lt;&lt; #labels &gt;&gt; 'Text size';		helpText: #TestSizeSettingHelpText &lt;&lt; #dialogs &gt;&gt; 'The default TextAttributes describes how text will be rendered in VisualWorks.  As delivered, the default is set to "default".  It can be set to:	small		slightly smaller than "default", useful for 		small displays on the order of 640x480 pixels	default		the usual style, suitable for 1024x768 displays	large		slightly larger style, for 1600x1280 hi-res displays	fixed		similar to "default", but all characters are the same		size--this is useful for presenting table-oriented data		or in a terminal emulator.'</body><body package="Tools-Settings-VW" selector="tools25WarnOnExitWithoutSaving">tools25WarnOnExitWithoutSaving	&lt;setting: #(tools warnOnExitWithoutSaving)&gt;	^(BooleanSetting on: #{ObjectMemory.WarnOnExitWithoutSaving})		default: false;		label: #WarnOnExitWithoutSavingImage &lt;&lt; #labels &gt;&gt; 'Warn on exit without saving the image';		helpText: #WarnOnExitWithoutSavingImageHelp &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, exiting without saving the image shows a dialog warning about the potential of losing changes in workspaces and unaccepted changes in code views.'</body><body package="Tools-Settings-VW" selector="tools30showUIForGlobalization">tools30showUIForGlobalization	&lt;setting: #(tools showUIForGlobalization)&gt;	^(BooleanSetting onUISetting: #showInternationalization)		default: false;		label: #ShowUIForInternationalization &lt;&lt; #labels &gt;&gt; 'Show UI for internationalization';		helpText: #ShowUIForInternationalizationHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, certain tools the VisualWorks toolset (e.g. the UI Painter''s Properties Tool) show fields for working will message catalogs. These UI options in the tools are used when localizing applications. You may wish to leave this option disabled if you are not developing localized applications.'</body><body package="Tools-Settings-VW" selector="tools40DebugSettingsErrors">tools40DebugSettingsErrors	&lt;setting: #(tools debugSettingsErrors)&gt;	^(BooleanSetting on: #{SettingsDomain.DebugSettingsErrors})		default: false;		label: #DebugSettingsManagerErrors &lt;&lt; #labels &gt;&gt; 'Debug Settings Manager errors';		helpText: #DebugSettingsManagerErrorsHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, if a setting or a page definition method cause an error, they are replaced in the final UI with a widget saying that an error has occurred and allowing to rerun the offending method to debug its cause.'</body><body package="Tools-Settings-VW" selector="workspaceAutoDeclare">workspaceAutoDeclare	&lt;setting: #(tools workspaces workspaceAutoDeclare)&gt;	^(BooleanSetting on: WorkspaceCompilerErrorHandler aspect: #silentlyDeclareVariables)		default: true;		label: #silentlyDeclareWorkspaceVariables &lt;&lt; #labels &gt;&gt; 'Silently declare workspace variables';		helpText: #silentlyDeclareWorkspaceVariablesHelp &lt;&lt; #dialogs &gt;&gt; 'This modifies how the compiler treats assignments to undeclared variables when evaluating an expression. If checked, the compiler will automatically assume that the variable should be a workspace local variable. If not checked, the compiler will ask you what kind of variable you intended, or allow you to check the spelling. This applies only to assignments--reading an undeclared variable always brings up the dialog.'</body><body package="Tools-Settings-VW" selector="workspaceStatusBar">workspaceStatusBar	&lt;setting: #(tools workspaces workspaceStatusBar)&gt;	^(BooleanSetting on: AbstractWorkspace aspect: #showStatusBar)		default: true;		label: #showStatusBarByDefault &lt;&lt; #labels &gt;&gt; 'Show status bar by default';		helpText: #workspaceStatusBar &lt;&lt; #dialogs &gt;&gt; 'If checked, all new workspaces come up with the status bar visible. If unchecked, all new workspaces come up with the status bar hidden. Changing this setting does not affect existing workspaces.'</body><body package="Tools-Settings-VW" selector="workspaceToolbar">workspaceToolbar	&lt;setting: #(tools workspaces workspaceToolbar)&gt;	^(BooleanSetting on: AbstractWorkspace aspect: #showToolBar)		default: true;		label: #showToolbarByDefault &lt;&lt; #labels &gt;&gt; 'Show toolbar by default';		helpText: #workspaceShowToolbarByDefault &lt;&lt; #dialogs &gt;&gt; 'If checked, all new workspaces come up with the toolbar visible. If unchecked, all new workspaces come up with the toolbar hidden. Changing this setting does not affect existing workspaces.'</body><body package="Tools-Settings-VW" selector="workspaceUseMultiPage">workspaceUseMultiPage	&lt;setting: #(tools workspaces useMultiPageWorkspaces)&gt;	^(BooleanSetting on: AbstractWorkspace aspect: #useMultiPageWorkspaces)		default: true;		label: #useMultiPageWorkspaces &lt;&lt; #labels &gt;&gt; 'Use multi-page workspaces';		helpText: #workspaceUseMultiPage &lt;&lt; #dialogs &gt;&gt; 'Chooses whether the "New Workspace" button of the Launcher opens a new-style workspace containing multiple pages with text, or a more traditional workspace which leaves a little more window real estate to use for the text.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-browser</category><body package="Tools-Settings-VW" selector="browser10DefaultBrowserType">browser10DefaultBrowserType	&lt;setting: #(tools browser defaultBrowserType)&gt;	| typeDescription |	typeDescription := EnumerationSetting		keys: #(Parcel Package)		choices: #(Parcel Package)		labels: (Array			with: #Parcel &lt;&lt; #labels &gt;&gt; 'Parcel'			with: #Package &lt;&lt; #labels &gt;&gt; 'Package').	^(typeDescription on: Refactory.Browser.BrowserNavigator aspect: #navigatorType)		label: #DefaultBrowserType &lt;&lt; #labels &gt;&gt; 'Default browser type';		helpText: #DefaultBrowserTypeHelpText &lt;&lt; #dialogs &gt;&gt; 'This setting determines what type of browser is opened when spawning a new browser. After the browser is opened, you can change its type at any time using the Browser menu.'</body><body package="Tools-Settings-VW" selector="browser20ShowAllWhenNothingIsSelected">browser20ShowAllWhenNothingIsSelected	&lt;setting: #(tools browser showAllWhenNothingIsSelected)&gt;	^(BooleanSetting 			on: Refactory.Browser.ProtocolItemNavigatorPart 			aspect: #showAllItemsWhenNothingSelected)		default: false;		label: #ShowAllWhenNothingIsSelected &lt;&lt; #labels &gt;&gt; 'Show all methods when no protocols are selected';		helpText: #ShowAllWhenNothingIsSelectedHelpText &lt;&lt; #dialogs &gt;&gt; 'Should the method list show all methods/shared variables when nothing is selected? When turned off, no methods or shared variables are displayed until you select a protocol.'</body><body package="Tools-Settings-VW" selector="browser21ShowRefactoringChanges">browser21ShowRefactoringChanges	&lt;setting: #(tools browser showRefactoringChanges)&gt;	^(BooleanSetting on: Refactory.Browser.BrowserApplicationModel aspect: #promptOnRefactoring)		default: false;		label: #ShowRefactoringChanges &lt;&lt; #labels &gt;&gt; 'Show refactoring changes';		helpText: #ShowRefactoringChangesHelpText &lt;&lt; #dialogs &gt;&gt; 'Should a dialog of potential changes be displayed when a refactoring is performed? From the dialog you can remove changes that you do not wish to have performed or even abort all changes. Without the dialog, the refactoring will perform all the changes without any further user action.'</body><body package="Tools-Settings-VW" selector="browser22ShowOnlyFiltered">browser22ShowOnlyFiltered	&lt;setting: #(tools browser showOnlyFiltered)&gt;	^(BooleanSetting on: Refactory.Browser.Navigator aspect: #showOnlyFiltered)		default: true;		label: #ShowOnlyFiltered &lt;&lt; #labels &gt;&gt; 'Only show methods in selected packages/parcels';		helpText: #ShowOnlyFilteredHelpText &lt;&lt; #dialogs &gt;&gt; 'Should only methods from the selected packages or parcels be shown in the method list, or should all methods be displayed? This is the default setting that is used when opening the browser. After the browser is opened, you can change this setting on a browser by browser basis.'</body><body package="Tools-Settings-VW" selector="browser24ShowHorizontalScrollbars">browser24ShowHorizontalScrollbars	&lt;setting: #(tools browser showHorizontalScrollbars)&gt;	^(BooleanSetting on: Refactory.Browser.ListNavigatorPart aspect: #showHorizontalScrollbar)		default: false;		label: #ShowHorizontalScrollbar &lt;&lt; #labels &gt;&gt; 'Show horizontal scrollbars';		helpText: #ShowHorizontalScrollbarHelpText &lt;&lt; #dialogs &gt;&gt; 'Should the lists at the top of the browser have horizontal scrollbars?'</body><body package="Tools-Settings-VW" selector="browser26ShowToolbar">browser26ShowToolbar	&lt;setting: #(tools browser showToolbar)&gt;	^(BooleanSetting on: Refactory.Browser.RefactoringBrowser showToolbarHolder)		default: true;		label: #ShowToolbar &lt;&lt; #labels &gt;&gt; 'Show toolbar';		helpText: #ShowToolbarHelpText &lt;&lt; #dialogs &gt;&gt; 'Should the toolbar be displayed?'</body><body package="Tools-Settings-VW" selector="browser28ShowStatusBar">browser28ShowStatusBar	&lt;setting: #(tools browser showStatusBar)&gt;	^(BooleanSetting on: Refactory.Browser.CodeModel showStatusBarHolder)		default: true;		label: #ShowStatusBar &lt;&lt; #labels &gt;&gt; 'Show status bar';		helpText: #ShowStatusBarHelpText &lt;&lt; #dialogs &gt;&gt; 'Is the status bar displayed? The status bar is the line at the bottom of the browser that display parcel and package information.'</body><body package="Tools-Settings-VW" selector="browser30DefaultNameSpace">browser30DefaultNameSpace	&lt;setting: #(tools browser defaultNameSpace)&gt;	^(StringSetting on: Refactory.Browser.Navigator aspect: #defaultNameSpaceString)		default: 'Smalltalk';		label: #DefaultNamespace &lt;&lt; #labels &gt;&gt; 'Default namespace';		helpText: #DefaultNamespaceHelpText &lt;&lt; #dialogs &gt;&gt; 'This is the name space that category browsers open on. Also, this is the name space used for new class/name space templates.'</body><body package="Tools-Settings-VW" selector="browser40MenuParsingTextLimit">browser40MenuParsingTextLimit	&lt;setting: #(tools browser menuParsingTextLimi)&gt;	^((IntegerSetting min: 1)			on: Refactory.Browser.BrowserTextTool aspect: #parserTextLimit)		default: 10000;		label: #MenuParsingLimit &lt;&lt; #labels &gt;&gt; 'Menu parsing text limit';		helpText: #MenuParsingLimitHelpText &lt;&lt; #dialogs &gt;&gt; 'The Refactoring Browser determines what menus options should be enabled or shown when the menu is opened. For very large methods, it may take a few seconds to parse the methods. As a result, it may take a few seconds for the menu to appear. This setting specifies the maximum number of characters the browser will try to parse when it opens the menu.'</body><body package="Tools-Settings-VW" selector="browser50ProtocolOrdering">browser50ProtocolOrdering	&lt;setting: #(tools browser protocolOrdering)&gt;	| choices type |	choices := Refactory.Browser.SelectorProtocolNavigatorPart protocolOrderChoices.	type := EnumerationSetting		keys: (choices collect: [:each | each displayString asSymbol])		choices: choices.	^(type on: Refactory.Browser.SelectorProtocolNavigatorPart aspect: #protocolOrder)		default: #Traditional;		label: #SelectorProtocolOrder &lt;&lt; #labels &gt;&gt; 'Selector protocol order';		helpText: #SelectorProtocolOrderHelpText &lt;&lt; #dialogs &gt;&gt; 'The browser can either sort selector protocols alphabetically, or group them according to the Smalltalk-80 traditional order: initialization protocols first, private protocols last. Initialization protocols are assumed to be those that contain a string "initial" in their name.  Private protocols are those that start with the word "private" or "pvt".  Within the groups, protocols are sorted alphabetically.'</body><body package="Tools-Settings-VW" selector="browser60UndoCount">browser60UndoCount	&lt;setting: #(tools browser undoCount)&gt;	^((IntegerSetting min: 1 max: 100)			on: Refactory.Browser.RefactoryChangeManager aspect: #undoSize)		default: 5;		label: #UndoCount &lt;&lt; #labels &gt;&gt; 'Undo count';		helpText: #UndoCountHelpText &lt;&lt; #dialogs &gt;&gt; 'Specifies the size of the undo buffer. The undo buffer contains source code accepts, not individual text changes. For example, accepting a method is saved in the undo buffer.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-files</category><body package="Tools-Settings-VW" selector="files10fileOutType">files10fileOutType	&lt;setting: #(files fileOutType)&gt;	^((EnumerationSetting				choices: #(ChunkSourceFileFormat XMLSourceFileFormat)				labels: (Array with: (#ChunkFormat &lt;&lt; #dialogs &gt;&gt; 'Chunk Format') with: (#XMLFormat &lt;&lt; #dialogs &gt;&gt; 'XML Format')))			onUISetting: #fileOutType)		default: #XMLSourceFileFormat;		label: #DefaultFileOutType &lt;&lt; #labels &gt;&gt; 'Default file-out type';		helpText: #DefaultFileOutTypeHelpText &lt;&lt; #dialogs &gt;&gt; 'There are two possible formats to use for file-outs. The setting on this page controls which of these formats is used by programming tools, if they do not have a way to control this feature themselves.Smalltalk chunk format saves Smalltalk programs in a form similar to that used in previous versions of VisualWorks, with Smalltalk expressions separated by exclamation marks. It is not completely compatible with VisualWorks releases prior to version 5, since in version 5 it has been extended substantially to support name spaces.XML format saves Smalltalk programs using an XML markup set designed to capture as much as possible of the VisualWorks system changes. It is a new technology, but offers the possibility of capturing much more detailed meta-information about the program than Smalltalk chunk format, and hence allows much more powerful tools for manipulating source files.'</body><body package="Tools-Settings-VW" selector="files20MessageDirectories">files20MessageDirectories	&lt;setting: #(files messageDirectories)&gt;	^((SequenceSetting of: FilenameSetting mustExist) onUISetting: #messagesList)		label: #UserMessageDirectories &lt;&lt; #labels &gt;&gt; 'User Message Directories';		helpText: #UserMessageDirectoriesHelpText &lt;&lt; #dialogs &gt;&gt; 'Message Catalog settingsThe list view specifies which directories contain message catalog files. You can add, remove, or change directories in the list. Note that these directories are top level directories--the message catalog files are in subdirectories, where each subdirectory is given a name that identifies the language group for which it is intended.To add a directory, type the directory''s name into the input field, and press the Add button.To delete a directory, select it in the list and press Delete.To change a directory, select it in the list, change the name which appears in the input field, and then press Change.'</body><body package="Tools-Settings-VW" selector="files30ParcelDirectories">files30ParcelDirectories	&lt;setting: #(files parcelDirectories)&gt;	^((SequenceSetting of: FilenameSetting) onUISetting: #parcelPath)		label: #ParcelDirectories &lt;&lt; #labels &gt;&gt; 'Parcel Directories';		helpText: #parcelPathHelp &lt;&lt; #dialogs &gt;&gt; 'Parcel Search Path SettingsUse this page to set the sequence of directories that are searched when loading Parcels. Parcels are typically loaded from files, and so the loading mechanism searches through files in directories on the search path to locate a suitable parcel file.If a Parcel has prerequisite parcels, they are also searched for in the directories and in the order specified in this list.Note that ''.'' is used in this list to indicate the directory in which the current parcel is being loaded from, not the directory in which the system is running. Thus, ''.'' can be used to search for a parcel''s prerequisites in the same directory as the parcel.To add a directory to the search path, enter the directory name into the input field, and press the Add button.To delete a directory, select it in the list and press Delete.To change a directory, select it in the list, change the name which appears in the input field, and then press Change.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-fly by help</category><body package="Tools-Settings-VW" selector="flyByHelp1Enabled">flyByHelp1Enabled	&lt;setting: #(flyByHelp flyByHelpEnabled)&gt;	^(BooleanSetting on: FlyByHelpTracker aspect: #isEnabled)		default: true;		label: #FlyByHelpEnabled &lt;&lt; #labels &gt;&gt; 'Enabled';		helpText: #FlyByHelpEnabledHelpText &lt;&lt; #dialogs &gt;&gt; 'When the fly-by help is enabled, a small help window explaining the purpose of the current widget pops up whenever the mouse pointer pauses over the widget (if the explanation is available).  The help window closes when the mouse pointer leaves the widget or after a timeout.'</body><body package="Tools-Settings-VW" selector="flyByHelp2OpenDelay">flyByHelp2OpenDelay	&lt;setting: #(flyByHelp flyByHelpOpenDelay)&gt;	^((IntegerSetting min: 100 max: 100000)			on: FlyByHelpTracker aspect: #openDelay)		default: 500;		label: #PopupDelayMS &lt;&lt; #labels &gt;&gt; 'Popup delay (ms)';		helpText: #PopupDelayHelpText &lt;&lt; #dialogs &gt;&gt; 'The duration the mouse pointer has to be within a widget before the help window opens.'</body><body package="Tools-Settings-VW" selector="flyByHelp3CloseDelay">flyByHelp3CloseDelay	&lt;setting: #(flyByHelp flyByHelpCloseDelay)&gt;	^((IntegerSetting min: 100 max: 100000)			on: FlyByHelpTracker aspect: #closeDelay)		default: 5000;		label: #CloseDelayMS &lt;&lt; #labels &gt;&gt; 'Close delay (ms)';		helpText: #CloseDelayHelpText &lt;&lt; #dialogs &gt;&gt; 'The delay after which the help window is closed.'</body><body package="Tools-Settings-VW" selector="flyByHelp4ForegroundColor">flyByHelp4ForegroundColor	&lt;setting: #(flyByHelp foregroundColor)&gt;	^(ColorValueSetting on: FlyByHelpTracker aspect: #defaultForegroundPaint)		label: #FlyByHelpForeground &lt;&lt; #labels &gt;&gt; 'Foreground color';		helpText: #FlyByHelpForegrondHelp &lt;&lt; #dialogs &gt;&gt; 'The foreground color of the fly-by help window.'</body><body package="Tools-Settings-VW" selector="flyByHelp5BackgroundColor">flyByHelp5BackgroundColor	&lt;setting: #(flyByHelp backgroundColor)&gt;	^(ColorValueSetting on: FlyByHelpTracker aspect: #defaultBackgroundPaint)		label: #FlyByHelpBackground &lt;&lt; #labels &gt;&gt; 'Background color';		helpText: #FlyByHelpBackgroundHelpText &lt;&lt; #dialogs &gt;&gt; 'Background color of the help window.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-printing</category><body package="Tools-Settings-VW" selector="printing10documentPrinting">printing10documentPrinting	&lt;setting: #(printing documentPrinting)&gt;	^((EnumerationSetting				choices: #(hostPrinting postScriptPrinting)				labels: (Array with: (#Host &lt;&lt; #dialogs &gt;&gt; 'Host') with: (#PostScript &lt;&lt; #dialogs &gt;&gt; 'PostScript')))			onUISetting: #documentPrinting)		label: #DocumentPrinting1 &lt;&lt;#labels &gt;&gt; 'Document printing';		helpText: #DocumentPrintingHelpText &lt;&lt; #dialogs &gt;&gt; 'Allows you to choose whether Document based printing will be via PostScript or (on MS Windows platforms only) Host printer drivers. If Host Printing is selected on a non-Windows platform, the system will default back to PostScript at print time.'</body><body package="Tools-Settings-VW" selector="printing10textPrinting">printing10textPrinting	&lt;setting: #(printing textPrinting)&gt;	^((EnumerationSetting				choices: #(documentPrinting plainTextPrinting)				labels: (Array with: (#Document &lt;&lt; #dialogs &gt;&gt; 'Document') with: (#PlainText &lt;&lt; #dialogs &gt;&gt; 'Plain Text')))			onUISetting: #textPrinting)		label: #TextPrinting1 &lt;&lt; #labels &gt;&gt; 'Text printing';		helpText: #TextPrintingHelpText &lt;&lt; #dialogs &gt;&gt; 'Use this option to choose how text view hardcopy is processed -- either by the Document system or simply written in plain text to a file ''temp.prt'' (located in the home directory).'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-look and feel</category><body package="Tools-Settings-VW" selector="lookAndFeel10lookSelection">lookAndFeel10lookSelection	&lt;setting: #(lookAndFeel defaultLook)&gt;	| choices names keys |	names := OrderedCollection new.	choices := OrderedCollection new.	names add: #AutoSelect &lt;&lt; #labels &gt;&gt; 'Auto Select'.	choices add: #AutoSelect.	UILookPolicy allSubclasses do: 		[:look | | lookName |		(lookName := look settingsMenuName) notNil ifTrue:			[names add: lookName.			choices add: look fullyQualifiedReference]].	keys := choices collect: [:each | each printString asSymbol].	^((EnumerationSetting keys: keys choices: choices labels: names)			onUISetting: #defaultLookSelector)		default: #'#AutoSelect';		label: #UserInterfaceLook &lt;&lt; #labels &gt;&gt; 'User interface look';		helpText: #UserInterfaceLookHelpText &lt;&lt; #dialogs &gt;&gt; 'Selects the default appearance and behavior of buttons, scroll bars, etc.  The new look will apply to any canvas or tool window that you open subsequently.  Use "Auto Select" to let VisualWorks adopt the look that is most appropriate for your operating environment.  To affect the look of a single canvas while you''re editing it, use the "Look" menu of the GUI Painter Tool.'</body><body package="Tools-Settings-VW" selector="lookAndFeel15feelSelection">lookAndFeel15feelSelection	&lt;setting: #(lookAndFeel defaultFeel)&gt;	| choices names keys |	names := OrderedCollection new.	choices := OrderedCollection new.	names add: #AutoSelect &lt;&lt; #labels &gt;&gt; 'Auto Select'.	choices add: #AutoSelect.	UIFeelPolicy allSubclasses do: 		[:look | | lookName |		(lookName := look settingsMenuName) notNil ifTrue:			[names add: lookName.			choices add: look fullyQualifiedReference]].	keys := choices collect: [:each | each printString asSymbol].	^((EnumerationSetting keys: keys choices: choices labels: names)			 onUISetting: #feelSelection)		default: #'#AutoSelect';		label: #UserInterfaceFeel &lt;&lt; #labels &gt;&gt; 'User interface feel';		helpText: #UserInterfaceFeelHelpText &lt;&lt; #dialogs &gt;&gt; 'Select the platform feel that you want text editors (including browsers) to have. You may add your own Feels by subclassing from UIFeelPolicy and providing your own keyboard bindings in the class. On the class side of the custom UIFeelPolicy class, one must provide a method called "menuName" that returns a string that names the custom feel policy, e.g., ''Windows 4.0''.'</body><body package="Tools-Settings-VW" selector="lookAndFeel20hostWindowSystem">lookAndFeel20hostWindowSystem	&lt;setting: #(lookAndFeel hostWindowSystem)&gt;	| choices names |	choices := #(#AutoSelect #Default #Macintosh #MSWindows5 #MSWindows4 #OSFMotif).	names := (OrderedCollection new add: (#AutoSelect &lt;&lt; #dialogs &gt;&gt; 'Auto Select'); add: (#DefaultLook &lt;&lt; #dialogs &gt;&gt; 'Default Look'); add: (#MacintoshOS8 &lt;&lt; #dialogs &gt;&gt; 'Macintosh (OS-8)'); add: (#MSWindows5 &lt;&lt; #dialogs &gt;&gt; 'MS Windows 5'); add: (#MSWindows4 &lt;&lt; #dialogs &gt;&gt; 'MS Windows 4'); add: (#OSFMotif &lt;&lt; #dialogs &gt;&gt; 'OSF Motif'); asArray).	^((EnumerationSetting choices: choices labels: names)			 onUISetting: #hostWindowManagerSelector)		default: #AutoSelect;		label: #HostWindowManager &lt;&lt; #labels &gt;&gt; 'Host window manager';		helpText: #HostWindowManagerHelpText &lt;&lt; #dialogs &gt;&gt; 'This setting is a companion to the Look Selection setting.  It tells VisualWorks which window manager you are using, so windows can be placed correctly when they are opened automatically.'</body><body package="Tools-Settings-VW" selector="lookAndFeel40windowPlacement">lookAndFeel40windowPlacement	&lt;setting: #(lookAndFeel windowPlacement)&gt;	^((EnumerationSetting				keys: #(auto user) 				choices: #(false true)				labels: (Array with: (#Automatic &lt;&lt; #dialogs &gt;&gt; 'Automatic') with: (#ByUser &lt;&lt; #dialogs &gt;&gt; 'By User')))			onUISetting: #windowPlacement)		default: #auto;		label: #WindowPlacement1 &lt;&lt; #labels &gt;&gt; 'Window placement';		helpText: #WindowPlacementHelpText &lt;&lt; #dialogs &gt;&gt; 'This option determines whether newly created windows are positioned on the screen by the user or are automatically positioned under the current mouse position with the default size.'</body><body package="Tools-Settings-VW" selector="lookAndFeel50mouseButtonOrder">lookAndFeel50mouseButtonOrder	&lt;setting: #(lookAndFeel mouseButtonOrder)&gt;	^((EnumerationSetting				keys: #(#swo #sow) 				choices: #(false true)				labels: (Array with: (#selectWindowOperate &lt;&lt; #dialogs &gt;&gt; '&lt;select&gt; &lt;window&gt; &lt;operate&gt;') with: (#selectOperateWindow &lt;&lt; #dialogs &gt;&gt; '&lt;select&gt; &lt;operate&gt; &lt;window&gt;')))			onUISetting: #mouseButtons)		default: #swo;		label: #MouseButtonOrder1 &lt;&lt; #labels &gt;&gt; 'Mouse button order';		helpText: #MouseButtonOrderHelpText &lt;&lt; #dialogs &gt;&gt; 'This setting selects what mouse buttons perform what functions. The first option binds the right mouse button to the &lt;operate&gt; menu of the current view, while the middle button opens the &lt;window&gt; menu. The second option swaps the roles of the middle and the right buttons. The second option is the traditional Smalltalk-80 button configuration (also known as red, yellow, blue). The first option, however, is the default because it works better with two-button mice. For those, the &lt;window&gt; function becomes unassigned while the right button remains bound to the more frequently used &lt;operate&gt; menu.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-memory policy</category><body package="Tools-Settings-VW" selector="freeMemoryUpperBoundSetting">freeMemoryUpperBoundSetting	&lt;setting: #(base memoryPolicy freeMemoryUpperBound)&gt;	^((IntegerSetting min: 100000) on: #{MemoryPolicy.DefaultFreeMemoryUpperBound})		id: #(memoryPolicy defaultFreeMemoryUpperBound);		default: 8388608</body><body package="Tools-Settings-VW" selector="growthRegimeUpperBoundSetting">growthRegimeUpperBoundSetting	&lt;setting: #(base memoryPolicy growthRegimeUpperBound)&gt;	^((IntegerSetting min: 100000) on: #{MemoryPolicy.DefaultGrowthRegimeUpperBound})		id: #(memoryPolicy defaultGrowthRegimeUpperBound);		default: 32000000</body><body package="Tools-Settings-VW" selector="memoryUpperBoundSetting">memoryUpperBoundSetting	&lt;setting: #(base memoryPolicy memoryUpperBound)&gt;	^((IntegerSetting min: 100000) on: #{MemoryPolicy.DefaultMemoryUpperBound})		id: #(memoryPolicy defaultMemoryUpperBound);		default: 512000000</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-PS options</category><body package="Tools-Settings-VW" selector="psOptions05Level">psOptions05Level	&lt;setting: #(system printing psOptions level)&gt;	^((EnumerationSetting keys: #(#'1' #'2' #'3') choices: #(1 2 3)) on: PostScriptPrinter		aspect: #languageLevel)		label: #LanguageLevel &lt;&lt; #labels &gt;&gt; 'Language level';		default: #'3';		helpText: #LanguageLevelHelpText &lt;&lt; #dialogs 					&gt;&gt; 'PostScript printer language implementation level.  Choose the implementation version supported by your printer.'</body><body package="Tools-Settings-VW" selector="psOptions10Color">psOptions10Color	&lt;setting: #(system printing psOptions printsColor)&gt;	^(BooleanSetting on: PostScriptPrinter aspect: #printsColor)		default: false;		label: #ColorPrinting &lt;&lt; #labels &gt;&gt; 'Color printing';		helpText: #ColorPrintingHelpText &lt;&lt; #dialogs &gt;&gt; 'Enable color printing to PostScript printers that implement PostScript Level 2. If you attempt to print PostScript generated for such a printer on a Level 1 printer, you will not get any output.'</body><body package="Tools-Settings-VW" selector="psOptions20InvertLandscape">psOptions20InvertLandscape	&lt;setting: #(system printing psOptions invertLandscape)&gt;	^(BooleanSetting on: PostScriptPrinter aspect: #invertLandscape)		default: false;		label: #InvertLandscape &lt;&lt; #labels &gt;&gt; 'Invert landscape position';		helpText: #InvertLandscapeHelpText &lt;&lt; #dialogs &gt;&gt; 'Rotate landscape orientation 180 degrees.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-netClient</category><body package="Tools-Settings-VW" selector="uriFtpAutoloadDefault">uriFtpAutoloadDefault	&lt;setting: #(uri ftpAutoload )&gt;	^(BooleanSetting on: Net.URI aspect: #autoloadFtp)		label: #FtpAutoload&lt;&lt; #net &gt;&gt; 'FTP parcel autoload';		helpText: #FtpAutoloadHelpText &lt;&lt; #net &gt;&gt; 'Specifies whether or not autoload the FTP parcel when the ftp url is created'</body><body package="Tools-Settings-VW" selector="uriHttpAutoloadDefault">uriHttpAutoloadDefault	&lt;setting: #(uri httpAutoload )&gt;	^(BooleanSetting on: Net.URI aspect: #autoloadHttp)		label: #HttpAutoload&lt;&lt; #net &gt;&gt; 'HTTP parcel autoload';		helpText: #HttpAutoloadHelpText &lt;&lt; #net &gt;&gt; 'Specifies whether or not autoload the HTTP parcel when the http url is created'</body><body package="Tools-Settings-VW" selector="uriHttpsAutoloadDefault">uriHttpsAutoloadDefault	&lt;setting: #(uri httpsAutoload )&gt;	^(BooleanSetting on: Net.URI aspect: #autoloadHttps)		label: #HttpsAutoload&lt;&lt; #net &gt;&gt; 'HTTPS parcel autoload';		helpText: #HttpsAutoloadHelpText &lt;&lt; #net &gt;&gt; 'Specifies whether or not autoload the HTTPS parcel when the https url is created'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-loading</category><body package="Tools-Settings-VW" selector="loading10allowLoadingParcels">loading10allowLoadingParcels	&lt;setting: #(loading allowLoadingParcels)&gt;	^(BooleanSetting on: ImageConfigurationSystem aspect: #allowParcelLoading)		default: true;		label: #AllowParcelLoading &lt;&lt; #labels &gt;&gt; 'Allow Command-Line Parcel Loading (-pcl,-cnf)';		helpText: #AllowParcelLoadingHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, it will be possible to load parcels from the command-line using the -pcl and -cnf options. Note that this is a potential security risk for packaged applications, and you may want to disable it for those uses.'</body><body package="Tools-Settings-VW" selector="loading12useDefaultConfigFile">loading12useDefaultConfigFile	&lt;setting: #(loading useDefaultConfigFile)&gt;	^(BooleanSetting on: ImageConfigurationSystem aspect: #useDefaultConfigFile)		default: true;		label: #UseDefaultConfigFile &lt;&lt; #labels &gt;&gt; 'Look for Default Config File (imagename.cnf)';		helpText: #UseDefaultConfigFileHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, on startup the image will look for a file named "&lt;imagename&gt;.cnf". If it is found, this will be treated as a config file (see the -cnf flag) and loaded. Note that this is a potential security risk for packaged applications, and you may want to disable it for those uses.'</body><body package="Tools-Settings-VW" selector="loading15allowFilein">loading15allowFilein	&lt;setting: #(loading allowFilein)&gt;	^(BooleanSetting on: ImageConfigurationSystem aspect: #allowFilein)		default: true;		label: #AllowFileIn &lt;&lt; #labels &gt;&gt; 'Allow Command-Line File-ins (-filein, headless-startup.st)';		helpText: #AllowFileinHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, it will be possible to run arbitrary code from a Smalltalk file specified on the command line, using the -filein option. Note that this is a potential security risk for packaged applications, and you may want to disable it for those uses. This setting also controls whether the headless image startup file is read or not.'</body><body package="Tools-Settings-VW" selector="loading20allowExpressions">loading20allowExpressions	&lt;setting: #(loading allowExpressions)&gt;	^(BooleanSetting on: ImageConfigurationSystem aspect: #allowExpressions)		default: true;		label: #AllowExpressions &lt;&lt; #labels &gt;&gt; 'Allow Command-Line Expressions(-doit,-evaluate)';		helpText: #AllowExpressionsHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, it will be possible to run arbitrary code on the command line, using the -doit and -evaluate options. Note that this is a potential security risk for packaged applications, and you may want to disable it for those uses.'</body><body package="Tools-Settings-VW" selector="loading25allowSettings">loading25allowSettings	&lt;setting: #(loading allowSettings)&gt;	^(BooleanSetting on: ImageConfigurationSystem aspect: #allowSettings)		default: true;		label: #AllowSettings &lt;&lt; #labels &gt;&gt; 'Allow Command-Line Settings (-settings)';		helpText: #AllowSettingsHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, it will be possible to load settings on the command line using the -settings option. Note that this is a potential (although small) security risk for packaged applications, and you may want to disable it for those uses.'</body></methods><methods><class-id>Tools.VisualWorksHomePage class</class-id> <category>interface specs</category><body package="Tools-Settings-VW" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 512 384 768 628 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 50 0 ) 					#name: #ModuleSubcanvas 					#flags: 0 					#majorKey: #{DirectorySettingModule} 					#minorKey: #windowSpec 					#clientKey: #directoryModule ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 55 160 80 ) 					#name: #pasteButton 					#model: #detectAndPasteDirectory 					#label: 					#(#{Kernel.UserMessage} 						#key: #PasteCurrent 						#defaultString: 'Paste Current' 						#catalogID: #dialogs ) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 95 0 0 1 0 1 ) 					#name: #HelpTextEditor 					#flags: 4 					#model: #helpTextHolder 					#style: #small 					#isReadOnly: true 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="Tools-Settings-VW" selector="setVisualWorksHome">setVisualWorksHome	"VisualLauncher someInstance setVisualWorksHome"	&lt;menuItem: #(#_SetVisualWorksHome #menus '&amp;Set VisualWorks Home...' )		nameKey: nil		menu: #(#menuBar file)		position: 19.1&gt;	VisualWorksSettings openManagerPage: #(system)</body><body package="Tools-Settings-VW" selector="visualWorksSettings">visualWorksSettings	"Open a new Settings control panel."	&lt;menuItem: #(#Settings #menus 'Settings')		icon: #properties		nameKey: #visualWorksSettings		menu: #(#launcherToolBar)		position: 10.02		helpText: #(#EditTheSystemOptions #menus 'Edit the system options')&gt;	&lt;menuItem: #(#settings #menus '&amp;Settings')		icon: #properties		nameKey: #visualWorksSettings		menu: #(#menuBar system)		position: 9.02&gt;	SettingsManager 		openOrRaise: VisualWorksSettings 		selectPage: #()</body></methods><methods><class-id>Tools.ListIconLibrary class</class-id> <category>resources</category><body package="Tools-Settings-VW" selector="loadOptions16x16">loadOptions16x16	"UIMaskEditor new openOnClass: self andSelector: #loadOptions16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1735 2666 3630)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 5075 6456)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[170 170 170 170 170 170 234 170 170 171 90 170 170 173 66 170 170 170 106 170 171 170 106 186 173 170 106 182 181 90 105 84 164 166 102 146 168 166 102 138 170 166 102 170 170 166 102 170 170 166 102 170 170 166 102 170 170 170 170 170 170 170 170 170])</body><body package="Tools-Settings-VW" selector="loadOptions16x16mask">loadOptions16x16mask	"UIMaskEditor new openOnClass: self andSelector: #loadOptions16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 128 0 0 1 192 0 0 3 224 0 0 0 128 0 0 16 132 0 0 48 134 0 0 124 159 0 0 50 166 0 0 18 164 0 0 2 160 0 0 2 160 0 0 2 160 0 0 2 160 0 0 0 0 0 0 0 0 0 0])</body><body package="Tools-Settings-VW" selector="psPrinter16x16">psPrinter16x16	"Tools.UIMaskEditor new openOnClass: self andSelector: #psPrinter16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 9) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 6869 scaledBlue: 6869); at: 4 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3170 scaledBlue: 3170); at: 5 put: Graphics.ColorValue white; at: 6 put: Graphics.ColorValue yellow; at: 7 put: Graphics.ColorValue red; at: 8 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 2113 scaledBlue: 2113); at: 9 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[68 68 68 68 68 68 68 68 68 68 71 119 112 68 68 68 68 68 71 102 4 4 68 68 68 68 71 102 4 64 68 68 68 68 71 102 0 0 68 68 68 68 71 102 102 96 68 68 68 68 135 102 102 103 34 4 68 72 40 136 136 136 40 4 68 130 34 34 34 34 136 4 68 129 17 17 17 17 136 4 68 129 17 17 21 81 136 4 68 129 17 17 17 17 128 68 68 129 17 17 17 17 4 68 68 67 51 51 51 48 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68])</body><body package="Tools-Settings-VW" selector="psPrinter16x16mask">psPrinter16x16mask	"UIMaskEditor new openOnClass: self andSelector: #printer16x16mask"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 7 240 0 0 7 240 0 0 7 240 0 0 7 240 0 0 7 252 0 0 15 254 0 0 31 254 0 0 63 254 0 0 63 254 0 0 63 254 0 0 63 252 0 0 63 248 0 0 31 240 0 0 0 0 0 0 0 0 0 0]))</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SettingsManagerPage</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>manager id position label icon children definingMethod </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>Tools-Settings</package></attributes></class><class><name>SettingsDomain</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cachedSettings cachedPages unappliedSnapshots </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>Tools-Settings</category><attributes><package>Tools-Settings</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>