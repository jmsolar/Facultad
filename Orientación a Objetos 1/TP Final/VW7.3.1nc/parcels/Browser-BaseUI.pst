<?xml version="1.0"?><st-source><!-- Name: Browser-BaseUINotice: Copyright © 2002-2005 Cincom Systems, Inc.  All Rights Reserved.Comment: Converted from parcel: RBBaseUI  7 - feb02.3DbIdentifier: bear73DbTrace: 53640DevelopmentPrerequisites: #(#(#any 'Browser-Environments' '') #(#any 'Browser-Parser' ''))PackageName: Browser-BaseUIParcel: #('Browser-BaseUI')PrerequisiteParcels: #(#('Browser-Environments' '') #('Browser-Parser' ''))PrintStringCache: (7.3 - 1.10,bobw)Version: 7.3.1Post-Load Block: 	[:t1 | Refactory.Browser.RBCommand initializeActions.Refactory.Browser.BrowserApplicationModel flushMenus]Pre-Unload Block: 	[:t1 | Refactory.Browser.RBCommand initializeWithActions: #().Refactory.Browser.BrowserApplicationModel flushMenus]Date: 5:51:59 pm April 10, 2005 --><time-stamp>From VisualWorks®, 7.3.1 of April 10, 2005 on April 10, 2005 at 5:51:59 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>RBCommand</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name description action enabled receiver </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Commands</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.RBCommand</class-id><body>RBCommand represents a command for the refactoring browser. It can determine who should receive the message and also whether the message is valid in the current context. This allows one to place any command in any toolbar or menu.Instance Variables:	action	&lt;BlockClosure | Symbol&gt;	the symbol or block that is performed when we are executed	description	&lt;String | UserMessage&gt;	our help text	enabled	&lt;Symbol&gt;	a symbol that when performed returns true if the action is valid in the current context	name	&lt;String | UserMessage&gt;	our name	receiver	&lt;Symbol&gt;	the name of the object that will receive our enabled and action messagesShared Variables:	Actions	&lt;Dictionary&gt;	all actions for the RB menus, keyed by either the action name, if a String, or the defaultString of the action name, if the name is a UserMessage</body></comment><class><name>RBMultiSelectionView</name><environment>Refactory.Browser</environment><super>UI.MultiSelectionSequenceView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Support</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.RBMultiSelectionView</class-id><body>RBMultiSelectionView is a special MultiSelectionView that uses an OrderedCollection for its selections instead of a Set.</body></comment><class><name>RBDynamicMultiCommand</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RBCommand</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Commands</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.RBDynamicMultiCommand</class-id><body>RBDynamicMultiCommand is a special comment that evaluates to several different commands at runtime. It is useful for making dynamic lists of items.</body></comment><class><name>BrowserApplicationModel</name><environment>Refactory.Browser</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>menus </class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserApplicationModel</class-id><body>BrowserApplicationModel is an abstract class that extends the standard ApplicationModel. It adds functions to easily change subcanvases and change the properties of the widgets.Subclasses with subcanvases should override the #subcanvases method so that the new subcanvas is also return in the list of subcanvas open in this application. The subcanvas information is used so that #updateRequest's can be made of the whole application without the need to write a specific updateRequest in each subclass that defines uses a subcanvas. Also, when installing the same application model several different times, the builder must be nil'ed and the #subcanvases method is also used to nil the builder.Class Instance Variables:	menus	&lt;Dictionary&gt;	a cache of all our menusShared Variables:	PromptOnRefactoring	&lt;Boolean&gt;	should we open a changes list when performing a refactoring</body></comment><class><name>NavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>navigator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.NavigatorPart</class-id><body>NavigatorPart represents a generic subcanvas that can be placed inside a navigator. It is responsible for displaying some navigation information and when selections are made it must notify the navigator of those changes. The navigator will also request this part to fill in the appropriate parts of the navigator state.Subclasses must implement the following messages:	accessing-navigator		fillInState:			fill in the NavigatorState with our current selection	updating widgets		selectState:			a buffer is being switched to, select the correct class/method in the navigator state no matter where it is		updateWithState:			a previous part has changed its selection, try to keep the same selections, but if not possible, just update our displayInstance Variables:	navigator	&lt;BrowserNavigator&gt;	our containing navigator</body></comment><class><name>ListNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.NavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menu visualBlock objectList </inst-vars><class-inst-vars>defaultVisualBlock showIcons </class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.ListNavigatorPart</class-id><body>ListNavigatorPart is the abstact superclass of navigator parts that display a list of something.Instance Variables:	menu	&lt;Menu&gt;	The menu that pops up on this list.	objectList	&lt;MultiSelectionInTree&gt;	The list of items.	visualBlock	&lt;BlockClosure&gt;	This block is called to display each item. Allows highlighting, etc.Class Instance Variables:	defaultVisualBlock	&lt;BlockClosure&gt;	the visual block for the list</body></comment><class><name>TabNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.NavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objectList subcanvasBuilder namedComponents </inst-vars><class-inst-vars>tabDescriptions </class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.TabNavigatorPart</class-id><body>TabNavigatorPart is a navigator part that displays tab lists.Instance Variables:	namedComponents	&lt;OrderedCollection of: Association&gt;	our components (name -&gt; navigator part)	objectList	&lt;SelectionInList&gt;	the selection in list of our tabs	subcanvasBuilder	&lt;UIBuilder&gt;	the builder used to make our subcanvasClass Instance Variables:	tabDescriptions	&lt;Collection&gt;	the tabs that are to be displayed</body></comment><class><name>ConstantNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.NavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stateBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.ConstantNavigatorPart</class-id><body>ConstantNavigatorPart is a special navigator part that just fills in the NavigatorState object. Instead of having a GUI that allows changes, it's state is tied to a block closure's value.Instance Variables:	stateBlock	&lt;BlockClosure&gt;	the block that is used to fillin the navigator state</body></comment><class><name>ProtocolItemNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>protocolHolder listSelector overriddenCache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.ProtocolItemNavigatorPart</class-id><body>ProtocolItemNavigatorPart is a navigator part that displays items that are contained within a protocol (e.g., methods and shared variables).Instance Variables:	listSelector	&lt;Symbol&gt;	this symbol is performed on ourself to update the current list	protocolHolder	&lt;ValueModel on: Symbol&gt;	the protocol that our primary selection is inShared Variables:	ShowAllItemsWhenNothingSelected	&lt;Boolean&gt;	should we show all methods when no protocols selected</body></comment><class><name>HierarchyPundleNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.HierarchyPundleNavigatorPart</class-id><body>HierarchyPundleNavigatorPart displays a class hierarchy along with the packages associated with the selected class.</body></comment><class><name>InstanceVariableNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.InstanceVariableNavigatorPart</class-id><body>InstanceVariableNavigatorPart displays a list instance variables.</body></comment><class><name>SharedVariableNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.SharedVariableNavigatorPart</class-id><body>SharedVariableNavigatorPart is a navigator part that displays shared variables.</body></comment><class><name>RBActionEditor</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>enabledHolder actionHolder actionList receiverHolder descriptionHolder nameHolder typeList spec </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Commands</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.RBActionEditor</class-id><body>RBActionEditor is a helper class for creating the commands for the Refactoring Browser. It is used for developing the RB, and probably isn't that useful for others.Instance Variables:	actionHolder	&lt;ValueModel&gt;	the action symbol for the command	actionList	&lt;SelectionInList&gt;	the list of commands	descriptionHolder	&lt;ValueModel&gt;	the help text of the selected command	enabledHolder	&lt;ValueModel&gt;	the enabled symbol for the command	nameHolder	&lt;ValueModel&gt;	the name of the command	receiverHolder	&lt;ValueModel&gt;	the receiver symbol for the selected command	spec	&lt;RBCommand&gt;	the selected command	typeList	&lt;SelectionInList&gt;	the type of commands we are creating</body></comment><class><name>FormatterConfigurationTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>optionsList formattedTextHolder descriptionHolder valueSubcanvas numericHolder textHolder booleanHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Support</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.FormatterConfigurationTool</class-id><body>FormatterConfigurationTool is a UI for editing the properites of the formatter.Instance Variables:	booleanHolder	&lt;ValueModel&gt;	a value holder for boolean values	descriptionHolder	&lt;ValueModel&gt;	a value holder for the description of the selected property	formattedTextHolder	&lt;ValueModel&gt;	a value holder for the formatted method	numericHolder	&lt;ValueModel&gt;	a value holder for numeric values	optionsList	&lt;SelectionInList&gt;	the list of the formatter options	textHolder	&lt;ValueModel&gt;	a value holder for text values	valueSubcanvas	&lt;FormatterConfigurationTool&gt;	the subcanvas for the current propertyShared Variables:	Descriptions	&lt;Dictionary&gt;	the descriptions of the formatter properties	Names	&lt;Dictionary&gt;	the user friendly names of the properites</body></comment><class><name>Navigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>environment state dispatcher parts partsDictionary menus showOnlyFiltered </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.Navigator</class-id><body>Navigator is an abstract superclass. A navigator allows the user to browse a portion of the system and select various classes, method, and other program items. This roughly corresponds to the top portion of the classic Smalltalk browser. This is a component-based framework and allows the various lists and tabs to be swapped in depending on the purpose it will be used for.Instance Variables:	dispatcher	&lt;RBActionDispatcher&gt;	This is responsible to performing the various menu and keystroke actions.	environment	&lt;BrowserEnvironment&gt;	The portion of the image being browsed.	menus	&lt;Dictionary key: String value: Menu&gt;	Map of all of the menus in this navigator. The string is an identifier used for lookup.	parts	&lt;(Collection of: CodeComponentTabNavigatorPart)&gt;	The components being displayed in this navigator.	partsDictionary	&lt;Dictionary key: Symbol  value: NavigatorPart&gt;	Map of possible components that can be displayed in a navigator.	showOnlyFiltered	&lt;Boolean&gt;	should we display methods in packages we haven't selected	state	&lt;NavigatorState&gt;	The current set of selections in the navigator. This is a memento and is used to implement the buffers feature.Shared Variables:	DefaultNamespace	&lt;String&gt;	the name of the default namespace for class definitions	LastProtocol	&lt;Symbol&gt;	the last protocol that was selected in the navigator	ShowOnlyFiltered	&lt;Boolean&gt;	should the default browsers filter by the packages/parcels selected? This is option can be overridden by each browser.</body></comment><class><name>RBCheckedCommand</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RBCommand</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Commands</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.RBCheckedCommand</class-id><body>RBCheckedCommand is a command that when converted to a menu option, puts a check in front of the menu. This is useful for slowing lists of menu items where one of them is selected.</body></comment><class><name>CodeComponentTabNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.TabNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentTabNavigatorPart</class-id><body>CodeComponentTabNavigatorPart is the navigator part that displays a code component list and a list of classes within that component. It also allows switch between a list view and a hierarchy view.</body></comment><class><name>RBMethodDefinition</name><environment>Refactory.Browser</environment><super>Tools.MethodDefinition</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Support</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.RBMethodDefinition</class-id><body>RBMethodDefinition is an MethodDefinition with a special displayString.</body></comment><class><name>PundleItem</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>item </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.PundleItem</class-id><body>PundleItem is used as the item in the bundle/package tree. It knows how to retrieve its children as well as perform the type-selection.Instance Variables:	item	&lt;Store.BundleModel | Store.PundleAccess&gt;	our current item (the store registry is used for the top level node)Shared Variables:	ModifiedBundleImage	&lt;CachedImage&gt;	the icon for a modified bundle	ModifiedPackageImage	&lt;CachedImage&gt;	the icon for a modified package	UnmodifiedBundleImage	&lt;CachedImage&gt;	the icon for an unmodified bundle	UnmodifiedPackageImage	&lt;CachedImage&gt;	the icon for an unmodified package</body></comment><class><name>RBActionDispatcher</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objects </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Commands</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.RBActionDispatcher</class-id><body>RBActionDispatcher is used to dispatch menu selections. Since the browser is broken into several objects and the menu for one object might be inside another object, we need to be able to find the correct object to dispatch the menu to.Instance Variables:	objects	&lt;Dictionary&gt;	the different objects in the browser</body></comment><class><name>ProtocolSortOrder</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name sortBefore sortAfter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.ProtocolSortOrder</class-id><body>ProtocolSortOrder defines a custom sort ordering of protocol strings. Strings are first sorted into buckets and then sorted alphabetically within the buckets. The buckets are defined by the sortBefore and sortAfter collections. These collections contain strings that will be match:ed against the list items. If an item does not match: anything in either the sortBefore or sortAfter lists, then it is assumed to go in the middle of the list. Instance Variables:	name	&lt;String&gt;	our name	sortAfter	&lt;SequenceableCollection of: String&gt;	the buckets to sort at the end of the list (the last item is the last bucket)	sortBefore	&lt;SequenceableCollection of: String&gt;	the buckets to sort at the beginning of the list (the first item is the first bucket)</body></comment><class><name>ParcelNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.ParcelNavigatorPart</class-id><body>ParcelNavigatorPart is a navigator part that displays parcels.</body></comment><class><name>EnvironmentEditor</name><environment>Refactory.Browser</environment><super>Refactory.Browser.Navigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectedEnvironment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environment Editor</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.EnvironmentEditor</class-id><body>EnvironmentEditor is the browser for viewing an RBEnvironment.Instance Variables:	selectedEnvironment	&lt;BrowserEnvironment&gt;	The environment to be browsed.</body></comment><class><name>HierarchyParcelNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ParcelNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.HierarchyParcelNavigatorPart</class-id><body>HierarchyParcelNavigatorPart displays a class hierarchy along with the parcels of the selected class.</body></comment><class><name>ObjectNameWrapper</name><environment>Refactory.Browser</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fullName simpleName environmentName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.ObjectNameWrapper</class-id><body>ObjectNameWrapper is used as the items in the class/namespace list. It allows you to type-select in the list.Instance Variables:	environmentName	&lt;String&gt;	the full name of the namespace the class/namespace is in	fullName	&lt;String&gt;	our full name	simpleName	&lt;String&gt;	the class/namespace's short nameShared Variables:	PrintFormat	&lt;String | nil&gt;	the format string that describes how to format class names</body></comment><class><name>ClassAndMethodTabNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.TabNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectors methods </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.ClassAndMethodTabNavigatorPart</class-id><body>ClassAndMethodTabNavigatorPart is a composite component that displays a list of classes and methods either as a list of methods or a list of classes and a list of selectors within that that class.Instance Variables:	methods	&lt;MethodNavigatorPart&gt;	The subpart that displays the method list	selectors	&lt;NamespaceItemTabNavigatorPart&gt;	The subpart that displays the selectors within a selected class.</body></comment><class><name>RBInitializerDefinition</name><environment>Refactory.Browser</environment><super>Tools.InitializerDefinition</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Support</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.RBInitializerDefinition</class-id><body>RBInitializerDefinition is an InitializerDefinition with a special displayString.</body></comment><class><name>PundleNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.HierarchyPundleNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.PundleNavigatorPart</class-id><body>PundleNavigatorPart is a navigator part that displays packages.</body></comment><class><name>ProtocolNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.ProtocolNavigatorPart</class-id><body>ProtocolNavigatorPart is a navigator part which is used to display protocol lists for shared variables or methods.Subclasses must implement the following messages:	drag and drop		canDropInProtocol:			returns a boolean if we can drop on the protocol		dropUsing:			performs the drop action	private		fillInListFor:			update the navigator state	updating widgets		updateSelectedProtocols:from:			updates the list of selected items to include the protocols of the selected methods/shared variables</body></comment><class><name>SelectorProtocolNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.SelectorProtocolNavigatorPart</class-id><body>SelectorProtocolNavigatorPart is a navigator part that displays the protocols for methods.</body></comment><class><name>RBMultiSelectionInList</name><environment>Refactory.Browser</environment><super>UI.MultiSelectionInList</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Support</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.RBMultiSelectionInList</class-id><body>RBMultiSelectionInList is a MultiSelectionInList that uses an OrderedCollection for its selections instead of a Set.</body></comment><class><name>SharedVariableProtocolNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.SharedVariableProtocolNavigatorPart</class-id><body>SharedVariableProtocolNavigatorPart is a navigator part that displays the protocols for shared variables.</body></comment><class><name>CategoryNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nameSpace </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.CategoryNavigatorPart</class-id><body>CategoryNavigatorPart is a component that displays a list of categories.Instance Variables:	namespace	&lt;NameSpace&gt;	The name space that contains the categories that this part is browsing.</body></comment><class><name>MethodNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.MethodNavigatorPart</class-id><body>MethodNavigatorPart is the part that lists selectors.</body></comment><class><name>NameSpaceItemTabNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.TabNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type showProtocols </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.NameSpaceItemTabNavigatorPart</class-id><body>NamespaceItemTabNavigatorPart is the navigator part that shows a tabbed view and allows the user to select which contents of a namespace or class they wish to browse.Instance Variables:	showProtocols	&lt;Boolean&gt;	should we show the protocol list even if we are not viewing all methods? Normally, we just show a text field for the protocol when we are just viewing a few methods.	type	&lt;ByteSymbol&gt;	Which tab has been selected.</body></comment><class><name>TabPartDescription</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name buildSelector enabledSelector matchSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.TabPartDescription</class-id><body>TabPartDescription is the item that the TabNavigatorPart holds in its tab list.Instance Variables:	buildSelector	&lt;Symbol&gt;	the symbol that is performed to build the subcanvas	enabledSelector	&lt;Symbol&gt;	the symbol that is performed to see if we are valid for the current selection	matchSelector	&lt;Symbol&gt;	the symbol that is performed to see if we are the preferred display tab for the current selection	name	&lt;String&gt;	our name</body></comment><class><name>MetaNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.NavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>metaHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.MetaNavigatorPart</class-id><body>MetaNavigatorPart is the part that displays the switch buttons to select the instance side / class side switch.Instance Variables:	metaHolder	&lt;ValueModel&gt;	Holder for the current selection.</body></comment><class><name>BrowserDialog</name><environment>Refactory.Browser</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserDialog</class-id><body>BrowserDialog is an abstract class that extends the standard SimpleDialog. It adds functions to easily change the properties of the widgets.</body></comment><class><name>ClassSelectionDialog</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>environmentEditor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environment Editor</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.ClassSelectionDialog</class-id><body>ClassSelectionDialog is a dialog interface for selecting classes to perform some action on (e.g., rewrite tool, browsing, etc.).Instance Variables:	environmentEditor	&lt;EnvironmentEditor&gt;	the part that is actually selecting the classes</body></comment><class><name>SelectorNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.SelectorNavigatorPart</class-id><body>SelectorNavigatorPart is a navigator part that displays methods.</body></comment><class><name>ClassNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.ClassNavigatorPart</class-id><body>ClassNavigatorPart is the abstract superclass of navigator components that display classes.Shared Variables:	NamespaceImage	&lt;CachedImage&gt;	the icon that is displayed next to a namespace</body></comment><class><name>HierarchyClassNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ClassNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hierarchyClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.HierarchyClassNavigatorPart</class-id><body>HierarchyClassNavigatorPart is the component that displays a class hierarchy.Instance Variables:	hierarchyClass	&lt;String&gt;	The class that the hierarchy is computed from.</body></comment><class><name>HierarchyClassWithCategoryNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.HierarchyClassNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.HierarchyClassWithCategoryNavigatorPart</class-id><body>HierarchyClassWithCategoryNavigatorPart displays a class hierarchy along with the category of the selected item.</body></comment><class><name>ClassAndObjectNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ClassNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objectHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.ClassAndObjectNavigatorPart</class-id><body>ClassAndObjectNavigatorPart is a component that displays a list of classes and an associated code component (Parcel, Package, etc.).Instance Variables:	objectHolder	&lt;ValueModel&gt;	The code component corresponding to the selected class.</body></comment><class><name>NavigatorState</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>categories parcels pundles objectNameReferences type protocols definitions properties nameSpaceName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BaseUI</package></attributes></class><comment><class-id>Refactory.Browser.NavigatorState</class-id><body>NavigatorState is a memento that the navigator uses to hold its state. It is held by each CodeModel so that when switching between the different code models, the navigator can easily be updated to the proper selection.Instance Variables:	categories	&lt;Collection of: Symbol&gt;	the selected categories	definitions	&lt;Collection of: GeneralMethodDefinition&gt;	the selected methods and/or shared variables	namespaceName	&lt;String&gt;	our default namespace	objectNameReferences	&lt;Collection of: GeneralBindingReference&gt;	the class and namespace references that are selected	parcels	&lt;Collection of: String&gt;	selected parcel names	properties	&lt;Dictionary&gt;	generic items that can be added to the state	protocols	&lt;Collection of: Symbol&gt;	the selected protocols	pundles	&lt;Collection&gt;	the package and bundle names that are selected	type	&lt;ByteSymbol&gt;	are we viewing #data, #class, or #instance side of a class</body></comment><shared-variable><name>PrintFormat</name><environment>Refactory.Browser.ObjectNameWrapper</environment><private>false</private><constant>false</constant><category>printing</category><initializer>nil</initializer><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>Actions</name><environment>Refactory.Browser.RBCommand</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>DefaultNameSpace</name><environment>Refactory.Browser.Navigator</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>LastProtocol</name><environment>Refactory.Browser.Navigator</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>ShowOnlyFiltered</name><environment>Refactory.Browser.Navigator</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><initializer>true</initializer><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>ShowAllItemsWhenNothingSelected</name><environment>Refactory.Browser.ProtocolItemNavigatorPart</environment><private>false</private><constant>false</constant><category>variables</category><initializer>false</initializer><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>ProtocolOrderChoices</name><environment>Refactory.Browser.SelectorProtocolNavigatorPart</environment><private>false</private><constant>false</constant><category>variables</category><initializer>OrderedCollection with: ProtocolSortOrder alphabetical with: ProtocolSortOrder traditional</initializer><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>ProtocolOrder</name><environment>Refactory.Browser.SelectorProtocolNavigatorPart</environment><private>false</private><constant>false</constant><category>variables</category><initializer>ProtocolSortOrder traditional</initializer><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>ShowHorizontalScrollbar</name><environment>Refactory.Browser.ListNavigatorPart</environment><private>false</private><constant>false</constant><category>variables</category><initializer>false</initializer><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>UnmodifiedPackageImage</name><environment>Refactory.Browser.PundleItem</environment><private>false</private><constant>false</constant><category>resources</category><initializer>nil</initializer><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>ModifiedBundleImage</name><environment>Refactory.Browser.PundleItem</environment><private>false</private><constant>false</constant><category>resources</category><initializer>nil</initializer><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>UnmodifiedBundleImage</name><environment>Refactory.Browser.PundleItem</environment><private>false</private><constant>false</constant><category>resources</category><initializer>nil</initializer><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>ModifiedPackageImage</name><environment>Refactory.Browser.PundleItem</environment><private>false</private><constant>false</constant><category>resources</category><initializer>nil</initializer><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>Descriptions</name><environment>Refactory.Browser.FormatterConfigurationTool</environment><private>false</private><constant>false</constant><category>variables</category><initializer>Dictionary new	at: #FormatCommentWithStatements put: 'Format comments beside the statement they occurred in. If this is unchecked, then comments will be put beside the node they occurred in the original source.';	at: #IndentsForKeywords put: 'When formatting a multi-line message, how many more times should we indent?';	at: #IndentString put: 'This is the string that is used for indenting lines.';	at: #LineUpBlockBrackets put: 'Should the block brackets [] be aligned when formatting a multi-line block?';	at: #MaxLineLength put: 'How long should a line be before the formatter breaks it into multiple lines. Comments are not affected.';	at: #MethodSignatureOnMultipleLines put: 'Should keyword method signatures be displayed on multiple lines?';	at: #MinimumNewLinesBetweenStatements put: 'How many new lines should be placed between the previous statement''s period and the next statement?';	at: #NewLineAfterCascade put: 'Should a new line be added between each cascaded message? If not, the next message will begin on the same line as the previous message.';	at: #NewLineBeforeFirstCascade put: 'When formatting a cascaded message, should a new line be added before the first message?';	at: #NewLineBeforeFirstKeyword put: 'When formatting a multi-line keyword message, should we add a new line before the first keyword?';	at: #NewLinesAfterMethodComment put: 'How many new lines should be added between a method comment and the start of the method?';	at: #NewLinesAfterMethodPattern put: 'How many new lines should be added after the method pattern and the method body?';	at: #NewLinesAfterTemporaries put: 'How many new lines should be added after formatting temporary variables (e.g., | a b c |)?';	at: #NumberOfArgumentsForMultiLine put: 'How many arguments are required to always format a message on multiple lines?';	at: #PeriodsAsTerminators put: 'Should we add a period after every statement? If this is unchecked, only the necessary periods are added.';	at: #PeriodsAtEndOfBlock put: 'Should we add a period after the last statement in a block?';	at: #PeriodsAtEndOfMethod put: 'Should we add a period after the last statement in a method?';	at: #RetainBlankLinesBetweenStatements put: 'Should blank lines between statements in the original source be retained.';	at: #StringFollowingReturn put: 'What string if any is displayed immediately following a return ^?';	at: #StringInsideBlocks put: 'What string if any is displayed inside the brackets of a block []?';	at: #StringInsideParentheses put: 'What string if any is displayed inside parentheses ()?';	at: #UseTraditionalBinaryPrecedenceForParentheses put: 'Should we parethesize expressions based on standard precendence of other languages? For example, should 3 + 4 * 2 be formatted as (3 + 4) * 2?';	yourself</initializer><attributes><package>Browser-BaseUI</package></attributes></shared-variable><shared-variable><name>Names</name><environment>Refactory.Browser.FormatterConfigurationTool</environment><private>false</private><constant>false</constant><category>variables</category><initializer>Dictionary new	at: #FormatCommentWithStatements put: 'Format comments beside their statements';	at: #IndentsForKeywords put: 'Indents for keywords';	at: #IndentString put: 'Indent string';	at: #LineUpBlockBrackets put: 'Line up block brackets []';	at: #MaxLineLength put: 'Max line length';	at: #MethodSignatureOnMultipleLines put: 'Method signature on multiple lines';	at: #MinimumNewLinesBetweenStatements put: 'Minimum new lines between statements';	at: #NewLineAfterCascade put: 'New line after cascade';	at: #NewLineBeforeFirstCascade put: 'New line before first cascade';	at: #NewLineBeforeFirstKeyword put: 'New line before first keyword';	at: #NewLinesAfterMethodComment put: 'New lines after method comment';	at: #NewLinesAfterMethodPattern put: 'New lines after method pattern';	at: #NewLinesAfterTemporaries put: 'New lines after temporaries';	at: #NumberOfArgumentsForMultiLine put: 'Number of arguments for multiline messages';	at: #PeriodsAtEndOfBlock put: 'Period at end of block';	at: #PeriodsAtEndOfMethod put: 'Period at end of method';	at: #RetainBlankLinesBetweenStatements put: 'Retain blank lines between statements';	at: #StringFollowingReturn put: 'String following return (^)';	at: #StringInsideBlocks put: 'String inside block brackets []';	at: #StringInsideParentheses put: 'String inside parentheses ()';	at: #UseTraditionalBinaryPrecedenceForParentheses put: 'Parenthesize expressions based on arithemetic order not left-to-right precendence';	yourself</initializer><attributes><package>Browser-BaseUI</package></attributes></shared-variable><methods><class-id>Refactory.Browser.RBCommand</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="action">action	^action</body><body package="Browser-BaseUI" selector="action:">action: aSymbol 	action := aSymbol</body><body package="Browser-BaseUI" selector="description">description	^description</body><body package="Browser-BaseUI" selector="description:">description: aString 	description := aString</body><body package="Browser-BaseUI" selector="enabled">enabled	^enabled</body><body package="Browser-BaseUI" selector="enabled:">enabled: aSymbol 	enabled := aSymbol</body><body package="Browser-BaseUI" selector="key">key	^name isString		ifTrue: [name]		ifFalse: [name defaultString]</body><body package="Browser-BaseUI" selector="name">name	^name</body><body package="Browser-BaseUI" selector="name:">name: aString 	name := aString</body><body package="Browser-BaseUI" selector="receiver">receiver	^receiver</body><body package="Browser-BaseUI" selector="receiver:">receiver: aSymbol 	receiver := aSymbol</body></methods><methods><class-id>Refactory.Browser.RBCommand</class-id> <category>comparing</category><body package="Browser-BaseUI" selector="=">= aRBActionSpecification 	^self class = aRBActionSpecification class and: 			[self key = aRBActionSpecification key 				and: [self receiver = aRBActionSpecification receiver]]</body><body package="Browser-BaseUI" selector="hash">hash	^self key hash bitXor: self receiver hash</body></methods><methods><class-id>Refactory.Browser.RBCommand</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	name := 'A name'.	description := 'A description'.	action := #yourself.	receiver := #yourself</body></methods><methods><class-id>Refactory.Browser.RBCommand</class-id> <category>testing</category><body package="Browser-BaseUI" selector="isCheckedActionSpecification">isCheckedActionSpecification	^false</body><body package="Browser-BaseUI" selector="isEnabledFor:">isEnabledFor: anObject 	| receiverObj |	receiverObj := [self receiverFor: anObject] on: Error do: [:ex | ^false].	(action isSymbol not or: [receiverObj respondsTo: action]) 		ifFalse: [^false].	enabled isNil ifTrue: [^true].	enabled isSymbol ifFalse: [^enabled value: receiverObj].	^[self perform: enabled on: receiverObj] on: Error		do: 			[:ex | 			ex return: ([self perform: enabled on: anObject] on: Error						do: [:exc | exc return: false])]</body></methods><methods><class-id>Refactory.Browser.RBCommand</class-id> <category>converting</category><body package="Browser-BaseUI" selector="literalArrayEncoding">literalArrayEncoding	^(Array new: 6)		at: 1 put: self class fullyQualifiedReference;		at: 2 put: self nameUserMessage literalArrayEncoding;		at: 3 put: self descriptionUserMessage literalArrayEncoding;		at: 4 put: self action;		at: 5 put: self enabled;		at: 6 put: self receiver;		yourself</body></methods><methods><class-id>Refactory.Browser.RBCommand</class-id> <category>printing</category><body package="Browser-BaseUI" selector="printOn:">printOn: aStream 	aStream nextPutAll: self key</body></methods><methods><class-id>Refactory.Browser.RBCommand</class-id> <category>actions</category><body package="Browser-BaseUI" selector="performWith:">performWith: anObject 	^action isSymbol 		ifTrue: [self perform: action on: (self receiverFor: anObject)]		ifFalse: 			[action numArgs = 1 				ifTrue: [action value: (self receiverFor: anObject)]				ifFalse: [action value]]</body><body package="Browser-BaseUI" selector="receiverFor:">receiverFor: anObject 	^self perform: receiver on: anObject</body></methods><methods><class-id>Refactory.Browser.RBCommand</class-id> <category>private</category><body package="Browser-BaseUI" selector="descriptionUserMessage">descriptionUserMessage	(description respondsTo: #catalogID)		ifTrue: [^description].	^UserMessage		defaultString: description		key: (self userMessageKey, 'Desc') asSymbol		catalogID: #browser</body><body package="Browser-BaseUI" selector="nameUserMessage">nameUserMessage	(name respondsTo: #catalogID)		ifTrue: [^name].	^UserMessage		defaultString: name		key: self userMessageKey		catalogID: #browser</body><body package="Browser-BaseUI" selector="perform:on:">perform: aSymbol on: anObject 	^(anObject respondsTo: aSymbol) 		ifTrue: [anObject perform: aSymbol]		ifFalse: [Error raise]</body><body package="Browser-BaseUI" selector="userMessageKey">userMessageKey	| result input upper |	(name respondsTo: #catalogID)		ifTrue: [^name key].	result := WriteStream on: (String new: 50).	input := name readStream.	upper := true.	result nextPutAll: 'Cmd'.	[input atEnd] whileFalse:		[ | char |		char := input next.		(char isLetter or: [char isDigit]) ifTrue:			[result nextPut: (upper ifTrue: [char asUppercase] ifFalse: [char])].		char = $: ifTrue: 	[result nextPut: $C].		char = $&amp; ifTrue: [result nextPut: $_].		char = $. ifTrue: [result nextPut: $D].		upper := char isSeparator].	^result contents asSymbol</body></methods><methods><class-id>Refactory.Browser.RBCommand class</class-id> <category>actions</category><body package="Browser-BaseUI" selector="actionNamed:">actionNamed: aString	^self actions at: aString ifAbsent: [self error: 'Action not found']</body><body package="Browser-BaseUI" selector="actions">actions	Actions isNil ifTrue: [self initializeActions].	^Actions</body><body package="Browser-BaseUI" selector="addAction:">addAction: aRBActionSpecification 	(Actions includesKey: aRBActionSpecification key)		ifTrue: 			[self 				halt: 'The action already exists. Select proceed to override the original action.'].	Actions at: aRBActionSpecification key put: aRBActionSpecification</body><body package="Browser-BaseUI" selector="removeAction:">removeAction: aRBActionSpecification 	| action |	action := Actions at: aRBActionSpecification key ifAbsent: [^self].	action == aRBActionSpecification ifFalse: [^self].	Actions removeKey: aRBActionSpecification key</body></methods><methods><class-id>Refactory.Browser.RBCommand class</class-id> <category>instance creation</category><body package="Browser-BaseUI" selector="decodeFromLiteralArray:">decodeFromLiteralArray: anArray 	^self 		named: (self decodeStringOrArray: (anArray at: 2))		description: (self decodeStringOrArray: (anArray at: 3))		action: (anArray at: 4)		enabled: (anArray at: 5)		receiver: (anArray at: 6)</body><body package="Browser-BaseUI" selector="named:">named: aStringOrUserMessage	^(self new)		name: aStringOrUserMessage;		description: aStringOrUserMessage;		yourself</body><body package="Browser-BaseUI" selector="named:description:action:enabled:receiver:">named: aStringOrUserMessage description: aDescriptionString action: aSelector enabled: enabledSelector receiver: receiverSelector 	^(self new)		name: aStringOrUserMessage;		description: aDescriptionString;		action: aSelector;		enabled: enabledSelector;		receiver: receiverSelector;		yourself</body><body package="Browser-BaseUI" selector="named:description:action:receiver:">named: aStringOrUserMessage description: aDescriptionString action: aSelector receiver: receiverSelector 	^(self new)		name: aStringOrUserMessage;		description: aDescriptionString;		action: aSelector;		receiver: receiverSelector;		yourself</body><body package="Browser-BaseUI" selector="new">new	^(super new)		initialize;		yourself</body></methods><methods><class-id>Refactory.Browser.RBCommand class</class-id> <category>actions-initialization</category><body package="Browser-BaseUI" selector="actionArray">actionArray	"This method was automatically generated from 'Refactory.Browser.RBActionEditor open'"	^#(#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AbstractClassInstanceVariable #defaultString: 'Abstract Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AbstractClassInstanceVariableDesc #defaultString: 'Create accessing methods for a class instance variable and change all direct variable references to use them' #catalogID: #browser) #abstractClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AbstractInstanceVariable #defaultString: 'Abstract Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AbstractInstanceVariableDesc #defaultString: 'Create accessing methods for an instance variable and change all direct variable references to use them' #catalogID: #browser) #abstractInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AbstractSelectedInstanceVariable #defaultString: 'Abstract Selected Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AbstractSelectedInstanceVariableDesc #defaultString: 'Abstract all references to the selected variable to use accessing methods' #catalogID: #browser) #abstractInstanceVariable #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #Accept #defaultString: 'Accept' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AcceptDesc #defaultString: 'Save the current text' #catalogID: #browser) #acceptText #isEditing #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddActionSpecification #defaultString: 'Add Action Specification' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddActionSpecificationDesc #defaultString: 'Create a new action specification' #catalogID: #browser) #addSpecification nil #yourself)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddCategory #defaultString: 'Add Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddCategoryDesc #defaultString: 'Create a new category' #catalogID: #browser) #addCategory nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddClassInstanceVariable #defaultString: 'Add Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddClassInstanceVariableDesc #defaultString: 'Add a class instance variable to the selected class' #catalogID: #browser) #addClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddFromChangeSet #defaultString: 'Add from Change Set' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddFromChangeSetDesc #defaultString: 'Add contents of the current change set' #catalogID: #browser) #checkChangeSet nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddInstanceVariable #defaultString: 'Add Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddInstanceVariableDesc #defaultString: 'Add an instance variable to the selected class' #catalogID: #browser) #addInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddParameter #defaultString: 'Add Parameter' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddParameterDesc #defaultString: 'Add a parameter to the selected method and change all senders to pass a default argument' #catalogID: #browser) #addParameter #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddProtocol #defaultString: 'Add Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddProtocolDesc #defaultString: 'Add a new protocol to the class' #catalogID: #browser) #addProtocol #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #BindTemporaryToTightestScope #defaultString: 'Bind Temporary to Tightest Scope' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #BindTemporaryToTightestScopeDesc #defaultString: 'Move a temporary variable''s definition to the innermost scope in which it is used' #catalogID: #browser) #bindTight #hasTemporarySelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #BrowseChangeSetMethodVersions #defaultString: 'Browse Change Set Method Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #BrowseChangeSetMethodVersionsDesc #defaultString: 'Open a change list on all versions of the method in the .cha file.' #catalogID: #browser) #browseMethodChanges #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #BrowseClassMethodsMatchingString #defaultString: 'Browse Class Methods Matching String' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #BrowseClassMethodsMatchingStringDesc #defaultString: 'Open a browser on all methods of the selected class matching a pattern.' #catalogID: #browser) #browseMethodsWithSourceMatching #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #BrowseOverridden #defaultString: 'Browse Overridden' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #BrowseOverriddenDesc #defaultString: 'Browse all methods overridden by other components' #catalogID: #browser) #browseOverridden #isCodeComponentSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #BrowseOverrides #defaultString: 'Browse Overrides' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #BrowseOverridesDesc #defaultString: 'Browse all methods overridden by the current selection' #catalogID: #browser) #browseOverrides #isCodeComponentSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #BrowseReferencesToClass #defaultString: 'Browse References to Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalClassReferencesDesc #defaultString: 'Browse all references to the selected class' #catalogID: #browser) #browseReferencesToGlobal #hasClassSelected #activeTool)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #Buffers #defaultString: 'Buffers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #BuffersDesc #defaultString: 'Dynamic menu of buffers' #catalogID: #browser) #bufferMenuSpecifications nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ByteIndexedClassTemplate #defaultString: 'Byte Indexed Class Template' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ByteIndexedClassTemplateDesc #defaultString: 'Display a template for creating a byte-indexed class' #catalogID: #browser) #showBytesClassTemplate #canDefineClassesAndNameSpaces #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #Cancel #defaultString: 'Cancel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CancelDesc #defaultString: 'Cancel changes and revert to the original text' #catalogID: #browser) #cancelText #isEditing #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllCategories #defaultString: 'Check All Categories' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllCategoriesDesc #defaultString: 'Add all categories matching an expression' #catalogID: #browser) #checkAllCategories nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllClasses #defaultString: 'Check All Classes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllClassesDesc #defaultString: 'Add all classes matching a pattern' #catalogID: #browser) #checkAllClasses #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllImplementors #defaultString: 'Check All Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllImplementorsDesc #defaultString: 'Add all implementors of the selected method' #catalogID: #browser) #checkImplementors #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllMethods #defaultString: 'Check All Methods' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllMethodsDesc #defaultString: 'Add all methods matching a pattern' #catalogID: #browser) #checkAllSelectors #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllProtocols #defaultString: 'Check All Protocols' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllProtocolsDesc #defaultString: 'Add all protocols matching a pattern' #catalogID: #browser) #checkAllProtocols #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllSenders #defaultString: 'Check All Senders' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllSendersDesc #defaultString: 'Add all senders of the selected method' #catalogID: #browser) #checkSenders #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllSubclasses #defaultString: 'Check All Subclasses' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllSubclassesDesc #defaultString: 'Add all the class'' subclasses' #catalogID: #browser) #checkSubclasses #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllSuperclasses #defaultString: 'Check All Superclasses' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllSuperclassesDesc #defaultString: 'Add all the class'' superclasses' #catalogID: #browser) #checkSuperclasses #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckCategory #defaultString: 'Check Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckCategoryDesc #defaultString: 'Add the selected categories' #catalogID: #browser) #checkCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckClass #defaultString: 'Check Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckClassDesc #defaultString: 'Add the selected class' #catalogID: #browser) #checkClass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckMethod #defaultString: 'Check Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckMethodDesc #defaultString: 'Add the selected methods' #catalogID: #browser) #checkSelector #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckProtocol #defaultString: 'Check Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckProtocolDesc #defaultString: 'Add the selected protocols' #catalogID: #browser) #checkProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckProtocols #defaultString: 'Check Protocols' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckProtocolsDesc #defaultString: 'Verify that both the selected class and its superclass use the same protocols' #catalogID: #browser) #checkProtocols #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ClassesDefiningVariable #defaultString: 'Classes Defining Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ReferencesToSymbolDesc #defaultString: 'Find references to a symbol within the current scope of the browser' #catalogID: #browser) #browseVariables nil #browser)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #CodeModelToolsMenu #defaultString: 'Code Model Tools Menu' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CodeModelToolsMenuDesc #defaultString: 'List of tool views supported by the code model' #catalogID: #browser) #selectionPolicyMenuSpecifications nil #codeModel)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ContextHelp #defaultString: 'Context Help' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ContextHelpDesc #defaultString: 'Open context sensitive help' #catalogID: #browser) #help nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ConvertTemporaryVariableToInstanceVariable #defaultString: 'Convert Temporary Variable to Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ConvertTemporaryVariableToInstanceVariableDesc #defaultString: 'Convert the selected temporary variable to an instance variable' #catalogID: #browser) #createInstVar #canPerformTemporaryVariableRefactorings #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ConvertToSibling #defaultString: 'Convert to Sibling' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ConvertToSiblingDesc #defaultString: 'Create an abstract class and make the selected class a sibling with its subclasses under the new abstract class' #catalogID: #browser) #convertToSibling #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CopySelection #defaultString: 'Copy Selection' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #Copy #defaultString: 'Copy' #catalogID: #browser) #copySelection #isTextSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CreateBuffer #defaultString: 'Create Buffer' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CreateBufferDesc #defaultString: 'Create a new view' #catalogID: #browser) #newBuffer nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CreateClassInstanceVariableAccessors #defaultString: 'Create Class Instance Variable Accessors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CreateInstanceVariableAccessorsDesc #defaultString: 'Create accessing methods for the selected instance variable' #catalogID: #browser) #createClassInstanceVariableAccessors #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CreateInstanceVariableAccessors #defaultString: 'Create Instance Variable Accessors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CreateInstanceVariableAccessorsDesc #defaultString: 'Create accessing methods for the selected instance variable' #catalogID: #browser) #createInstanceVariableAccessors #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CreateSelectedInstanceVariableAccessors #defaultString: 'Create Selected Instance Variable Accessors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CreateInstanceVariableAccessorsDesc #defaultString: 'Create accessing methods for the selected instance variable' #catalogID: #browser) #createInstanceVariableAccessors #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CreateSubclass #defaultString: 'Create Subclass' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CreateSubclassDesc #defaultString: 'Insert a class into the class hierarchy under the currently selected class' #catalogID: #browser) #createSubclass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CutSelection #defaultString: 'Cut Selection' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #Cut #defaultString: 'Cut' #catalogID: #browser) #cut #isTextSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #DebugIt #defaultString: 'Debug It' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #DebugItDesc #defaultString: 'Open a debugger on the currently selected code' #catalogID: #browser) #debugIt nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #DoIt #defaultString: 'Do It' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #DoItDesc #defaultString: 'Execute the selected text' #catalogID: #browser) #doIt nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ExplainCode #defaultString: 'Explain Code' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ExplainCodeDesc #defaultString: 'Explain the selected piece of code' #catalogID: #browser) #explain #isTextSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ExtractMethod #defaultString: 'Extract Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ExtractMethodDesc #defaultString: 'Extract the selected code into a new method' #catalogID: #browser) #extractMethod #canExtractMethod #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ExtractMethodToComponent #defaultString: 'Extract Method to Component' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ExtractMethodToComponentDesc #defaultString: 'Extract the selected code into a method in a different class' #catalogID: #browser) #extractToComponent #canExtractMethod #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ExtractToTemporary #defaultString: 'Extract to Temporary' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ExtractToTemporaryDesc #defaultString: 'Create a temporary variable assigned to the selection and replace it with the temporary' #catalogID: #browser) #extractToTemp #canExtractToTemporary #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileIntoPackage #defaultString: 'File Into Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileIntoPackageDesc #defaultString: 'Load Smalltalk source, compiling it into the selected package' #catalogID: #browser) #storeFileinPackage #isPackageSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutCategory #defaultString: 'File Out Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutCategoryDesc #defaultString: 'File-out the selected categories' #catalogID: #browser) #fileOutCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutClass #defaultString: 'File Out Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutClassDesc #defaultString: 'File-out the selected classes' #catalogID: #browser) #fileOutClass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CmdFileOutGlobal #defaultString: 'File Out Global' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CmdFileOutGlobalDesc #defaultString: 'File-out the selected class or namespace' #catalogID: #browser) #fileOutGlobal #isGlobalSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutMethod #defaultString: 'File Out Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutMethodDesc #defaultString: 'File-out the selected methods' #catalogID: #browser) #fileOutMessage #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutPackage #defaultString: 'File Out Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutPackageDesc #defaultString: 'File-out the selected package' #catalogID: #browser) #storeFileoutPundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutPackageChanges #defaultString: 'File Out Package Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutPackageChangesDesc #defaultString: 'File-out the selected package''s changes' #catalogID: #browser) #storeFileoutPundleChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutPackageDifferences #defaultString: 'File Out Package Differences' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutPackageDifferencesDesc #defaultString: 'File-out the differences between the selected package and a version saved in the repository' #catalogID: #browser) #storeFileoutPundleDifferences #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutProtocol #defaultString: 'File Out Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutProtocolDesc #defaultString: 'File-out all methods in the selected protocols' #catalogID: #browser) #fileOutProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindAllReferencePathsTo #defaultString: 'Find All Reference Paths to' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindAllReferencePathsToDesc #defaultString: 'Inspect all paths from Root to an object for which the specified block answers true' #catalogID: #browser) #findAllReferencePaths nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindClass #defaultString: 'Find Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindClassDesc #defaultString: 'Find a class' #catalogID: #browser) #findClass nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CmdFindGlobalName #defaultString: 'Find Global Name' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CmdFindGlobalNameDesc #defaultString: 'Find a class, a shared variable, or a name space' #catalogID: #browser) #findGlobalName nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindMethod #defaultString: 'Find Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindMethodDesc #defaultString: 'Find a method within the selected class' #catalogID: #browser) #findMethodAndSelectAlphabetic #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindNameSpace #defaultString: 'Find Name Space' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindNameSpaceDesc #defaultString: 'Find a name space.' #catalogID: #browser) #findNameSpace nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindPackage #defaultString: 'Find Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindPackageDesc #defaultString: 'Find a bundle or package' #catalogID: #browser) #findPundle nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindReferencePathTo #defaultString: 'Find Reference Path to' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindReferencePathToDesc #defaultString: 'Inspect the path from Root to an object for which the specified block answers true' #catalogID: #browser) #findReferencePath nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindReferencePathToAnInstance #defaultString: 'Find Reference Path to an Instance' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindReferencePathToAnInstanceDesc #defaultString: 'Inspect the path of references from Root to any instance of this class' #catalogID: #browser) #findReferencePathToInstance #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindReferencePathsToAllInstances #defaultString: 'Find Reference Paths to All Instances' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindReferencePathsToAllInstancesDesc #defaultString: 'Inspect all reference paths from Root to any instance of this class' #catalogID: #browser) #findAllReferencesToInstances #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindSharedVariable #defaultString: 'Find Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindSharedVariableDesc #defaultString: 'Find a Shared Variable' #catalogID: #browser) #findSharedVariable nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindText #defaultString: 'Find Text' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindTextDesc #defaultString: 'Find the specified text' #catalogID: #browser) #find #isTextTool #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FormatCode #defaultString: 'Format Code' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FormatCodeDesc #defaultString: 'Format a method' #catalogID: #browser) #format nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GenerateDefaultClassComment #defaultString: 'Generate Default Class Comment' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GenerateDefaultClassCommentDesc #defaultString: 'Generate a default class comment for the selected class' #catalogID: #browser) #generateDefaultComment nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalClassInstanceVariableReaders #defaultString: 'Global Class Instance Variable Readers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalClassInstanceVariableReadersDesc #defaultString: 'Browse all methods accessing a class instance variable' #catalogID: #browser) #globalClassInstanceVariableReaders #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalClassInstanceVariableReferences #defaultString: 'Global Class Instance Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalClassInstanceVariableReferencesDesc #defaultString: 'Browse all references to a class instance variable' #catalogID: #browser) #globalClassInstanceVariableReferences #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalClassInstanceVariableWriters #defaultString: 'Global Class Instance Variable Writers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalClassInstanceVariableWritersDesc #defaultString: 'Browse all methods modifying a class instance variable' #catalogID: #browser) #globalClassInstanceVariableWriters #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalClassReferences #defaultString: 'Global Class References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalClassReferencesDesc #defaultString: 'Browse all references to the selected class' #catalogID: #browser) #globalClassRefs #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalImplementors #defaultString: 'Global Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ImplementorsDesc #defaultString: 'Browse all implementors of the selected method' #catalogID: #browser) #browseGlobalImplementors #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #GlobalImplementorsActions #defaultString: 'Global Implementors Actions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ImplementorsActionsDesc #defaultString: 'Actions for Implementors' #catalogID: #browser) #globalImplementorsActions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalInstanceVariableReaders #defaultString: 'Global Instance Variable Readers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalInstanceVariableReadersDesc #defaultString: 'Browse all methods accessing an instance variable' #catalogID: #browser) #globalInstanceVariableReaders #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalInstanceVariableReferences #defaultString: 'Global Instance Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalInstanceVariableReferencesDesc #defaultString: 'Browse all references to an instance variable' #catalogID: #browser) #globalInstanceVariableReferences #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalInstanceVariableWriters #defaultString: 'Global Instance Variable Writers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalInstanceVariableWritersDesc #defaultString: 'Browse all methods modifying an instance variable' #catalogID: #browser) #globalInstanceVariableWriters #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalReferences #defaultString: 'Global References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ReferencesDesc #defaultString: 'Browse all references to the specified shared variable' #catalogID: #browser) #browseReferencesToGlobal #hasGlobalSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalSenders #defaultString: 'Global Senders' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SendersDesc #defaultString: 'Browse all senders of the selected method' #catalogID: #browser) #browseGlobalSenders #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #GlobalSendersActions #defaultString: 'Global Senders Actions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SendersActionsDesc #defaultString: 'Actions for Senders' #catalogID: #browser) #globalSendersActions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalSharedVariableReferences #defaultString: 'Global Shared Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalSharedVariableReferencesDesc #defaultString: 'Browse all references to a shared variable' #catalogID: #browser) #globalSharedVariableReferences #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HardcopyCategory #defaultString: 'Hardcopy Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HardcopyCategoryDesc #defaultString: 'Print the selected categories' #catalogID: #browser) #hardcopyCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HardcopyClass #defaultString: 'Hardcopy Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HardcopyClassDesc #defaultString: 'Print the selected classes' #catalogID: #browser) #printOutClass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HardcopyMethod #defaultString: 'Hardcopy Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HardcopyMethodDesc #defaultString: 'Print the selected methods' #catalogID: #browser) #printOutMessage #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HardcopyProtocol #defaultString: 'Hardcopy Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HardcopyProtocolDesc #defaultString: 'Print all methods in the selected protocols' #catalogID: #browser) #printOutProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HardcopyText #defaultString: 'Hardcopy Text' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HardcopyTextDesc #defaultString: 'Print the current text' #catalogID: #browser) #hardcopy #isTextTool #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HierarchyImplementors #defaultString: 'Hierarchy Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HierarchyImplementorsDesc #defaultString: 'Browse all implementors of the selected method within the hierarchy' #catalogID: #browser) #browseHierarchyImplementors #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #HierarchyImplementorsActions #defaultString: 'Hierarchy Implementors Actions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HierarchyImplementorsActionsDesc #defaultString: 'Dynamic menu of hierarchy implementors.' #catalogID: #browser) #hierarchyImplementorsActions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HierarchySenders #defaultString: 'Hierarchy Senders' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HierarchySendersDesc #defaultString: 'Browse all senders of the specified method in the hierarchy' #catalogID: #browser) #browseHierarchySenders #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #HierarchySendersActions #defaultString: 'Hierarchy Senders Actions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HierarchySendersActionsDesc #defaultString: 'Dynamic menu of hierarchy senders' #catalogID: #browser) #hierarchySendersActions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #IconHelp #defaultString: 'Icon Help' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #IconHelpDesc #defaultString: 'Opens help for the browser''s icons.' #catalogID: #browser) #iconsHelp nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ImplementorsMatching #defaultString: 'Implementors Matching' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ImplementorsMatchingDesc #defaultString: 'Find all implementors whose selector matches the selector within the current scope of the browser' #catalogID: #browser) #browseImplementors nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #IndexedClassTemplate #defaultString: 'Indexed Class Template' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #IndexedClassTemplateDesc #defaultString: 'Display a template for creating an indexed class' #catalogID: #browser) #showIndexedClassTemplate #canDefineClassesAndNameSpaces #activeTool)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #InheritedClassesSpecifications #defaultString: 'Inherited Classes Specifications' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InheritedClassesSpecificationsDesc #defaultString: 'A dynamic menu showing the superclasses for inheriting methods. ' #catalogID: #browser) #inheritToSpecifications #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InitializeSharedVariable #defaultString: 'Initialize Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InitializeSharedVariableDesc #defaultString: 'Initialize a shared variable' #catalogID: #browser) #initializeSharedVariable #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InlineAllSelfSends #defaultString: 'Inline All Self Sends' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InlineAllSelfSendsDesc #defaultString: 'Inline the selected method into all senders of self, removing the method if there are no senders' #catalogID: #browser) #inlineSelfSends #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InlineMethod #defaultString: 'Inline Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InlineMethodDesc #defaultString: 'Inline the selected message send into the containing method; replace the original message send with the body of the method that is sent' #catalogID: #browser) #inlineMethod #hasMessageNodeSelectedForRefactoring #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InlineParameter #defaultString: 'Inline Parameter' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InlineParameterDesc #defaultString: 'Convert the parameter of the method into a temporary defined in the method if all senders have the same argument' #catalogID: #browser) #inlineParameter #hasMethodArgumentSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InlineSelectedMessage #defaultString: 'Inline Selected Message' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InlineSelectedMessageDesc #defaultString: 'Inline the selected message into the current method' #catalogID: #browser) #inlineMethod #hasMessageNodeSelectedForRefactoring #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InlineSelectedParameter #defaultString: 'Inline Selected Parameter' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InlineSelectedParameterDesc #defaultString: 'Inline the selected parameter from all senders' #catalogID: #browser) #inlineParameter #canPerformParameterRefactorings #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InlineTemporary #defaultString: 'Inline Temporary' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InlineTemporaryDesc #defaultString: 'Change all references to the temporary variable to its definition' #catalogID: #browser) #inlineTemporary #canPerformInlineAssignmentRefactoring #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InspectAllInstances #defaultString: 'Inspect All Instances' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InspectAllInstancesDesc #defaultString: 'Inspect all instances of the selected class' #catalogID: #browser) #inspectAllInstances #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InspectIt #defaultString: 'Inspect It' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InspectItDesc #defaultString: 'Evaluate the selected text and inspect the result' #catalogID: #browser) #inspectIt nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InspectMethod #defaultString: 'Inspect Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InspectMethodDesc #defaultString: 'Inspect the selected method' #catalogID: #browser) #inspectMethod #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalBrowseSelectedInstanceVariableReaders #defaultString: 'Local Browse Selected Instance Variable Readers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalInstanceVariableReadersDesc #defaultString: 'Browse all methods accessing the instance variable within the current scope of the browser' #catalogID: #browser) #browseInstVarReaders #isInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalBrowseSelectedInstanceVariableReferences #defaultString: 'Local Browse Selected Instance Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalInstanceVariableReferencesDesc #defaultString: 'Browse all methods referencing the instance variable within the current scope of the browser' #catalogID: #browser) #browseInstVarRefs #isInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalBrowseSelectedInstanceVariableWriters #defaultString: 'Local Browse Selected Instance Variable Writers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalInstanceVariableWritersDesc #defaultString: 'Browse all methods modifying the instance variable within the current scope of the browser' #catalogID: #browser) #browseInstVarWriters #isInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalClassInstanceVariableReaders #defaultString: 'Local Class Instance Variable Readers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalClassInstanceVariableReadersDesc #defaultString: 'Browse all methods accessing the class instance variable within the current scope of the browser' #catalogID: #browser) #classInstanceVariableReaders #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalClassInstanceVariableReferences #defaultString: 'Local Class Instance Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalClassInstanceVariableReferencesDesc #defaultString: 'Browse all methods referencing the class instance variable within the current scope of the browser' #catalogID: #browser) #classInstanceVariableReferences #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalClassInstanceVariableWriters #defaultString: 'Local Class Instance Variable Writers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalClassInstanceVariableWritersDesc #defaultString: 'Browse all methods modifying the class instance variable within the current scope of the browser' #catalogID: #browser) #classInstanceVariableWriters #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalClassReferences #defaultString: 'Local Class References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalClassReferencesDesc #defaultString: 'Browse all methods referencing the selected class within the current scope of the browser' #catalogID: #browser) #classRefs #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalImplementors #defaultString: 'Local Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ImplementorsDesc #defaultString: 'Browse all implementors of the selected method' #catalogID: #browser) #browseLocalImplementors #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #LocalImplementorsActions #defaultString: 'Local Implementors Actions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ImplementorsActionsDesc #defaultString: 'Actions for Implementors' #catalogID: #browser) #localImplementorsActions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalInstanceVariableReaders #defaultString: 'Local Instance Variable Readers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalInstanceVariableReadersDesc #defaultString: 'Browse all methods accessing the instance variable within the current scope of the browser' #catalogID: #browser) #instanceVariableReaders #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalInstanceVariableReferences #defaultString: 'Local Instance Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalInstanceVariableReferencesDesc #defaultString: 'Browse all methods referencing the instance variable within the current scope of the browser' #catalogID: #browser) #instanceVariableReferences #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalInstanceVariableWriters #defaultString: 'Local Instance Variable Writers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalInstanceVariableWritersDesc #defaultString: 'Browse all methods modifying the instance variable within the current scope of the browser' #catalogID: #browser) #instanceVariableWriters #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalSenders #defaultString: 'Local Senders' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SendersDesc #defaultString: 'Browse all senders of the selected method' #catalogID: #browser) #browseLocalSenders #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #LocalSendersActions #defaultString: 'Local Senders Actions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SendersActionsDesc #defaultString: 'Actions for Senders' #catalogID: #browser) #localSendersActions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalSharedVariableReferences #defaultString: 'Local Shared Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalSharedVariableReferencesDesc #defaultString: 'Browse all references to the variable within the current scope of the browser' #catalogID: #browser) #localSharedVariableReferences #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MethodsWithStringsMatching #defaultString: 'Methods with Strings Matching' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MethodsWithStringsMatchingDesc #defaultString: 'Find all methods which have a literal string matching a string within the current scope of the browser' #catalogID: #browser) #browseStringMatches nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoreBuffers #defaultString: 'More Buffers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoreBuffersDesc #defaultString: 'Select a buffer' #catalogID: #browser) #selectBuffer nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveCategoryToPackage #defaultString: 'Move Category to Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveCategoryToPackageDesc #defaultString: 'Move the selected categories to a package' #catalogID: #browser) #moveCategoryToPackage #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveCategoryToParcel #defaultString: 'Move Category to Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveCategoryToParcelDesc #defaultString: 'Move all objects in the selected categories to a parcel' #catalogID: #browser) #moveCategoryToParcel #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveCompleteObjectToPackage #defaultString: 'Move Complete Object to Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveCompleteObjectToPackageDesc #defaultString: 'Move the complete object (methods and shared variables) to a new package' #catalogID: #browser) #moveCompleteObjectToPackage #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveCompleteObjectToParcel #defaultString: 'Move Complete Object to Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveCompleteObjectToParcelDesc #defaultString: 'Move the complete object (methods and shared variables) to a new parcel' #catalogID: #browser) #moveCompleteObjectToParcel #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveMethodToComponent #defaultString: 'Move Method to Component' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveMethodToComponentDesc #defaultString: 'Move the selected method to another object, replacing the selected method with a forwarder' #catalogID: #browser) #moveMethodToOtherObject #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveMethodToPackage #defaultString: 'Move Method to Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveMethodToPackageDesc #defaultString: 'Move selected methods to a package' #catalogID: #browser) #moveMethodToPackage #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveMethodToParcel #defaultString: 'Move Method to Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveMethodToParcelDesc #defaultString: 'Move the selected methods to a new parcel' #catalogID: #browser) #moveMethodToParcel #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveMethodToProtocol #defaultString: 'Move Method to Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveMethodToProtocolDesc #defaultString: 'Move the selected methods to a new protocol' #catalogID: #browser) #moveMethod #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveObjectDefinitionToPackage #defaultString: 'Move Object Definition to Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveObjectDefinitionToPackageDesc #defaultString: 'Move the object definitions to a new package' #catalogID: #browser) #moveObjectDefinitionToPackage #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveObjectDefinitionToParcel #defaultString: 'Move Object Definition to Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveObjectDefinitionToParcelDesc #defaultString: 'Move the selected object''s definitions to a new parcel' #catalogID: #browser) #moveObjectDefinitionToParcel #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveObjectToCategory #defaultString: 'Move Object to Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveObjectToCategoryDesc #defaultString: 'Move the selected object to a different category' #catalogID: #browser) #changeClassCategory #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveObjectToNameSpace #defaultString: 'Move Object to Name Space' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveObjectToNameSpaceDesc #defaultString: 'Move the selected objects to another name space' #catalogID: #browser) #moveObjectToNameSpace #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveObjectToPackage #defaultString: 'Move Object to Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveObjectToPackageDesc #defaultString: 'Move the selected objects to a package' #catalogID: #browser) #moveObjectToPackage #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveObjectToParcel #defaultString: 'Move Object to Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveObjectToParcelDesc #defaultString: 'Move the selected object to a parcel' #catalogID: #browser) #moveObjectToParcel #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveProtocolToPackage #defaultString: 'Move Protocol to Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveProtocolToPackageDesc #defaultString: 'Move the selected protocols to a package' #catalogID: #browser) #moveProtocolToPackage #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveProtocolToParcel #defaultString: 'Move Protocol to Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveProtocolToParcelDesc #defaultString: 'Move the selected protcols to a parcel' #catalogID: #browser) #moveProtocolToParcel #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveSelectedTemporaryToInnermostScope #defaultString: 'Move Selected Temporary to Innermost Scope' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveSelectedTemporaryToInnermostScopeDesc #defaultString: 'Move the variable definition to its innermost scope' #catalogID: #browser) #bindTight #canPerformTemporaryVariableRefactorings #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveSharedVariableToProtocol #defaultString: 'Move Shared Variable to Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveSharedVariableToProtocolDesc #defaultString: 'Move the selected shared variables to another protocol' #catalogID: #browser) #moveSharedVariableToProtocol #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NameSpaceTemplate #defaultString: 'Name Space Template' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NameSpaceTemplateDesc #defaultString: 'Display a template for creating a name space' #catalogID: #browser) #showNameSpaceTemplate #canDefineClassesAndNameSpaces #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NavigateToClass #defaultString: 'Navigate to Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NavigateToClassDesc #defaultString: 'Change the selection to the highlighted class' #catalogID: #browser) #navigateToClass #hasClassSelectedAndIncludesClass #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NavigatorRemoveParamter #defaultString: 'Navigator Remove Paramter' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NavigatorRemoveParamterDesc #defaultString: 'Remove an argument from the method if all implementors of the method do not use the argument' #catalogID: #browser) #removeParameter #canRemoveParameter #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #NavigatorTypeSpecifications #defaultString: 'Navigator Type Specifications' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NavigatorTypeSpecificationsDesc #defaultString: 'List of navigator types' #catalogID: #browser) #navigatorTypeSpecifications nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NewByteIndexedClass #defaultString: 'New Byte Indexed Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NewByteIndexedClassDesc #defaultString: 'Create a byte indexed class.' #catalogID: #browser) #newByteIndexedClass #isCategoryParcelOrPackageSelected #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CmdNewClass #defaultString: 'New Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CmdNewClassDesc #defaultString: 'Create a new class' #catalogID: #browser) #newClass nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NewClassTemplate #defaultString: 'New Class Template' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NewClassTemplateDesc #defaultString: 'Display a template for defining a new class' #catalogID: #browser) #showClassTemplate #canDefineClassesAndNameSpaces #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NewIndexedClass #defaultString: 'New Indexed Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NewIndexedClassDesc #defaultString: 'Create a new indexed class.' #catalogID: #browser) #newIndexedClass #isCategoryParcelOrPackageSelected #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NewNameSpace #defaultString: 'New Name Space' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NewNameSpaceDesc #defaultString: 'Create a new name space.' #catalogID: #browser) #newNameSpace #isCategoryParcelOrPackageSelected #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NewSharedVariable #defaultString: 'New Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NewSharedVariableDesc #defaultString: 'Create a new shared variable' #catalogID: #browser) #newSharedVariable #isCategoryParcelOrPackageSelected #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #OpenBrowserOnClass #defaultString: 'Open Browser on Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #OpenBrowserOnClassDesc #defaultString: 'Browse only the selected class' #catalogID: #browser) #openBrowserForClass #hasClassSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #OpenParcelProperties #defaultString: 'Open Parcel Properties' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #OpenParcelPropertiesDesc #defaultString: 'Open a parcel properties window on the selected parcel' #catalogID: #browser) #openParcelProperties #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelAddChanges #defaultString: 'Parcel Add Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelAddChangesDesc #defaultString: 'Add the items from the current change set to the selected parcel' #catalogID: #browser) #parcelAddChanges #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelAddFilein #defaultString: 'Parcel Add File-in' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelAddFileinDesc #defaultString: 'Load Smalltalk source, compiling it into the selected parcel' #catalogID: #browser) #parcelFileIn #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelAddToChanges #defaultString: 'Parcel Add to Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelAddToChangesDesc #defaultString: 'Add the contents of the selected parcels to the change set' #catalogID: #browser) #parcelAddToChanges #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseChangedMethods #defaultString: 'Parcel Browse Changed Methods' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseChangedMethodsDesc #defaultString: 'Browse all methods in the parcel that have changed since the parcel was saved' #catalogID: #browser) #browseChangedMethods #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseExclusiveMethodImports #defaultString: 'Parcel Browse Exclusive Method Imports' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseExclusiveMethodImportsDesc #defaultString: 'Browse all methods not defined in this parcel, but are only used within it' #catalogID: #browser) #browseExclusiveMethodImports #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseExtensionMethods #defaultString: 'Parcel Browse Extension Methods' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseExtensionMethodsDesc #defaultString: 'Browse extension methods in the parcel' #catalogID: #browser) #browseExtensionMethods #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseExtensionsOfDefinedClasses #defaultString: 'Parcel Browse Extensions of Defined Classes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseExtensionsOfDefinedClassesDesc #defaultString: 'Browse extensions of the parcel''s defined classes' #catalogID: #browser) #browseExtensionsOfDefinedClasses #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseReferencesToDefinedClasses #defaultString: 'Parcel Browse References to Defined Classes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseReferencesToDefinedClassesDesc #defaultString: 'Browse references to all classes defined in this parcel' #catalogID: #browser) #browseReferencesToDefinedClasses #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseSubclassesOfDefinedClasses #defaultString: 'Parcel Browse Subclasses of Defined Classes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseSubclassesOfDefinedClassesDesc #defaultString: 'Browse all subclasses in other parcels of this parcel''s defined classes' #catalogID: #browser) #browseSubclassesOfDefinedClasses #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseUnparceledMethodsOnDefinedClasses #defaultString: 'Parcel Browse Unparceled Methods on Defined Classes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseUnparceledMethodsOnDefinedClassesDesc #defaultString: 'Browse all unparceled methods whose class is defined in the parcel' #catalogID: #browser) #browseUnparceledMethodsOnDefinedClasses #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelCreate #defaultString: 'Parcel Create' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelCreateDesc #defaultString: 'Create a new parcel' #catalogID: #browser) #parcelCreateParcel nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelDiscard #defaultString: 'Parcel Discard' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelDiscardDesc #defaultString: 'Delete the parcel without unloading its source' #catalogID: #browser) #parcelDiscardParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelEmpty #defaultString: 'Parcel Empty' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelEmptyDesc #defaultString: 'Empty the selected parcel without removing its source from the image' #catalogID: #browser) #parcelEmptyParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelFileout #defaultString: 'Parcel File-out' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelFileoutDesc #defaultString: 'Save the selected parcel as a Smalltalk source file-out' #catalogID: #browser) #parcelFileoutParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelLoad #defaultString: 'Parcel Load' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelLoadDesc #defaultString: 'Load a parcel' #catalogID: #browser) #parcelLoadParcel nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelMakeRemoveScript #defaultString: 'Parcel Make Remove Script' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelMakeRemoveScriptDesc #defaultString: 'Create a script to remove the parcel' #catalogID: #browser) #parcelCreateRemoveScript #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelOverrideMethod #defaultString: 'Parcel Override Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelOverrideMethodDesc #defaultString: 'Create overrides for the selected methods and shared variables' #catalogID: #browser) #overrideDefinitionsInParcel #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelOverrideObject #defaultString: 'Parcel Override Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelOverrideObjectDesc #defaultString: 'Create overrides of the selected objects.' #catalogID: #browser) #overrideObjectInParcel #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelRemove #defaultString: 'Parcel Remove' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelRemoveDesc #defaultString: 'Unload and remove the parcel' #catalogID: #browser) #parcelRemoveParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelRemoveChanges #defaultString: 'Parcel Remove Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelRemoveChangesDesc #defaultString: 'Remove the items in the change set contained in the selected parcel' #catalogID: #browser) #parcelRemoveChanges #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelRemoveFromChanges #defaultString: 'Parcel Remove from Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelRemoveFromChangesDesc #defaultString: 'Remove the selected parcel''s contents from the change set' #catalogID: #browser) #parcelRemoveFromChanges #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelRename #defaultString: 'Parcel Rename' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelRenameDesc #defaultString: 'Rename the selected parcel' #catalogID: #browser) #parcelRenameParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelSave #defaultString: 'Parcel Save' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelSaveDesc #defaultString: 'Save the selected parcel' #catalogID: #browser) #parcelSaveParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelUnload #defaultString: 'Parcel Unload' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelUnloadDesc #defaultString: 'Unload the selected parcel' #catalogID: #browser) #parcelUnloadParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PasteSelection #defaultString: 'Paste Selection' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #Paste #defaultString: 'Paste' #catalogID: #browser) #paste #isTextTool #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PrintIt #defaultString: 'Print It' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PrintItDesc #defaultString: 'Evaluate the selected text and print the result' #catalogID: #browser) #printIt nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ProtectClassInstanceVariable #defaultString: 'Protect Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ProtectClassInstanceVariableDesc #defaultString: 'Convert from indirect to direct class instance variable access, removing all accessing methods that are no longer used' #catalogID: #browser) #protectClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ProtectInstanceVariable #defaultString: 'Protect Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ProtectInstanceVariableDesc #defaultString: 'Convert from indirect to direct instance variable access, removing all accessing methods that are no longer used' #catalogID: #browser) #protectInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ProtectSelectedInstanceVariable #defaultString: 'Protect Selected Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ProtectSelectedInstanceVariableDesc #defaultString: 'Convert abstract variable references to direct references for the selected instance variable' #catalogID: #browser) #protectInstanceVariable #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushDownClassInstanceVariable #defaultString: 'Push Down Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushDownClassInstanceVariableDesc #defaultString: 'Move the class instance variable''s definition to the subclasses that reference it' #catalogID: #browser) #pushDownClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushDownInstanceVariable #defaultString: 'Push Down Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushDownInstanceVariableDesc #defaultString: 'Move the instance variable''s definition to the subclasses that reference it' #catalogID: #browser) #pushDownInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushDownMethod #defaultString: 'Push Down Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushDownMethodDesc #defaultString: 'Move the selected method to the selected class'' subclasses' #catalogID: #browser) #pushDownSelector #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushDownSelectedInstanceVariable #defaultString: 'Push Down Selected Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushDownSelectedInstanceVariableDesc #defaultString: 'Move the selected instance variable definition to all subclasses' #catalogID: #browser) #pushDownInstanceVariable #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushUpClassInstanceVariable #defaultString: 'Push Up Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushUpClassInstanceVariableDesc #defaultString: 'Move the class instance variable definition to the selected class'' superclass' #catalogID: #browser) #pushUpClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushUpInstanceVariable #defaultString: 'Push Up Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushUpInstanceVariableDesc #defaultString: 'Move the instance variable definition to the selected class'' superclass' #catalogID: #browser) #pushUpInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushUpMethod #defaultString: 'Push Up Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushUpMethodDesc #defaultString: 'Move the selected method to the selected class'' superclass' #catalogID: #browser) #pushUpSelector #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushUpSelectedInstanceVariable #defaultString: 'Push Up Selected Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushUpSelectedInstanceVariableDesc #defaultString: 'Move the selected instance variable to the superclass' #catalogID: #browser) #pushUpInstanceVariable #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #Redo #defaultString: 'Redo' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RedoDesc #defaultString: 'Redo the last undo operation' #catalogID: #browser) #redoOperation #hasRedoableOperations #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RefactoringBrowserHelp #defaultString: 'Refactoring Browser Help' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #Help #defaultString: 'Help' #catalogID: #browser) #help nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ReferencesToClassOrGlobal #defaultString: 'References to Class or Global' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ReferencesToClassOrGlobalDesc #defaultString: 'Find references to a class or shared variable within the current scope of the browser' #catalogID: #browser) #browseGlobals nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ReferencesToSymbol #defaultString: 'References to Symbol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ReferencesToSymbolDesc #defaultString: 'Find references to a symbol within the current scope of the browser' #catalogID: #browser) #browseSymbols nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ReinitializeBindings #defaultString: 'Reinitialize Bindings' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ReinitializeBindingsDesc #defaultString: 'Reinitialize all selected bindings' #catalogID: #browser) #initializeBindings #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveActionSpecification #defaultString: 'Remove Action Specification' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveActionSpecificationDesc #defaultString: 'Remove an action specification' #catalogID: #browser) #removeAction #hasActionSpecificationSelected #yourself)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveBuffer #defaultString: 'Remove Buffer' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveBufferDesc #defaultString: 'Remove the current buffer' #catalogID: #browser) #removeBuffer #hasMultipleCodeTools #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveCategory #defaultString: 'Remove Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveCategoryDesc #defaultString: 'Remove all selected categories and their classes' #catalogID: #browser) #removeCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveClassInstanceVariable #defaultString: 'Remove Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveClassInstanceVariableDesc #defaultString: 'Remove a class instance variable if it is not referenced' #catalogID: #browser) #removeClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveInstanceVariable #defaultString: 'Remove Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveInstanceVariableDesc #defaultString: 'Remove an instance variable if it is not referenced' #catalogID: #browser) #removeInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveMethod #defaultString: 'Remove Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveMethodDesc #defaultString: 'Remove the selected methods' #catalogID: #browser) #removeMethod #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveMethodFromList #defaultString: 'Remove Method From List' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveMethodFromListDesc #defaultString: 'Removes the selected methods and shared variables from the list of items.' #catalogID: #browser) #removeFromList #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveObject #defaultString: 'Remove Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveObjectDesc #defaultString: 'Remove the selected shared variables, name spaces, or classes, including their subclasses' #catalogID: #browser) #removeObject #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveOverrideMethod #defaultString: 'Remove Override Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveOverrideMethodDesc #defaultString: 'Remove a method override' #catalogID: #browser) #removeMethodOrStaticOverride #isMethodOverridden #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveOverrideObject #defaultString: 'Remove Override Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveOverrideObjectDesc #defaultString: 'Remove an object override from the system' #catalogID: #browser) #removeObjectOverride #isClassOverridden #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveParameter #defaultString: 'Remove Parameter' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveParameterDesc #defaultString: 'Remove the selected argument from the method if all implementors of the method do not use the argument' #catalogID: #browser) #removeParameter #hasMethodArgumentSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveProtocol #defaultString: 'Remove Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveProtocolDesc #defaultString: 'Remove the selected protocol and all of its methods' #catalogID: #browser) #removeProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveSelectedInstanceVariable #defaultString: 'Remove Selected Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveSelectedInstanceVariableDesc #defaultString: 'Remove the selected instance variable if there are no references to it' #catalogID: #browser) #removeInstanceVariable #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveSelectedParameter #defaultString: 'Remove Selected Parameter' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveSelectedParameterDesc #defaultString: 'Remove the selected parameter from the method (if it is unused), modifying all callers' #catalogID: #browser) #removeParameter #canPerformParameterRefactorings #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveSharedVariable #defaultString: 'Remove Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveSharedVariableDesc #defaultString: 'Remove the selected variables whether or not there are references to them' #catalogID: #browser) #removeSharedVariable #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveStatic #defaultString: 'Remove Static' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveStaticDesc #defaultString: 'Remove the selected shared variable' #catalogID: #browser) #removeStatic #hasStaticSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameCategory #defaultString: 'Rename Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameCategoryDesc #defaultString: 'Rename the selected category' #catalogID: #browser) #renameCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameClassInstanceVariable #defaultString: 'Rename Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameClassInstanceVariableDesc #defaultString: 'Rename a class instance variable and all its references' #catalogID: #browser) #renameClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameInstanceVariable #defaultString: 'Rename Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameInstanceVariableDesc #defaultString: 'Rename an instance variable and all its references' #catalogID: #browser) #renameInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameMethod #defaultString: 'Rename Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameMethodDesc #defaultString: 'Rename a method and all of its senders' #catalogID: #browser) #renameMethod #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameObject #defaultString: 'Rename Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameObjectDesc #defaultString: 'Rename a class, name space, or shared variable and all references to it' #catalogID: #browser) #renameObject #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameProtocol #defaultString: 'Rename Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameProtocolDesc #defaultString: 'Rename the selected protocol' #catalogID: #browser) #renameProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameSelectedInstanceVariable #defaultString: 'Rename Selected Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameSelectedInstanceVariableDesc #defaultString: 'Rename the selected instance variable' #catalogID: #browser) #renameInstanceVariable #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameSelectedTemporaryVariable #defaultString: 'Rename Selected Temporary Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameTemporaryVariableDesc #defaultString: 'Rename the selected temporary variable and all references to it' #catalogID: #browser) #renameTemporary #canPerformTemporaryVariableRefactorings #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameSharedVariable #defaultString: 'Rename Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameSharedVariableDesc #defaultString: 'Rename the selected shared variable and all references to it' #catalogID: #browser) #renameSharedVariable #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameTemporaryVariable #defaultString: 'Rename Temporary Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameTemporaryVariableDesc #defaultString: 'Rename the selected temporary variable and all references to it' #catalogID: #browser) #renameTemporary #hasTemporarySelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ReplaceText #defaultString: 'Replace Text' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ReplaceTextDesc #defaultString: 'Search and replace text' #catalogID: #browser) #replace #isTextTool #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RestoreOverrideMethod #defaultString: 'Restore Override Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RestoreOverrideMethodDesc #defaultString: 'Restore an overridden method' #catalogID: #browser) #restoreMethodOrStaticOverride #isMethodOverridden #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RestoreOverrideObject #defaultString: 'Restore Override Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RestoreOverrideObjectDesc #defaultString: 'Restore an object override from the system' #catalogID: #browser) #restoreObjectOverride #isClassOverridden #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RestoreSelectedOverride #defaultString: 'Restore Selected Override' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RestoreSelectedOverrideDesc #defaultString: 'Restores the selected override.' #catalogID: #browser) #restoreOverride #isOverrideSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RewriterReplace #defaultString: 'Rewriter Replace' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RewriterReplaceDesc #defaultString: 'Replace using parse trees.' #catalogID: #browser) #replace nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RewriterSearch #defaultString: 'Rewriter Search' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RewriterSearchDesc #defaultString: 'Search for a matching parse tree.' #catalogID: #browser) #find nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SafeRemoveMethod #defaultString: 'Safe Remove Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SafeRemoveMethodDesc #defaultString: 'Remove the selected methods if there are no references to them' #catalogID: #browser) #removeMethodSafe #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SafeRemoveObject #defaultString: 'Safe Remove Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SafeRemoveObjectDesc #defaultString: 'Remove the selected classes only if there are no references to them' #catalogID: #browser) #removeObjectsSafe #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SafeRemoveSharedVariable #defaultString: 'Safe Remove Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SafeRemoveSharedVariableDesc #defaultString: 'Remove the selected variables if there are no references to them' #catalogID: #browser) #removeSharedVariableSafe #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedGlobalInstanceVariableReaders #defaultString: 'Selected Global Instance Variable Readers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedInstanceVariableReadersDesc #defaultString: 'Browse all methods accessing the selected instance variable' #catalogID: #browser) #browseInstVarReaders #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedGlobalInstanceVariableReferences #defaultString: 'Selected Global Instance Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedInstanceVariableReferencesDesc #defaultString: 'Browse all methods referring to the selected instance variable' #catalogID: #browser) #browseInstVarRefs #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedGlobalInstanceVariableWriters #defaultString: 'Selected Global Instance Variable Writers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedInstanceVariableWritersDesc #defaultString: 'Browse all methods modifying the selected instance variable' #catalogID: #browser) #browseInstVarWriters #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedMessageGlobalImplementors #defaultString: 'Selected Message Global Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedMessageImplementorsDesc #defaultString: 'Browse all implementors of the selected message' #catalogID: #browser) #browseImplementors #hasMessageSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedMessageGlobalSenders #defaultString: 'Selected Message Global Senders' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedMessageSendersDesc #defaultString: 'Browse all senders of the selected message' #catalogID: #browser) #browseSenders #hasMessageSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedMessageImplementors #defaultString: 'Selected Message Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedMessageImplementorsDesc #defaultString: 'Browse all implementors of the selected message' #catalogID: #browser) #browseImplementors #hasMessageNodeSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedMessageReferences #defaultString: 'Selected Message References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedMessageSendersDesc #defaultString: 'Browse all senders of the selected message' #catalogID: #browser) #browseSenders #hasMessageNodeSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SetDefaultNameSpace #defaultString: 'Set Default Name Space' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SetDefaultNameSpaceDesc #defaultString: 'Set the default name space to be displayed when a browser is opened' #catalogID: #browser) #setDefaultNameSpace nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SetUndoCount #defaultString: 'Set Undo Count' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SetUndoCountDesc #defaultString: 'Set the size of the undo buffer' #catalogID: #browser) #setUndoCount nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SharedVariableTemplate #defaultString: 'Shared Variable Template' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SharedVariableTemplateDesc #defaultString: 'Display a template for creating a shared variable' #catalogID: #browser) #showSharedVariableTemplate nil #activeTool)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #ShowOnlyFiltered #defaultString: 'Show Only Filtered' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ShowOnlyFilteredDesc #defaultString: 'Show only methods and shared variables within the selected Parcels/Packages' #catalogID: #browser) #showOnlyFilteredSpecifications nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ShowOverrideDiffs #defaultString: 'Show Override Diffs' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ShowOverrideDiffsDesc #defaultString: 'Show source differences between the override and the image' #catalogID: #browser) #showOverrideDiff #isOverrideSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SmalllintClearFilters #defaultString: 'Smalllint Clear Filters' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SmalllintClearFiltersDesc #defaultString: 'Clear Smalllint filter list.' #catalogID: #browser) #clearFilters nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SmalllintFilterClass #defaultString: 'Smalllint Filter Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SmalllintFilterClassDesc #defaultString: 'Add the selected class to the Smalllint rules ignore list' #catalogID: #browser) #addFilterForClass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SmalllintFilterSelector #defaultString: 'Smalllint Filter Selector' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SmalllintFilterSelectorDesc #defaultString: 'Add the selected methods to the Smalllint rules ignore list' #catalogID: #browser) #addFilterForSelector #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SmalllintLoadFilters #defaultString: 'Smalllint Load Filters' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SmalllintLoadFiltersDesc #defaultString: 'Load Smalllint filters from a file.' #catalogID: #browser) #loadFilters nil #activeTool)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #SmalllintRuleTypeList #defaultString: 'Smalllint Rule Type List' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SmalllintRuleTypeListDesc #defaultString: '' #catalogID: #browser) #ruleActions nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SmalllintSaveFilters #defaultString: 'Smalllint Save Filters' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SmalllintSaveFiltersDesc #defaultString: 'Save Smalllint''s filters to a file.' #catalogID: #browser) #saveFilters nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnBrowser #defaultString: 'Spawn Browser' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnBrowserDesc #defaultString: 'Open a new browser' #catalogID: #browser) #spawnBrowser nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnCategory #defaultString: 'Spawn Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnCategoryDesc #defaultString: 'Browse only the classes in the selected categories' #catalogID: #browser) #spawnCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnClass #defaultString: 'Spawn Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnClassDesc #defaultString: 'Browse only the selected classes' #catalogID: #browser) #spawnClass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnClassHierarchy #defaultString: 'Spawn Class Hierarchy' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnClassHierarchyDesc #defaultString: 'Browse only the selected class and its hierarchy' #catalogID: #browser) #spawnHierarchy #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnMethod #defaultString: 'Spawn Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnMethodDesc #defaultString: 'Browse only the selected methods' #catalogID: #browser) #spawnMethod #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnParcel #defaultString: 'Spawn Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnParcelDesc #defaultString: 'Browse the selected parcels' #catalogID: #browser) #spawnParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnProtocol #defaultString: 'Spawn Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnProtocolDesc #defaultString: 'Browse the selected protocols' #catalogID: #browser) #spawnProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnPundle #defaultString: 'Spawn Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnPundleDesc #defaultString: 'Browse the selected pundles' #catalogID: #browser) #spawnPundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StaticReferences #defaultString: 'Static References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StaticReferencesDesc #defaultString: 'Browse all references to the selected shared variable' #catalogID: #browser) #staticReferences #hasStaticSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CmdStoreAddBundle #defaultString: 'Store Add Bundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CmdStoreAddBundleDesc #defaultString: 'Create a new bundle' #catalogID: #browser) #storeCreateBundle nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CmdStoreAddPackage #defaultString: 'Store Add Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CmdStoreAddPackageDesc #defaultString: 'Create a new package' #catalogID: #browser) #storeCreatePackage nil #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #StoreAllDatabasesBrowseChanges #defaultString: 'Store All Databases Browse Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreAllDatabasesBrowseChangesDesc #defaultString: '' #catalogID: #browser) #storeAllDbsBrowseChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #StoreAllDatabasesChangeList #defaultString: 'Store All Databases Change List' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreAllDatabasesChangeListDesc #defaultString: '' #catalogID: #browser) #storeAllDbsChangeListOnChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #StoreAllDatabasesFileoutChanges #defaultString: 'Store All Databases Fileout Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreAllDatabasesFileoutChangesDesc #defaultString: '' #catalogID: #browser) #storeAllDbsFileoutChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #StoreAllDatabasesInspectChanges #defaultString: 'Store All Databases Inspect Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreAllDatabasesInspectChangesDesc #defaultString: '' #catalogID: #browser) #storeAllDbsInspectChangeSet #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreBrowseClassVersions #defaultString: 'Store Browse Class Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreBrowseClassVersionsDesc #defaultString: 'Browse all versions of the selected class in the repository' #catalogID: #browser) #storeBrowseClassVersions #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreBrowseMethodChanges #defaultString: 'Store Browse Method Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreBrowseMethodChangesDesc #defaultString: 'Browse the methods in the repository that have been changed' #catalogID: #browser) #storeBrowseChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreBrowseMethodVersions #defaultString: 'Store Browse Method Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreBrowseMethodVersionsDesc #defaultString: 'Browse the methods that have been changed' #catalogID: #browser) #storeBrowseMethodVersions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreBrowsePundleVersions #defaultString: 'Store Browse Pundle Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreBrowsePundleVersionsDesc #defaultString: 'Browse all versions of the selected method in the repository' #catalogID: #browser) #storeBrowsePundleVersions #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreBrowseRemovedMethods #defaultString: 'Store Browse Removed Methods' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreBrowseRemovedMethodsDesc #defaultString: 'Browse all methods stored in the repository for this class that are not loaded' #catalogID: #browser) #storeBrowseRemovedMethods #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreBrowseSharedVariableVersions #defaultString: 'Store Browse Shared Variable Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreBrowseSharedVariableVersionsDesc #defaultString: 'Browse all versions of the shared variable stored in the repository' #catalogID: #browser) #storeBrowseSharedVariableVersions #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreChangeListOnChanges #defaultString: 'Store Change List on Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreChangeListOnChangesDesc #defaultString: 'Open a change list for the selected package' #catalogID: #browser) #storeChangeListOnChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreCompareClassVersion #defaultString: 'Store Compare Class Version' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreCompareClassVersionDesc #defaultString: 'Browse differences between the loaded class and a version in the repository' #catalogID: #browser) #storeCompareWithVersion #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreCompareMethodVersions #defaultString: 'Store Compare Method Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreCompareMethodVersionsDesc #defaultString: 'Browse differences between the selected method and another version of it' #catalogID: #browser) #storeCompareMethodWithVersion #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreComparePundleVersions #defaultString: 'Store Compare Pundle Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreComparePundleVersionsDesc #defaultString: 'Browse differences between the selected item and an item in the repository' #catalogID: #browser) #storeComparePundleVersion #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreComparePundleWithParent #defaultString: 'Store Compare Pundle with Parent' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreComparePundleWithParentDesc #defaultString: 'Browse differences between the selected item and its parent' #catalogID: #browser) #storeCompareWithParent #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreCompareSharedVariableVersions #defaultString: 'Store Compare Shared Variable Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreCompareSharedVariableVersionsDesc #defaultString: 'Browse differences between the selected shared variable and another version of it' #catalogID: #browser) #storeCompareSharedVariableWithVersion #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreEditBundle #defaultString: 'Store Edit Bundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreEditBundleDesc #defaultString: 'Edit the bundle''s specification' #catalogID: #browser) #storeEditBundleSpecification #isBundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreExtendClassInPackage #defaultString: 'Store Extend Class in Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreExtendClassInPackageDesc #defaultString: 'Create an extension of a class or name space in a new package.' #catalogID: #browser) #extendClassInPackage #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreFilein #defaultString: 'Store File-in' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreFileinDesc #defaultString: 'Load Smalltalk source, compiling it into the selected package' #catalogID: #browser) #storeFileinPackage #isPackageSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreFileoutPundle #defaultString: 'Store File-out Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreFileoutPundleDesc #defaultString: 'Save the Smalltalk source of the selected item as a file-out' #catalogID: #browser) #storeFileoutPundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreFileoutPundleChanges #defaultString: 'Store File-out Pundle Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreFileoutPundleChangesDesc #defaultString: 'Save the Smalltalk source for the changes in the selected item' #catalogID: #browser) #storeFileoutPundleChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreFileoutPundleDifferences #defaultString: 'Store File-out Pundle Differences' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreFileoutPundleDifferencesDesc #defaultString: 'Save the Smalltalk source for the differences between selected item versions' #catalogID: #browser) #storeFileoutPundleDifferences #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreInspectChangeSet #defaultString: 'Store Inspect Change Set' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreInspectChangeSetDesc #defaultString: 'Inspect the change set of the selected packages' #catalogID: #browser) #storeInspectChangeSet #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreLoadAnotherPundle #defaultString: 'Store Load Another Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreLoadAnotherPundleDesc #defaultString: 'Load a package or bundle from the repository' #catalogID: #browser) #loadAnotherPundle nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreLoadPundle #defaultString: 'Store Load Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreLoadPundleDesc #defaultString: 'Load another version of the selected item' #catalogID: #browser) #storeLoadPundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreMakeCurrent #defaultString: 'Store Make Current' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreMakeCurrentDesc #defaultString: 'Make the selected package the default package for new source' #catalogID: #browser) #storeMakeCurrent #isPackageSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreNewClassExtension #defaultString: 'Store New Class Extension' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreNewClassExtensionDesc #defaultString: 'Create a new class extension in the selected package' #catalogID: #browser) #storeNewClassExtension #isPackageSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreOverrideMethod #defaultString: 'Store Override Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreOverrideMethodDesc #defaultString: 'Create an override for the selected method(s) or shared variable(s)' #catalogID: #browser) #overrideDefinitionsInPackage #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreOverrideObject #defaultString: 'Store Override Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreOverrideObjectDesc #defaultString: 'Create an override for the selected object(s)' #catalogID: #browser) #overrideObjectInPackage #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StorePublish #defaultString: 'Store Publish' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StorePublishDesc #defaultString: 'Publish the selected item to the repository' #catalogID: #browser) #storePublishPundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StorePublishParcel #defaultString: 'Store Publish Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StorePublishParcelDesc #defaultString: 'Publish the selected item as a parcel' #catalogID: #browser) #storePublishAsParcel #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StorePundleProperties #defaultString: 'Store Pundle Properties' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StorePundlePropertiesDesc #defaultString: 'Open the selected component''s properties dialog' #catalogID: #browser) #storePundleProperties #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreReconcilePundle #defaultString: 'Store Reconcile Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreReconcilePundleDesc #defaultString: 'Reconcile the selected package with the database' #catalogID: #browser) #storeReconcilePundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreRenamePundle #defaultString: 'Store Rename Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreRenamePundleDesc #defaultString: 'Rename the selected item' #catalogID: #browser) #storeRenamePundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreRevertMethod #defaultString: 'Store Revert Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreRevertMethodDesc #defaultString: 'Load the version of the method stored in the repository for this package version' #catalogID: #browser) #storeRevertMethod #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreRevertSharedVariable #defaultString: 'Store Revert Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreRevertSharedVariableDesc #defaultString: 'Load the version of the shared variable stored in the repository for this package version' #catalogID: #browser) #storeRevertSharedVariable #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreUnloadPundle #defaultString: 'Store Unload Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreUnloadPundleDesc #defaultString: 'Unload the selected item' #catalogID: #browser) #storeUnloadPundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ToggleStatusBar #defaultString: 'Toggle Status Bar' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ToggleStatusBarDesc #defaultString: 'Toggle the status bars of all browsers' #catalogID: #browser) #toggleStatusBar nil #codeModel)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ToggleToolbar #defaultString: 'Toggle Toolbar' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ToggleToolbarDesc #defaultString: 'Toggle the toolbar on all browsers' #catalogID: #browser) #toggleToolbar nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllCategories #defaultString: 'Uncheck All Categories' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllCategoriesDesc #defaultString: 'Remove all categories matching an expression from the item list' #catalogID: #browser) #uncheckAllCategories nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllClasses #defaultString: 'Uncheck All Classes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllClassesDesc #defaultString: 'Remove all classes matching a pattern from the item list' #catalogID: #browser) #uncheckAllClasses #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllImplementors #defaultString: 'Uncheck All Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllImplementorsDesc #defaultString: 'Remove all implementors of the selected method from the item list' #catalogID: #browser) #uncheckImplementors #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllMethods #defaultString: 'Uncheck All Methods' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllMethodsDesc #defaultString: 'Remove all methods matching a pattern from the item list' #catalogID: #browser) #uncheckAllSelectors #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllProtocols #defaultString: 'Uncheck All Protocols' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllProtocolsDesc #defaultString: 'Remove all protocols matching a pattern from the item list' #catalogID: #browser) #uncheckAllProtocols #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllSenders #defaultString: 'Uncheck All Senders' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllSendersDesc #defaultString: 'Remove all senders of the selected method from the item list' #catalogID: #browser) #uncheckSenders #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllSubclasses #defaultString: 'Uncheck All Subclasses' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllSubclassesDesc #defaultString: 'Remove all the class'' subclasses from the item list' #catalogID: #browser) #uncheckSubclasses #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllSuperclasses #defaultString: 'Uncheck All Superclasses' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllSuperclassesDesc #defaultString: 'Remove all the class'' superclasses from the item list' #catalogID: #browser) #uncheckSuperclasses #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckCategory #defaultString: 'Uncheck Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckCategoryDesc #defaultString: 'Remove the selected categories from the item list' #catalogID: #browser) #uncheckCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckClass #defaultString: 'Uncheck Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckClassDesc #defaultString: 'Remove the selected class from the item list' #catalogID: #browser) #uncheckClass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckMethod #defaultString: 'Uncheck Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckMethodDesc #defaultString: 'Remove the selected methods from the item list' #catalogID: #browser) #uncheckSelector #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckProtocol #defaultString: 'Uncheck Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckProtocolDesc #defaultString: 'Remove the selected protocols from the item list' #catalogID: #browser) #uncheckProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #Undo #defaultString: 'Undo' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UndoDesc #defaultString: 'Undo the last action' #catalogID: #browser) #undoOperation #hasUndoableOperations #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UndoTyping #defaultString: 'Undo Typing' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #Undo #defaultString: 'Undo' #catalogID: #browser) #undo #isTextTool #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UpdateCodeToolDisplay #defaultString: 'Update Code Tool Display' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UpdateCodeToolDisplayDesc #defaultString: 'Update the display' #catalogID: #browser) #updateDisplay nil #codeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UpdateNavigator #defaultString: 'Update Navigator' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UpdateNavigatorDesc #defaultString: 'Refresh the navigator from the current image' #catalogID: #browser) #updateNavigator nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #VariableNavigatorPullUpVariable #defaultString: 'Variable Navigator Pull Up Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #VariableNavigatorPullUpVariableDesc #defaultString: 'Move the selected variable into the superclass' #catalogID: #browser) #pullUpSelectedInstanceVariable #canPerformPullUpVariable #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #VariableNavigatorRemoveVariable #defaultString: 'Variable Navigator Remove Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #VariableNavigatorRemoveVariableDesc #defaultString: 'Remove the selected variable if there are no references to it' #catalogID: #browser) #removeSelectedInstanceVariable #canPerformRemoveVariable #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #ZoomSpecifications #defaultString: 'Zoom Specifications' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ZoomSpecificationsDesc #defaultString: 'The Zoom menu for the RB.' #catalogID: #browser) #zoomMenuSpecifications nil #browser))</body><body package="Browser-BaseUI" selector="initializeActions">initializeActions	self initializeWithActions: self actionArray</body><body package="Browser-BaseUI" selector="initializeWithActions:">initializeWithActions: specArray 	Actions := Dictionary new.	specArray do: 			[:each | 			| action |			action := each first value decodeFromLiteralArray: each.			self addAction: action]</body></methods><methods><class-id>Refactory.Browser.RBCommand class</class-id> <category>private</category><body package="Browser-BaseUI" selector="decodeStringOrArray:">decodeStringOrArray: aStringOrArray	^aStringOrArray isString		ifTrue: [aStringOrArray]		ifFalse: [aStringOrArray first value decodeFromLiteralArray: aStringOrArray]</body></methods><methods><class-id>Refactory.Browser.RBMultiSelectionView</class-id> <category>private</category><body package="Browser-BaseUI" selector="retractSelectionIndex:">retractSelectionIndex: anIndex 	self selectionChannel removeDependent: self.	super retractSelectionIndex: anIndex.	self selectionChannel addDependent: self</body><body package="Browser-BaseUI" selector="useSweepSelectionIndex:">useSweepSelectionIndex: anIndex 	| save list newList |	lastSelectionIndex = self zeroIndex 		ifTrue: 			[self retractAllSelections.			^self].	save := lastSelectionIndex.	list := self selections copy.	newList := save to: anIndex by: (save &lt; anIndex ifTrue: [1] ifFalse: [-1]).	selectionIndex := self zeroIndex.	list do: 			[:i | 			(newList includes: i) 				ifFalse: 					[selections remove: i ifAbsent: [].					self invalidateElementIndex: i]].	newList do: 			[:i | 			(list includes: i) 				ifFalse: 					[selections add: i.					self invalidateElementIndex: i]].	lastSelectionIndex := save.	self selectionChannel value: selections</body></methods><methods><class-id>Refactory.Browser.RBMultiSelectionView</class-id> <category>updating</category><body package="Browser-BaseUI" selector="updateSelectionChannel">updateSelectionChannel	| indx range |	range := self visibleIntervalForBounds: self bounds.	range notEmpty 		ifTrue: 			[indx := selectionChannel value detect: [:each | true]						ifNone: [self zeroIndex].			((selectionChannel value 				anySatisfy: [:each | each between: range first and: range last]) 					or: [indx = self zeroIndex]) ifFalse: [self makeVisible: indx]].	super updateSelectionChannel</body></methods><methods><class-id>Refactory.Browser.RBDynamicMultiCommand</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="actionSpecificationsFor:">actionSpecificationsFor: anObject 	^[self performWith: anObject] on: Error do: [:ex | ex return: #()]</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>menu accessing</category><body package="Browser-BaseUI" selector="action:">action: aMenuItem 	^self performAction: aMenuItem nameKey asString</body><body package="Browser-BaseUI" selector="actionNamed:">actionNamed: aString 	^RBCommand actionNamed: aString</body><body package="Browser-BaseUI" selector="buildMenuFrom:">buildMenuFrom: aMenu 	| newMenu |	newMenu := Menu new.	aMenu visibleMenuItemGroups do: 			[:group | 			| items index newIndex |			items := OrderedCollection new.			group do: 					[:each | 					((#(#action: #rbItem) includes: each value) 						or: [each value isSymbol and: [each value keywords size &gt; 1]]) 							ifTrue: [items add: (self createActionMenuItemFrom: each)]							ifFalse: 								[each value = #dynamicMenu 									ifTrue: [items addAll: (self dynamicMenuItemsFrom: each)]									ifFalse: 										[| newItem symbol |										newItem := each copy.										newItem truePerformerBlock: [:ignore | self].										((symbol := newItem value) isSymbol and: [self respondsTo: newItem value]) 											ifTrue: [newItem value: [self perform: symbol]].	"Force all messages that we understand to be dispatched to us, no matter if they are used in the menu bar or elsewhere."										items add: newItem]]].			items do: [:each | each notNil ifTrue: [self createSubMenuItemFor: each]].			index := 0.			[index &lt; items size] whileTrue: 					[newIndex := items 								nextIndexOf: nil								from: index + 1								to: items size.					newIndex isNil ifTrue: [newIndex := items size + 1].					newMenu addItemGroup: (items copyFrom: index + 1 to: newIndex - 1).					index := newIndex]].	^newMenu</body><body package="Browser-BaseUI" selector="buildTopLevelMenuFrom:">buildTopLevelMenuFrom: aMenuName 	| menu |		[menu := (self class menuNamed: aMenuName) copy 				augmentFrom: self class				to: BrowserApplicationModel				menuName: aMenuName				for: self] 			on: MenuAugmentationError			do: [:ex | ex isResumable ifTrue: [ex resume]].	^(self doesMenuNeedToBeRebuilt: menu) 		ifTrue: [[self buildMenuFrom: menu]]		ifFalse: [self buildMenuFrom: menu]</body><body package="Browser-BaseUI" selector="createActionMenuItemFrom:">createActionMenuItemFrom: aMenuItem 	| newItem commandName |	newItem := aMenuItem copy.	newItem rawLabel: (self menuLabelFor: aMenuItem).	newItem nameKey: aMenuItem nameKey.	commandName := aMenuItem nameKey.	(commandName notNil and: [aMenuItem value ~= #rbItem]) 		ifTrue: 			[newItem value: [self action: newItem].			newItem 				helpText: (self actionNamed: aMenuItem nameKey asString) description]		ifFalse: [newItem value: nil].	newItem enablementSelector: #isMenuItemEnabled:.	aMenuItem enablementSelector notNil 		ifTrue: [newItem hidden: [self isMenuItemHidden: aMenuItem]].	^newItem</body><body package="Browser-BaseUI" selector="createSubMenuItemFor:">createSubMenuItemFor: aMenuItem 	| submenu |	submenu := aMenuItem submenuHolder.	submenu isNil ifTrue: [^self].	(submenu isKindOf: Menu) ifFalse: [^self].	aMenuItem submenu: ((self doesMenuNeedToBeRebuilt: submenu) 				ifTrue: [[self buildMenuFrom: submenu]]				ifFalse: [self buildMenuFrom: submenu])</body><body package="Browser-BaseUI" selector="disableMenu:except:">disableMenu: aMenu except: aCollection 	aMenu menuItems do: 			[:each | 			(aCollection includes: each label) 				ifTrue: [each enable]				ifFalse: [each disable].			each submenu notNil 				ifTrue: [self disableMenu: each submenu except: aCollection]].	^aMenu</body><body package="Browser-BaseUI" selector="doesMenuNeedToBeRebuilt:">doesMenuNeedToBeRebuilt: aMenu 	"The dynamic label menus (e.g., action:labelSelector:) and the dynamic list menus (e.g., the buffer lists) need to be reconstructed when the menu opens."	^aMenu menuItems anySatisfy: 			[:each | 			each value = #dynamicMenu 				or: [each value isSymbol and: [each value keywords size &gt; 1]]]</body><body package="Browser-BaseUI" selector="dynamicMenuItemsFrom:">dynamicMenuItemsFrom: aMenuItem 	| actions action |	action := self actionNamed: aMenuItem nameKey asString.	actions := action actionSpecificationsFor: self dispatcher.	^actions collect: 			[:each | 			| item |			each isNil 				ifTrue: [nil]				ifFalse: 					[item := MenuItem labeled: each name.					item enabled: [each isEnabledFor: self dispatcher].					item value: [each performWith: self dispatcher].					each isCheckedActionSpecification ifTrue: [item beOn].					item]]</body><body package="Browser-BaseUI" selector="isMenuItemEnabled:">isMenuItemEnabled: aMenuItem 	| submenu action |	(aMenuItem nameKey isNil or: [aMenuItem value isNil]) 		ifTrue: 			[submenu := aMenuItem submenu.			^submenu isNil or: 					[submenu menuItems anySatisfy: 							[:each | 							each isEnabled and: 									[each enablementSelector isNil or: 											[each enablementSelector numArgs = 0 												ifTrue: [self perform: each enablementSelector]												ifFalse: [self perform: each enablementSelector with: each]]]]]].	action := self actionNamed: aMenuItem nameKey asString.	^action isEnabledFor: self dispatcher</body><body package="Browser-BaseUI" selector="isMenuItemHidden:">isMenuItemHidden: aMenuItem 	^([self perform: aMenuItem enablementSelector] on: Error		do: 			[:ex | 						[((self actionNamed: aMenuItem nameKey asString) 				receiverFor: self dispatcher) perform: aMenuItem enablementSelector] 					on: Error					do: 						[:ex1 | 						[self dispatcher perform: aMenuItem enablementSelector] on: Error							do: [:e | e return: false]]]) 			not</body><body package="Browser-BaseUI" selector="maxMenuNameLength">maxMenuNameLength	^50</body><body package="Browser-BaseUI" selector="menu">menu	"Return a default menu for all subclasses. This is used when embedding this object inside another app 	model."	^	[| mb |	mb := MenuBuilder new.	mb add: 'No menu' -&gt; #yourself.	mb menu]</body><body package="Browser-BaseUI" selector="menuLabelFor:">menuLabelFor: aMenuItem 	| labelSelector keywords |	^(keywords := aMenuItem value keywords) size &gt; 1 		ifTrue: 			[labelSelector := (keywords last copyFrom: 1 to: keywords last size - 1) 						asSymbol.						[((self actionNamed: aMenuItem nameKey asString) 				receiverFor: self dispatcher) perform: labelSelector] 					on: Error					do: 						[:ex | 						[self dispatcher perform: labelSelector] on: Error							do: [:ex1 | [self perform: labelSelector] on: Error do: [:e | e return: 'Error']]]]		ifFalse: [aMenuItem rawLabel]</body><body package="Browser-BaseUI" selector="menuNameFor:">menuNameFor: aSelector 	^aSelector size &gt; self maxMenuNameLength 		ifTrue: 			[(aSelector copyFrom: 1 to: (self maxMenuNameLength * 0.75) rounded) 				, '...' , (aSelector 							copyFrom: aSelector size - (self maxMenuNameLength * 0.25) rounded + 3							to: aSelector size)]		ifFalse: [aSelector]</body><body package="Browser-BaseUI" selector="performAction:">performAction: aString 	| action |	action := self actionNamed: aString.	^action performWith: self dispatcher</body><body package="Browser-BaseUI" selector="rebuildMenus">rebuildMenus	self subcanvases do: [:each | each rebuildMenus]</body><body package="Browser-BaseUI" selector="setMenu:for:">setMenu: newMenu for: widget 	| controller |	controller := self controllerFor: widget.	controller isNil ifTrue: [^self].	controller menuHolder: newMenu</body><body package="Browser-BaseUI" selector="windowMenuItems">windowMenuItems	^#()</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>requests</category><body package="Browser-BaseUI" selector="choose:from:">choose: aString from: aCollection 	^self 		choose: aString		fromList: aCollection		values: aCollection		lines: 20		cancel: [nil]</body><body package="Browser-BaseUI" selector="choose:fromList:values:ignore:initialSelection:lines:cancel:">choose: aString fromList: aCollection values: valueCollection ignore: ignoreChoices initialSelection: anIndex lines: anInteger cancel: cancelBlock 	| labels sd spec listW buttons |	labels := SelectionInList new.	labels list: aCollection asList.	anIndex notNil ifTrue: [labels selectionIndex: anIndex].	sd := SimpleDialog new.	spec := sd class interfaceSpecFor: #emptySpec.	sd builder add: spec window.	sd builder add: spec component.	sd setInitialGap.	sd addMessage: aString centered: true.	sd addGap: 8.	listW := sd 				addList: labels				lines: anInteger				validation: [labels selectionIndex &gt; 0].	listW widget setValidTargetIndex: labels selectionIndex.	sd addGap: 4.	buttons := sd addOK: [labels selectionIndex ~= 0].	sd addGap: 6.	sd bottomAlignLowerEdge: listW.	sd bottomAlign: (Array with: buttons).	labels selectionIndexHolder compute: 			[:v | 			(v &gt; 0 and: [ignoreChoices includes: v]) 				ifTrue: 					[labels selectionIndex: 0.					listW widget targetIndex: 0]].	sd preOpen.	sd builder openDialogWithExtent: sd builder window displayBox extent.	^sd accept value 		ifTrue: [valueCollection at: labels selectionIndex]		ifFalse: [cancelBlock value]</body><body package="Browser-BaseUI" selector="choose:fromList:values:lines:cancel:">choose: aString fromList: aCollection values: valueCollection lines: anInteger cancel: aBlock 	^Dialog		choose: aString		fromList: aCollection		values: valueCollection		lines: anInteger		cancel: aBlock		for: self interfaceWindow</body><body package="Browser-BaseUI" selector="confirm:">confirm: aString	^Dialog confirm: aString</body><body package="Browser-BaseUI" selector="request:">request: aString 	^Dialog request: aString</body><body package="Browser-BaseUI" selector="request:initialAnswer:">request: aString initialAnswer: anAnswerString	^Dialog request: aString initialAnswer: anAnswerString</body><body package="Browser-BaseUI" selector="showWaitCursorWhile:">showWaitCursorWhile: aBlock 	| currentCursor process |	(currentCursor := Cursor currentCursor) == Cursor wait 		ifTrue: [^aBlock value].	process := 			[(Delay forMilliseconds: 100) wait.			Cursor wait show] 					forkAt: Processor activeProcess priority + 1.	^aBlock ensure: 			[process terminate.			currentCursor show]</body><body package="Browser-BaseUI" selector="warn:">warn: aString 	^Dialog warn: aString</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>widget properties</category><body package="Browser-BaseUI" selector="controllerFor:">controllerFor: aSymbol 	| wrapper |	builder isNil ifTrue: [^nil].	wrapper := builder componentAt: aSymbol.	wrapper isNil ifTrue: [^nil].	^wrapper widget controller</body><body package="Browser-BaseUI" selector="disable:">disable: aSymbol 	| component |	builder isNil ifTrue: [^self].	component := builder componentAt: aSymbol.	component notNil ifTrue: [component disable]</body><body package="Browser-BaseUI" selector="disableAll:">disableAll: aCollection	aCollection do: [:each | self disable: each]</body><body package="Browser-BaseUI" selector="enable:">enable: aSymbol 	| component |	builder isNil ifTrue: [^self].	component := builder componentAt: aSymbol.	component notNil ifTrue: [component enable]</body><body package="Browser-BaseUI" selector="enableAll:">enableAll: aCollection	aCollection do: [:each | self enable: each]</body><body package="Browser-BaseUI" selector="hide:">hide: aSymbol 	| component |	builder isNil ifTrue: [^self].	component := builder componentAt: aSymbol.	component notNil ifTrue: [component beInvisible]</body><body package="Browser-BaseUI" selector="hideAll:">hideAll: aCollection	aCollection do: [:each | self hide: each]</body><body package="Browser-BaseUI" selector="invalidateComponent:">invalidateComponent: aSymbol 	| component |	builder isNil ifTrue: [^self].	component := builder componentAt: aSymbol.	component notNil ifTrue: [component invalidate]</body><body package="Browser-BaseUI" selector="setMenuOf:to:">setMenuOf: aSymbol to: aMenu 	| controller |	controller := self controllerFor: aSymbol.	controller isNil ifTrue: [^self].	[controller menuHolder: aMenu] on: Error do: [:ex | ex return]</body><body package="Browser-BaseUI" selector="show:">show: aSymbol 	| component |	builder isNil ifTrue: [^self].	component := builder componentAt: aSymbol.	component notNil ifTrue: [component beVisible]</body><body package="Browser-BaseUI" selector="showAll:">showAll: aCollection	aCollection do: [:each | self show: each]</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>interface opening</category><body package="Browser-BaseUI" selector="createSelectedVisualBlockFrom:">createSelectedVisualBlockFrom: aBlock 	^	[:v :index | 	| rw |	rw := ReversingWrapper on: (aBlock value: v value: index).	rw reverse setValue: true.	BoundedWrapper on: rw]</body><body package="Browser-BaseUI" selector="createVisualBlockFrom:">createVisualBlockFrom: block 	^[:view :index | BoundingWrapper on: (block value: view value: index)]</body><body package="Browser-BaseUI" selector="resetBuilder">resetBuilder	self builder: nil.	self subcanvases do: [:each | each resetBuilder]</body><body package="Browser-BaseUI" selector="tabListWidgetFor:">tabListWidgetFor: aSymbol 	| specWidget widget |	builder isNil ifTrue: [^nil].	specWidget := builder componentAt: aSymbol.	specWidget isNil ifTrue: [^nil].	widget := specWidget widget.	widget := [widget tabBar] on: Error do: [:ex | ex return: nil].	widget isNil ifTrue: [^nil].	^widget component</body><body package="Browser-BaseUI" selector="tabVisualBlockFor:is:">tabVisualBlockFor: aSymbol is: aBlock 	| widget |	widget := self tabListWidgetFor: aSymbol.	widget isNil ifTrue: [^self].	widget visualBlock: (self createVisualBlockFrom: aBlock)</body><body package="Browser-BaseUI" selector="visualBlockFor:is:">visualBlockFor: aSymbol is: aBlock 	| specWidget |	builder isNil ifTrue: [^self].	specWidget := builder componentAt: aSymbol.	specWidget isNil ifTrue: [^self].	(specWidget widget)		visualBlock: (self createVisualBlockFrom: aBlock);		selectedVisualBlock: (self createSelectedVisualBlockFrom: aBlock)</body><body package="Browser-BaseUI" selector="windowSpecMethod">windowSpecMethod	^#windowSpec</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>store</category><body package="Browser-BaseUI" selector="abstractToolClass">abstractToolClass	^#{Store.AbstractTool} value</body><body package="Browser-BaseUI" selector="bundleDifferenceBrowserClass">bundleDifferenceBrowserClass	^#{Store.BundleDifferenceBrowser} value</body><body package="Browser-BaseUI" selector="bundleSpecEditorClass">bundleSpecEditorClass	^#{Store.BundleSpecEditor} value</body><body package="Browser-BaseUI" selector="classDescriptorClass">classDescriptorClass	^#{Store.ClassDescriptor} value</body><body package="Browser-BaseUI" selector="comparisonBrowserClass">comparisonBrowserClass	^#{Store.ComparisonBrowser} value</body><body package="Browser-BaseUI" selector="dbRegistry">dbRegistry	^#{Store.DbRegistry} value</body><body package="Browser-BaseUI" selector="isStoreLoaded">isStoreLoaded	^self class isStoreLoaded</body><body package="Browser-BaseUI" selector="nameSpaceDescriptorClass">nameSpaceDescriptorClass	^#{Store.NameSpaceDescriptor} value</body><body package="Browser-BaseUI" selector="publishAsParcelDialogClass">publishAsParcelDialogClass	^#{Store.PublishAsParcelDialog} value</body><body package="Browser-BaseUI" selector="pundleChangeListClass">pundleChangeListClass	^#{Store.PundleChangeList} value</body><body package="Browser-BaseUI" selector="setPackage:while:">setPackage: package while: aBlock 	| policiesRef |	(package isNil or: [package isBundle]) ifTrue: [^aBlock value].	policiesRef := #{Store.Policies}.	policiesRef isDefined ifFalse: [^aBlock value].	policiesRef value packagePolicy forcePackage: package while: aBlock</body><body package="Browser-BaseUI" selector="sharedVariableDescriptorClass">sharedVariableDescriptorClass	^#{Store.DatumDescriptor} value</body><body package="Browser-BaseUI" selector="storeChangeSet">storeChangeSet	^#{Store.XChangeSet} value current</body><body package="Browser-BaseUI" selector="storeClassClass">storeClassClass	^#{Store.ClassRecord} value</body><body package="Browser-BaseUI" selector="storeMethodClass">storeMethodClass	^#{Store.Method} value</body><body package="Browser-BaseUI" selector="storeNameSpaceClass">storeNameSpaceClass	^#{Store.NameSpaceRecord} value</body><body package="Browser-BaseUI" selector="storeRegistry">storeRegistry	^#{Store.Registry} valueOrDo: [nil]</body><body package="Browser-BaseUI" selector="storeSharedVariableClass">storeSharedVariableClass	^#{Store.DataElement} value</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="dispatcher">dispatcher	^self</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>subcanvases</category><body package="Browser-BaseUI" selector="installSubcanvasIn:using:">installSubcanvasIn: aSymbol using: anApplicationModel 	self 		installSubcanvasIn: aSymbol		using: anApplicationModel		spec: anApplicationModel windowSpecMethod</body><body package="Browser-BaseUI" selector="installSubcanvasIn:using:spec:">installSubcanvasIn: aSymbol using: anApplicationModel spec: aSpec 	| component |	builder isNil ifTrue: [^self].	component := builder componentAt: aSymbol.	(anApplicationModel respondsTo: #resetBuilder) 		ifTrue: [anApplicationModel resetBuilder].	component notNil 		ifTrue: [component widget client: anApplicationModel spec: aSpec].	(anApplicationModel isKindOf: BrowserApplicationModel) 		ifTrue: [anApplicationModel updateDisplay]</body><body package="Browser-BaseUI" selector="saveState">saveState	self subcanvases do: [:each | each saveState]</body><body package="Browser-BaseUI" selector="subcanvases">subcanvases	^#()</body><body package="Browser-BaseUI" selector="updateDisplay">updateDisplay	self subcanvases do: [:each | each updateDisplay]</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>window properties</category><body package="Browser-BaseUI" selector="interfaceWindow">interfaceWindow	builder notNil ifTrue: [^builder window].	^nil</body><body package="Browser-BaseUI" selector="setLabel:">setLabel: aLabel 	(builder notNil and: [builder window notNil])		ifTrue: [builder window label: aLabel]</body><body package="Browser-BaseUI" selector="takeFocus">takeFocus	"Someone has requested for us to take the widget input focus, but we don't know how."</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>testing</category><body package="Browser-BaseUI" selector="isEditing">isEditing	^false</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>updating</category><body package="Browser-BaseUI" selector="updateRequest">updateRequest	^super updateRequest 		and: [self subcanvases allSatisfy: [:each | each updateRequest]]</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>drag and drop</category><body package="Browser-BaseUI" selector="dropSelection:">dropSelection: aDragContext 	| controller index |	controller := aDragContext clientData at: #controller.	index := controller view targetIndex.	index == 0 ifTrue: [^nil].	^controller view sequence at: index</body><body package="Browser-BaseUI" selector="initialDropStateFor:">initialDropStateFor: aSymbol 	| dict controller component |	component := self builder componentAt: aSymbol.	component isNil ifTrue: [^nil].	controller := component widget controller.	dict := IdentityDictionary new.	dict at: #controller put: controller.	dict at: #targetIndex put: controller view targetIndex.	dict at: #hasFocus put: controller view hasFocus.	controller view hasFocus: true.	^dict</body><body package="Browser-BaseUI" selector="restoreListStateFrom:">restoreListStateFrom: aDictionary 	| controller |	aDictionary isNil ifTrue: [^self].	controller := aDictionary at: #controller ifAbsent: [^self].	controller view targetIndex: (aDictionary at: #targetIndex).	controller view hasFocus: (aDictionary at: #hasFocus)</body><body package="Browser-BaseUI" selector="showDropFeedbackForList:in:">showDropFeedbackForList: aSymbol in: aDragContext 	| component |	component := self builder componentAt: aSymbol.	component notNil 		ifTrue: 			[component widget showDropFeedbackIn: aDragContext allowScrolling: true]</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>help</category><body package="Browser-BaseUI" selector="help">help	self help: self helpTopic</body><body package="Browser-BaseUI" selector="help:">help: topicString 	| openBlock classReference |	classReference := #{VWHelp.HelpBrowser}.	openBlock := [:each | each openOnBook: 'VisualWorks Tools' topic: topicString].	classReference ifDefinedDo: openBlock		elseDo: 			[(self 				confirm: (#confirmLoadHelp &lt;&lt; #dialogs &gt;&gt; 'The help parcel has not been loaded.&lt;n&gt;Do you wish to load it?')						expandMacros) 					ifTrue: 						[Notice 							show: (#LoadingParcelN1S &lt;&lt; #dialogs &gt;&gt; 'Loading Parcel&lt;n&gt;&lt;1s&gt;' expandMacrosWith: 'VWHelp')							while: [Parcel ensureLoadedParcel: 'VWHelp' withVersion: ''].						classReference ifDefinedDo: openBlock]]</body><body package="Browser-BaseUI" selector="helpTopic">helpTopic	^'System Browser'</body><body package="Browser-BaseUI" selector="iconsHelp">iconsHelp	self help: 'Browser Icons'</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel class</class-id> <category>menus</category><body package="Browser-BaseUI" selector="addMenu:named:">addMenu: aMenu named: aString 	self menus at: aString put: aMenu</body><body package="Browser-BaseUI" selector="flushMenus">flushMenus	self == BrowserApplicationModel 		ifTrue: [self allSubclasses do: [:each | each flushMenus]].	menus := nil</body><body package="Browser-BaseUI" selector="initializeMenus">initializeMenus	self withAllSubclasses do: [:each | each loadMenus]</body><body package="Browser-BaseUI" selector="loadMenus">loadMenus	menus := Dictionary new.	self class selectors do: 			[:each | 			| method |			method := self class compiledMethodAt: each.			method resourceType = #menu 				ifTrue: 					[self addMenu: (self perform: each) named: (self menuNameForSelector: each)]].	self changed: #menus</body><body package="Browser-BaseUI" selector="menuNamed:">menuNamed: aString 	| menu menuName |	menuName := aString isSymbol 				ifTrue: [self menuNameForSelector: aString]				ifFalse: [(aString respondsTo: #defaultString)					ifTrue: [aString defaultString]					ifFalse: [aString]].	menu := self menus at: menuName ifAbsent: [^superclass menuNamed: menuName].	^menu</body><body package="Browser-BaseUI" selector="menuNameForSelector:">menuNameForSelector: aSymbol 	| stream |	stream := WriteStream on: String new.	aSymbol do: 			[:each | 			stream position = 0 				ifTrue: [stream nextPut: each asUppercase]				ifFalse: 					[each isUppercase 						ifTrue: 							[stream								nextPut: $ ;								nextPut: each]						ifFalse: [stream nextPut: each]]].	^stream contents</body><body package="Browser-BaseUI" selector="menus">menus	menus isNil ifTrue: [self loadMenus].	^menus</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel class</class-id> <category>class initialization</category><body package="Browser-BaseUI" selector="initialize">initialize	self flushMenus</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel class</class-id> <category>store</category><body package="Browser-BaseUI" selector="isStoreLoaded">isStoreLoaded	^#{Store.DbRegistry} isDefined</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.NavigatorPart</class-id> <category>changing</category><body package="Browser-BaseUI" selector="changed">changed	self 		showWaitCursorWhile: [self changed: #navigatorState with: navigator getState]</body><body package="Browser-BaseUI" selector="changed:with:">changed: anAspectSymbol with: aParameter 	self dependents isEmpty ifTrue: [^navigator changedPart: self].	^super changed: anAspectSymbol with: aParameter</body><body package="Browser-BaseUI" selector="changeRequest">changeRequest	^navigator changeRequest</body></methods><methods><class-id>Refactory.Browser.NavigatorPart</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="dispatcher">dispatcher	^self navigator dispatcher</body><body package="Browser-BaseUI" selector="navigator">navigator	^navigator</body></methods><methods><class-id>Refactory.Browser.NavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="allProtocolsIn:">allProtocolsIn: aNavigatorState 	| protocols class |	class := aNavigatorState selectedClass.	(class notNil and: 			[aNavigatorState objectNames size = 1 and: 					[aNavigatorState categories notEmpty 						or: [aNavigatorState parcels notEmpty or: [aNavigatorState pundles notEmpty]]]]) 		ifTrue: 			[protocols := Set new.			self inheritedClassesOf: class				do: 					[:each | 					protocols addAll: each organization categories	"Was self environment protocolsFor: each"]]		ifFalse: [protocols := #()].	^protocols</body><body package="Browser-BaseUI" selector="allSharedVariableProtocolsIn:">allSharedVariableProtocolsIn: aNavigatorState 	| protocols class |	class := aNavigatorState classOrNameSpace.	(class notNil and: 			[aNavigatorState objectNames size = 1 and: 					[aNavigatorState categories notEmpty 						or: [aNavigatorState parcels notEmpty or: [aNavigatorState pundles notEmpty]]]]) 		ifTrue: 			[protocols := Set new.			self inheritedClassesOf: class				do: [:each | protocols addAll: (self environment sharedVariableProtocolsFor: each)]]		ifFalse: [protocols := #()].	^protocols</body><body package="Browser-BaseUI" selector="codeToolHasChanges">codeToolHasChanges	| browser |	browser := self navigator dispatcher browser.	browser isNil ifTrue: [^false].	^browser currentTool isEditing</body><body package="Browser-BaseUI" selector="environment">environment	^navigator environment</body><body package="Browser-BaseUI" selector="inheritedClassesOf:do:">inheritedClassesOf: aClass do: aBlock 	| currentClass inheritToClass |	aClass isBehavior ifFalse: [^aBlock value: aClass].	currentClass := aClass.	inheritToClass := navigator inheritToClass.	inheritToClass isNil 		ifFalse: [inheritToClass := inheritToClass superclass].	[currentClass isNil or: [inheritToClass == currentClass]] whileFalse: 			[aBlock value: currentClass.			currentClass := currentClass superclass]</body></methods><methods><class-id>Refactory.Browser.NavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState	self subclassResponsibility</body><body package="Browser-BaseUI" selector="initiallyOpened:">initiallyOpened: aNavigatorState	^self selectState: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.NavigatorPart</class-id> <category>private-selectors</category><body package="Browser-BaseUI" selector="allMethodDefinitionsFor:in:">allMethodDefinitionsFor: aProtocol in: class 	| selectors |	selectors := OrderedCollection new.	self inheritedClassesOf: class		do: 			[:each | 			selectors 				addAll: ((navigator environment selectorsFor: aProtocol in: each) collect: 							[:sel | 							RBMethodDefinition 								class: class								implementor: each								selector: sel])].	^selectors</body><body package="Browser-BaseUI" selector="allSelectorsFor:in:">allSelectorsFor: aProtocol in: class 	| selectors |	selectors := Set new.	self inheritedClassesOf: class		do: 			[:each | 			selectors addAll: (navigator environment selectorsFor: aProtocol in: each)].	^selectors</body><body package="Browser-BaseUI" selector="allSharedVariableDefinitionsFor:in:">allSharedVariableDefinitionsFor: aProtocol in: class 	| sharedVariables |	sharedVariables := OrderedCollection new.	self inheritedClassesOf: class		do: 			[:each | 			sharedVariables 				addAll: ((self environment sharedVariablesFor: aProtocol in: each) 						collect: [:var | RBInitializerDefinition nameSpace: each key: var])].	^sharedVariables</body><body package="Browser-BaseUI" selector="allSharedVariablesFor:in:">allSharedVariablesFor: aProtocol in: class 	| sharedVariables |	sharedVariables := Set new.	self inheritedClassesOf: class		do: 			[:each | 			sharedVariables 				addAll: (self environment sharedVariablesFor: aProtocol in: each)].	^sharedVariables</body><body package="Browser-BaseUI" selector="methodClassFor:in:">methodClassFor: aSelector in: aClass 	| definingClass |	definingClass := aClass whichClassIncludesSelector: aSelector.	^definingClass isNil ifTrue: [aClass] ifFalse: [definingClass]</body><body package="Browser-BaseUI" selector="methodDefinitionsIn:">methodDefinitionsIn: aProtocol 	| class defs parcels pundles |	class := navigator selectedClass.	class isNil ifTrue: [^#()].	defs := self allMethodDefinitionsFor: aProtocol in: class.	defs isEmpty ifTrue: [^#()].	navigator showOnlyFiltered not | navigator category notNil ifTrue: [^defs].	(parcels := navigator parcels) notEmpty 		ifTrue: 			[^defs select: 					[:each | 					parcels anySatisfy: 							[:parcel | 							parcel definesSelector: each selector forClass: each implementingClass]]].	pundles := navigator pundles.	^defs select: 			[:each | 			pundles anySatisfy: 					[:pundle | 					pundle 						includesSelector: each selector						className: each implementingClass instanceBehavior absoluteName						meta: each implementingClass isMeta]]</body><body package="Browser-BaseUI" selector="sharedVariableClassFor:in:">sharedVariableClassFor: aSelector in: aClass 	| definingClass |	aClass isBehavior ifFalse: [^aClass].	definingClass := aClass whichClassDefinesSharedVariable: aSelector.	^definingClass isNil ifTrue: [aClass] ifFalse: [definingClass]</body><body package="Browser-BaseUI" selector="sharedVariableDefinitionsIn:">sharedVariableDefinitionsIn: aProtocol 	| vars class codeComponents |	class := navigator classOrNameSpace.	vars := #().	class notNil 		ifTrue: [vars := self allSharedVariableDefinitionsFor: aProtocol in: class].	vars isEmpty ifTrue: [^#()].	navigator showOnlyFiltered not | navigator category notNil ifTrue: [^vars].	codeComponents := OrderedCollection withAll: navigator parcels.	codeComponents addAll: navigator packages.	^vars select: 			[:var | 			codeComponents 				anySatisfy: [:each | each definesName: var variableName in: var classOrNameSpace]]</body><body package="Browser-BaseUI" selector="sharedVariablesIn:">sharedVariablesIn: aProtocol 	| vars class codeComponents |	class := navigator classOrNameSpace.	vars := #().	class notNil 		ifTrue: [vars := self allSharedVariablesFor: aProtocol in: class].	vars isEmpty ifTrue: [^#()].	navigator showOnlyFiltered not | navigator category notNil ifTrue: [^vars].	codeComponents := OrderedCollection withAll: navigator parcels.	codeComponents addAll: navigator packages.	^vars select: 			[:var | 			| definingClass |			definingClass := self sharedVariableClassFor: var in: class.			codeComponents 				anySatisfy: [:each | each definesName: var in: definingClass]]</body></methods><methods><class-id>Refactory.Browser.NavigatorPart</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="navigator:">navigator: aNavigator 	navigator := aNavigator</body></methods><methods><class-id>Refactory.Browser.NavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState	self subclassResponsibility</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState	self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.NavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="update:with:from:">update: anAspectSymbol with: aParameter from: aSender 	anAspectSymbol == #navigatorState 		ifFalse: 			[^super 				update: anAspectSymbol				with: aParameter				from: aSender].	self updateWithState: aParameter.	self changed: anAspectSymbol with: aParameter</body></methods><methods><class-id>Refactory.Browser.NavigatorPart</class-id> <category>error handling</category><body package="Browser-BaseUI" selector="doesNotUnderstand:">doesNotUnderstand: aMessage 	^(navigator respondsTo: aMessage selector) 		ifTrue: 			[navigator perform: aMessage selector withArguments: aMessage arguments]		ifFalse: [super doesNotUnderstand: aMessage]</body></methods><methods><class-id>Refactory.Browser.NavigatorPart class</class-id> <category>instance creation</category><body package="Browser-BaseUI" selector="onNavigator:">onNavigator: aNavigator 	^(self new)		navigator: aNavigator;		yourself</body></methods><methods><class-id>Refactory.Browser.NavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BaseUI" selector="canAcceptDropFrom:">canAcceptDropFrom: aDC 	^false</body><body package="Browser-BaseUI" selector="doDrag:">doDrag: aDC</body><body package="Browser-BaseUI" selector="doDragAndDrop:for:">doDragAndDrop: aSymbol for: aController 	| data class |	data := DragDropData new.	data key: aSymbol.	data contextWindow: self builder window.	data contextWidget: aController view.	data contextApplication: self.	data clientData: IdentityDictionary new.	data clientData at: #navigatorState put: navigator getState.	data clientData at: #environment put: navigator nameSpace.	data clientData at: #selector put: navigator selectors.	class := navigator selectedClass.	data clientData at: #class		put: (class isNil ifTrue: [nil] ifFalse: [class]).	data clientData at: #protocol put: navigator protocol.	data clientData at: #meta put: navigator isMeta.	data clientData at: #category put: navigator category.	(DragDropManager withDropSource: DropSource new withData: data) doDragDrop</body><body package="Browser-BaseUI" selector="dragEnter:">dragEnter: aDragContext 	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	aDragContext dropTarget 		clientData: (self initialDropStateFor: #objectList).	^#dropEffectMove</body><body package="Browser-BaseUI" selector="dragLeave:">dragLeave: aDragContext 	self restoreListStateFrom: aDragContext dropTarget clientData.	aDragContext dropTarget clientData: nil.	^#dropEffectNone</body><body package="Browser-BaseUI" selector="dragOver:">dragOver: aDC 	^#dropEffectNone</body><body package="Browser-BaseUI" selector="drop:">drop: aDC 	^#dropEffectNone</body><body package="Browser-BaseUI" selector="dropAllDefinitionsFrom:">dropAllDefinitionsFrom: aDictionary 	^(self dropStateFrom: aDictionary) allDefinitions</body><body package="Browser-BaseUI" selector="dropCategoriesFrom:">dropCategoriesFrom: aDictionary 	^(self dropStateFrom: aDictionary) categories</body><body package="Browser-BaseUI" selector="dropClassFrom:">dropClassFrom: aDictionary 	^(self dropStateFrom: aDictionary) selectedClass</body><body package="Browser-BaseUI" selector="dropClassNameFrom:">dropClassNameFrom: aDictionary 	^(self dropStateFrom: aDictionary) objectName</body><body package="Browser-BaseUI" selector="dropClassNamesFrom:">dropClassNamesFrom: aDictionary 	^(self dropStateFrom: aDictionary) objectNames</body><body package="Browser-BaseUI" selector="dropClassOrNameSpaceFrom:">dropClassOrNameSpaceFrom: aDictionary 	^(self dropStateFrom: aDictionary) classOrNameSpace</body><body package="Browser-BaseUI" selector="dropDefinitionsFrom:">dropDefinitionsFrom: aDictionary 	^(self dropStateFrom: aDictionary) definitions</body><body package="Browser-BaseUI" selector="dropMetaFrom:">dropMetaFrom: aDictionary 	^(self dropStateFrom: aDictionary) isMeta</body><body package="Browser-BaseUI" selector="dropNameSpaceFrom:">dropNameSpaceFrom: aDictionary 	^(self dropStateFrom: aDictionary) nameSpace</body><body package="Browser-BaseUI" selector="dropProtocolFrom:">dropProtocolFrom: aDictionary 	^(self dropStateFrom: aDictionary) protocol</body><body package="Browser-BaseUI" selector="dropProtocolsFrom:">dropProtocolsFrom: aDictionary 	^(self dropStateFrom: aDictionary) protocols</body><body package="Browser-BaseUI" selector="dropSelectorsFrom:">dropSelectorsFrom: aDictionary 	^(self dropStateFrom: aDictionary) selectors</body><body package="Browser-BaseUI" selector="dropSharedVariableNamesFrom:">dropSharedVariableNamesFrom: aDictionary 	^(self dropStateFrom: aDictionary) sharedVariableNames</body><body package="Browser-BaseUI" selector="dropStateFrom:">dropStateFrom: aDictionary 	| state |	state := aDictionary at: #navigatorState ifAbsent: [nil].	state isNil 		ifTrue: 			[state := NavigatorState new.			state				nameSpace: (aDictionary at: #environment ifAbsent: [Smalltalk]);				category: (aDictionary at: #category ifAbsent: [nil]);				objectName: (aDictionary at: #class ifAbsent: [nil]);				type: ((aDictionary at: #meta ifAbsent: [false]) 							ifTrue: [#class]							ifFalse: [#instance]);				protocol: (aDictionary at: #protocol ifAbsent: [nil]);				selector: (aDictionary at: #selector ifAbsent: [nil])].	^state</body><body package="Browser-BaseUI" selector="wantToDrag:">wantToDrag: aDC	^false</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="visualBlock:">visualBlock: aBlock 	visualBlock := aBlock.	self updateVisualBlock</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart</class-id> <category>actions</category><body package="Browser-BaseUI" selector="doubleClickItem">doubleClickItem</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart</class-id> <category>interface opening</category><body package="Browser-BaseUI" selector="changeMultiSelectionList:">changeMultiSelectionList: aSymbol 	| specWrapper |	specWrapper := builder componentAt: aSymbol.	specWrapper isNil ifTrue: [^self].	specWrapper widget changeClassTo: RBMultiSelectionView</body><body package="Browser-BaseUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self changeMultiSelectionList: #objectList.	self updateVisualBlock</body><body package="Browser-BaseUI" selector="updateVisualBlock">updateVisualBlock	visualBlock isNil ifTrue: [^self].	self visualBlockFor: #objectList		is: 			[:view :index | 			visualBlock 				value: self				value: view				value: index]</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="addToList:">addToList: anObject 	| index |	index := (1 to: self objectList list size) detect: 					[:i | 					anObject = (self objectList list at: i) 						or: [self sortBlock value: anObject value: (self list at: i)]]				ifNone: [^self list add: anObject].	anObject = (self objectList list at: index) ifTrue: [^self].	self objectList list add: anObject beforeIndex: index</body><body package="Browser-BaseUI" selector="displayTextFor:">displayTextFor: anObject 	^anObject displayString</body><body package="Browser-BaseUI" selector="iconFor:">iconFor: anObject 	^nil</body><body package="Browser-BaseUI" selector="list">list	^self objectList list</body><body package="Browser-BaseUI" selector="list:">list: aList 	^self objectList list: aList</body><body package="Browser-BaseUI" selector="listLabelFor:">listLabelFor: anObject 	| text label icon |	text := self displayTextFor: anObject.	icon := self class showIcons 				ifTrue: [self iconFor: anObject]				ifFalse: [nil].	label := (icon notNil ifTrue: [LabelAndIcon] ifFalse: [Label]) with: text.	label icon: icon.	label offset: (self offsetFor: anObject andIcon: icon).	^label</body><body package="Browser-BaseUI" selector="mergeIntoList:">mergeIntoList: newList 	| newIndex oldIndex new old removeSize |	newIndex := 1.	oldIndex := 1.	[newIndex &lt;= newList size] whileTrue: 			[new := newList at: newIndex.			oldIndex &lt;= self objectList list size 				ifTrue: 					[old := self objectList list at: oldIndex.					new = old 						ifTrue: 							[newIndex := newIndex + 1.							oldIndex := oldIndex + 1]						ifFalse: 							[(self sortBlock value: new value: old) 								ifTrue: [self objectList list add: new beforeIndex: oldIndex]								ifFalse: [self objectList list removeAtIndex: oldIndex]]]				ifFalse: 					[| appendedItems |					appendedItems := newList copyFrom: newIndex to: newList size.					appendedItems notEmpty 						ifTrue: [self objectList list addAll: appendedItems].					^self]].	removeSize := self objectList list size - oldIndex + 1.	removeSize &lt; 1 ifTrue: [^self].	self objectList list removeLast: removeSize</body><body package="Browser-BaseUI" selector="noIconOffset">noIconOffset	^21 @ 0</body><body package="Browser-BaseUI" selector="offsetFor:andIcon:">offsetFor: anObject andIcon: anIcon 	^self class showIcons &amp; anIcon isNil 		ifTrue: [self noIconOffset]		ifFalse: [0 @ 0]</body><body package="Browser-BaseUI" selector="overriddenColor">overriddenColor	^ColorValue red</body><body package="Browser-BaseUI" selector="select:">select: aCollection 	self select: aCollection in: self objectList</body><body package="Browser-BaseUI" selector="select:in:">select: aCollection in: aSelectionInList 	| selections |	aSelectionInList selections = aCollection ifTrue: [^self].	selections := aCollection 				select: [:each | aSelectionInList list includes: each].	aSelectionInList selections: selections</body><body package="Browser-BaseUI" selector="selection">selection	^self selections detect: [:each | true] ifNone: [nil]</body><body package="Browser-BaseUI" selector="selections">selections	^self objectList selections</body><body package="Browser-BaseUI" selector="sortBlock">sortBlock	"Return a sort block that defines a total order on our elements."	^[:a :b | a &lt; b]</body><body package="Browser-BaseUI" selector="sortList:">sortList: aCollection 	^(aCollection asSortedCollection: self sortBlock) asList</body><body package="Browser-BaseUI" selector="updateListWith:">updateListWith: aCollection 	"self list = aCollection ifTrue: [^self invalidateComponent: #objectList]."	(self objectList list isEmpty and: [aCollection isEmpty]) ifTrue: [^self].	self list: (self sortList: aCollection)</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart</class-id> <category>menus</category><body package="Browser-BaseUI" selector="defaultMenu">defaultMenu	^self subclassResponsibility</body><body package="Browser-BaseUI" selector="menu">menu	menu isNil ifTrue: [menu := self defaultMenu].	^menu</body><body package="Browser-BaseUI" selector="menu:">menu: aMenu 	menu := aMenu.	self setMenuOf: #objectList to: aMenu</body><body package="Browser-BaseUI" selector="rebuildMenus">rebuildMenus	menu := nil.	self setMenu: self menu for: #objectList</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart</class-id> <category>aspects</category><body package="Browser-BaseUI" selector="objectList">objectList	^objectList isNil 		ifTrue: [objectList := RBMultiSelectionInList new]		ifFalse: [objectList]</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="changeSetUpdate:with:">changeSetUpdate: anAspectSymbol with: aParameter</body><body package="Browser-BaseUI" selector="update:with:from:">update: anAspectSymbol with: aParameter from: aSender 	aSender == ChangeSet 		ifTrue: [^self changeSetUpdate: anAspectSymbol with: aParameter].	^super 		update: anAspectSymbol		with: aParameter		from: aSender</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	super initialize.	ChangeSet addDependent: self</body><body package="Browser-BaseUI" selector="release">release	ChangeSet removeDependent: self.	super release</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="defaultVisualBlock">defaultVisualBlock	defaultVisualBlock isNil ifTrue: [self initializeDefaultVisualBlock].	^defaultVisualBlock isNil 		ifTrue: 			[self = ListNavigatorPart ifTrue: [nil] ifFalse: [superclass defaultVisualBlock]]		ifFalse: [defaultVisualBlock]</body><body package="Browser-BaseUI" selector="defaultVisualBlock:">defaultVisualBlock: aBlock 	"self withAllSubclasses do: [:each | each defaultVisualBlock: nil]"	defaultVisualBlock := aBlock</body><body package="Browser-BaseUI" selector="initializeDefaultVisualBlock">initializeDefaultVisualBlock	self defaultVisualBlock: 			[:np :view :index | 			| definition label |			definition := view sequence at: index.			label := np listLabelFor: definition.			label attributes: view textStyle.			label]</body><body package="Browser-BaseUI" selector="showHorizontalScrollbar">showHorizontalScrollbar	^ShowHorizontalScrollbar</body><body package="Browser-BaseUI" selector="showHorizontalScrollbar:">showHorizontalScrollbar: aBoolean 	ShowHorizontalScrollbar := aBoolean</body><body package="Browser-BaseUI" selector="showIcons">showIcons	^showIcons isNil 		ifTrue: 			[self == ListNavigatorPart ifTrue: [false] ifFalse: [superclass showIcons]]		ifFalse: [showIcons]</body><body package="Browser-BaseUI" selector="showIcons:">showIcons: aBoolean 	showIcons := aBoolean</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart class</class-id> <category>instance creation</category><body package="Browser-BaseUI" selector="new">new	^(super new)		visualBlock: self defaultVisualBlock;		yourself</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="windowSpec">windowSpec	"Some very hackish code that adds the horizontal scrollbar to the list. 	If you know of a better way to do this, please feel free to clean it up :)."	| spec allSpecs index listSpec flagsIndex |	ShowHorizontalScrollbar ifFalse: [^self basicWindowSpec].	spec := self basicWindowSpec copy.	spec at: spec size put: spec last copy.	allSpecs := spec last last copy.	index := (1 to: allSpecs size) 				detect: [:each | (allSpecs at: each) includes: #objectList]				ifNone: [nil].	index isNil ifTrue: [^spec].	listSpec := allSpecs at: index.	flagsIndex := listSpec indexOf: #flags:.	flagsIndex odd 		ifTrue: 			[listSpec at: flagsIndex + 1 put: ((listSpec at: flagsIndex + 1) bitOr: 2)]		ifFalse: [allSpecs at: index put: (allSpecs at: index) , #(#flags: 15)].	spec last at: spec last size put: allSpecs.	^spec</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="selectionForState:">selectionForState: aNavigatorState 	"In case we want to store the previous tab selection"	^nil</body><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	self selectTabListWith: aNavigatorState.	self selectStateForComponents: aNavigatorState</body><body package="Browser-BaseUI" selector="selectStateForComponents:">selectStateForComponents: aNavigatorState 	self components do: [:each | each selectState: aNavigatorState]</body><body package="Browser-BaseUI" selector="selectTabListWith:">selectTabListWith: aNavigatorState 	| tabs previousSelection possibleSelections newSelection |	previousSelection := self selection.	tabs := self class tabDescriptions 				select: [:each | each isEnabledIn: aNavigatorState for: self].	self list: tabs asList.	possibleSelections := tabs 				select: [:each | each matches: aNavigatorState for: self].	newSelection := self selectionForState: aNavigatorState.	(possibleSelections includes: newSelection) 		ifFalse: 			[newSelection := (possibleSelections includes: previousSelection) 						ifTrue: [previousSelection]						ifFalse: 							[possibleSelections isEmpty 								ifTrue: [nil]								ifFalse: [possibleSelections first]]].	self select: newSelection.	newSelection ~= previousSelection ifTrue: [self installSubcanvas]</body><body package="Browser-BaseUI" selector="updateComponentsWithState:">updateComponentsWithState: aNavigatorState 	self components do: [:each | each updateWithState: aNavigatorState]</body><body package="Browser-BaseUI" selector="updateTabListWith:">updateTabListWith: aNavigatorState 	| tabs previousSelection |	previousSelection := self objectList selection.	tabs := (self class tabDescriptions 				select: [:each | each isEnabledIn: aNavigatorState for: self]) asList.	self list: tabs asList.	(tabs includes: previousSelection) 		ifTrue: [self objectList selection: previousSelection]		ifFalse: 			[self objectList 				selection: (tabs isEmpty ifTrue: [nil] ifFalse: [tabs first]).			self installSubcanvas]</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	self updateTabListWith: aNavigatorState.	self updateComponentsWithState: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart</class-id> <category>testing</category><body package="Browser-BaseUI" selector="alwaysEnabled:">alwaysEnabled: aNavigatorState	^true</body><body package="Browser-BaseUI" selector="hasNameSpace:">hasNameSpace: aNavigatorState 	| classes |	classes := aNavigatorState classesAndNameSpaces.	^classes anySatisfy: [:each | each isNameSpace]</body><body package="Browser-BaseUI" selector="isCategory:">isCategory: aNavigatorState 	^navigator isViewingCategories</body><body package="Browser-BaseUI" selector="isPackage:">isPackage: aNavigatorState 	^navigator isViewingPackages</body><body package="Browser-BaseUI" selector="isParcel:">isParcel: aNavigatorState 	^navigator isViewingParcels</body><body package="Browser-BaseUI" selector="onlyClasses:">onlyClasses: aNavigatorState 	| classes |	classes := aNavigatorState classesAndNameSpaces.	^classes notEmpty and: [classes allSatisfy: [:each | each isBehavior]]</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart</class-id> <category>aspects</category><body package="Browser-BaseUI" selector="objectList">objectList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^objectList isNil 		ifTrue: [objectList := SelectionInList new]		ifFalse: [objectList]</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="componentNamed:">componentNamed: aSymbol 	^(namedComponents detect: [:each | each key = aSymbol] ifNone: [nil]) 		value</body><body package="Browser-BaseUI" selector="componentNamed:put:">componentNamed: aSymbol put: aValue 	namedComponents add: aSymbol -&gt; aValue</body><body package="Browser-BaseUI" selector="components">components	^namedComponents collect: [:each | each value]</body><body package="Browser-BaseUI" selector="initializeComponents">initializeComponents	namedComponents notNil ifTrue: [self releaseComponents].	namedComponents := OrderedCollection new</body><body package="Browser-BaseUI" selector="installSubcanvas">installSubcanvas	| tab |	tab := self selection.	tab isNil ifTrue: [^self].	tab buildIn: self</body><body package="Browser-BaseUI" selector="installSubcanvas:using:">installSubcanvas: aSpec using: anApplicationModel 	self initializeComponents.	(builder componentAt: #subcanvas) widget client: anApplicationModel spec: aSpec.	(anApplicationModel ~~ self 		and: [anApplicationModel respondsTo: #updateDisplay]) 			ifTrue: [anApplicationModel updateDisplay].	self components reverse inject: self		into: 			[:sum :each | 			each				addDependent: sum;				yourself]</body><body package="Browser-BaseUI" selector="list">list	^self objectList list</body><body package="Browser-BaseUI" selector="list:">list: aList 	self list = aList ifTrue: [^self].	^self objectList list: aList</body><body package="Browser-BaseUI" selector="releaseComponents">releaseComponents	self components do: [:each | each release]</body><body package="Browser-BaseUI" selector="select:">select: anObject 	self selection = anObject ifTrue: [^self].	^self objectList selection: anObject</body><body package="Browser-BaseUI" selector="selection">selection	^self objectList selection</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="update:with:from:">update: anAspectSymbol with: aParameter from: aSender 	(aSender == self components last and: [anAspectSymbol == #navigatorState]) 		ifTrue: [^self changed: #navigatorState with: aParameter].	^super 		update: anAspectSymbol		with: aParameter		from: aSender</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	super initialize.	self initializeComponents</body><body package="Browser-BaseUI" selector="navigator:">navigator: aNavigator 	super navigator: aNavigator.	self components do: [:each | each navigator: aNavigator]</body><body package="Browser-BaseUI" selector="release">release	self releaseComponents.	super release</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart</class-id> <category>changing</category><body package="Browser-BaseUI" selector="changedTab">changedTab	self showWaitCursorWhile: [self installSubcanvas]</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart</class-id> <category>subcanvases</category><body package="Browser-BaseUI" selector="subcanvases">subcanvases	^self components , super subcanvases</body><body package="Browser-BaseUI" selector="updateDisplay">updateDisplay	subcanvasBuilder isNil ifTrue: [self installSubcanvas].	super updateDisplay</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	self components do: [:each | each fillInState: aNavigatorState]</body><body package="Browser-BaseUI" selector="initiallyOpened:">initiallyOpened: aNavigatorState 	self selectTabListWith: aNavigatorState.	self components do: [:each | each initiallyOpened: aNavigatorState]</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart</class-id> <category>interface opening</category><body package="Browser-BaseUI" selector="postBuildWith:">postBuildWith: aBuilder 	builder == aBuilder ifFalse: [subcanvasBuilder := aBuilder].	super postBuildWith: aBuilder</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="defaultTabDescriptions">defaultTabDescriptions	^self subclassResponsibility</body><body package="Browser-BaseUI" selector="resetTabDescriptions">resetTabDescriptions	"TabNavigatorPart resetTabDescriptions"	tabDescriptions := nil.	self subclasses do: [:each | each resetTabDescriptions]</body><body package="Browser-BaseUI" selector="tabDescriptions">tabDescriptions	tabDescriptions isNil 		ifTrue: [tabDescriptions := self defaultTabDescriptions].	^tabDescriptions</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.ConstantNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	self fillInState: aNavigatorState</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState	self fillInState: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.ConstantNavigatorPart</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="stateBlock:">stateBlock: aBlockClosure	stateBlock := aBlockClosure</body></methods><methods><class-id>Refactory.Browser.ConstantNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState	stateBlock value: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.ConstantNavigatorPart class</class-id> <category>instance creation</category><body package="Browser-BaseUI" selector="onNavigator:stateBlock:">onNavigator: aNavigator stateBlock: aBlockClosure 	^(self onNavigator: aNavigator)		stateBlock: aBlockClosure;		yourself</body></methods><methods><class-id>Refactory.Browser.ConstantNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	super initialize.	listSelector := #fillInListFor:</body><body package="Browser-BaseUI" selector="listSelector:">listSelector: aSymbol 	listSelector := aSymbol.	self protocolHolder	"Initialize the protocolHolder"</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart</class-id> <category>changing</category><body package="Browser-BaseUI" selector="changed">changed	self fillInProtocolForSelection.	super changed</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="displayTextFor:">displayTextFor: aMethodDefinition 	| text |	text := aMethodDefinition simpleDisplayText.	aMethodDefinition isOverridden 		ifTrue: [text emphasizeAllWith: (Array with: #color -&gt; self overriddenColor)].	^text</body><body package="Browser-BaseUI" selector="fillInListWith:">fillInListWith: aNavigatorState 	| newList |	self flushCache.	newList := self perform: listSelector with: aNavigatorState.	self list == newList ifFalse: [self updateListWith: newList]</body><body package="Browser-BaseUI" selector="fillInProtocolForSelection">fillInProtocolForSelection	| protocols firstProtocol |	protocolHolder isNil ifTrue: [^self].	protocols := self protocolsForSelection.	firstProtocol := protocols detect: [:each | true] ifNone: [nil].	self protocolHolder value: firstProtocol</body><body package="Browser-BaseUI" selector="flushCache">flushCache	overriddenCache := nil</body><body package="Browser-BaseUI" selector="iconFor:">iconFor: aMethodDefinition 	| method icon isOverridden |	aMethodDefinition isForSharedVariable 		ifTrue: [^ListIconLibrary visualFor: #variable ifAbsent: [nil]].	method := aMethodDefinition method.	method isNil ifTrue: [^nil].	method resourceType notNil 		ifTrue: [icon := ListIconLibrary visualFor: method resourceType ifAbsent: []].	icon notNil ifTrue: [^icon].	isOverridden := self isMethodOverridden: aMethodDefinition.	(self isOverridingMethod: aMethodDefinition) 		ifTrue: 			[^isOverridden 				ifTrue: [ListIconLibrary visualFor: #upDownArrow]				ifFalse: [ListIconLibrary visualFor: #upArrow]]		ifFalse: [isOverridden ifTrue: [^ListIconLibrary visualFor: #downArrow]].	^nil</body><body package="Browser-BaseUI" selector="isMethodOverridden:">isMethodOverridden: aMethodDefinition 	^(self overriddenCacheFor: aMethodDefinition implementingClass) 		includes: aMethodDefinition selector</body><body package="Browser-BaseUI" selector="isOverridingMethod:">isOverridingMethod: aMethodDefinition 	aMethodDefinition implementingClass superclass isNil ifTrue: [^false].	^aMethodDefinition implementingClass superclass 		canUnderstand: aMethodDefinition selector</body><body package="Browser-BaseUI" selector="overriddenCacheFor:">overriddenCacheFor: aClass 	overriddenCache isNil ifTrue: [overriddenCache := Dictionary new].	^overriddenCache at: aClass		ifAbsentPut: 			[| set |			set := Set new.			aClass allSubclassesDo: [:each | set addAll: each selectors].			set]</body><body package="Browser-BaseUI" selector="protocolsForSelection">protocolsForSelection	^(self selections collect: [:each | each protocol]) asSet asArray</body><body package="Browser-BaseUI" selector="select:in:">select: aCollection in: aSelectionInList 	super select: aCollection in: aSelectionInList.	self fillInProtocolForSelection</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart</class-id> <category>aspects</category><body package="Browser-BaseUI" selector="protocolHolder">protocolHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^protocolHolder isNil		ifTrue:			[protocolHolder := String new asValue]		ifFalse:			[protocolHolder]</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart</class-id> <category>menus</category><body package="Browser-BaseUI" selector="defaultMenu">defaultMenu	^navigator menuNamed: #selectorMenu</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	| initialSelections |	initialSelections := self selections.	self fillInListWith: aNavigatorState.	self select: initialSelections</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	(aNavigatorState protocols isEmpty and: [protocolHolder notNil]) 		ifTrue: [aNavigatorState protocol: self protocolHolder value].	aNavigatorState allDefinitions: self list asArray.	aNavigatorState definitions: self selections</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="addItemChange">addItemChange	self mergeIntoList: ((self perform: listSelector with: navigator state) 				asSortedCollection: self sortBlock)</body><body package="Browser-BaseUI" selector="changeSetUpdate:with:">changeSetUpdate: anAspectSymbol with: aParameter 	self flushCache.	anAspectSymbol == #removeSelector:class: 		ifTrue: [self removeMethodChange: aParameter].	(#(#removeBinding:in: #relocateBinding:from:to:) includes: anAspectSymbol) 		ifTrue: [self removeBindingChange: aParameter].	(#(#addBinding:in: #addBinding:in:attributes: #addSelector:class: #addSelector:class:attributes:) 		includes: anAspectSymbol) ifTrue: [self addItemChange]</body><body package="Browser-BaseUI" selector="removeBindingChange:">removeBindingChange: aParameter 	self list removeAllSuchThat: 			[:each | 			each isForSharedVariable and: 					[each classOrNameSpace == (aParameter at: 2) 						and: [each variableName == (aParameter at: 1) key]]]</body><body package="Browser-BaseUI" selector="removeMethodChange:">removeMethodChange: aParameter 	self list removeAllSuchThat: 			[:each | 			each isForSharedVariable not and: 					[each implementingClass == (aParameter at: 2) 						and: [each selector == (aParameter at: 1)]]]</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="showAllItemsWhenNothingSelected">showAllItemsWhenNothingSelected	^ShowAllItemsWhenNothingSelected</body><body package="Browser-BaseUI" selector="showAllItemsWhenNothingSelected:">showAllItemsWhenNothingSelected: aBoolean 	ShowAllItemsWhenNothingSelected := aBoolean</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart class</class-id> <category>class initialization</category><body package="Browser-BaseUI" selector="initialize">initialize	self showIcons: true</body></methods><methods><class-id>Refactory.Browser.HierarchyPundleNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="addBindingPackages:to:">addBindingPackages: aNavigatorState to: pundles 	aNavigatorState classesAndNameSpaces do: 			[:each | 			self addPackagesIfAbsent: (self storeRegistry packagesContaining: each)				to: pundles]</body><body package="Browser-BaseUI" selector="addPackagesIfAbsent:to:">addPackagesIfAbsent: packages to: pundles 	| allPundles |	allPundles := OrderedCollection new.	pundles do: 			[:each | 			allPundles				addAll: each allContainedItems;				add: each].	(packages anySatisfy: [:each | allPundles includes: each]) ifTrue: [^self].	pundles addAll: packages</body><body package="Browser-BaseUI" selector="addSelectorPackages:to:">addSelectorPackages: aNavigatorState to: pundles 	navigator showOnlyFiltered ifFalse: [^self].	aNavigatorState methodDefinitions do: 			[:each | 			(each implementingClass includesSelector: each selector) 				ifTrue: 					[| package |					package := self storeRegistry containingPackageForSelector: each selector								class: each implementingClass.					package notNil 						ifTrue: [self addPackagesIfAbsent: (Array with: package) to: pundles]]]</body><body package="Browser-BaseUI" selector="addSharedVariablePackages:to:">addSharedVariablePackages: aNavigatorState to: pundles 	| vars class |	navigator showOnlyFiltered ifFalse: [^self].	vars := aNavigatorState sharedVariableNames.	vars isEmpty ifTrue: [^self].	class := aNavigatorState classOrNameSpace.	class isNil ifTrue: [^self].	vars do: 			[:each | 			| packages package binding |			binding := class bindingFor: each.			binding notNil 				ifTrue: 					[package := self storeRegistry containingPackageForDataKey: each								nameSpace: class.					packages := package notNil ifTrue: [Array with: package] ifFalse: [#()].					self addPackagesIfAbsent: packages to: pundles]]</body><body package="Browser-BaseUI" selector="selectedItemsIn:">selectedItemsIn: aNavigatorState 	^aNavigatorState packages</body><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	| pundles |	self fillInListFor: aNavigatorState needsRefresh: false.	pundles := OrderedCollection 				withAll: (self selectedItemsIn: aNavigatorState).	self		addSelectorPackages: aNavigatorState to: pundles;		addSharedVariablePackages: aNavigatorState to: pundles;		addBindingPackages: aNavigatorState to: pundles.	self expandToShowPundles: pundles.	aNavigatorState pundles: pundles.	self select: pundles</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	| pundles |	pundles := self selectedItemsIn: aNavigatorState.	self fillInListFor: aNavigatorState needsRefresh: true.	pundles := pundles select: [:each | self list includes: each].	self expandToShowPundles: pundles.	(pundles isEmpty and: [self shouldSelectPackages]) 		ifTrue: [pundles := self list].	aNavigatorState pundles: pundles.	self select: pundles</body></methods><methods><class-id>Refactory.Browser.HierarchyPundleNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="allSelectedClassesFor:">allSelectedClassesFor: aNavigatorState 	| classes |	classes := Set new.	aNavigatorState selectedClasses 		do: [:each | self inheritedClassesOf: each do: [:class | classes add: class]].	^classes</body><body package="Browser-BaseUI" selector="expandToShowPundles:">expandToShowPundles: pundles 	pundles removeAllSuchThat: [:each | (self list includes: each) not]</body><body package="Browser-BaseUI" selector="fillInListFor:needsRefresh:">fillInListFor: aNavigatorState needsRefresh: aBoolean 	| packages |	packages := Set new.	(self allSelectedClassesFor: aNavigatorState) 		do: [:each | packages addAll: (self storeRegistry packagesContaining: each)].	self updateListWith: packages</body><body package="Browser-BaseUI" selector="sortBlock">sortBlock	^[:a :b | a name &lt; b name]</body></methods><methods><class-id>Refactory.Browser.HierarchyPundleNavigatorPart</class-id> <category>testing</category><body package="Browser-BaseUI" selector="shouldSelectPackages">shouldSelectPackages	^true</body></methods><methods><class-id>Refactory.Browser.HierarchyPundleNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	aNavigatorState pundles: self selections</body></methods><methods><class-id>Refactory.Browser.HierarchyPundleNavigatorPart</class-id> <category>menus</category><body package="Browser-BaseUI" selector="defaultMenu">defaultMenu	^navigator menuNamed: #pundleMenu</body></methods><methods><class-id>Refactory.Browser.HierarchyPundleNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="changeSetUpdate:with:">changeSetUpdate: anAspectSymbol with: aParameter 	anAspectSymbol == #unloadComponent: 		ifTrue: [self list remove: aParameter first ifAbsent: []]</body></methods><methods><class-id>Refactory.Browser.HierarchyPundleNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.InstanceVariableNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	| instVars |	instVars := OrderedCollection withAll: aNavigatorState instanceVariables.	self fillInListFor: aNavigatorState.	self select: instVars</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	| initialSelections |	initialSelections := self selections.	self fillInListFor: aNavigatorState.	self select: initialSelections</body></methods><methods><class-id>Refactory.Browser.InstanceVariableNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	aNavigatorState instanceVariables: self selections</body></methods><methods><class-id>Refactory.Browser.InstanceVariableNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="fillInListFor:">fillInListFor: aNavigatorState 	| class |	class := aNavigatorState selectedClass.	self 		updateListWith: (class isNil ifTrue: [#()] ifFalse: [class allInstVarNames])</body><body package="Browser-BaseUI" selector="sortBlock">sortBlock	^	[:a :b | 	| class |	class := self navigator selectedClass.	class isNil 		ifTrue: [a &lt;= b]		ifFalse: [(class instVarIndexFor: a) &lt;= (class instVarIndexFor: b)]]</body></methods><methods><class-id>Refactory.Browser.InstanceVariableNavigatorPart</class-id> <category>menus</category><body package="Browser-BaseUI" selector="defaultMenu">defaultMenu	^navigator menuNamed: #instanceVariableMenu</body></methods><methods><class-id>Refactory.Browser.InstanceVariableNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.SharedVariableNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="newSelectionsBasedOn:">newSelectionsBasedOn: oldSelections 	| newSelections |	newSelections := OrderedCollection new: oldSelections size.	oldSelections do: 			[:each | 			| new |			new := nil.			new := self list detect: [:def | def variableName = each variableName]						ifNone: [nil].			new notNil ifTrue: [newSelections add: new]].	^newSelections</body><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	self fillInListWith: aNavigatorState.	self select: aNavigatorState definitions</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	| initialSelections |	initialSelections := self selections.	self fillInListWith: aNavigatorState.	self select: (self newSelectionsBasedOn: initialSelections).	aNavigatorState definitions: self selections</body></methods><methods><class-id>Refactory.Browser.SharedVariableNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="allSharedVariablesIn:">allSharedVariablesIn: aNavigatorState 	| sharedVariables nameSpaces nameSpace |	nameSpaces := aNavigatorState classesAndNameSpaces.	nameSpaces size ~= 1 ifTrue: [^#()].	nameSpace := nameSpaces asArray first.	sharedVariables := self environment sharedVariablesForClass: nameSpace.	^sharedVariables 		collect: [:each | RBInitializerDefinition nameSpace: nameSpace key: each]</body><body package="Browser-BaseUI" selector="displayTextFor:">displayTextFor: anInitializerDefinition 	| text |	text := super displayTextFor: anInitializerDefinition.	navigator showOnlyFiltered ifTrue: [^text].	(navigator parcels , navigator packages anySatisfy: 			[:each | 			each definesName: anInitializerDefinition variableName				in: anInitializerDefinition classOrNameSpace]) 		ifTrue: 			[text 				addEmphasis: #(#bold)				removeEmphasis: #()				allowDuplicates: false].	^text</body><body package="Browser-BaseUI" selector="fillInListFor:">fillInListFor: aNavigatorState 	| protocols |	protocols := aNavigatorState protocols.	(protocols isEmpty and: [self class showAllItemsWhenNothingSelected]) 		ifTrue: [protocols := self allSharedVariableProtocolsIn: aNavigatorState].	^self sharedVariableDefinitionsFor: protocols		in: aNavigatorState classOrNameSpace</body><body package="Browser-BaseUI" selector="protocolsForSelection">protocolsForSelection	| protocols selections |	selections := self selections.	selections isEmpty ifTrue: [^#()].	protocols := OrderedCollection new.	selections do: 			[:each | 			| protocol |			protocol := self environment 						whichProtocolIncludesVariable: each variableName						in: each classOrNameSpace.			(protocol notNil and: [(protocols includes: protocol) not]) 				ifTrue: [protocols add: protocol]].	^protocols</body><body package="Browser-BaseUI" selector="sharedVariableDefinitionsFor:in:">sharedVariableDefinitionsFor: protocols in: class 	| selectors |	selectors := OrderedCollection new.	class notNil 		ifTrue: 			[protocols 				do: [:each | selectors addAll: (self sharedVariableDefinitionsIn: each)]].	^selectors</body><body package="Browser-BaseUI" selector="sortBlock">sortBlock	^	[:a :b | 	a == b or: 			[a variableName &lt; b variableName or: 					[a variableName = b variableName and: 							[a implementingClass allSuperclasses size 								&gt; b implementingClass allSuperclasses size]]]]</body></methods><methods><class-id>Refactory.Browser.SharedVariableNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.RBActionEditor</class-id> <category>actions</category><body package="Browser-BaseUI" selector="acceptAction">acceptAction	self isValidName 		ifFalse: 			[(self confirm: (#SpecExistsOverwriteQ &lt;&lt; #browser &gt;&gt; 'A specification with that name already exists. Overwrite?')) 				ifFalse: [^self]].	self saveSpec</body><body package="Browser-BaseUI" selector="addSpecification">addSpecification	self actionList selection: nil.	self changedActionSpecification</body><body package="Browser-BaseUI" selector="browseActions">browseActions	self actionHolder value isNil ifTrue: [^self].	(BrowserEnvironment new implementorsOf: self actionHolder value) 		openEditor</body><body package="Browser-BaseUI" selector="removeAction">removeAction	(self confirm: (#AreYouSure &lt;&lt; #browser &gt;&gt; 'Are you sure?')) ifFalse: [^self].	self actionList list remove: spec ifAbsent: []</body><body package="Browser-BaseUI" selector="saveActionsToFile">saveActionsToFile	| filename stream |	filename := self request: (#EnterFileName &lt;&lt; #browser &gt;&gt; 'Enter file name').	filename isEmpty ifTrue: [^self].	stream := filename asFilename writeStream.	[stream nextPutAll: '#('.	self actionsArray		do: [:s | stream store: s]		separatedBy: [stream cr].	stream nextPutAll: ')'; cr] 		ensure: [stream close]</body><body package="Browser-BaseUI" selector="saveActionsToMethod">saveActionsToMethod	| src |	src := String new writeStream.	src nextPutAll: 'actionArray'; crtab;		nextPutAll: ('"This method was automatically generated from ''&lt;1s&gt; open''"'				expandMacrosWith: self class fullName);		cr; crtab; nextPutAll: '^#('.	self actionsArray			do: [:s | src store: s]		separatedBy: [src crtab].	src nextPutAll: ')'.	self 		performChange: ((#{AddMethodChange} 				valueOrDo: [self error: 'Change objects not loaded']) 					compile: src contents					in: RBCommand class					classified: #'actions-initialization')</body></methods><methods><class-id>Refactory.Browser.RBActionEditor</class-id> <category>aspects</category><body package="Browser-BaseUI" selector="actionHolder">actionHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^actionHolder isNil		ifTrue:			[actionHolder := nil asValue]		ifFalse:			[actionHolder]</body><body package="Browser-BaseUI" selector="actionList">actionList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^actionList isNil		ifTrue:			[actionList := SelectionInList new]		ifFalse:			[actionList]</body><body package="Browser-BaseUI" selector="descriptionHolder">descriptionHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^descriptionHolder isNil		ifTrue:			[descriptionHolder := String new asValue]		ifFalse:			[descriptionHolder]</body><body package="Browser-BaseUI" selector="enabledHolder">enabledHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^enabledHolder isNil		ifTrue:			[enabledHolder := nil asValue]		ifFalse:			[enabledHolder]</body><body package="Browser-BaseUI" selector="nameHolder">nameHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^nameHolder isNil		ifTrue:			[nameHolder := String new asValue]		ifFalse:			[nameHolder]</body><body package="Browser-BaseUI" selector="receiverHolder">receiverHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^receiverHolder isNil		ifTrue:			[receiverHolder := nil asValue]		ifFalse:			[receiverHolder]</body><body package="Browser-BaseUI" selector="typeList">typeList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^typeList isNil		ifTrue:			[typeList := SelectionInList new]		ifFalse:			[typeList]</body></methods><methods><class-id>Refactory.Browser.RBActionEditor</class-id> <category>changing</category><body package="Browser-BaseUI" selector="changedAction">changedAction	self updateAcceptCancelButtons</body><body package="Browser-BaseUI" selector="changedActionSpecification">changedActionSpecification	| action |	action := self actionList selection.	action isNil ifTrue: [action := RBCommand new].	self initializeForAction: action</body><body package="Browser-BaseUI" selector="changedDescription">changedDescription	self updateAcceptCancelButtons</body><body package="Browser-BaseUI" selector="changedEnabled">changedEnabled	self updateAcceptCancelButtons</body><body package="Browser-BaseUI" selector="changedName">changedName	self updateAcceptCancelButtons</body><body package="Browser-BaseUI" selector="changedReceiver">changedReceiver	self updateAcceptCancelButtons</body><body package="Browser-BaseUI" selector="changedType">changedType	self updateAcceptCancelButtons</body></methods><methods><class-id>Refactory.Browser.RBActionEditor</class-id> <category>private</category><body package="Browser-BaseUI" selector="actionsArray">actionsArray	^(self actionList list collect: [:each | each literalArrayEncoding]) 		asArray</body><body package="Browser-BaseUI" selector="disableAccept">disableAccept	(self builder componentAt: #acceptButton) disable</body><body package="Browser-BaseUI" selector="disableCancel">disableCancel	(self builder componentAt: #cancelButton) disable</body><body package="Browser-BaseUI" selector="enableAccept">enableAccept	(self builder componentAt: #acceptButton) enable</body><body package="Browser-BaseUI" selector="enableCancel">enableCancel	(self builder componentAt: #cancelButton) enable</body><body package="Browser-BaseUI" selector="initializeForAction:">initializeForAction: aRBActionSpecification 	spec := aRBActionSpecification.	self typeList selection: aRBActionSpecification class.	self nameHolder value: aRBActionSpecification key.	self descriptionHolder value: aRBActionSpecification description.	self enabledHolder value: aRBActionSpecification enabled.	self receiverHolder value: aRBActionSpecification receiver.	self actionHolder value: aRBActionSpecification action</body><body package="Browser-BaseUI" selector="installActions">installActions	RBCommand initializeWithActions: self actionsArray</body><body package="Browser-BaseUI" selector="saveSpec">saveSpec	| index isNewName |	index := self actionList list indexOf: spec.	isNewName := self nameHolder value ~= spec name or: [index = 0].	self typeList selection ~= spec class 		ifTrue: 			[spec := self typeList selection new.			index &gt; 0 ifTrue: [self actionList list at: index put: spec]].	spec		name: self nameHolder value;		description: self descriptionHolder value asString;		action: self actionHolder value;		enabled: self enabledHolder value;		receiver: self receiverHolder value.	index = 0 ifTrue: [self actionList list add: spec].	isNewName 		ifTrue: [self actionList list sortWith: [:a :b | a name asString &lt; b name asString]].	self actionList selection: spec.	self changedActionSpecification</body><body package="Browser-BaseUI" selector="updateAcceptCancelButtons">updateAcceptCancelButtons	self hasChanged 		ifFalse: 			[^self				disableAccept;				disableCancel].	self enableCancel.	self isValidSpecification 		ifTrue: [self enableAccept]		ifFalse: [self disableAccept]</body></methods><methods><class-id>Refactory.Browser.RBActionEditor</class-id> <category>testing</category><body package="Browser-BaseUI" selector="hasActionSpecificationSelected">hasActionSpecificationSelected	^self actionList selection notNil</body><body package="Browser-BaseUI" selector="hasChanged">hasChanged	^spec name ~= self nameHolder value or: 			[spec description ~= self descriptionHolder value or: 					[spec action ~= self actionHolder value or: 							[spec enabled ~= self enabledHolder value or: 									[spec receiver ~= self receiverHolder value 										or: [spec class ~= self typeList selection]]]]]</body><body package="Browser-BaseUI" selector="isValidName">isValidName	^(self actionList list detect: [:each | each name = self nameHolder value]		ifNone: [spec]) = spec</body><body package="Browser-BaseUI" selector="isValidSpecification">isValidSpecification	^(self nameHolder value size = 0 or: 			[self actionHolder value isNil 				or: [self receiverHolder value isNil or: [self typeList selection isNil]]]) 		not</body></methods><methods><class-id>Refactory.Browser.RBActionEditor</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	super initialize.	self actionList list: (List 				withAll: ((RBCommand actions values collect: [:each | each copy]) 						asSortedCollection: [:a :b | a name asString &lt; b name asString])).	self typeList list: (List withAll: RBCommand withAllSubclasses).	self nameHolder onChangeSend: #changedName to: self.	self descriptionHolder onChangeSend: #changedDescription to: self.	self actionHolder onChangeSend: #changedAction to: self.	self enabledHolder onChangeSend: #changedEnabled to: self.	self receiverHolder onChangeSend: #changedReceiver to: self.	self typeList selectionIndexHolder onChangeSend: #changedType to: self</body></methods><methods><class-id>Refactory.Browser.RBActionEditor</class-id> <category>interface opening</category><body package="Browser-BaseUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self changedActionSpecification</body></methods><methods><class-id>Refactory.Browser.RBActionEditor</class-id> <category>menus</category><body package="Browser-BaseUI" selector="actionSpecificationMenu">actionSpecificationMenu	^self buildTopLevelMenuFrom: #actionMenu</body></methods><methods><class-id>Refactory.Browser.RBActionEditor class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.FormatterConfigurationTool</class-id> <category>aspects</category><body package="Browser-BaseUI" selector="booleanHolder">booleanHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^booleanHolder isNil		ifTrue:			[booleanHolder := false asValue]		ifFalse:			[booleanHolder]</body><body package="Browser-BaseUI" selector="descriptionHolder">descriptionHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^descriptionHolder isNil		ifTrue:			[descriptionHolder := String new asValue]		ifFalse:			[descriptionHolder]</body><body package="Browser-BaseUI" selector="formattedTextHolder">formattedTextHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^formattedTextHolder isNil		ifTrue:			[formattedTextHolder := String new asValue]		ifFalse:			[formattedTextHolder]</body><body package="Browser-BaseUI" selector="numericHolder">numericHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^numericHolder isNil		ifTrue:			[numericHolder := 0 asValue]		ifFalse:			[numericHolder]</body><body package="Browser-BaseUI" selector="optionsList">optionsList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^optionsList isNil		ifTrue:			[optionsList := SelectionInList new]		ifFalse:			[optionsList]</body><body package="Browser-BaseUI" selector="textHolder">textHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^textHolder isNil		ifTrue:			[textHolder := String new asValue]		ifFalse:			[textHolder]</body></methods><methods><class-id>Refactory.Browser.FormatterConfigurationTool</class-id> <category>actions</category><body package="Browser-BaseUI" selector="basicFormat">basicFormat	| parseTree |	parseTree := RBParser parseMethod: self formattedTextHolder value				onError: [:s :p | ^self warn: (#InvalidMethodSource &lt;&lt; #browser &gt;&gt; 'Invalid method source')].	self formattedTextHolder value: (RBConfigurableFormatter format: parseTree)</body><body package="Browser-BaseUI" selector="format">format	self restoreOptionsAround: 			[self installOptions.			self basicFormat]</body><body package="Browser-BaseUI" selector="restore">restore	self nameSpace bindingsDo: [:each | each reinitializeValue].	self initializeOptions</body><body package="Browser-BaseUI" selector="save">save	self installOptions.	self closeRequest</body></methods><methods><class-id>Refactory.Browser.FormatterConfigurationTool</class-id> <category>changing</category><body package="Browser-BaseUI" selector="changedBoolean">changedBoolean	self selectedItem value at: 2 put: self booleanHolder value</body><body package="Browser-BaseUI" selector="changedInteger">changedInteger	self selectedItem value at: 2 put: self numericHolder value</body><body package="Browser-BaseUI" selector="changedOption">changedOption	self updateDescription.	^self buildSubcanvas</body><body package="Browser-BaseUI" selector="changedText">changedText	| string originalString |	originalString := self textHolder value asString.	string := originalString select: [:each | each isSeparator].	string ~= originalString 		ifTrue: 			[self warn: (#NonSeparatorsNotValid &lt;&lt; #browser &gt;&gt; 'Non-separator characters are not valid.').			self textHolder value: string].	self selectedItem value at: 2 put: string</body></methods><methods><class-id>Refactory.Browser.FormatterConfigurationTool</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	super initialize.	self initializeFormattedText.	self initializeOptions</body><body package="Browser-BaseUI" selector="initializeFormattedText">initializeFormattedText	self formattedTextHolder value: self exampleMethod.	self basicFormat</body><body package="Browser-BaseUI" selector="initializeOptions">initializeOptions	| allOptions |	allOptions := OrderedCollection new.	self nameSpace bindingsDo: 			[:binding | 			| name description value |			name := Names at: binding key ifAbsent: [nil].			description := Descriptions at: binding key ifAbsent: [nil].			value := binding value.			name notNil &amp; description notNil 				ifTrue: 					[allOptions 						add: name -&gt; (Array 										with: description										with: value										with: binding key)]].	self optionsList list: allOptions asSortedCollection asList</body><body package="Browser-BaseUI" selector="postOpenWith:">postOpenWith: aBuilder	| useRBC |	super postOpenWith: aBuilder.	RBProgramNode formatterClass == RBConfigurableFormatter ifFalse:		[useRBC := Dialog confirm: (#setFormatterToRBC &lt;&lt; #browser &gt;&gt; 'The formatter class this tool configures (RBConfigurableFormatter)&lt;n&gt;is not currently the default one. Make it the default formatter?') expandMacros.		useRBC ifTrue: [RBProgramNode formatterClass: RBConfigurableFormatter]]</body></methods><methods><class-id>Refactory.Browser.FormatterConfigurationTool</class-id> <category>private</category><body package="Browser-BaseUI" selector="buildSubcanvas">buildSubcanvas	| object |	object := self selectedItem value at: 2.	object isString 		ifTrue: 			[self textHolder value: object.			^self installSubcanvas: #textSpec].	object isInteger 		ifTrue: 			[self numericHolder value: object.			^self installSubcanvas: #integerSpec].	(object isKindOf: Boolean) 		ifTrue: 			[self booleanHolder value: object.			^self installSubcanvas: #booleanSpec].	self installSubcanvas: #emptySpec</body><body package="Browser-BaseUI" selector="exampleMethod">exampleMethod	^'at: anIndex put: anObject	"This is a method comment. If you wish to see what another method would look like you can insert the text here and hit the format button."	| temp number |	temp := ''''.	1 to: 10 do: [:i | temp := temp , (i odd ifTrue: [(i * 2) printString] ifFalse: [i printString])].	number := Number readFrom: temp readStream.	number odd ifTrue: [Dialog warn: ''Something is really screwed up''. ^self].	^number // 2'</body><body package="Browser-BaseUI" selector="installOptions">installOptions	self optionsList list 		do: [:each | (self nameSpace bindingFor: each value last) value: (each value at: 2)]</body><body package="Browser-BaseUI" selector="installSubcanvas:">installSubcanvas: aSymbol 	| oldBuilder |	oldBuilder := builder.	valueSubcanvas := nil.	self 		installSubcanvasIn: #valueSubcanvas		using: self		spec: aSymbol.	builder := oldBuilder</body><body package="Browser-BaseUI" selector="nameSpace">nameSpace	^RBConfigurableFormatter asNameSpace</body><body package="Browser-BaseUI" selector="restoreOptionsAround:">restoreOptionsAround: aBlock 	| oldOptions |	oldOptions := Dictionary new.	self nameSpace 		bindingsDo: [:each | oldOptions at: each key put: each value].	aBlock ensure: 			[oldOptions 				keysAndValuesDo: [:key :value | (self nameSpace bindingFor: key) value: value]]</body><body package="Browser-BaseUI" selector="selectedItem">selectedItem	| selection |	selection := self optionsList selection.	selection isNil 		ifTrue: 			[selection := nil -&gt; (Array 								with: ''								with: nil								with: nil)].	^selection</body><body package="Browser-BaseUI" selector="updateDescription">updateDescription	self descriptionHolder value: self selectedItem value first</body></methods><methods><class-id>Refactory.Browser.FormatterConfigurationTool</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="valueSubcanvas">valueSubcanvas	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^valueSubcanvas isNil		ifTrue:			[valueSubcanvas := Refactory.Browser.FormatterConfigurationTool new]		ifFalse:			[valueSubcanvas]</body></methods><methods><class-id>Refactory.Browser.FormatterConfigurationTool class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>accessing-category</category><body package="Browser-BaseUI" selector="categories">categories	^state categories</body><body package="Browser-BaseUI" selector="category">category	^state category</body><body package="Browser-BaseUI" selector="isCategorySelected">isCategorySelected	^self category notNil</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="addConstantStateBlock:">addConstantStateBlock: block 	self parts 		add: (ConstantNavigatorPart onNavigator: self stateBlock: block).	self getState</body><body package="Browser-BaseUI" selector="dispatcher">dispatcher	dispatcher isNil ifTrue: [self dispatcher: RBActionDispatcher new].	^dispatcher</body><body package="Browser-BaseUI" selector="dispatcher:">dispatcher: aRBActionDispatcher 	dispatcher := aRBActionDispatcher.	dispatcher navigator: self</body><body package="Browser-BaseUI" selector="environment">environment	^environment</body><body package="Browser-BaseUI" selector="environment:">environment: aBrowserEnvironment	environment := aBrowserEnvironment</body><body package="Browser-BaseUI" selector="getState">getState	"Get the current selection as a NavigatorState"	| inheritToClass inheritToType |	inheritToClass := self inheritToClass.	inheritToType := self inheritToType.	state := self navigatorStateClass new.	state inheritToType: inheritToType.	inheritToType = #class ifTrue: [state inheritToClass: inheritToClass].	state nameSpace: self defaultNameSpace.	parts do: [:each | each fillInState: state].	state protocol notNil ifTrue: [LastProtocol := state protocol].	^state</body><body package="Browser-BaseUI" selector="setBinding:">setBinding: aBinding 	| newState ns |	newState := self getState.	newState clearClassDependentFields.	aBinding isForGeneral 		ifTrue: 			[ns := Root whoDefinesBinding: aBinding.			ns isNil ifTrue: [^self].			newState				objectName: ns fullRootName;				protocols: #();				definition: (RBInitializerDefinition nameSpace: ns key: aBinding key)]		ifFalse: [newState objectName: aBinding value fullRootName].	self updateWithState: newState</body><body package="Browser-BaseUI" selector="setState:">setState: aNavigatorState 	state := aNavigatorState.	self updatePartsWith: aNavigatorState</body><body package="Browser-BaseUI" selector="state">state	"Return the last computed state"	^state</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	self		setState: aNavigatorState;		changed</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>private-category</category><body package="Browser-BaseUI" selector="classesMatching:">classesMatching: aBlock 	| names |	names := Set new.	self environment 		bindingReferencesDo: [:each | (aBlock value: each) ifTrue: [names add: each]].	^names</body><body package="Browser-BaseUI" selector="findAPrompt:retry:type:">findAPrompt: prompt retry: retry type: aBlock 	| destClassName |	destClassName := self request: prompt.	destClassName isEmpty ifTrue: [^nil].	^self 		findClass: destClassName		ifNotFound: 			[(self confirm: retry) 				ifTrue: 					[^self 						findAPrompt: prompt						retry: retry						type: aBlock].			^nil]		type: aBlock</body><body package="Browser-BaseUI" selector="findClass">findClass	| class |	class := IncrementalSearchDialog 		selectClass: #FindClass &lt;&lt; #dialogs &gt;&gt; 'Find Class'.	class notNil ifTrue: [self setBinding: class strictReference binding]</body><body package="Browser-BaseUI" selector="findClass:ifNotFound:">findClass: aString ifNotFound: aBlock 	^self 		findClass: aString		ifNotFound: aBlock		type: [:each | true]</body><body package="Browser-BaseUI" selector="findClass:ifNotFound:type:">findClass: aString ifNotFound: aBlock type: testBlock 	| names |	names := self findReferencesMatching: aString type: testBlock.	names isEmpty ifTrue: [aBlock value].	names size = 1 ifTrue: [^names asArray first].	names := names asSortedCollection: [:a :b | a fullName &lt; b fullName].	^self 		choose: 'What item do you want?'		fromList: names		values: names		lines: 10		cancel: [^nil]</body><body package="Browser-BaseUI" selector="findGlobalName">findGlobalName	| dialog bindingRef |	self changeRequest ifFalse: [^self].	dialog := IncrementalSearchDialog forSelectionWithSearch:		[:entry | self referencesMatchingPartialName: entry].	dialog		windowLabel: #FindClassVariableOrNameSpace &lt;&lt; #browser &gt;&gt; 'Find Class, Variable, or Name Space';		firstLabel: #FindC &lt;&lt; #browser &gt;&gt; 'Find:';		secondLabel: #ClassesNamespacesAndVariablesC &lt;&lt; #browser &gt;&gt; 'Classes, Variables, Name Spaces:';		iconSelector: #toolListIcon;		displayStringSelector: #toolListDisplayString;		objectToStringBlock: [:class | class name asString].	bindingRef := dialog select.	bindingRef isNil ifTrue: [^self].	self setBinding: bindingRef binding</body><body package="Browser-BaseUI" selector="findNameSpace">findNameSpace	self 		findPrompt: #FindNameSpace &lt;&lt; #dialogs &gt;&gt; 'Find Name Space'		retry: #FindNameSpaceRetry &lt;&lt; #dialogs &gt;&gt; 'Could not find a name space matching your input. Try again?'		type: [:each | each isForNameSpace]</body><body package="Browser-BaseUI" selector="findPrompt:retry:type:">findPrompt: prompt retry: retry type: block 	| bindingRef |	self changeRequest ifFalse: [^self].	bindingRef := self 				findAPrompt: prompt				retry: retry				type: block.	bindingRef isNil ifTrue: [^self].	self setBinding: bindingRef binding</body><body package="Browser-BaseUI" selector="findReferencesMatching:type:">findReferencesMatching: aString type: testBlock 	| names destClassName |	destClassName := aString trimBlanks.	names := self classesMatching: 					[:each | 					(destClassName match: each simpleName) 						and: [testBlock value: each binding]].	names notEmpty ifTrue: [^names].	names := self classesMatching: 					[:each | 					(destClassName match: each fullName) and: [testBlock value: each binding]].	destClassName := '*' , destClassName , '*'.	names notEmpty ifTrue: [^names].	names := self classesMatching: 					[:each | 					(destClassName match: each simpleName) 						and: [testBlock value: each binding]].	names notEmpty ifTrue: [^names].	^self classesMatching: 			[:each | 			(destClassName match: each fullName) and: [testBlock value: each binding]]</body><body package="Browser-BaseUI" selector="findSharedVariable">findSharedVariable	self 		findPrompt: #FindSharedVariable &lt;&lt; #dialogs &gt;&gt; 'Find Shared Variable'		retry: #FindSharedVariableRetry &lt;&lt; #dialogs &gt;&gt; 'Could not find a shared variable matching your input. Try again?'		type: [:each | each isForGeneral]</body><body package="Browser-BaseUI" selector="referencesMatchingPartialName:">referencesMatchingPartialName: aString	| pattern matches nameSelector |	aString trimBlanks isEmpty ifTrue: [^Array new].	pattern := aString trimBlanks, '*'.	nameSelector := (pattern includes: $.) ifTrue: [#fullName] ifFalse: [#simpleName].	matches := self classesMatching: [:each | pattern match: (each perform: nameSelector)].	^matches asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString]</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>accessing-protocol</category><body package="Browser-BaseUI" selector="isData">isData	^state isData</body><body package="Browser-BaseUI" selector="isMethod">isMethod	^self isData not</body><body package="Browser-BaseUI" selector="isProtocolSelected">isProtocolSelected	^self protocol notNil</body><body package="Browser-BaseUI" selector="protocol">protocol	^state protocol</body><body package="Browser-BaseUI" selector="protocols">protocols	^state protocols</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>accessing-class/inst switch</category><body package="Browser-BaseUI" selector="isMeta">isMeta	^state isMeta</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>accessing-selector</category><body package="Browser-BaseUI" selector="definition">definition	^state definition</body><body package="Browser-BaseUI" selector="definitions">definitions	^state definitions</body><body package="Browser-BaseUI" selector="inheritToClass">inheritToClass	^state inheritToClass</body><body package="Browser-BaseUI" selector="inheritToClass:">inheritToClass: aClass 	state inheritToClass: aClass</body><body package="Browser-BaseUI" selector="inheritToType">inheritToType	^state inheritToType</body><body package="Browser-BaseUI" selector="inheritToType:">inheritToType: aSymbol 	state inheritToType: aSymbol</body><body package="Browser-BaseUI" selector="isDefinitionSelected">isDefinitionSelected	^self definitions notEmpty</body><body package="Browser-BaseUI" selector="isMethodOverridden">isMethodOverridden	^(self selector notNil 		and: [Override isOverriddenSelector: self selector class: self selectedClass]) 			or: 				[self sharedVariableNames notEmpty and: 						[Override isOverriddenStatic: self sharedVariableName							in: self classOrNameSpace]]</body><body package="Browser-BaseUI" selector="isSelectorSelected">isSelectorSelected	^self selector notNil</body><body package="Browser-BaseUI" selector="isSharedVariableSelected">isSharedVariableSelected	^self sharedVariableNames notEmpty</body><body package="Browser-BaseUI" selector="isStaticOverridden">isStaticOverridden	^self sharedVariableNames notEmpty and: 			[Override isOverriddenStatic: self sharedVariableName				in: self classOrNameSpace]</body><body package="Browser-BaseUI" selector="methodClass">methodClass	^state methodClass</body><body package="Browser-BaseUI" selector="methodDefinitions">methodDefinitions	^state methodDefinitions</body><body package="Browser-BaseUI" selector="selector">selector	^state selector</body><body package="Browser-BaseUI" selector="selectors">selectors	^state selectors</body><body package="Browser-BaseUI" selector="sharedVariableDefinitions">sharedVariableDefinitions	^state sharedVariableDefinitions</body><body package="Browser-BaseUI" selector="sharedVariableName">sharedVariableName	^state sharedVariableName</body><body package="Browser-BaseUI" selector="sharedVariableNames">sharedVariableNames	^state sharedVariableNames</body><body package="Browser-BaseUI" selector="showOnlyFiltered">showOnlyFiltered	^showOnlyFiltered</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>accessing-namespace</category><body package="Browser-BaseUI" selector="defaultNameSpace">defaultNameSpace	^self class defaultNameSpace</body><body package="Browser-BaseUI" selector="nameSpace">nameSpace	^state nameSpace</body><body package="Browser-BaseUI" selector="setDefaultNameSpace">setDefaultNameSpace	| nameSpace |	nameSpace := self classOrNameSpace.	nameSpace isNameSpace ifFalse: [nameSpace := self nameSpace].	(self 		confirm: (#ConfirmNewNameSpace &lt;&lt; #dialogs &gt;&gt; 'Make &lt;1p&gt; your default name space?'				expandMacrosWith: nameSpace)) 			ifFalse: [^self].	DefaultNameSpace := nameSpace fullyQualifiedReference</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>accessing-pundles</category><body package="Browser-BaseUI" selector="findPundle">findPundle	| dialog thePundle |	self changeRequest ifFalse: [^self].	dialog := IncrementalSearchDialog 		forSelectionFrom: (self sortedPundleList: self storeRegistry allPundles)		filterBlock: [:entry :pundle | entry, '*' match: pundle name].	dialog		windowLabel: #FindPackageOrBundle &lt;&lt; #browser &gt;&gt; 'Find Package or Bundle';		firstLabel: #FilterC &lt;&lt; #browser &gt;&gt; 'Filter:';		secondLabel: #PackagesAndBundlesC &lt;&lt; #browser &gt;&gt; 'Packages and Bundles:';		objectToStringBlock: [:pundle | pundle name];		iconSelector: #toolListIcon.	thePundle := dialog select.	thePundle isNil ifTrue: [^self].	self selectPundle: thePundle</body><body package="Browser-BaseUI" selector="isBundleSelected">isBundleSelected	| pundle |	pundle := self pundle.	^pundle notNil and: [pundle isBundle]</body><body package="Browser-BaseUI" selector="isCodeComponentSelected">isCodeComponentSelected	^self isParcelSelected or: [self isPundleSelected]</body><body package="Browser-BaseUI" selector="isPackageSelected">isPackageSelected	| pundle |	pundle := self pundle.	^pundle notNil and: [pundle isPackage]</body><body package="Browser-BaseUI" selector="isPundleSelected">isPundleSelected	^self pundles notEmpty</body><body package="Browser-BaseUI" selector="package">package	^state package</body><body package="Browser-BaseUI" selector="packages">packages	^state packages</body><body package="Browser-BaseUI" selector="pundle">pundle	^state pundle</body><body package="Browser-BaseUI" selector="pundles">pundles	^state pundles</body><body package="Browser-BaseUI" selector="selectPundle:">selectPundle: aPundleModel 	| newState |	newState := state copy.	newState		definitions: #();		protocols: #();		objectNames: #();		pundle: aPundleModel.	self updateWithState: newState</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>accessing-parcels</category><body package="Browser-BaseUI" selector="isParcelSelected">isParcelSelected	| parcel |	parcel := self parcel.	^parcel notNil and: [parcel ~= UnparceledParcel new]</body><body package="Browser-BaseUI" selector="parcel">parcel	^state parcel</body><body package="Browser-BaseUI" selector="parcels">parcels	^state parcels</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>updating</category><body package="Browser-BaseUI" selector="refreshLists">refreshLists	self updateWithState: self getState</body><body package="Browser-BaseUI" selector="updateNavigator">updateNavigator	self changeRequest ifFalse: [^self].	self refreshLists</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>menus</category><body package="Browser-BaseUI" selector="inheritanceKeysAndLabels">inheritanceKeysAndLabels	^Array		with: (Array 			with: #root 			with: #ShowAllInherited &lt;&lt; #browser &gt;&gt; 'Show All Inherited') 		with: (Array 			with: #rootMinusOne 			with: #ShowAllExceptObject &lt;&lt; #browser &gt;&gt; 'Show All Except for Object')		with: (Array 			with: #class 			with: #ShowNoInherited &lt;&lt; #browser &gt;&gt; 'Show No Inherited')</body><body package="Browser-BaseUI" selector="inheritToSpecifications">inheritToSpecifications	| class inheritToClass items inheritToType |	class := self nonMetaClass.	class isNil ifTrue: [^#()].	inheritToType := state inheritToType.	items := OrderedCollection new.	self inheritanceKeysAndLabels do: 			[:each | 			items 				add: ((inheritToType = each first 						ifTrue: [RBCheckedCommand]						ifFalse: [RBCommand]) 							named: each last asString							description: ''							action: 								[self changeRequest 									ifTrue: 										[self inheritToType: each first.										self refreshLists]]							receiver: #yourself)].	items add: nil.	inheritToClass := self inheritToClass instanceBehavior.	items 		addAll: (class withAllSuperclasses reverse collect: 					[:each | 					(each == inheritToClass ifTrue: [RBCheckedCommand] ifFalse: [RBCommand]) 						named: each name						description: (#SelectNavigatorType &lt;&lt; #browser &gt;&gt; 'Select Navigator Type') asString						action: 							[self changeRequest 								ifTrue: 									[self inheritToClass: each.									self refreshLists]]						receiver: #yourself]).	^items</body><body package="Browser-BaseUI" selector="menuNamed:">menuNamed: aString 	^menus at: aString ifAbsentPut: [self buildTopLevelMenuFrom: aString]</body><body package="Browser-BaseUI" selector="rebuildMenus">rebuildMenus	| oldMenus |	oldMenus := menus.	menus := Dictionary new.	oldMenus 		keysDo: [:each | menus at: each put: (self buildTopLevelMenuFrom: each)].	super rebuildMenus</body><body package="Browser-BaseUI" selector="windowMenuItems">windowMenuItems	| items |	items := OrderedCollection new.	parts do: [:each | items addAll: each windowMenuItems].	^items</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>interface opening</category><body package="Browser-BaseUI" selector="initiallyUpdateParts">initiallyUpdateParts	parts do: [:each | each initiallyOpened: state]</body><body package="Browser-BaseUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self initiallyUpdateParts.	self changed</body><body package="Browser-BaseUI" selector="resetBuilder">resetBuilder	super resetBuilder.	self initializeParts</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	super initialize.	state := self navigatorStateClass new.	state nameSpace: self defaultNameSpace.	self initializeParts.	menus := Dictionary new.	showOnlyFiltered := ShowOnlyFiltered.	self inheritToType: #class</body><body package="Browser-BaseUI" selector="initializeParts">initializeParts	parts notNil ifTrue: [parts do: [:each | each release]].	parts := OrderedCollection new.	partsDictionary := Dictionary new</body><body package="Browser-BaseUI" selector="release">release	parts do: [:each | each release].	super release</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>aspects</category><body package="Browser-BaseUI" selector="ClassAndMethodTabNavigatorPart">ClassAndMethodTabNavigatorPart	^partsDictionary at: #ClassAndMethodTabNavigatorPart		ifAbsentPut: [parts add: (ClassAndMethodTabNavigatorPart onNavigator: self)]</body><body package="Browser-BaseUI" selector="ClassAndObjectNavigatorPart">ClassAndObjectNavigatorPart	^partsDictionary at: #ClassAndObjectNavigatorPart		ifAbsentPut: [parts add: (ClassAndObjectNavigatorPart onNavigator: self)]</body><body package="Browser-BaseUI" selector="ClassNavigatorPart">ClassNavigatorPart	^partsDictionary at: #ClassNavigatorPart		ifAbsentPut: [parts add: (ClassNavigatorPart onNavigator: self)]</body><body package="Browser-BaseUI" selector="CodeComponentTabNavigatorPart">CodeComponentTabNavigatorPart	^partsDictionary at: #CodeComponentTabNavigatorPart		ifAbsentPut: [parts add: (CodeComponentTabNavigatorPart onNavigator: self)]</body><body package="Browser-BaseUI" selector="methodName">methodName	| selector |	selector := self selector.	^selector isNil 		ifTrue: ['No Selector']		ifFalse: [self menuNameFor: selector]</body><body package="Browser-BaseUI" selector="MethodNavigatorPart">MethodNavigatorPart	^partsDictionary at: #MethodNavigatorPart		ifAbsentPut: [parts add: (MethodNavigatorPart onNavigator: self)]</body><body package="Browser-BaseUI" selector="NameSpaceItemTabNavigatorPart">NameSpaceItemTabNavigatorPart	^partsDictionary at: #NameSpaceItemTabNavigatorPart		ifAbsentPut: 			[parts add: ((NameSpaceItemTabNavigatorPart onNavigator: self)						showProtocols: true;						yourself)]</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>accessing-class</category><body package="Browser-BaseUI" selector="classesAndNameSpaces">classesAndNameSpaces	^state classesAndNameSpaces</body><body package="Browser-BaseUI" selector="classOrNameSpace">classOrNameSpace	^state classOrNameSpace</body><body package="Browser-BaseUI" selector="isBindingSelected">isBindingSelected	^self selectedBinding notNil</body><body package="Browser-BaseUI" selector="isClassOverridden">isClassOverridden	^self classOrNameSpace notNil 		and: [Override isOverriddenClassOrNameSpace: self classOrNameSpace]</body><body package="Browser-BaseUI" selector="isClassSelected">isClassSelected	^self selectedClass notNil</body><body package="Browser-BaseUI" selector="isGlobalSelected">isGlobalSelected	^self selectedClass notNil or: [self selectedNameSpace notNil]</body><body package="Browser-BaseUI" selector="nonMetaClass">nonMetaClass	^state nonMetaClass</body><body package="Browser-BaseUI" selector="nonMetaClasses">nonMetaClasses	^state nonMetaClasses</body><body package="Browser-BaseUI" selector="objectName">objectName	^state objectName</body><body package="Browser-BaseUI" selector="objectNames">objectNames	^state objectNames</body><body package="Browser-BaseUI" selector="objectNamesOrderedForRemoval">objectNamesOrderedForRemoval	^state objectNamesOrderedForRemoval</body><body package="Browser-BaseUI" selector="selectClass:">selectClass: aClass 	state		clearClassDependentFields;		selectedClass: aClass.	self updatePartsWith: state</body><body package="Browser-BaseUI" selector="selectedBinding">selectedBinding	^state selectedBinding</body><body package="Browser-BaseUI" selector="selectedBindings">selectedBindings	^state selectedBindings</body><body package="Browser-BaseUI" selector="selectedClass">selectedClass	^state selectedClass</body><body package="Browser-BaseUI" selector="selectedClasses">selectedClasses	^state selectedClasses</body><body package="Browser-BaseUI" selector="selectedGlobals">selectedGlobals	^state selectedGlobals</body><body package="Browser-BaseUI" selector="selectedNameSpace">selectedNameSpace	^state selectedNameSpace</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>private</category><body package="Browser-BaseUI" selector="find:">find: aString 	| name |	aString isEmpty ifTrue: [^self].	aString first = $# 		ifTrue: [^self findMethod: (aString copyFrom: 2 to: aString size)].	(aString includes: $:) ifTrue: [^self findMethod: aString].	name := self findClass: aString				ifNotFound: 					[^(self 						confirm: (#DidNotFindMatchingVariable &lt;&lt; #dialogs &gt;&gt; 'Did not find any classes, name spaces, or shared variables.&lt;n&gt;Do you wish to look for matching methods?')								expandMacros) 							ifTrue: [self findMethod: aString]].	name isNil ifTrue: [^self].	self setBinding: name bindingOrNil</body><body package="Browser-BaseUI" selector="findMethod:">findMethod: aSelector 	| env items method |	env := self environment 				implementorsMatching: '*' , aSelector trimBlanks , '*'.	items := OrderedCollection new.	env classesAndSelectorsDo: 			[:class :selector | 			items 				add: (class name , '&gt;&gt;' , selector) -&gt; (Array with: class with: selector)].	items isEmpty 		ifTrue: [^self warn: 'No implementors matching "' , aSelector , '" found'].	items := items asSortedCollection: [:a :b | a key &lt; b key].	method := (items size = 1 				ifTrue: [items first]				ifFalse: 					[self 						choose: 'Find which method?'						fromList: items						values: items						lines: 10						cancel: [^nil]]) 					value.	method isNil ifTrue: [^self].	self		selectClass: method first;		setSelector: method last</body><body package="Browser-BaseUI" selector="navigatorStateClass">navigatorStateClass	^NavigatorState</body><body package="Browser-BaseUI" selector="partNamed:">partNamed: aSymbol	^partsDictionary at: aSymbol</body><body package="Browser-BaseUI" selector="parts">parts	^parts</body><body package="Browser-BaseUI" selector="partsDictionary">partsDictionary	^partsDictionary</body><body package="Browser-BaseUI" selector="selectNameSpace:">selectNameSpace: aString 	^self selectNameSpace: aString without: #()</body><body package="Browser-BaseUI" selector="selectNameSpace:without:">selectNameSpace: aString without: aCollection 	| selectedClass allNameSpaces |	selectedClass := self classOrNameSpace.	allNameSpaces := OrderedCollection withAll: Root withAllNameSpaces.	aCollection do: [:each | allNameSpaces remove: each ifAbsent: []].	allNameSpaces := allNameSpaces 				asSortedCollection: [:a :b | a fullName &lt; b fullName].	^self 		choose: aString		fromList: allNameSpaces		values: allNameSpaces		ignore: #()		initialSelection: (allNameSpaces indexOf: (selectedClass isNil 						ifTrue: [nil]						ifFalse: [selectedClass environment]))		lines: 15		cancel: [^nil]</body><body package="Browser-BaseUI" selector="sortedPundleList:">sortedPundleList: aCollection	^aCollection asSortedCollection:		[:a :b |		(a isBundle xor: b isBundle)			ifTrue: [a isBundle]			ifFalse: [a name &lt; b name]]</body><body package="Browser-BaseUI" selector="subcanvases">subcanvases	^(OrderedCollection withAll: super subcanvases)		addAll: parts;		yourself</body><body package="Browser-BaseUI" selector="updatePartsWith:">updatePartsWith: aNavigatorState 	parts do: [:each | each selectState: aNavigatorState]</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>changing</category><body package="Browser-BaseUI" selector="changedPart:">changedPart: aPart 	| index visibleParts |	visibleParts := parts.	index := visibleParts indexOf: aPart.	index + 1 to: visibleParts size		do: [:i | (visibleParts at: i) updateWithState: state].	self changed</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>private-protocol</category><body package="Browser-BaseUI" selector="findMethodAndSelectAlphabetic">findMethodAndSelectAlphabetic	| chosenSelector |	self changeRequest ifFalse: [^self].	chosenSelector := (IncrementalSearchDialog			forSelectionWithSearch:				[:pattern |				pattern isEmpty					ifTrue: [self inheritedSelectors asSortedCollection]					ifFalse: [(self inheritedSelectors 						select: [:each | pattern , '*' match: each]) asSortedCollection]])		windowLabel: (#FindMethod &lt;&lt; #browser &gt;&gt; 'Find Method');		firstLabel: (#FilterC &lt;&lt; #browser &gt;&gt; 'Filter:');		secondLabel: #MethodsC &lt;&lt; #browser &gt;&gt; 'Methods:';		select.	chosenSelector isNil ifTrue: [^self].	self setSelector: chosenSelector.	LastProtocol := self protocol</body><body package="Browser-BaseUI" selector="inheritedSelectors">inheritedSelectors	| selectors currentClass inheritToClass |	selectors := Set new.	currentClass := self selectedClass.	inheritToClass := self inheritToClass superclass.	[currentClass notNil and: [currentClass ~= inheritToClass]] whileTrue: 			[selectors addAll: (self environment selectorsForClass: currentClass).			currentClass := currentClass superclass].	^selectors</body><body package="Browser-BaseUI" selector="setSelector:">setSelector: aSelector 	aSelector isNil ifTrue: [^self].	state type = #sharedVariable ifTrue: [state type: #instance].	state		protocols: #();		definitions: #();		selector: aSelector.	self		updatePartsWith: state;		changed</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>accessing-instance variables</category><body package="Browser-BaseUI" selector="classInstanceVariable">classInstanceVariable	^state classInstanceVariable</body><body package="Browser-BaseUI" selector="classInstanceVariables">classInstanceVariables	^state classInstanceVariables</body><body package="Browser-BaseUI" selector="instanceVariable">instanceVariable	^state instanceVariable</body><body package="Browser-BaseUI" selector="instanceVariables">instanceVariables	^state instanceVariables</body></methods><methods><class-id>Refactory.Browser.Navigator</class-id> <category>testing</category><body package="Browser-BaseUI" selector="isClassContainerEnvironment">isClassContainerEnvironment	^self environment isClassContainer</body><body package="Browser-BaseUI" selector="isGlobalEnvironment">isGlobalEnvironment	^self environment isSystem</body><body package="Browser-BaseUI" selector="isLocalEnvironment">isLocalEnvironment	^self isGlobalEnvironment not</body><body package="Browser-BaseUI" selector="isSelectorEnvironment">isSelectorEnvironment	^self environment isSelector</body></methods><methods><class-id>Refactory.Browser.Navigator class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="defaultNameSpace">defaultNameSpace	^DefaultNameSpace isNil 		ifTrue: [Smalltalk]		ifFalse: [DefaultNameSpace valueOrDo: [Smalltalk]]</body><body package="Browser-BaseUI" selector="defaultNameSpaceString">defaultNameSpaceString	^self defaultNameSpace fullName</body><body package="Browser-BaseUI" selector="defaultNameSpaceString:">defaultNameSpaceString: aString 	^[DefaultNameSpace := aString asQualifiedReference] on: Error		do: [:ex | ex return: nil]</body><body package="Browser-BaseUI" selector="showOnlyFiltered">showOnlyFiltered	^ShowOnlyFiltered</body><body package="Browser-BaseUI" selector="showOnlyFiltered:">showOnlyFiltered: aBoolean 	ShowOnlyFiltered := aBoolean</body></methods><methods><class-id>Refactory.Browser.Navigator class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.RBCheckedCommand</class-id> <category>testing</category><body package="Browser-BaseUI" selector="isCheckedActionSpecification">isCheckedActionSpecification	^true</body></methods><methods><class-id>Refactory.Browser.CodeComponentTabNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="buildCategorySubcanvas">buildCategorySubcanvas	| state |	state := navigator state.	self installSubcanvas: #categoryWindowSpec using: self.	self selectStateForComponents: state</body><body package="Browser-BaseUI" selector="buildHierarchyCategorySubcanvas">buildHierarchyCategorySubcanvas	| state |	state := navigator state.	self installSubcanvas: #categoryHierarchyWindowSpec using: self.	self selectStateForComponents: state</body><body package="Browser-BaseUI" selector="buildHierarchyPackageSubcanvas">buildHierarchyPackageSubcanvas	| state |	state := navigator state.	self installSubcanvas: #packageHierarchyWindowSpec using: self.	self selectStateForComponents: state</body><body package="Browser-BaseUI" selector="buildHierarchyParcelSubcanvas">buildHierarchyParcelSubcanvas	| state |	state := navigator state.	self installSubcanvas: #parcelHierarchyWindowSpec using: self.	self selectStateForComponents: state</body><body package="Browser-BaseUI" selector="buildPackageSubcanvas">buildPackageSubcanvas	| state |	state := navigator state.	self installSubcanvas: #packageWindowSpec using: self.	self selectStateForComponents: state</body><body package="Browser-BaseUI" selector="buildParcelSubcanvas">buildParcelSubcanvas	| state |	state := navigator state.	self installSubcanvas: #parcelWindowSpec using: self.	self selectStateForComponents: state</body></methods><methods><class-id>Refactory.Browser.CodeComponentTabNavigatorPart</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="categories">categories	| categories |	categories := self componentNamed: #categories.	categories isNil 		ifTrue: 			[categories := CategoryNavigatorPart new.			navigator notNil ifTrue: [categories navigator: navigator].			self componentNamed: #categories put: categories].	^categories</body><body package="Browser-BaseUI" selector="categoryHierarchyClasses">categoryHierarchyClasses	| categoryHierarchyClasses |	categoryHierarchyClasses := self componentNamed: #categoryHierarchyClasses.	categoryHierarchyClasses isNil 		ifTrue: 			[categoryHierarchyClasses := HierarchyClassWithCategoryNavigatorPart new.			navigator notNil ifTrue: [categoryHierarchyClasses navigator: navigator].			self componentNamed: #categoryHierarchyClasses				put: categoryHierarchyClasses].	^categoryHierarchyClasses</body><body package="Browser-BaseUI" selector="classes">classes	| classes |	classes := self componentNamed: #classes.	classes isNil 		ifTrue: 			[classes := ClassNavigatorPart new.			navigator notNil ifTrue: [classes navigator: navigator].			self componentNamed: #classes put: classes].	^classes</body><body package="Browser-BaseUI" selector="hierarchyClasses">hierarchyClasses	| hierarchyClasses |	hierarchyClasses := self componentNamed: #hierarchyClasses.	hierarchyClasses isNil 		ifTrue: 			[hierarchyClasses := HierarchyClassNavigatorPart new.			navigator notNil ifTrue: [hierarchyClasses navigator: navigator].			self componentNamed: #hierarchyClasses put: hierarchyClasses].	^hierarchyClasses</body><body package="Browser-BaseUI" selector="hierarchyPackages">hierarchyPackages	| hierarchyPackages |	hierarchyPackages := self componentNamed: #hierarchyPackages.	hierarchyPackages isNil 		ifTrue: 			[hierarchyPackages := HierarchyPundleNavigatorPart new.			navigator notNil ifTrue: [hierarchyPackages navigator: navigator].			self componentNamed: #hierarchyPackages put: hierarchyPackages].	^hierarchyPackages</body><body package="Browser-BaseUI" selector="hierarchyParcels">hierarchyParcels	| hierarchyParcels |	hierarchyParcels := self componentNamed: #hierarchyParcels.	hierarchyParcels isNil 		ifTrue: 			[hierarchyParcels := HierarchyParcelNavigatorPart new.			navigator notNil ifTrue: [hierarchyParcels navigator: navigator].			self componentNamed: #hierarchyParcels put: hierarchyParcels].	^hierarchyParcels</body><body package="Browser-BaseUI" selector="packages">packages	| packages |	packages := self componentNamed: #packages.	packages isNil 		ifTrue: 			[packages := PundleNavigatorPart new.			navigator notNil ifTrue: [packages navigator: navigator].			self componentNamed: #packages put: packages].	^packages</body><body package="Browser-BaseUI" selector="parcels">parcels	| parcels |	parcels := self componentNamed: #parcels.	parcels isNil 		ifTrue: 			[parcels := ParcelNavigatorPart new.			navigator notNil ifTrue: [parcels navigator: navigator].			self componentNamed: #parcels put: parcels].	^parcels</body></methods><methods><class-id>Refactory.Browser.CodeComponentTabNavigatorPart</class-id> <category>testing</category><body package="Browser-BaseUI" selector="isCategoryAndClass:">isCategoryAndClass: aNavigatorState 	^(self isCategory: aNavigatorState) and: [(self hasNameSpace: aNavigatorState) not]</body><body package="Browser-BaseUI" selector="isPackageAndClass:">isPackageAndClass: aNavigatorState 	^(self isPackage: aNavigatorState) and: [(self hasNameSpace: aNavigatorState) not]</body><body package="Browser-BaseUI" selector="isParcelAndClass:">isParcelAndClass: aNavigatorState 	^(self isParcel: aNavigatorState) 		and: [(self hasNameSpace: aNavigatorState) not]</body><body package="Browser-BaseUI" selector="isSafeToSwitchWithoutUpdate">isSafeToSwitchWithoutUpdate	^navigator selectedClass notNil 		and: [navigator pundles allSatisfy: [:each | each isPackage]]</body></methods><methods><class-id>Refactory.Browser.CodeComponentTabNavigatorPart</class-id> <category>navigator accessing</category><body package="Browser-BaseUI" selector="beHierarchy">beHierarchy	| current new |	current := self selection.	new := self list detect: [:each | each identifier = 'Hierarchy']				ifNone: [^self].	new = current ifTrue: [^self].	self select: new.	self installSubcanvas</body></methods><methods><class-id>Refactory.Browser.CodeComponentTabNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="update:with:from:">update: anAspectSymbol with: aParameter from: aSender 	(aSender == self components last and: [anAspectSymbol == #navigatorState]) 		ifTrue: [self updateTabListWith: aParameter].	^super 		update: anAspectSymbol		with: aParameter		from: aSender</body></methods><methods><class-id>Refactory.Browser.CodeComponentTabNavigatorPart</class-id> <category>changing</category><body package="Browser-BaseUI" selector="changedTab">changedTab	| canSwitchWithoutUpdates |	canSwitchWithoutUpdates := self isSafeToSwitchWithoutUpdate.	super changedTab.	canSwitchWithoutUpdates ifFalse: [self changed]</body><body package="Browser-BaseUI" selector="changeRequest">changeRequest	^self isSafeToSwitchWithoutUpdate 		ifTrue: [true]		ifFalse: [super changeRequest]</body><body package="Browser-BaseUI" selector="installSubcanvas">installSubcanvas	"Ugly but somehow we need to let the code model know we switched our tabs."	super installSubcanvas.	navigator changed: #updateState</body></methods><methods><class-id>Refactory.Browser.CodeComponentTabNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="selectionForState:">selectionForState: aNavigatorState 	^aNavigatorState propertyAt: #codeComponentTab ifAbsent: [nil]</body></methods><methods><class-id>Refactory.Browser.CodeComponentTabNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	super fillInState: aNavigatorState.	aNavigatorState propertyAt: #codeComponentTab put: self selection</body></methods><methods><class-id>Refactory.Browser.CodeComponentTabNavigatorPart class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="defaultTabDescriptions">defaultTabDescriptions	| descriptions |	descriptions := OrderedCollection new.	descriptions		add: (TabPartDescription 					named: #Package &lt;&lt; #labels &gt;&gt; 'Package'					buildWith: #buildPackageSubcanvas					match: #alwaysEnabled:					enabled: #isPackage:);		add: (TabPartDescription 					named: #Hierarchy &lt;&lt; #labels &gt;&gt; 'Hierarchy'					buildWith: #buildHierarchyPackageSubcanvas					match: #onlyClasses:					enabled: #isPackageAndClass:);		add: (TabPartDescription 					named: #Parcel &lt;&lt; #labels &gt;&gt; 'Parcel'					buildWith: #buildParcelSubcanvas					match: #alwaysEnabled:					enabled: #isParcel:);		add: (TabPartDescription 					named: #Hierarchy &lt;&lt; #labels &gt;&gt; 'Hierarchy'					buildWith: #buildHierarchyParcelSubcanvas					match: #onlyClasses:					enabled: #isParcelAndClass:);		add: (TabPartDescription 					named: #Category &lt;&lt; #labels &gt;&gt; 'Category'					buildWith: #buildCategorySubcanvas					match: #alwaysEnabled:					enabled: #isCategory:);		add: (TabPartDescription 					named: #Hierarchy &lt;&lt; #labels &gt;&gt; 'Hierarchy'					buildWith: #buildHierarchyCategorySubcanvas					match: #onlyClasses:					enabled: #isCategoryAndClass:).	^descriptions</body></methods><methods><class-id>Refactory.Browser.CodeComponentTabNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.RBMethodDefinition</class-id> <category>private</category><body package="Browser-BaseUI" selector="species">species	^MethodDefinition</body></methods><methods><class-id>Refactory.Browser.RBMethodDefinition</class-id> <category>printing</category><body package="Browser-BaseUI" selector="displayString">displayString	^self selector asString</body></methods><methods><class-id>Refactory.Browser.PundleItem</class-id> <category>private</category><body package="Browser-BaseUI" selector="item">item	^item</body><body package="Browser-BaseUI" selector="storeRegistry">storeRegistry	^#{Store.Registry} value</body></methods><methods><class-id>Refactory.Browser.PundleItem</class-id> <category>printing</category><body package="Browser-BaseUI" selector="displayString">displayString	^item == self storeRegistry 		ifTrue: ['Local Image']		ifFalse: [item displayString]</body></methods><methods><class-id>Refactory.Browser.PundleItem</class-id> <category>comparing</category><body package="Browser-BaseUI" selector="=">= anObject 	^self class = anObject class and: [self item = anObject item]</body><body package="Browser-BaseUI" selector="hash">hash	^item hash</body></methods><methods><class-id>Refactory.Browser.PundleItem</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="item:">item: anObject 	item := anObject</body></methods><methods><class-id>Refactory.Browser.PundleItem</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="containedItems">containedItems	| items |	items := OrderedCollection new.	item containedItems do: [:each | items add: (self class item: each)].	item = self storeRegistry 		ifTrue: [items add: (self class item: item nullPackage)].	^items</body><body package="Browser-BaseUI" selector="icon">icon	(item == self storeRegistry or: [PundleNavigatorPart showIcons not]) 		ifTrue: [^nil].	^item pundleListIcon</body><body package="Browser-BaseUI" selector="programItem">programItem	^self storeRegistry = item ifTrue: [nil] ifFalse: [item]</body></methods><methods><class-id>Refactory.Browser.PundleItem class</class-id> <category>instance creation</category><body package="Browser-BaseUI" selector="item:">item: aProgramItem 	^(self new)		item: aProgramItem;		yourself</body></methods><methods><class-id>Refactory.Browser.PundleItem class</class-id> <category>class initialization</category><body package="Browser-BaseUI" selector="initialize">initialize	ModifiedPackageImage := ListIconLibrary visualFor: #modifiedPackage.	ModifiedBundleImage := ListIconLibrary visualFor: #modifiedBundle.	UnmodifiedPackageImage := ListIconLibrary visualFor: #package.	UnmodifiedBundleImage := ListIconLibrary visualFor: #bundle</body></methods><methods><class-id>Refactory.Browser.RBActionDispatcher</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="environment">environment	^self navigator environment</body><body package="Browser-BaseUI" selector="navigator">navigator	^self objects at: #navigator</body><body package="Browser-BaseUI" selector="navigator:">navigator: aNavigator 	self objects at: #navigator put: aNavigator</body></methods><methods><class-id>Refactory.Browser.RBActionDispatcher</class-id> <category>private</category><body package="Browser-BaseUI" selector="objects">objects	^objects isNil 		ifTrue: [objects := IdentityDictionary new]		ifFalse: [objects]</body></methods><methods><class-id>Refactory.Browser.RBActionDispatcher</class-id> <category>copying</category><body package="Browser-BaseUI" selector="postCopy">postCopy	super postCopy.	objects := objects copy</body></methods><methods><class-id>Refactory.Browser.ProtocolSortOrder</class-id> <category>printing</category><body package="Browser-BaseUI" selector="displayString">displayString	^name asString</body></methods><methods><class-id>Refactory.Browser.ProtocolSortOrder</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="named:beforeStrings:afterStrings:">named: aString beforeStrings: beforeStrings afterStrings: afterStrings 	name := aString.	sortBefore := beforeStrings.	sortAfter := afterStrings</body></methods><methods><class-id>Refactory.Browser.ProtocolSortOrder</class-id> <category>comparing</category><body package="Browser-BaseUI" selector="=">= anObject 	^self class = anObject class and: [self name = anObject name]</body><body package="Browser-BaseUI" selector="hash">hash	^name hash</body><body package="Browser-BaseUI" selector="is:before:">is: aString before: bString 	| aIndex bIndex |	aIndex := self indexOf: aString.	bIndex := self indexOf: bString.	^aIndex &lt; bIndex or: [aIndex = bIndex and: [aString &lt; bString]]</body></methods><methods><class-id>Refactory.Browser.ProtocolSortOrder</class-id> <category>private</category><body package="Browser-BaseUI" selector="indexOf:">indexOf: aString 	1 to: sortBefore size		do: [:i | ((sortBefore at: i) match: aString) ifTrue: [^i - sortBefore size - 1]].	1 to: sortAfter size		do: [:i | ((sortAfter at: i) match: aString) ifTrue: [^i]].	^0</body></methods><methods><class-id>Refactory.Browser.ProtocolSortOrder</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="identifier">identifier	^(name respondsTo: #key)		ifTrue: [name key]		ifFalse: [name]</body><body package="Browser-BaseUI" selector="name">name	^name</body></methods><methods><class-id>Refactory.Browser.ProtocolSortOrder class</class-id> <category>instance creation</category><body package="Browser-BaseUI" selector="alphabetical">alphabetical	^self 		named: (#Alphabetical &lt;&lt; #browser &gt;&gt; 'Alphabetical')		beforeStrings: #()		afterStrings: #()</body><body package="Browser-BaseUI" selector="named:beforeStrings:afterStrings:">named: aString beforeStrings: beforeStrings afterStrings: afterStrings 	^(self new)		named: aString			beforeStrings: beforeStrings			afterStrings: afterStrings;		yourself</body><body package="Browser-BaseUI" selector="traditional">traditional	^self 		named: (#Traditional &lt;&lt; #browser &gt;&gt; 'Traditional')		beforeStrings: #('*initial*' 'instance creation')		afterStrings: #('private*' 'pvt*')</body></methods><methods><class-id>Refactory.Browser.ParcelNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="fillInListFor:">fillInListFor: aNavigatorState 	self updateListWith: self parcelsForList</body><body package="Browser-BaseUI" selector="parcelsForList">parcelsForList	| parcels |	parcels := OrderedCollection with: UnparceledParcel new.	^parcels		addAll: Parcel parcels;		yourself</body><body package="Browser-BaseUI" selector="sortBlock">sortBlock	^[:a :b | a name &lt; b name]</body></methods><methods><class-id>Refactory.Browser.ParcelNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="addBindingParcels:to:">addBindingParcels: aNavigatorState to: parcels 	| bindings |	bindings := aNavigatorState selectedBindings.	bindings do: [:each | self addParcelsForBinding: each to: parcels]</body><body package="Browser-BaseUI" selector="addParcelsForBinding:to:">addParcelsForBinding: each to: parcels 	| containingParcels |	containingParcels := Parcel parcelsForBinding: each.	^(containingParcels isNil or: [containingParcels isEmpty]) 		ifTrue: 			[self addParcelsIfAbsent: (Array with: UnparceledParcel new) to: parcels]		ifFalse: [self addParcelsIfAbsent: containingParcels to: parcels]</body><body package="Browser-BaseUI" selector="addParcelsIfAbsent:to:">addParcelsIfAbsent: requiredParcels to: selectedParcels 	(requiredParcels anySatisfy: [:each | selectedParcels includes: each]) 		ifTrue: [^self].	selectedParcels addAll: requiredParcels</body><body package="Browser-BaseUI" selector="addSelectorParcels:to:">addSelectorParcels: aNavigatorState to: parcels 	| selectors class |	navigator showOnlyFiltered ifFalse: [^self].	selectors := aNavigatorState selectors.	selectors isEmpty ifTrue: [^self].	class := aNavigatorState selectedClass.	class isNil ifTrue: [^self].	selectors do: 			[:each | 			| definingParcels |			definingParcels := Parcel parcelsDefiningSelector: each inClass: class.			definingParcels isEmpty 				ifTrue: 					[self addParcelsIfAbsent: (Array with: UnparceledParcel new) to: parcels]				ifFalse: [self addParcelsIfAbsent: definingParcels to: parcels]]</body><body package="Browser-BaseUI" selector="addSharedVariableParcels:to:">addSharedVariableParcels: aNavigatorState to: parcels 	| vars class |	navigator showOnlyFiltered ifFalse: [^self].	vars := aNavigatorState sharedVariableNames.	vars isEmpty ifTrue: [^self].	class := aNavigatorState classOrNameSpace.	class isNil ifTrue: [^self].	vars do: 			[:each | 			| binding |			binding := class bindingFor: each.			binding notNil ifTrue: [self addParcelsForBinding: binding to: parcels]]</body><body package="Browser-BaseUI" selector="parcelsDefiningBinding:">parcelsDefiningBinding: aBinding 	| parcels realParcels |	parcels := (UnparceledParcel isBindingUnparceled: aBinding) 				ifTrue: [OrderedCollection with: UnparceledParcel new]				ifFalse: [OrderedCollection new].	realParcels := Parcel parcelsForBinding: aBinding.	realParcels notNil ifTrue: [parcels addAll: realParcels].	^parcels</body><body package="Browser-BaseUI" selector="parcelsForClass:">parcelsForClass: each 	| parcels realParcels |	parcels := (UnparceledParcel isUnparceled: each) 				ifTrue: [OrderedCollection with: UnparceledParcel new]				ifFalse: [OrderedCollection new].	realParcels := Parcel parcelsForClass: each.	realParcels notNil ifTrue: [parcels addAll: realParcels].	^parcels</body><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	| parcels |	self fillInListFor: aNavigatorState.	parcels := OrderedCollection withAll: aNavigatorState parcels.	self		addSelectorParcels: aNavigatorState to: parcels;		addSharedVariableParcels: aNavigatorState to: parcels;		addBindingParcels: aNavigatorState to: parcels.	aNavigatorState parcels: parcels.	self select: parcels</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	| parcels |	parcels := aNavigatorState parcels.	self fillInListFor: aNavigatorState.	parcels := parcels select: [:each | self list includes: each].	(parcels isEmpty and: [self shouldSelectParcels]) 		ifTrue: [parcels := self list].	aNavigatorState parcels: parcels.	self select: parcels</body></methods><methods><class-id>Refactory.Browser.ParcelNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	aNavigatorState parcels: self selections</body></methods><methods><class-id>Refactory.Browser.ParcelNavigatorPart</class-id> <category>testing</category><body package="Browser-BaseUI" selector="shouldSelectParcels">shouldSelectParcels	^self list size = 1</body></methods><methods><class-id>Refactory.Browser.ParcelNavigatorPart</class-id> <category>menus</category><body package="Browser-BaseUI" selector="defaultMenu">defaultMenu	^navigator menuNamed: #parcelMenu</body></methods><methods><class-id>Refactory.Browser.ParcelNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="changeSetUpdate:with:">changeSetUpdate: anAspectSymbol with: aParameter 	anAspectSymbol == #unloadComponent: 		ifTrue: [self list remove: aParameter first ifAbsent: []].	anAspectSymbol == #loadParcel: ifTrue: [self loadParcel: aParameter first]</body><body package="Browser-BaseUI" selector="loadParcel:">loadParcel: parcel 	self addToList: parcel</body></methods><methods><class-id>Refactory.Browser.ParcelNavigatorPart</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="displayTextFor:">displayTextFor: anObject 	^anObject isUnparceledParcel 		ifTrue: [super displayTextFor: anObject]		ifFalse: [anObject listEntry]</body></methods><methods><class-id>Refactory.Browser.ParcelNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>actions</category><body package="Browser-BaseUI" selector="checkAllCategories">checkAllCategories	| categoryMatch |	categoryMatch := self request: (#SelectCategoriesMatching &lt;&lt; #browser &gt;&gt; 'Select categories matching:').	categoryMatch isEmpty ifTrue: [^self].	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[self allCategories 						do: [:each | (categoryMatch match: each) ifTrue: [self checkCategory: each]]]]</body><body package="Browser-BaseUI" selector="checkAllClasses">checkAllClasses	| classMatch |	classMatch := self request: (#SelectClassesMatching &lt;&lt; #browser &gt;&gt; 'Select classes matching:').	classMatch isEmpty ifTrue: [^self].	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[self classesForCategories 						do: [:each | (classMatch match: each) ifTrue: [self checkClass: each]]]]</body><body package="Browser-BaseUI" selector="checkAllProtocols">checkAllProtocols	| protocolMatch |	protocolMatch := self request: (#SelectProtocolsMatching &lt;&lt; #browser &gt;&gt; 'Select protocols matching:').	protocolMatch isEmpty ifTrue: [^self].	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[self protocolsForClass 						do: [:each | (protocolMatch match: each) ifTrue: [self checkProtocol: each]]]]</body><body package="Browser-BaseUI" selector="checkAllSelectors">checkAllSelectors	| selectorMatch |	selectorMatch := self request: (#SelectSelectorsMatching &lt;&lt; #browser &gt;&gt; 'Select selectors matching:').	selectorMatch isEmpty ifTrue: [^self].	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[self selectorsForProtocols do: 							[:each | 							(selectorMatch match: each selector) 								ifTrue: 									[selectedEnvironment addClass: self selectedClass selector: each selector]]]]</body><body package="Browser-BaseUI" selector="checkCategory">checkCategory	self 		updateDisplayAfter: [self categories do: [:each | self checkCategory: each]]</body><body package="Browser-BaseUI" selector="checkChangeSet">checkChangeSet	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[ChangeSet current changedClasses do: 							[:each | 							each isMeta 								ifTrue: [selectedEnvironment addClass: each]								ifFalse: 									[selectedEnvironment										addClass: each;										addClass: each class]]]]</body><body package="Browser-BaseUI" selector="checkClass">checkClass	self updateDisplayAfter: 			[self nonMetaClasses do: 					[:each | 					selectedEnvironment						addClass: each;						addClass: each class]]</body><body package="Browser-BaseUI" selector="checkImplementors">checkImplementors	self updateDisplayAfter: 			[environment classesDo: 					[:class | 					self selectors do: 							[:selector | 							(environment includesSelector: selector in: class)								ifTrue: [selectedEnvironment addClass: class selector: selector]]]]</body><body package="Browser-BaseUI" selector="checkProtocol">checkProtocol	self updateDisplayAfter: 			[| class |			class := self selectedClass.			self protocols do: 					[:each | 					(environment selectorsFor: each in: class)						do: [:sel | selectedEnvironment addClass: class selector: sel]]]</body><body package="Browser-BaseUI" selector="checkSelector">checkSelector	self updateDisplayAfter: 			[| class |			class := self selectedClass.			self selectors				do: [:each | selectedEnvironment addClass: class selector: each]]</body><body package="Browser-BaseUI" selector="checkSenders">checkSenders	self updateDisplayAfter: 			[environment classesDo: 					[:class | 					self selectors do: 							[:selector | 							(environment selectorsForClass: class) do: 									[:each | 									((class compiledMethodAt: each) refersToLiteral: selector)										ifTrue: [selectedEnvironment addClass: class selector: each]]]]]</body><body package="Browser-BaseUI" selector="checkSubclasses">checkSubclasses	self updateDisplayAfter: 			[self nonMetaClasses do: 					[:each | 					each allSubclasses do: 							[:sub | 							selectedEnvironment								addClass: sub;								addClass: sub class]]]</body><body package="Browser-BaseUI" selector="checkSuperclasses">checkSuperclasses	self updateDisplayAfter: 			[self nonMetaClasses do: 					[:class | 					class allSuperclasses , class class allSuperclasses 						do: [:each | selectedEnvironment addClass: each]]]</body><body package="Browser-BaseUI" selector="uncheckAllCategories">uncheckAllCategories	| categoryMatch |	categoryMatch := self request: (#DeselectCategoriesMatching &lt;&lt; #browser &gt;&gt; 'Deselect categories matching:').	categoryMatch isEmpty ifTrue: [^self].	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[self allCategories 						do: [:each | (categoryMatch match: each) ifTrue: [self uncheckCategory: each]]]]</body><body package="Browser-BaseUI" selector="uncheckAllClasses">uncheckAllClasses	| classMatch |	classMatch := self request: (#DeselectClassesMatching &lt;&lt; #browser &gt;&gt; 'Deselect classes matching:').	classMatch isEmpty ifTrue: [^self].	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[self classesForCategories 						do: [:each | (classMatch match: each) ifTrue: [self uncheckClass: each]]]]</body><body package="Browser-BaseUI" selector="uncheckAllProtocols">uncheckAllProtocols	| protocolMatch |	protocolMatch := self request: (#DeselectProtocolsMatching &lt;&lt; #browser &gt;&gt; 'Deselect protocols matching:').	protocolMatch isEmpty ifTrue: [^self].	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[self protocolsForClass 						do: [:each | (protocolMatch match: each) ifTrue: [self uncheckProtocol: each]]]]</body><body package="Browser-BaseUI" selector="uncheckAllSelectors">uncheckAllSelectors	| selectorMatch |	selectorMatch := self request: (#DeselectSelectorsMatching &lt;&lt; #browser &gt;&gt; 'Deselect selectors matching:').	selectorMatch isEmpty ifTrue: [^self].	self updateDisplayAfter: 			[self showWaitCursorWhile: 					[self selectorsForProtocols do: 							[:each | 							(selectorMatch match: each selector) 								ifTrue: 									[selectedEnvironment removeClass: self selectedClass selector: each selector]]]]</body><body package="Browser-BaseUI" selector="uncheckCategory">uncheckCategory	self 		updateDisplayAfter: [self categories do: [:each | self uncheckCategory: each]]</body><body package="Browser-BaseUI" selector="uncheckClass">uncheckClass	self updateDisplayAfter: 			[self nonMetaClasses do: 					[:each | 					selectedEnvironment						removeClass: each;						removeClass: each class]]</body><body package="Browser-BaseUI" selector="uncheckImplementors">uncheckImplementors	self updateDisplayAfter: 			[environment classesDo: 					[:class | 					self selectors do: 							[:selector | 							(environment includesSelector: selector in: class)								ifTrue: [selectedEnvironment removeClass: class selector: selector]]]]</body><body package="Browser-BaseUI" selector="uncheckProtocol">uncheckProtocol	self updateDisplayAfter: 			[| class |			class := self selectedClass.			self protocols do: 					[:each | 					(environment selectorsFor: each in: class)						do: [:sel | selectedEnvironment removeClass: class selector: sel]]]</body><body package="Browser-BaseUI" selector="uncheckSelector">uncheckSelector	self updateDisplayAfter: 			[| class |			class := self selectedClass.			self selectors				do: [:each | selectedEnvironment removeClass: class selector: each]]</body><body package="Browser-BaseUI" selector="uncheckSenders">uncheckSenders	self updateDisplayAfter: 			[environment classesDo: 					[:class | 					self selectors do: 							[:selector | 							(environment selectorsForClass: class) do: 									[:each | 									((class compiledMethodAt: each) refersToLiteral: selector)										ifTrue: [selectedEnvironment removeClass: class selector: each]]]]]</body><body package="Browser-BaseUI" selector="uncheckSubclasses">uncheckSubclasses	self updateDisplayAfter: 			[self nonMetaClasses do: 					[:class | 					class allSubclasses do: 							[:each | 							selectedEnvironment								removeClass: each;								removeClass: each class]]]</body><body package="Browser-BaseUI" selector="uncheckSuperclasses">uncheckSuperclasses	self updateDisplayAfter: 			[self nonMetaClasses do: 					[:class | 					class allSuperclasses , class class allSuperclasses 						do: [:each | selectedEnvironment removeClass: each]]]</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>private</category><body package="Browser-BaseUI" selector="allCategories">allCategories	^self CategoryNavigatorPart list</body><body package="Browser-BaseUI" selector="checkCategory:">checkCategory: aCategory 	(environment namesInCategory: aCategory) do: 			[:each | 			| class |			class := each asQualifiedReference bindingOrNil value.			class isBehavior 				ifTrue: 					[selectedEnvironment						addClass: class;						addClass: class class]]</body><body package="Browser-BaseUI" selector="checkClass:">checkClass: aName 	| class |	class := self classForName: aName.	class isNil ifTrue: [^self].	selectedEnvironment		addClass: class;		addClass: class class</body><body package="Browser-BaseUI" selector="checkProtocol:">checkProtocol: aProtocol 	| class |	class := self selectedClass.	(environment selectorsFor: aProtocol in: class)		do: [:each | selectedEnvironment addClass: class selector: each]</body><body package="Browser-BaseUI" selector="classesForCategories">classesForCategories	^self ClassNavigatorPart list</body><body package="Browser-BaseUI" selector="protocolsForClass">protocolsForClass	^self SelectorProtocolNavigatorPart list</body><body package="Browser-BaseUI" selector="selectorsForProtocols">selectorsForProtocols	^self SelectorNavigatorPart list</body><body package="Browser-BaseUI" selector="uncheckCategory:">uncheckCategory: aCategory 	(environment namesInCategory: aCategory) do: 			[:each | 			| class |			class := each asQualifiedReference bindingOrNil value.			class isBehavior 				ifTrue: 					[selectedEnvironment						removeClass: class;						removeClass: class class]]</body><body package="Browser-BaseUI" selector="uncheckClass:">uncheckClass: aName 	| class |	class := self classForName: aName.	class isNil ifTrue: [^self].	selectedEnvironment		removeClass: class;		removeClass: class class</body><body package="Browser-BaseUI" selector="uncheckProtocol:">uncheckProtocol: aProtocol 	| class |	class := self selectedClass.	(environment selectorsFor: aProtocol in: class)		do: [:each | selectedEnvironment removeClass: class selector: each]</body><body package="Browser-BaseUI" selector="updateDisplayAfter:">updateDisplayAfter: aBlock 	aBlock value.	builder isNil ifTrue: [^self].	#(#categoryList #classList #protocolList #selectorList)		do: [:each | self invalidateComponent: each]</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	super initialize.	environment := BrowserEnvironment new.	selectedEnvironment := SelectorEnvironment new</body><body package="Browser-BaseUI" selector="selectedEnvironment:">selectedEnvironment: anEnvironment 	self updateDisplayAfter: [selectedEnvironment := anEnvironment]</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>private-labels</category><body package="Browser-BaseUI" selector="categoryLabelForView:andIndex:">categoryLabelForView: aView andIndex: anIndex 	^(self selectedEnvironment includesCategory: (aView sequence at: anIndex)) 		ifTrue: 			[(LabelAndIcon with: (aView displayStringAt: anIndex)				attributes: aView textStyle) beCheckMark]		ifFalse: 			[Label 				with: (aView displayStringAt: anIndex)				attributes: aView textStyle				offset: 16 @ 0]</body><body package="Browser-BaseUI" selector="classLabelForView:andIndex:">classLabelForView: aView andIndex: anIndex 	| binding included name |	binding := (aView sequence at: anIndex) fullName asQualifiedReference 				bindingOrNil.	name := binding notNil 				ifTrue: [binding key]				ifFalse: [(aView sequence at: anIndex) simpleName].	included := false.	(binding notNil and: [binding isForClass]) 		ifTrue: 			[included := self selectedEnvironment includesClass: (self isMeta 								ifTrue: [binding value class]								ifFalse: [binding value])].	^included 		ifTrue: [(LabelAndIcon with: name attributes: aView textStyle) beCheckMark]		ifFalse: 			[Label 				with: name				attributes: aView textStyle				offset: 16 @ 0]</body><body package="Browser-BaseUI" selector="protocolLabelForView:andIndex:">protocolLabelForView: view andIndex: index 	^(self selectedEnvironment includesProtocol: (view sequence at: index)		in: self selectedClass) 			ifTrue: 				[(LabelAndIcon with: (view displayStringAt: index) attributes: view textStyle) 					beCheckMark]			ifFalse: 				[Label 					with: (view displayStringAt: index)					attributes: view textStyle					offset: 16 @ 0]</body><body package="Browser-BaseUI" selector="selectorLabelForView:andIndex:">selectorLabelForView: view andIndex: index 	| methodDefinition |	methodDefinition := view sequence at: index.	^(self selectedEnvironment includesSelector: methodDefinition selector		in: methodDefinition implementingClass) 			ifTrue: 				[(LabelAndIcon with: (view displayStringAt: index)					attributes: view textStyle) beCheckMark]			ifFalse: 				[Label 					with: (view displayStringAt: index)					attributes: view textStyle					offset: 16 @ 0]</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="selectedEnvironment">selectedEnvironment	^selectedEnvironment</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>aspects</category><body package="Browser-BaseUI" selector="CategoryNavigatorPart">CategoryNavigatorPart	^partsDictionary at: #CategoryNavigatorPart		ifAbsentPut: 			[parts add: ((CategoryNavigatorPart onNavigator: self)						visualBlock: [:np :view :index | self categoryLabelForView: view andIndex: index];						yourself)]</body><body package="Browser-BaseUI" selector="ClassNavigatorPart">ClassNavigatorPart	^partsDictionary at: #ClassNavigatorPart		ifAbsentPut: 			[parts add: ((ClassNavigatorPart onNavigator: self)						visualBlock: [:np :view :index | self classLabelForView: view andIndex: index];						yourself)]</body><body package="Browser-BaseUI" selector="MetaNavigatorPart">MetaNavigatorPart	^partsDictionary at: #MetaNavigatorPart		ifAbsentPut: [parts add: (MetaNavigatorPart onNavigator: self)]</body><body package="Browser-BaseUI" selector="SelectorNavigatorPart">SelectorNavigatorPart	^partsDictionary at: #SelectorNavigatorPart		ifAbsentPut: 			[parts add: ((SelectorNavigatorPart onNavigator: self)						visualBlock: [:np :view :index | self selectorLabelForView: view andIndex: index];						yourself)]</body><body package="Browser-BaseUI" selector="SelectorProtocolNavigatorPart">SelectorProtocolNavigatorPart	^partsDictionary at: #SelectorProtocolNavigatorPart		ifAbsentPut: 			[parts add: ((SelectorProtocolNavigatorPart onNavigator: self)						visualBlock: [:np :view :index | self protocolLabelForView: view andIndex: index];						yourself)]</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>menus</category><body package="Browser-BaseUI" selector="menu">menu	| menu |	menu := Menu new.	self windowMenuItems 		do: [:each | menu addItem: ((MenuItem labeled: each key) submenu: each value)].	^menu</body><body package="Browser-BaseUI" selector="windowMenuItems">windowMenuItems	| items |	items := OrderedCollection new.	items		add: (#Ca_tegory &lt;&lt; #browser &gt;&gt; 'Ca&amp;tegory') -&gt; (self menuNamed: #categoryMenu);		add: (#_Class &lt;&lt; #browser &gt;&gt; '&amp;Class') -&gt; (self menuNamed: #classMenu).	(partsDictionary includesKey: #SelectorProtocolNavigatorPart) 		ifTrue: 			[items				add: (#_Protocol &lt;&lt; #browser &gt;&gt; '&amp;Protocol') -&gt; (self menuNamed: #protocolMenu);				add: (#_Selector &lt;&lt; #browser &gt;&gt; '&amp;Selector') -&gt; (self menuNamed: #selectorMenu)].	^items</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>accessing-class</category><body package="Browser-BaseUI" selector="classForName:">classForName: className 	| class |	className isNil ifTrue: [^nil].	class := (className includes: $.) 				ifTrue: [className asQualifiedReference valueOrDo: [nil]]				ifFalse: [self nameSpace at: className ifAbsent: [nil]].	class isBehavior ifFalse: [^nil].	^class</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor</class-id> <category>interface closing</category><body package="Browser-BaseUI" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	self release.	^super noticeOfWindowClose: aWindow</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.HierarchyParcelNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="allSelectedClassesFor:">allSelectedClassesFor: aNavigatorState 	| classes |	classes := Set new.	aNavigatorState selectedClasses 		do: [:each | self inheritedClassesOf: each do: [:class | classes add: class]].	^classes</body><body package="Browser-BaseUI" selector="parcelsForClasses:">parcelsForClasses: classes 	| parcels |	parcels := Set new.	classes do: 			[:each | 			| pcls |			pcls := Parcel parcelsForClass: each.			pcls notNil ifTrue: [parcels addAll: pcls]].	(classes anySatisfy: 			[:each | 			(UnparceledParcel isUnparceled: each) 				or: [UnparceledParcel isUnparceled: each class]]) 		ifTrue: [parcels add: UnparceledParcel new].	^parcels</body><body package="Browser-BaseUI" selector="parcelsForList">parcelsForList	| classes |	classes := self allSelectedClassesFor: navigator state.	^self parcelsForClasses: classes</body></methods><methods><class-id>Refactory.Browser.HierarchyParcelNavigatorPart</class-id> <category>testing</category><body package="Browser-BaseUI" selector="shouldSelectParcels">shouldSelectParcels	^true</body></methods><methods><class-id>Refactory.Browser.HierarchyParcelNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="loadParcel:">loadParcel: parcel 	(navigator nonMetaClasses 		anySatisfy: [:each | parcel definesOrExtendsClass: each]) 			ifTrue: [self addToList: parcel]</body></methods><methods><class-id>Refactory.Browser.HierarchyParcelNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.ObjectNameWrapper</class-id> <category>converting</category><body package="Browser-BaseUI" selector="asString">asString	^fullName</body></methods><methods><class-id>Refactory.Browser.ObjectNameWrapper</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="environmentName">environmentName	environmentName isNil 		ifTrue: 			[| index |			index := fullName lastIndexOf: $. ifAbsent: [1].			environmentName := fullName copyFrom: 1 to: index - 1].	^environmentName</body><body package="Browser-BaseUI" selector="fullName">fullName	^fullName</body><body package="Browser-BaseUI" selector="fullName:">fullName: aString 	fullName := aString</body><body package="Browser-BaseUI" selector="simpleName">simpleName	simpleName isNil 		ifTrue: 			[| index |			index := fullName lastIndexOf: $. ifAbsent: [0].			simpleName := fullName copyFrom: index + 1 to: fullName size].	^simpleName</body></methods><methods><class-id>Refactory.Browser.ObjectNameWrapper</class-id> <category>comparing</category><body package="Browser-BaseUI" selector="&lt;">&lt; anObjectNameWrapper 	^self displayString &lt; anObjectNameWrapper displayString</body><body package="Browser-BaseUI" selector="=">= anObjectNameWrapper 	^self class = anObjectNameWrapper class 		and: [fullName = anObjectNameWrapper fullName]</body><body package="Browser-BaseUI" selector="hash">hash	^fullName hash</body></methods><methods><class-id>Refactory.Browser.ObjectNameWrapper</class-id> <category>printing</category><body package="Browser-BaseUI" selector="displayString">displayString	PrintFormat isNil ifTrue: [^self simpleName].	^PrintFormat 		expandMacrosWith: self simpleName		with: self environmentName		with: self fullName</body></methods><methods><class-id>Refactory.Browser.ObjectNameWrapper class</class-id> <category>instance creation</category><body package="Browser-BaseUI" selector="fullName:">fullName: aString 	^(self new)		fullName: aString;		yourself</body></methods><methods><class-id>Refactory.Browser.ClassAndMethodTabNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="buildClassesSubcanvas">buildClassesSubcanvas	| state |	state := navigator getState.	self installSubcanvas: #classesSpec using: self.	self resize: false.	self selectStateForComponents: state</body><body package="Browser-BaseUI" selector="buildMethodsSubcanvas">buildMethodsSubcanvas	| state |	state := navigator getState.	self methods resetBuilder.	self installSubcanvas: #methodsSpec using: self.	self resize: true.	self selectStateForComponents: state</body><body package="Browser-BaseUI" selector="nonPrimaryWidgets">nonPrimaryWidgets	^#(splitter selectors)</body><body package="Browser-BaseUI" selector="releaseComponents">releaseComponents	self components do: [:each | each == methods ifFalse: [each release]]</body><body package="Browser-BaseUI" selector="resize:">resize: fullSizeBoolean 	| splitter widget |	fullSizeBoolean 		ifTrue: [self hideAll: self nonPrimaryWidgets]		ifFalse: [self showAll: self nonPrimaryWidgets].	widget := self builder componentAt: #subcanvas.	splitter := self builder componentAt: #splitter.		[(widget component layout)		rightOffset: (fullSizeBoolean 					ifTrue: [0]					ifFalse: [splitter component layout leftOffset]);		rightFraction: (fullSizeBoolean 					ifTrue: [1]					ifFalse: [splitter component layout leftFraction]).	splitter widget repairAfterMove] 			on: Error			do: [:ex | ex return]</body></methods><methods><class-id>Refactory.Browser.ClassAndMethodTabNavigatorPart</class-id> <category>changing</category><body package="Browser-BaseUI" selector="changedTab">changedTab	super changedTab.	self changed</body></methods><methods><class-id>Refactory.Browser.ClassAndMethodTabNavigatorPart</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="classes">classes	| classes |	classes := self componentNamed: #classes.	classes isNil 		ifTrue: 			[classes := ClassAndObjectNavigatorPart new.			navigator notNil ifTrue: [classes navigator: navigator].			self componentNamed: #classes put: classes].	self selectors.	^classes</body><body package="Browser-BaseUI" selector="methods">methods	methods isNil 		ifTrue: 			[methods := MethodNavigatorPart new.			navigator notNil ifTrue: [methods navigator: navigator]].	(self componentNamed: #methods) isNil 		ifTrue: [self componentNamed: #methods put: methods].	^methods</body><body package="Browser-BaseUI" selector="selectors">selectors	selectors isNil 		ifTrue: 			[selectors := NameSpaceItemTabNavigatorPart new.			navigator notNil ifTrue: [selectors navigator: navigator]].	(self componentNamed: #selectors) isNil 		ifTrue: [self componentNamed: #selectors put: selectors].	^selectors</body></methods><methods><class-id>Refactory.Browser.ClassAndMethodTabNavigatorPart</class-id> <category>testing</category><body package="Browser-BaseUI" selector="isViewingSelectorList">isViewingSelectorList	| subcanvas |	builder isNil ifTrue: [^false].	subcanvas := builder componentAt: #selectors.	^subcanvas isNil ifTrue: [false] ifFalse: [subcanvas isVisible]</body></methods><methods><class-id>Refactory.Browser.ClassAndMethodTabNavigatorPart</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="release">release	methods release.	super release</body></methods><methods><class-id>Refactory.Browser.ClassAndMethodTabNavigatorPart class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="defaultTabDescriptions">defaultTabDescriptions	| descriptions |	descriptions := OrderedCollection new.	descriptions		add: (TabPartDescription 					named: (#Method &lt;&lt; #browser &gt;&gt; 'Method')					buildWith: #buildMethodsSubcanvas					match: #alwaysEnabled:					enabled: #alwaysEnabled:);		add: (TabPartDescription 					named: (#Class &lt;&lt; #browser &gt;&gt; 'Class')					buildWith: #buildClassesSubcanvas					match: #alwaysEnabled:					enabled: #alwaysEnabled:).	^descriptions</body></methods><methods><class-id>Refactory.Browser.ClassAndMethodTabNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.RBInitializerDefinition</class-id> <category>printing</category><body package="Browser-BaseUI" selector="displayString">displayString	^self variableName asString</body></methods><methods><class-id>Refactory.Browser.RBInitializerDefinition</class-id> <category>private</category><body package="Browser-BaseUI" selector="species">species	^InitializerDefinition</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart</class-id> <category>aspects</category><body package="Browser-BaseUI" selector="objectList">objectList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^objectList isNil		ifTrue:			[objectList := MultiSelectionInTree new]		ifFalse:			[objectList]</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="basicExpandToShow:">basicExpandToShow: pundleCollection 	| bundles |	bundles := Set new.	pundleCollection 		do: [:each | bundles addAll: (self storeRegistry enclosingComponentsFor: each)].	bundles isEmpty ifTrue: [^self].	self basicExpandToShow: bundles.	bundles do: 			[:each | 			| index list item |			list := self list.			index := list size + 1.			item := PundleItem item: each.						[(index := list 						prevIndexOf: item						from: index - 1						to: 1) notNil] 					whileTrue: [self expand: index]]</body><body package="Browser-BaseUI" selector="expand:">expand: index 	^self list expand: index</body><body package="Browser-BaseUI" selector="expandToShowPundles:">expandToShowPundles: pundles 	self expand: 1.	self basicExpandToShow: pundles</body><body package="Browser-BaseUI" selector="fillInListFor:needsRefresh:">fillInListFor: aNavigatorState needsRefresh: aBoolean 	| list |	list := self list.	aBoolean 		ifTrue: [list refreshRoot]		ifFalse: 			[1 to: list size				do: 					[:i | 					| wrapper |					wrapper := list wrapperAt: i.					(wrapper openedChildren and: 							[(wrapper children collect: [:each | each value]) 								~= wrapper value containedItems]) 						ifTrue: [^list refreshRoot]]]</body><body package="Browser-BaseUI" selector="select:">select: aCollection 	"Overridden so that we can scroll the list to show a selected item."	| index range view wrapper |	super select: aCollection.	wrapper := self builder componentAt: #objectList.	wrapper isNil ifTrue: [^self].	view := wrapper widget.	range := view visibleIntervalForBounds: view bounds.	range isEmpty ifTrue: [^self].	index := view selectionChannel value detect: [:each | true] ifNone: [^self].	(view selectionChannel value 		anySatisfy: [:each | each between: range first and: range last]) 			ifFalse: [view makeVisible: index]</body><body package="Browser-BaseUI" selector="select:in:">select: aCollection in: aSelectionInList 	| indices list |	indices := OrderedCollection new: aCollection size.	list := aSelectionInList list.	aCollection do: 			[:each | 			| index item |			index := 0.			item := PundleItem item: each.						[(index := list 						nextIndexOf: item						from: index + 1						to: list size) notNil] 					whileTrue: [indices add: index]].	aSelectionInList selectionIndexes: indices</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart</class-id> <category>interface opening</category><body package="Browser-BaseUI" selector="changeMultiSelectionList:">changeMultiSelectionList: aSymbol</body><body package="Browser-BaseUI" selector="updateVisualBlock">updateVisualBlock</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	| pundles selections |	selections := self selections.	pundles := OrderedCollection new: selections size.	selections do: 			[:each | 			| item |			item := each programItem.			item notNil ifTrue: [pundles add: item]].	aNavigatorState pundles: pundles</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart</class-id> <category>testing</category><body package="Browser-BaseUI" selector="shouldSelectPackages">shouldSelectPackages	^self list size = 1</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	super initialize.	self list: (TreeModel 				on: (PundleItem item: self storeRegistry)				displayRoot: true				childrenWith: [:each | each containedItems])</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="selectedItemsIn:">selectedItemsIn: aNavigatorState 	^aNavigatorState pundles</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="changeSetUpdate:with:">changeSetUpdate: anAspectSymbol with: aParameter 	"This may cause some update problems. However, without this code, the bundle list is not automatically refreshed."	(#(#bundleStructure: #loadPundle: #unloadComponent:) 		includes: anAspectSymbol) 			ifTrue: [self fillInListFor: navigator state needsRefresh: false].	anAspectSymbol = #savePundle: ifTrue: [self invalidateComponent: #list]</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart class</class-id> <category>class initialization</category><body package="Browser-BaseUI" selector="initialize">initialize	self showIcons: true</body></methods><methods><class-id>Refactory.Browser.ProtocolNavigatorPart</class-id> <category>testing</category><body package="Browser-BaseUI" selector="hasMethodsIn:">hasMethodsIn: aSymbol 	^(self methodDefinitionsIn: aSymbol) notEmpty</body><body package="Browser-BaseUI" selector="hasSharedVariablesIn:">hasSharedVariablesIn: aSymbol 	^(self sharedVariablesIn: aSymbol) notEmpty</body></methods><methods><class-id>Refactory.Browser.ProtocolNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	| protocols |	protocols := OrderedCollection withAll: aNavigatorState protocols.	self updateSelectedProtocols: protocols from: aNavigatorState.	self fillInListFor: aNavigatorState.	self select: protocols.	aNavigatorState protocols: self selections</body><body package="Browser-BaseUI" selector="updateSelectedProtocols:from:">updateSelectedProtocols: protocols from: aNavigatorState 	self subclassResponsibility</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	| initialSelections |	initialSelections := self selections.	self fillInListFor: aNavigatorState.	self select: initialSelections.	aNavigatorState protocols: self selections</body></methods><methods><class-id>Refactory.Browser.ProtocolNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="fillInListFor:">fillInListFor: aNavigatorState 	self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.ProtocolNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	aNavigatorState protocols: self selections</body></methods><methods><class-id>Refactory.Browser.ProtocolNavigatorPart</class-id> <category>menus</category><body package="Browser-BaseUI" selector="defaultMenu">defaultMenu	^navigator menuNamed: #protocolMenu</body></methods><methods><class-id>Refactory.Browser.ProtocolNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.SelectorProtocolNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="updateSelectedProtocols:from:">updateSelectedProtocols: protocols from: aNavigatorState 	aNavigatorState methodDefinitions do: 			[:each | 			| protocol |			protocol := self environment whichProtocolIncludes: each selector						in: each implementingClass.			(protocols includes: protocol) ifFalse: [protocols add: protocol]]</body></methods><methods><class-id>Refactory.Browser.SelectorProtocolNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="displayTextFor:">displayTextFor: protocol 	^(self hasMethodsIn: protocol) 		ifTrue: [protocol asText]		ifFalse: [('(' , protocol , ')') asText emphasizeAllWith: #italic]</body><body package="Browser-BaseUI" selector="fillInListFor:">fillInListFor: aNavigatorState 	| protocols |	protocols := self allProtocolsIn: aNavigatorState.	self updateListWith: protocols</body><body package="Browser-BaseUI" selector="sortBlock">sortBlock	^ProtocolOrder isNil 		ifTrue: [super sortBlock]		ifFalse: [[:a :b | ProtocolOrder is: a before: b]]</body></methods><methods><class-id>Refactory.Browser.SelectorProtocolNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="changeSetUpdate:with:">changeSetUpdate: anAspectSymbol with: aParameter 	((anAspectSymbol == #reorganizeClass: 		and: [aParameter first = navigator selectedClass]) or:		[anAspectSymbol == #changeSelector:class:protocol: 			and: [(aParameter at: 2) = navigator selectedClass]])			ifTrue: 				[self mergeIntoList: ((self allProtocolsIn: navigator state) 							asSortedCollection: self sortBlock)]</body></methods><methods><class-id>Refactory.Browser.SelectorProtocolNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.SelectorProtocolNavigatorPart class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="protocolOrder">protocolOrder	^ProtocolOrder</body><body package="Browser-BaseUI" selector="protocolOrder:">protocolOrder: aProtocolSortOrder 	ProtocolOrder := aProtocolSortOrder</body><body package="Browser-BaseUI" selector="protocolOrderChoices">protocolOrderChoices	^ProtocolOrderChoices</body></methods><methods><class-id>Refactory.Browser.RBMultiSelectionInList</class-id> <category>utility</category><body package="Browser-BaseUI" selector="clearAll">clearAll	selectionIndexHolder value: self newSelections</body><body package="Browser-BaseUI" selector="selectAll">selectAll	selectionIndexHolder		value: (self selectionClass withAll: (1 to: listHolder value size))</body></methods><methods><class-id>Refactory.Browser.RBMultiSelectionInList</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	super initialize.	self selectionIndexHolder: self newSelections asValue</body></methods><methods><class-id>Refactory.Browser.RBMultiSelectionInList</class-id> <category>private</category><body package="Browser-BaseUI" selector="newSelections">newSelections	^self selectionClass new</body><body package="Browser-BaseUI" selector="selectionClass">selectionClass	^OrderedCollection</body></methods><methods><class-id>Refactory.Browser.RBMultiSelectionInList</class-id> <category>selections in list</category><body package="Browser-BaseUI" selector="selections">selections	| list oc |	oc := OrderedCollection new.	list := listHolder value.	selectionIndexHolder value		do: [:i | (i between: 1 and: list size) ifTrue: [oc add: (list at: i)]].	^oc</body><body package="Browser-BaseUI" selector="selections:">selections: aCollection 	| s l index |	s := self newSelections.	l := listHolder value.	aCollection do: 			[:val | 			((index := l indexOf: val ifAbsent: []) notNil 				and: [(s includes: index) not]) ifTrue: [s add: index]].	self selectionIndexes: s</body></methods><methods><class-id>Refactory.Browser.RBMultiSelectionInList</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="zeroIndex">zeroIndex	^self newSelections</body></methods><methods><class-id>Refactory.Browser.RBMultiSelectionInList</class-id> <category>updating</category><body package="Browser-BaseUI" selector="update:with:from:">update: anAspect with: aParameter from: anObject 	anObject == selectionIndexHolder ifTrue: [^self changed: #selectionIndex].	(anObject == listHolder 		and: [(#(#selectionChanged #selectionChanging) includes: anAspect) not]) 			ifFalse: [^self].	selectionIndexHolder setValue: self newSelections.	self changed: #list.	selectionIndexHolder changed: #value</body></methods><methods><class-id>Refactory.Browser.SharedVariableProtocolNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="updateSelectedProtocols:from:">updateSelectedProtocols: protocols from: aNavigatorState 	aNavigatorState sharedVariableDefinitions do: 			[:each | 			| protocol |			protocol := self environment 						whichProtocolIncludesVariable: each variableName						in: each classOrNameSpace.			(protocols includes: protocol) ifFalse: [protocols add: protocol]]</body></methods><methods><class-id>Refactory.Browser.SharedVariableProtocolNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="displayTextFor:">displayTextFor: protocol 	^(self hasSharedVariablesIn: protocol) 		ifTrue: [protocol asText]		ifFalse: [('(' , protocol , ')') asText emphasizeAllWith: #italic]</body><body package="Browser-BaseUI" selector="fillInListFor:">fillInListFor: aNavigatorState 	| classes protocols |	classes := aNavigatorState classesAndNameSpaces.	(classes size = 1 and: 			[aNavigatorState categories notEmpty 				or: [aNavigatorState parcels notEmpty or: [aNavigatorState pundles notEmpty]]]) 		ifTrue: 			[protocols := Set new.			self inheritedClassesOf: classes asArray first				do: 					[:each | 					protocols addAll: each asNameSpace organization sharedVariableCategories	"self environment sharedVariableProtocolsFor: each"]]		ifFalse: [protocols := #()].	self updateListWith: protocols</body></methods><methods><class-id>Refactory.Browser.SharedVariableProtocolNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="changeSetUpdate:with:">changeSetUpdate: anAspectSymbol with: aParameter 	((#(#reorganizeClassData: #reorganizeNameSpace:) includes: anAspectSymbol) 		and: [aParameter first = navigator classOrNameSpace]) 			ifTrue: 				[self mergeIntoList: ((self allSharedVariableProtocolsIn: navigator state) 							asSortedCollection: self sortBlock)]</body></methods><methods><class-id>Refactory.Browser.SharedVariableProtocolNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.CategoryNavigatorPart</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="navigator:">navigator: aNavigator 	super navigator: aNavigator.	nameSpace := navigator defaultNameSpace</body></methods><methods><class-id>Refactory.Browser.CategoryNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	| categories classes |	nameSpace := aNavigatorState nameSpace.	self fillInListFor: aNavigatorState.	categories := OrderedCollection withAll: aNavigatorState categories.	classes := aNavigatorState classesAndNameSpaces.	classes do: 			[:each | 			| category |			category := self environment whichCategoryIncludes: each.			(category notNil and: [(categories includes: category) not]) 				ifTrue: [categories add: category]].	aNavigatorState categories: categories.	self select: categories</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	| categories |	nameSpace := aNavigatorState nameSpace.	categories := aNavigatorState categories.	self fillInListFor: aNavigatorState.	self select: categories</body></methods><methods><class-id>Refactory.Browser.CategoryNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	aNavigatorState nameSpace: nameSpace.	aNavigatorState categories: self selections</body></methods><methods><class-id>Refactory.Browser.CategoryNavigatorPart</class-id> <category>menus</category><body package="Browser-BaseUI" selector="defaultMenu">defaultMenu	^navigator menuNamed: #categoryMenu</body></methods><methods><class-id>Refactory.Browser.CategoryNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="fillInListFor:">fillInListFor: aNavigatorState 	| name |	name := aNavigatorState objectNames 				detect: [:each | each asQualifiedReference isDefined]				ifNone: [nil].	nameSpace := name notNil 				ifTrue: [name asQualifiedReference environment]				ifFalse: [aNavigatorState nameSpace].	self updateListWith: self environment categories</body></methods><methods><class-id>Refactory.Browser.CategoryNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="changeSetUpdate:with:">changeSetUpdate: anAspectSymbol with: aParameter 	"We don't handle removing categories."	| newEntries |	anAspectSymbol == #reorganizeNameSpace: ifFalse: [^self].	newEntries := aParameter first organization classCategories 				reject: [:each | self list includes: each].	newEntries do: [:each | self addToList: each]</body></methods><methods><class-id>Refactory.Browser.CategoryNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.MethodNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="displayTextFor:">displayTextFor: aMethodDefinition	^aMethodDefinition fullDisplayText</body><body package="Browser-BaseUI" selector="fillInListFor:">fillInListFor: aNavigatorState 	| defs |	defs := navigator environment methodDefinitions.	(defs size = self list size and: [defs size &gt; 100]) ifTrue: [^self list].	"Optimization hack -- sorting the defs is really slow."	^defs</body><body package="Browser-BaseUI" selector="fillInStateBasedOnSelection:">fillInStateBasedOnSelection: aNavigatorState 	| selection object |	selection := self selection.	selection notNil 		ifTrue: 			[object := selection classOrNameSpace.			aNavigatorState				category: (object isBehavior 							ifTrue: [object instanceBehavior]							ifFalse: [object]) category;				classOrNameSpace: selection classOrNameSpace;				protocol: self protocolHolder value]</body><body package="Browser-BaseUI" selector="selectDefinitions:">selectDefinitions: aNavigatorState 	| defs class |	defs := aNavigatorState definitions.	defs notEmpty ifTrue: [^self select: defs].	class := aNavigatorState classOrNameSpace.	class isNil ifTrue: [^self select: #()].	aNavigatorState isMeta ifTrue: [class := class class].	defs := self list select: [:each | each classOrNameSpace = class].	self select: defs</body></methods><methods><class-id>Refactory.Browser.MethodNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	self fillInListWith: aNavigatorState.	self selectDefinitions: aNavigatorState</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	self fillInListWith: aNavigatorState.	self selectDefinitions: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.MethodNavigatorPart</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	super initialize.	self protocolHolder value: nil</body></methods><methods><class-id>Refactory.Browser.MethodNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	self fillInStateBasedOnSelection: aNavigatorState.	super fillInState: aNavigatorState</body><body package="Browser-BaseUI" selector="initiallyOpened:">initiallyOpened: aNavigatorState 	super initiallyOpened: aNavigatorState.	self list isEmpty ifTrue: [^self].	self selection notNil ifTrue: [^self].	self select: (Array with: self list first).	self fillInState: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.MethodNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="addItemChange">addItemChange</body></methods><methods><class-id>Refactory.Browser.MethodNavigatorPart</class-id> <category>menus</category><body package="Browser-BaseUI" selector="defaultMenu">defaultMenu	"Ugly method to add the spawn hierarchy after the spawn in the method list 	(assuming that our navigator has the spawn hierarchy action)."	| newMenu menuItem spawnMenuItem |	newMenu := super defaultMenu copy.	menuItem := (navigator menuNamed: #classMenu) 				atNameKey: #'Spawn Class Hierarchy'.	spawnMenuItem := newMenu atNameKey: #'Spawn Method'.	menuItem isNil | spawnMenuItem isNil ifTrue: [^newMenu].	newMenu addItem: menuItem copy atPosition: spawnMenuItem position + 0.00001.	^newMenu</body></methods><methods><class-id>Refactory.Browser.MethodNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.NameSpaceItemTabNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="buildClassSubcanvas">buildClassSubcanvas	type := #class.	self buildSelectorSubcanvas</body><body package="Browser-BaseUI" selector="buildInstanceSubcanvas">buildInstanceSubcanvas	type := #instance.	self buildSelectorSubcanvas</body><body package="Browser-BaseUI" selector="buildInstanceVariableSubcanvas">buildInstanceVariableSubcanvas	type := #instance.	self installSubcanvas: #instanceVariableWindowSpec using: self</body><body package="Browser-BaseUI" selector="buildSelectorSubcanvas">buildSelectorSubcanvas	| subcanvases |	subcanvases := self components.	(subcanvases size = 1 		and: [subcanvases first class = SelectorNavigatorPart]) 			ifFalse: [self installSubcanvas: #selectorWithProtocolWindowSpec using: self]</body><body package="Browser-BaseUI" selector="buildSharedVariableSubcanvas">buildSharedVariableSubcanvas	type := #sharedVariable.	self installSubcanvas: #sharedVariableWithProtocolWindowSpec using: self</body><body package="Browser-BaseUI" selector="buildSystemClassSubcanvas">buildSystemClassSubcanvas	type := #class.	self buildSystemSelectorSubcanvas</body><body package="Browser-BaseUI" selector="buildSystemInstanceSubcanvas">buildSystemInstanceSubcanvas	type := #instance.	self buildSystemSelectorSubcanvas</body><body package="Browser-BaseUI" selector="buildSystemSelectorSubcanvas">buildSystemSelectorSubcanvas	| subcanvases |	subcanvases := self components.	(subcanvases size = 2 and: 			[subcanvases first class = SelectorProtocolNavigatorPart 				and: [subcanvases last class = SelectorNavigatorPart]]) 		ifFalse: [self installSubcanvas: #selectorWindowSpec using: self]</body><body package="Browser-BaseUI" selector="buildSystemSharedVariableSubcanvas">buildSystemSharedVariableSubcanvas	type := #sharedVariable.	self installSubcanvas: #sharedVariableWindowSpec using: self</body></methods><methods><class-id>Refactory.Browser.NameSpaceItemTabNavigatorPart</class-id> <category>testing</category><body package="Browser-BaseUI" selector="isClass:">isClass: aNavigatorState 	aNavigatorState objectNames size ~= 1 ifTrue: [^true].	^aNavigatorState selectedClass notNil</body><body package="Browser-BaseUI" selector="isClassAndNotSystem:">isClassAndNotSystem: aNavigatorState 	^(self isNotSystem: aNavigatorState) and: [self isClass: aNavigatorState]</body><body package="Browser-BaseUI" selector="isClassAndSystem:">isClassAndSystem: aNavigatorState 	^(self isSystem: aNavigatorState) and: [self isClass: aNavigatorState]</body><body package="Browser-BaseUI" selector="isClassMethod:">isClassMethod: aNavigatorState 	^aNavigatorState isMeta and: [aNavigatorState isData not]</body><body package="Browser-BaseUI" selector="isInstanceMethod:">isInstanceMethod: aNavigatorState 	^aNavigatorState isMeta not and: 			[aNavigatorState isData not 				and: [(self isInstanceVariable: aNavigatorState) not]]</body><body package="Browser-BaseUI" selector="isInstanceVariable:">isInstanceVariable: aNavigatorState 	^(aNavigatorState propertyAt: #instanceVariables ifAbsent: [#()]) notEmpty</body><body package="Browser-BaseUI" selector="isNotSystem:">isNotSystem: aNavigatorState 	^(self isSystem: aNavigatorState) not</body><body package="Browser-BaseUI" selector="isSharedVariable:">isSharedVariable: aNavigatorState 	^aNavigatorState isData or: [aNavigatorState classOrNameSpace isNameSpace]</body><body package="Browser-BaseUI" selector="isSystem:">isSystem: aNavigatorState 	^showProtocols or: [navigator environment isSystem]</body></methods><methods><class-id>Refactory.Browser.NameSpaceItemTabNavigatorPart</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="categories">categories	| categories |	categories := self componentNamed: #categories.	categories isNil 		ifTrue: 			[categories := SharedVariableProtocolNavigatorPart new.			navigator notNil ifTrue: [categories navigator: navigator].			self componentNamed: #categories put: categories].	^categories</body><body package="Browser-BaseUI" selector="instanceVariables">instanceVariables	| instanceVariables |	instanceVariables := self componentNamed: #instanceVariables.	instanceVariables isNil 		ifTrue: 			[instanceVariables := InstanceVariableNavigatorPart new.			navigator notNil ifTrue: [instanceVariables navigator: navigator].			self componentNamed: #instanceVariables put: instanceVariables].	^instanceVariables</body><body package="Browser-BaseUI" selector="instanceVariableSelectors">instanceVariableSelectors	| instanceVariableSelectors |	instanceVariableSelectors := self 				componentNamed: #instanceVariableSelectors.	instanceVariableSelectors isNil 		ifTrue: 			[instanceVariableSelectors := SelectorNavigatorPart new.			instanceVariableSelectors listSelector: #instanceVariableSelectorsIn:.			navigator notNil ifTrue: [instanceVariableSelectors navigator: navigator].			self componentNamed: #instanceVariableSelectors				put: instanceVariableSelectors].	^instanceVariableSelectors</body><body package="Browser-BaseUI" selector="protocols">protocols	| protocols |	protocols := self componentNamed: #protocols.	protocols isNil 		ifTrue: 			[protocols := SelectorProtocolNavigatorPart new.			navigator notNil ifTrue: [protocols navigator: navigator].			self componentNamed: #protocols put: protocols].	^protocols</body><body package="Browser-BaseUI" selector="selectors">selectors	| selectors |	selectors := self componentNamed: #selectors.	selectors isNil 		ifTrue: 			[selectors := SelectorNavigatorPart new.			navigator notNil ifTrue: [selectors navigator: navigator].			self componentNamed: #selectors put: selectors].	^selectors</body><body package="Browser-BaseUI" selector="selectorsWithProtocol">selectorsWithProtocol	| selectorsWithProtocol |	selectorsWithProtocol := self componentNamed: #selectorsWithProtocol.	selectorsWithProtocol isNil 		ifTrue: 			[selectorsWithProtocol := SelectorNavigatorPart new.			selectorsWithProtocol listSelector: #allSelectorsIn:.			navigator notNil ifTrue: [selectorsWithProtocol navigator: navigator].			self componentNamed: #selectorsWithProtocol put: selectorsWithProtocol].	^selectorsWithProtocol</body><body package="Browser-BaseUI" selector="sharedVariables">sharedVariables	| sharedVariables |	sharedVariables := self componentNamed: #sharedVariables.	sharedVariables isNil 		ifTrue: 			[sharedVariables := SharedVariableNavigatorPart new.			navigator notNil ifTrue: [sharedVariables navigator: navigator].			self componentNamed: #sharedVariables put: sharedVariables].	^sharedVariables</body><body package="Browser-BaseUI" selector="sharedVariablesWithProtocol">sharedVariablesWithProtocol	| sharedVariablesWithProtocol |	sharedVariablesWithProtocol := self 				componentNamed: #sharedVariablesWithProtocol.	sharedVariablesWithProtocol isNil 		ifTrue: 			[sharedVariablesWithProtocol := SharedVariableNavigatorPart new.			sharedVariablesWithProtocol listSelector: #allSharedVariablesIn:.			navigator notNil 				ifTrue: [sharedVariablesWithProtocol navigator: navigator].			self componentNamed: #sharedVariablesWithProtocol				put: sharedVariablesWithProtocol].	^sharedVariablesWithProtocol</body><body package="Browser-BaseUI" selector="showProtocols">showProtocols	^showProtocols</body><body package="Browser-BaseUI" selector="showProtocols:">showProtocols: aBoolean	showProtocols := aBoolean</body></methods><methods><class-id>Refactory.Browser.NameSpaceItemTabNavigatorPart</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	super initialize.	type := #instance.	showProtocols := false</body></methods><methods><class-id>Refactory.Browser.NameSpaceItemTabNavigatorPart</class-id> <category>changing</category><body package="Browser-BaseUI" selector="changedTab">changedTab	super changedTab.	self updateComponentsWithState: navigator getState.	self changed</body></methods><methods><class-id>Refactory.Browser.NameSpaceItemTabNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	aNavigatorState type: type.	super fillInState: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.NameSpaceItemTabNavigatorPart class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="defaultTabDescriptions">defaultTabDescriptions	| descriptions |	descriptions := OrderedCollection new.	descriptions		add: (TabPartDescription 					named: #Instance &lt;&lt; #labels &gt;&gt; 'Instance'					buildWith: #buildSystemInstanceSubcanvas					match: #isInstanceMethod:					enabled: #isClassAndSystem:);		add: (TabPartDescription 					named: #Class &lt;&lt; #labels &gt;&gt; 'Class'					buildWith: #buildSystemClassSubcanvas					match: #isClassMethod:					enabled: #isClassAndSystem:);		add: (TabPartDescription 					named: #Instance &lt;&lt; #labels &gt;&gt; 'Instance'					buildWith: #buildInstanceSubcanvas					match: #isInstanceMethod:					enabled: #isClassAndNotSystem:);		add: (TabPartDescription 					named: #Class &lt;&lt; #labels &gt;&gt; 'Class'					buildWith: #buildClassSubcanvas					match: #isClassMethod:					enabled: #isClassAndNotSystem:);		add: (TabPartDescription 					named: #SharedVariable &lt;&lt; #labels &gt;&gt; 'Shared Variable'					buildWith: #buildSystemSharedVariableSubcanvas					match: #isSharedVariable:					enabled: #isSystem:);		add: (TabPartDescription 					named: #SharedVariable &lt;&lt; #labels &gt;&gt; 'Shared Variable'					buildWith: #buildSharedVariableSubcanvas					match: #isSharedVariable:					enabled: #isNotSystem:);		add: (TabPartDescription 					named: #InstanceVariable &lt;&lt; #labels &gt;&gt; 'Instance Variable'					buildWith: #buildInstanceVariableSubcanvas					match: #isInstanceVariable:					enabled: #isClassAndSystem:).	^descriptions</body></methods><methods><class-id>Refactory.Browser.NameSpaceItemTabNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.TabPartDescription</class-id> <category>private</category><body package="Browser-BaseUI" selector="buildSelector:">buildSelector: aSymbol 	buildSelector := aSymbol</body><body package="Browser-BaseUI" selector="enabledSelector:">enabledSelector: aSymbol 	enabledSelector := aSymbol</body><body package="Browser-BaseUI" selector="matchSelector:">matchSelector: aSymbol 	matchSelector := aSymbol</body><body package="Browser-BaseUI" selector="name:">name: aString 	name := aString</body></methods><methods><class-id>Refactory.Browser.TabPartDescription</class-id> <category>testing</category><body package="Browser-BaseUI" selector="isEnabledIn:for:">isEnabledIn: aNavigatorState for: aTabNavigatorPart 	^aTabNavigatorPart perform: enabledSelector with: aNavigatorState</body><body package="Browser-BaseUI" selector="matches:for:">matches: aNavigatorState for: aTabNavigatorPart 	^aTabNavigatorPart perform: matchSelector with: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.TabPartDescription</class-id> <category>printing</category><body package="Browser-BaseUI" selector="identifier">identifier	^(name respondsTo: #key)		ifTrue: [name key asString]		ifFalse: [name asString]</body><body package="Browser-BaseUI" selector="printOn:">printOn: aStream 	aStream nextPutAll: name asString</body></methods><methods><class-id>Refactory.Browser.TabPartDescription</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="buildIn:">buildIn: aTabNavigatorPart 	^aTabNavigatorPart perform: buildSelector</body></methods><methods><class-id>Refactory.Browser.TabPartDescription class</class-id> <category>instance creation</category><body package="Browser-BaseUI" selector="named:buildWith:match:enabled:">named: aString buildWith: buildSelector match: matchSelector enabled: enabledSelector 	^(self new)		name: aString;		buildSelector: buildSelector;		matchSelector: matchSelector;		enabledSelector: enabledSelector;		yourself</body></methods><methods><class-id>Refactory.Browser.MetaNavigatorPart</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	super initialize.	self metaHolder value: false</body></methods><methods><class-id>Refactory.Browser.MetaNavigatorPart</class-id> <category>aspects</category><body package="Browser-BaseUI" selector="metaHolder">metaHolder	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	^metaHolder isNil		ifTrue: [metaHolder := nil asValue]		ifFalse: [metaHolder]</body></methods><methods><class-id>Refactory.Browser.MetaNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	self metaHolder value: aNavigatorState isMeta</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	aNavigatorState 		type: (self metaHolder value ifTrue: [#class] ifFalse: [#instance])</body></methods><methods><class-id>Refactory.Browser.MetaNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	aNavigatorState 		type: (self metaHolder value ifTrue: [#class] ifFalse: [#instance])</body></methods><methods><class-id>Refactory.Browser.MetaNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.BrowserDialog</class-id> <category>widget properties</category><body package="Browser-BaseUI" selector="disable:">disable: aSymbol 	| component |	builder isNil ifTrue: [^self].	component := builder componentAt: aSymbol.	component notNil ifTrue: [component disable]</body><body package="Browser-BaseUI" selector="disableAll:">disableAll: aCollection	aCollection do: [:each | self disable: each]</body><body package="Browser-BaseUI" selector="enable:">enable: aSymbol 	| component |	builder isNil ifTrue: [^self].	component := builder componentAt: aSymbol.	component notNil ifTrue: [component enable]</body><body package="Browser-BaseUI" selector="enableAll:">enableAll: aCollection	aCollection do: [:each | self enable: each]</body><body package="Browser-BaseUI" selector="hide:">hide: aSymbol 	| component |	builder isNil ifTrue: [^self].	component := builder componentAt: aSymbol.	component notNil ifTrue: [component beInvisible]</body><body package="Browser-BaseUI" selector="hideAll:">hideAll: aCollection	aCollection do: [:each | self hide: each]</body><body package="Browser-BaseUI" selector="show:">show: aSymbol 	| component |	builder isNil ifTrue: [^self].	component := builder componentAt: aSymbol.	component notNil ifTrue: [component beVisible]</body><body package="Browser-BaseUI" selector="showAll:">showAll: aCollection	aCollection do: [:each | self show: each]</body></methods><methods><class-id>Refactory.Browser.BrowserDialog</class-id> <category>interface opening</category><body package="Browser-BaseUI" selector="createSelectedVisualBlockFrom:">createSelectedVisualBlockFrom: aBlock 	^	[:v :index | 	| rw |	rw := ReversingWrapper on: (aBlock value: v value: index).	rw reverse setValue: true.	BoundedWrapper on: rw]</body><body package="Browser-BaseUI" selector="createVisualBlockFrom:">createVisualBlockFrom: block 	^[:view :index | BoundingWrapper on: (block value: view value: index)]</body><body package="Browser-BaseUI" selector="visualBlockFor:is:">visualBlockFor: aSymbol is: aBlock 	| specWidget |	builder isNil ifTrue: [^self].	specWidget := builder componentAt: aSymbol.	specWidget isNil ifTrue: [^self].	(specWidget widget)		visualBlock: (self createVisualBlockFrom: aBlock);		selectedVisualBlock: (self createSelectedVisualBlockFrom: aBlock)</body></methods><methods><class-id>Refactory.Browser.BrowserDialog class</class-id> <category>images</category><body package="Browser-BaseUI" selector="downImage">downImage	^OpaqueImageWithEnablement		figure: self downIcon		shape: self downIconMask		inactiveFigure: self disabledDownIcon		inactiveShape: self disabledDownIconMask</body><body package="Browser-BaseUI" selector="upImage">upImage	^OpaqueImageWithEnablement		figure: self upIcon		shape: self upIconMask		inactiveFigure: self disabledUpIcon		inactiveShape: self disabledUpIconMask</body></methods><methods><class-id>Refactory.Browser.BrowserDialog class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.ClassSelectionDialog</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="environmentEditor">environmentEditor	environmentEditor isNil 		ifTrue: 			[environmentEditor := EnvironmentEditor new.			environmentEditor selectedEnvironment: ClassEnvironment new].	^environmentEditor</body><body package="Browser-BaseUI" selector="selectedEnvironment">selectedEnvironment	^self environmentEditor selectedEnvironment</body></methods><methods><class-id>Refactory.Browser.ClassSelectionDialog</class-id> <category>interface opening</category><body package="Browser-BaseUI" selector="openInterface">openInterface	^self openInterface: (self selectedEnvironment isSelector				ifTrue: [#selectorWindowSpec]				ifFalse: [#windowSpec])</body></methods><methods><class-id>Refactory.Browser.ClassSelectionDialog</class-id> <category>interface closing</category><body package="Browser-BaseUI" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	self release.	^super noticeOfWindowClose: aWindow</body></methods><methods><class-id>Refactory.Browser.ClassSelectionDialog</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="release">release	self environmentEditor release.	super release</body></methods><methods><class-id>Refactory.Browser.ClassSelectionDialog class</class-id> <category>instance creation</category><body package="Browser-BaseUI" selector="onEnvironment:">onEnvironment: anEnvironment 	| dialog |	dialog := self new.	dialog environmentEditor selectedEnvironment: anEnvironment copy.	^dialog</body></methods><methods><class-id>Refactory.Browser.ClassSelectionDialog class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.SelectorNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="allSelectorsIn:">allSelectorsIn: aNavigatorState 	| selectors classes class |	classes := aNavigatorState selectedClasses.	classes size ~= 1 ifTrue: [^#()].	class := classes asArray first.	selectors := self environment selectorsForClass: class.	^selectors 		collect: [:each | RBMethodDefinition class: class selector: each]</body><body package="Browser-BaseUI" selector="displayTextFor:">displayTextFor: aMethodDefinition 	| text |	text := super displayTextFor: aMethodDefinition.	navigator showOnlyFiltered ifTrue: [^text].	(navigator parcels , navigator packages anySatisfy: 			[:each | 			each definesSelector: aMethodDefinition selector				forClass: aMethodDefinition implementingClass]) 		ifTrue: 			[text 				addEmphasis: #(#bold)				removeEmphasis: #()				allowDuplicates: false].	^text</body><body package="Browser-BaseUI" selector="fillInListFor:">fillInListFor: aNavigatorState 	| protocols |	protocols := aNavigatorState protocols.	(protocols isEmpty and: [self class showAllItemsWhenNothingSelected]) 		ifTrue: [protocols := self allProtocolsIn: aNavigatorState].	^self methodDefinitionsFor: protocols in: aNavigatorState selectedClass</body><body package="Browser-BaseUI" selector="instanceVariableSelectorsIn:">instanceVariableSelectorsIn: aNavigatorState 	| class instanceVariables defs indices |	instanceVariables := aNavigatorState instanceVariables.	defs := self methodDefinitionsFor: (self allProtocolsIn: aNavigatorState)				in: aNavigatorState selectedClass.	instanceVariables isEmpty ifTrue: [^defs].	class := aNavigatorState selectedClass.	class isNil ifTrue: [^#()].	indices := instanceVariables 				collect: [:each | class instVarIndexFor: each].	^defs select: 			[:each | 			indices anySatisfy: 					[:index | 					(InstanceVariableSearch new)						method: each method;						searchFor: index - 1 type: #readWrite]]</body><body package="Browser-BaseUI" selector="methodDefinitionsFor:in:">methodDefinitionsFor: protocols in: class 	| selectors |	selectors := OrderedCollection new.	class notNil 		ifTrue: 			[protocols do: [:each | selectors addAll: (self methodDefinitionsIn: each)]].	^selectors</body><body package="Browser-BaseUI" selector="sortBlock">sortBlock	^	[:a :b | 	a selector &lt; b selector or: 			[a selector = b selector and: 					[a implementingClass allSuperclasses size 						&gt; b implementingClass allSuperclasses size]]]</body></methods><methods><class-id>Refactory.Browser.SelectorNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="newSelectionsBasedOn:">newSelectionsBasedOn: oldSelections 	| newSelections |	newSelections := OrderedCollection new: oldSelections size.	oldSelections do: 			[:each | 			| new |			new := nil.			each implementingClass = each inheritingClass 				ifFalse: 					[new := self list detect: 									[:def | 									def selector = each selector 										and: [each implementingClass = def implementingClass]]								ifNone: [nil]].			new isNil 				ifTrue: 					[new := self list detect: [:def | def selector = each selector]								ifNone: [nil]].			new notNil ifTrue: [newSelections add: new]].	^newSelections</body><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	self fillInListWith: aNavigatorState.	self select: aNavigatorState definitions</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	| initialSelections |	initialSelections := self selections.	self fillInListWith: aNavigatorState.	self select: (self newSelectionsBasedOn: initialSelections).	aNavigatorState definitions: self selections</body></methods><methods><class-id>Refactory.Browser.SelectorNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="categoriesForSelection">categoriesForSelection	| categories |	categories := OrderedCollection new.	self selections do: 			[:each | 			| category |			category := self environment whichCategoryIncludes: each asQualifiedReference bindingOrNil value.			(category notNil and: [(categories includes: category) not]) 				ifTrue: [categories add: category]].	^categories</body><body package="Browser-BaseUI" selector="classesForCategories:">classesForCategories: categories 	categories isEmpty ifTrue: [^nil].	^self environment namesInCategories: categories</body><body package="Browser-BaseUI" selector="classForName:">classForName: aString 	| classOrNameSpace |	classOrNameSpace := self objectForName: aString.	^classOrNameSpace isBehavior ifTrue: [classOrNameSpace] ifFalse: [nil]</body><body package="Browser-BaseUI" selector="convertToFullNames:">convertToFullNames: classNameSpaceCollection 	^classNameSpaceCollection collect: 			[:each | 			| name |			name := each fullName asString.			(name ~= 'Root' 				and: [(name indexOfSubCollection: 'Root.' startingAt: 1) ~= 1]) 					ifTrue: 						[name := (name indexOfSubCollection: 'Smalltalk.' startingAt: 1) = 1 									ifTrue: ['Root.' , name]									ifFalse: ['Root.Smalltalk.' , name]].			name]</body><body package="Browser-BaseUI" selector="displayTextFor:">displayTextFor: classNameWrapper 	| type each simpleName |	each := self objectForName: classNameWrapper fullName.	type := (each notNil and: [Override isOverriddenClassOrNameSpace: each]) 				ifTrue: [Array with: #color -&gt; self overriddenColor]				ifFalse: [#()].	simpleName := (each isNil ifTrue: [''] ifFalse: [each name]) asText.	(self class shouldBoldDefinedItems 		and: [each notNil and: [self isClassOrNameSpaceDefinedInSelection: each]]) 			ifTrue: [simpleName emphasizeAllWith: (type copyWith: #bold)]			ifFalse: [simpleName emphasizeAllWith: type].	^simpleName</body><body package="Browser-BaseUI" selector="fillInListFor:">fillInListFor: aNavigatorState 	| names |	names := self namesForState: aNavigatorState.	self updateListWith: names asList</body><body package="Browser-BaseUI" selector="iconFor:">iconFor: classNameWrapper 	| each |	each := self objectForName: classNameWrapper fullName.	each notNil 		ifTrue: 			[^each isNameSpace 				ifTrue: [self class nameSpaceImage]				ifFalse: [each browserIcon]].	^nil</body><body package="Browser-BaseUI" selector="intersect:with:">intersect: bindingCollection with: anotherCollection 	bindingCollection isNil ifTrue: [^anotherCollection].	anotherCollection isNil ifTrue: [^bindingCollection].	^bindingCollection select: [:each | anotherCollection includes: each]</body><body package="Browser-BaseUI" selector="isClassOrNameSpaceDefinedInSelection:">isClassOrNameSpaceDefinedInSelection: aClassOrNameSpace 	| block |	block := [:each | (each definesClassOrNameSpace: aClassOrNameSpace) ifTrue: [^true]].	navigator parcels do: block.	navigator packages do: block.	^false</body><body package="Browser-BaseUI" selector="namesForState:">namesForState: aNavigatorState 	| names |	names := self classesForCategories: aNavigatorState categories.	names := self intersect: names				with: (self parcelBindingReferencesFor: aNavigatorState parcels).	names := self intersect: names				with: (self packageClassesFor: aNavigatorState packages).	names isNil ifTrue: [names := #()].	^self convertToObjectNameWrappers: names</body><body package="Browser-BaseUI" selector="objectForName:">objectForName: aString 	^(aString asStrictReference home: nil) bindingOrNil value</body><body package="Browser-BaseUI" selector="packageClassesFor:">packageClassesFor: packageCollection 	| objects |	packageCollection isEmpty ifTrue: [^nil].	objects := Set new.	packageCollection do: 			[:each | 			objects				addAll: (self convertToFullNames: each allClasses);				addAll: (self convertToFullNames: each allNameSpaces)].	^objects</body><body package="Browser-BaseUI" selector="parcelBindingReferencesFor:">parcelBindingReferencesFor: parcelCollection 	| objects |	parcelCollection isEmpty ifTrue: [^nil].	objects := Set new.	parcelCollection do: 			[:each | 			each allClassesAndNameSpaces 				do: [:class | objects add: class fullRootName asString]].	^objects</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	aNavigatorState objectNames: self selections</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>private-overrides</category><body package="Browser-BaseUI" selector="convertToObjectNameWrappers:">convertToObjectNameWrappers: aCollection 	| any |	aCollection isEmpty ifTrue: [^aCollection].	any := aCollection detect: [:each | true].	^any isString 		ifTrue: [aCollection collect: [:each | ObjectNameWrapper fullName: each]]		ifFalse: [aCollection]</body><body package="Browser-BaseUI" selector="list">list	^super list collect: [:each | each asString]</body><body package="Browser-BaseUI" selector="list:">list: aCollection	^super list: (self convertToObjectNameWrappers: aCollection)</body><body package="Browser-BaseUI" selector="select:in:">select: aCollection in: aSelectionInList 	^super select: (self convertToObjectNameWrappers: aCollection)		in: aSelectionInList</body><body package="Browser-BaseUI" selector="selections">selections	^super selections collect: [:each | each asString]</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	self fillInListFor: aNavigatorState.	self select: aNavigatorState objectNames</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	| initialSelections |	initialSelections := self selections.	self fillInListFor: aNavigatorState.	self select: initialSelections.	aNavigatorState objectNames: self selections</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>menus</category><body package="Browser-BaseUI" selector="defaultMenu">defaultMenu	^navigator menuNamed: #classMenu</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>changing</category><body package="Browser-BaseUI" selector="changed:with:">changed: anAspectSymbol with: aParameter 	anAspectSymbol == #navigatorState ifTrue: [aParameter inheritToClass: nil].	^super changed: anAspectSymbol with: aParameter</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="changeSetUpdate:with:">changeSetUpdate: anAspectSymbol with: aParameter 	(#(#addClass: #addClass:attributes: #addNameSpace: #addNameSpace:attributes: #changeClass: #changeClass:attributes: #removeClass: #removeNameSpace: #renameClass:as: #renameNameSpace:as:) 		includes: anAspectSymbol) ifTrue: [self updateClassList]</body><body package="Browser-BaseUI" selector="updateClassList">updateClassList	self mergeIntoList: (self sortList: (self namesForState: navigator state))</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart class</class-id> <category>testing</category><body package="Browser-BaseUI" selector="shouldBoldDefinedItems">shouldBoldDefinedItems	^true</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="nameSpaceImage">nameSpaceImage	^ListIconLibrary visualFor: #namespace</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart class</class-id> <category>class initialization</category><body package="Browser-BaseUI" selector="initialize">initialize	self showIcons: true</body></methods><methods><class-id>Refactory.Browser.HierarchyClassNavigatorPart</class-id> <category>actions</category><body package="Browser-BaseUI" selector="doubleClickItem">doubleClickItem	hierarchyClass := nil.	self updateWithState: navigator getState</body></methods><methods><class-id>Refactory.Browser.HierarchyClassNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="hierachyFor:">hierachyFor: aClass 	| classes |	classes := OrderedCollection new.	self orderedSuperclassesFor: aClass into: classes.	self orderedSubclassesFor: aClass into: classes.	^classes</body><body package="Browser-BaseUI" selector="hierarchyClass">hierarchyClass	^hierarchyClass</body><body package="Browser-BaseUI" selector="namesForState:">namesForState: aNavigatorState 	| rootClass classes |	classes := aNavigatorState nonMetaClasses.	classes isEmpty ifTrue: [classes := Array with: Object].	rootClass := self rootOf: classes.	hierarchyClass := rootClass fullRootName.	^self convertToObjectNameWrappers: ((self hierachyFor: rootClass) 				collect: [:each | each fullRootName])</body><body package="Browser-BaseUI" selector="orderedSubclassesFor:into:">orderedSubclassesFor: aClass into: aCollection 	(aClass subclasses asSortedCollection: [:a :b | a name &lt; b name]) do: 			[:each | 			each isMeta 				ifFalse: 					[aCollection add: each.					self orderedSubclassesFor: each into: aCollection]]</body><body package="Browser-BaseUI" selector="orderedSuperclassesFor:into:">orderedSuperclassesFor: aClass into: aCollection 	| current |	current := aClass.	[current notNil] whileTrue: 			[aCollection addFirst: current.			current := current superclass]</body><body package="Browser-BaseUI" selector="rootOf:">rootOf: classCollection 	| root oldRoot |	hierarchyClass notNil 		ifTrue: 			[oldRoot := hierarchyClass asQualifiedReference valueOrDo: [nil].			(oldRoot notNil and: 					[classCollection allSatisfy: 							[:each | 							| name |							name := each fullRootName.							self list anySatisfy: [:ref | name = ref]]]) 				ifTrue: [^oldRoot]].	root := classCollection detect: [:each | true].	(oldRoot notNil and: [root includesBehavior: oldRoot]) 		ifTrue: [root := oldRoot].	classCollection do: 			[:each | 			[root superclass isNil or: [each includesBehavior: root]] 				whileFalse: [root := root superclass]].	^root</body><body package="Browser-BaseUI" selector="sortList:">sortList: aCollection 	^aCollection asList</body></methods><methods><class-id>Refactory.Browser.HierarchyClassNavigatorPart</class-id> <category>updating</category><body package="Browser-BaseUI" selector="updateClassList">updateClassList	"Don't do anything. We should refresh the list, but for now, make them refresh it."</body></methods><methods><class-id>Refactory.Browser.HierarchyClassNavigatorPart</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="displayTextFor:">displayTextFor: classNameWrapper 	| text |	text := classNameWrapper displayString asText.	classNameWrapper fullName = self hierarchyClass ifTrue: [text allBold].	^text</body><body package="Browser-BaseUI" selector="offsetFor:andIcon:">offsetFor: classNameWrapper andIcon: anIcon 	| each |	each := self objectForName: classNameWrapper fullName.	^each isNil ifTrue: [0 @ 0] ifFalse: [(each allSuperclasses size * 10) @ 0]</body></methods><methods><class-id>Refactory.Browser.HierarchyClassNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.HierarchyClassNavigatorPart class</class-id> <category>class initialization</category><body package="Browser-BaseUI" selector="initialize">initialize	self showIcons: false</body></methods><methods><class-id>Refactory.Browser.HierarchyClassWithCategoryNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="addCategoriesToState:">addCategoriesToState: aNavigatorState 	| class |	class := aNavigatorState nonMetaClass.	class notNil ifTrue: [aNavigatorState nameSpace: class environment].	aNavigatorState categories: self categoriesForSelection</body><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	super fillInState: aNavigatorState.	self addCategoriesToState: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.HierarchyClassWithCategoryNavigatorPart</class-id> <category>updating widgets</category><body package="Browser-BaseUI" selector="selectState:">selectState: aNavigatorState 	super selectState: aNavigatorState.	self addCategoriesToState: aNavigatorState</body><body package="Browser-BaseUI" selector="updateWithState:">updateWithState: aNavigatorState 	super updateWithState: aNavigatorState.	self addCategoriesToState: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.HierarchyClassWithCategoryNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.ClassAndObjectNavigatorPart</class-id> <category>changing</category><body package="Browser-BaseUI" selector="changed">changed	self fillInObjectForSelection.	super changed</body></methods><methods><class-id>Refactory.Browser.ClassAndObjectNavigatorPart</class-id> <category>private</category><body package="Browser-BaseUI" selector="fillInObjectForSelection">fillInObjectForSelection	| objects firstObject |	objects := self objectsForSelection.	firstObject := objects detect: [:each | true] ifNone: [nil].	self objectHolder value: firstObject</body><body package="Browser-BaseUI" selector="namesForState:">namesForState: aNavigatorState 	| names |	names := self environment nameSpaceObjectNames.	^self convertToObjectNameWrappers: names</body><body package="Browser-BaseUI" selector="objectsForSelection">objectsForSelection	^navigator navigatorType = #Category 		ifTrue: [self categoriesForSelection]		ifFalse: 			[navigator navigatorType = #Parcel 				ifTrue: [self parcelsForSelection]				ifFalse: [self packagesForSelection]]</body><body package="Browser-BaseUI" selector="packagesForSelection">packagesForSelection	| packages |	packages := OrderedCollection new.	self selections do: 			[:each | 			| pc ref binding |			ref := each asQualifiedReference.			binding := ref bindingOrNil.			binding notNil 				ifTrue: 					[pc := self storeRegistry 								allContainingPackagesForClassOrNameSpace: binding value.					pc 						do: [:package | (packages includes: package) ifFalse: [packages add: package]]]].	^packages</body><body package="Browser-BaseUI" selector="parcelsForSelection">parcelsForSelection	| parcels |	parcels := OrderedCollection new.	self selections do: 			[:each | 			| ref binding pc |			ref := each asQualifiedReference.			binding := ref bindingOrNil.			binding notNil 				ifTrue: 					[pc := Parcel parcelsForBinding: binding.					pc notNil 						ifTrue: 							[pc 								do: [:parcel | (parcels includes: parcel) ifFalse: [parcels add: parcel]]]]].	^parcels</body><body package="Browser-BaseUI" selector="select:in:">select: aCollection in: aSelectionInList 	super select: aCollection in: aSelectionInList.	self fillInObjectForSelection</body></methods><methods><class-id>Refactory.Browser.ClassAndObjectNavigatorPart</class-id> <category>aspects</category><body package="Browser-BaseUI" selector="objectHolder">objectHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^objectHolder isNil		ifTrue:			[objectHolder := nil asValue]		ifFalse:			[objectHolder]</body></methods><methods><class-id>Refactory.Browser.ClassAndObjectNavigatorPart</class-id> <category>accessing-navigator</category><body package="Browser-BaseUI" selector="fillInState:">fillInState: aNavigatorState 	navigator navigatorType = #Category 		ifTrue: [aNavigatorState categories: self objectsForSelection]		ifFalse: 			[navigator navigatorType = #Parcel 				ifTrue: [aNavigatorState parcels: self objectsForSelection]				ifFalse: [aNavigatorState pundles: self objectsForSelection]].	super fillInState: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.ClassAndObjectNavigatorPart class</class-id> <category>testing</category><body package="Browser-BaseUI" selector="shouldBoldDefinedItems">shouldBoldDefinedItems	^false</body></methods><methods><class-id>Refactory.Browser.ClassAndObjectNavigatorPart class</class-id> <category>private-interface building</category><body package="Browser-BaseUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.NavigatorState</class-id> <category>comparing</category><body package="Browser-BaseUI" selector="=">= anObject	#(#class #categories #pundles #parcels #objectNames #protocols #selectors #nameSpace) 		do: [:each | (self perform: each) = (anObject perform: each) ifFalse: [^false]].	self properties size = anObject properties size ifFalse: [^false].	self properties keysAndValuesDo: 		[:key :value | 		value = (anObject properties at: key ifAbsent: [Object new]) 			ifFalse: [^false]].        ^true</body><body package="Browser-BaseUI" selector="hash">hash	^self category hash bitXor: (self selectedClass hash				bitXor: (self protocol hash bitXor: self selector hash))</body></methods><methods><class-id>Refactory.Browser.NavigatorState</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="categories">categories	^categories</body><body package="Browser-BaseUI" selector="categories:">categories: symbolCollection	categories := symbolCollection</body><body package="Browser-BaseUI" selector="category">category	^self any: self categories</body><body package="Browser-BaseUI" selector="category:">category: aCategory 	^categories := aCategory isNil 				ifTrue: [#()]				ifFalse: [Array with: aCategory]</body><body package="Browser-BaseUI" selector="classInstanceVariable">classInstanceVariable	^self any: self classInstanceVariables</body><body package="Browser-BaseUI" selector="classInstanceVariables">classInstanceVariables	^self propertyAt: #classInstanceVariables ifAbsent: [#()]</body><body package="Browser-BaseUI" selector="instanceVariable">instanceVariable	^self any: self instanceVariables</body><body package="Browser-BaseUI" selector="instanceVariables">instanceVariables	^self propertyAt: #instanceVariables ifAbsent: [#()]</body><body package="Browser-BaseUI" selector="instanceVariables:">instanceVariables: vars 	self propertyAt: #instanceVariables put: vars</body><body package="Browser-BaseUI" selector="nameSpace">nameSpace	| name |	name := self objectNames 				detect: [:each | each asQualifiedReference isDefined]				ifNone: [nil].	^name notNil 		ifTrue: [name asQualifiedReference environment]		ifFalse: [nameSpaceName asQualifiedReference valueOrDo: [Smalltalk]]</body><body package="Browser-BaseUI" selector="nameSpace:">nameSpace: aNameSpace 	nameSpaceName := aNameSpace fullRootName</body><body package="Browser-BaseUI" selector="package">package	^self any: self packages</body><body package="Browser-BaseUI" selector="packages">packages	| packages todo each |	packages := OrderedCollection new.	todo := OrderedCollection withAll: self pundles.	[todo isEmpty] whileFalse: 			[each := todo removeFirst.			each isBundle 				ifTrue: [todo addAll: each containedItems]				ifFalse: [packages add: each]].	^packages</body><body package="Browser-BaseUI" selector="parcel">parcel	^self any: self parcels</body><body package="Browser-BaseUI" selector="parcel:">parcel: aParcel 	^self parcels: (aParcel isNil ifTrue: [#()] ifFalse: [Array with: aParcel])</body><body package="Browser-BaseUI" selector="parcels">parcels	| pc |	pc := OrderedCollection new: parcels size.	parcels do: 			[:each | 			| parcel |			parcel := Parcel parcelNamed: each.			(parcel isNil and: [each = UnparceledParcel unparceledParcelName]) 				ifTrue: [parcel := UnparceledParcel new].			parcel notNil ifTrue: [pc add: parcel]].	^pc</body><body package="Browser-BaseUI" selector="parcels:">parcels: aCollection 	parcels := aCollection collect: [:each | each name]</body><body package="Browser-BaseUI" selector="propertyAt:">propertyAt: aSymbol 	^self propertyAt: aSymbol ifAbsent: [nil]</body><body package="Browser-BaseUI" selector="propertyAt:ifAbsent:">propertyAt: aSymbol ifAbsent: aBlock 	^properties at: aSymbol ifAbsent: aBlock</body><body package="Browser-BaseUI" selector="propertyAt:put:">propertyAt: aSymbol put: anObject 	^properties at: aSymbol put: anObject</body><body package="Browser-BaseUI" selector="protocol">protocol	^self any: self protocols</body><body package="Browser-BaseUI" selector="protocol:">protocol: aSymbol 	protocols := aSymbol isNil ifTrue: [#()] ifFalse: [Array with: aSymbol]</body><body package="Browser-BaseUI" selector="protocols">protocols	^protocols</body><body package="Browser-BaseUI" selector="protocols:">protocols: symbolCollection 	protocols := symbolCollection</body><body package="Browser-BaseUI" selector="pundle">pundle	^self any: self pundles</body><body package="Browser-BaseUI" selector="pundle:">pundle: aPundle 	self pundles: (aPundle isNil ifTrue: [#()] ifFalse: [Array with: aPundle])</body><body package="Browser-BaseUI" selector="pundles">pundles	| pundleCollection reg |	reg := #{Store.Registry} valueOrDo: [^#()].	reg == nil ifTrue: [ ^#() ].	pundleCollection := OrderedCollection new: pundles size.	pundles do: 			[:each | 			| pundle |			pundle := each last 						ifTrue: [reg packageNamed: each first]						ifFalse: [reg bundleNamed: each first].			pundle notNil ifTrue: [pundleCollection add: pundle]].	^pundleCollection</body><body package="Browser-BaseUI" selector="pundles:">pundles: aCollection 	pundles := aCollection 				collect: [:each | Array with: each name with: each isPackage]</body><body package="Browser-BaseUI" selector="removeProperty:">removeProperty: aKey 	properties removeKey: aKey ifAbsent: []</body><body package="Browser-BaseUI" selector="selectedNameSpace">selectedNameSpace	^(objectNameReferences		detect: [:some | some isDefined and: [some value isNameSpace]]		ifNone: [^nil]) value</body></methods><methods><class-id>Refactory.Browser.NavigatorState</class-id> <category>copying</category><body package="Browser-BaseUI" selector="postCopy">postCopy	super postCopy.	properties := properties copy</body></methods><methods><class-id>Refactory.Browser.NavigatorState</class-id> <category>private</category><body package="Browser-BaseUI" selector="any:">any: aCollection 	^aCollection detect: [:each | true] ifNone: [nil]</body><body package="Browser-BaseUI" selector="properties">properties	^properties</body></methods><methods><class-id>Refactory.Browser.NavigatorState</class-id> <category>testing</category><body package="Browser-BaseUI" selector="hasSelection">hasSelection	^(self objectNames isEmpty and: 			[self categories isEmpty 				and: [self parcels isEmpty and: [self packages isEmpty]]]) 		not</body><body package="Browser-BaseUI" selector="isData">isData	^self type = #sharedVariable</body><body package="Browser-BaseUI" selector="isMeta">isMeta	^self type = #class</body></methods><methods><class-id>Refactory.Browser.NavigatorState</class-id> <category>accessing-class</category><body package="Browser-BaseUI" selector="classesAndNameSpaces">classesAndNameSpaces	| objects |	objects := OrderedCollection new.	objectNameReferences do: 			[:each | 			| class |			class := each valueOrDo: [nil].			(class notNil and: [class isBehavior or: [class isNameSpace]]) 				ifTrue: [objects add: class]].	^objects</body><body package="Browser-BaseUI" selector="classesAndNameSpaces:">classesAndNameSpaces: aCollection 	| any |	any := self any: aCollection.	any notNil 		ifTrue: 			[type := any isBehavior 						ifTrue: [any isMeta ifTrue: [#class] ifFalse: [#instance]]						ifFalse: [#sharedVariable]].	objectNameReferences := aCollection collect: 					[:each | 					(each isBehavior ifTrue: [each instanceBehavior] ifFalse: [each]) 						fullRootName asQualifiedReference]</body><body package="Browser-BaseUI" selector="classOrNameSpace">classOrNameSpace	^self any: self classesAndNameSpaces</body><body package="Browser-BaseUI" selector="classOrNameSpace:">classOrNameSpace: anObject 	^self classesAndNameSpaces: (anObject isNil 				ifTrue: [#()]				ifFalse: [Array with: anObject])</body><body package="Browser-BaseUI" selector="clearClassDependentFields">clearClassDependentFields	self		categories: #();		parcels: #();		pundles: #();		definitions: #();		inheritToClass: nil</body><body package="Browser-BaseUI" selector="clearCodeComponents">clearCodeComponents	self		category: nil;		parcel: nil;		pundle: nil;		removeProperty: #codeComponentTab</body><body package="Browser-BaseUI" selector="inheritToClass">inheritToClass	| inheritToType class superclasses inheritToClass |	objectNameReferences size = 1 ifFalse: [^nil].	inheritToType := self inheritToType.	class := self selectedClass.	class isNil ifTrue: [^nil].	inheritToType = #root ifTrue: [^class withAllSuperclasses last].	inheritToType = #rootMinusOne 		ifTrue: 			[superclasses := class withAllSuperclasses.			^superclasses size &gt; 1 				ifTrue: [superclasses at: superclasses size - 1]				ifFalse: [class]].	inheritToType = #class 		ifTrue: 			[inheritToClass := (self propertyAt: #inheritToClass ifAbsent: [^class]) 						asQualifiedReference valueOrDo: [^class].			self isMeta ifTrue: [inheritToClass := inheritToClass class].			^(class includesBehavior: inheritToClass) 				ifTrue: [inheritToClass]				ifFalse: [class]].	^class</body><body package="Browser-BaseUI" selector="inheritToClass:">inheritToClass: aClass 	aClass isNil ifTrue: [^self removeProperty: #inheritToClass].	self propertyAt: #inheritToType put: #class.	self propertyAt: #inheritToClass put: aClass instanceBehavior fullName</body><body package="Browser-BaseUI" selector="inheritToType">inheritToType	^self propertyAt: #inheritToType ifAbsent: [#class]</body><body package="Browser-BaseUI" selector="inheritToType:">inheritToType: aSymbol 	self propertyAt: #inheritToType put: aSymbol</body><body package="Browser-BaseUI" selector="nonMetaClass">nonMetaClass	| classes |	classes := self nonMetaClasses.	^classes isEmpty ifTrue: [nil] ifFalse: [classes first]</body><body package="Browser-BaseUI" selector="nonMetaClasses">nonMetaClasses	| classes |	classes := OrderedCollection new: objectNameReferences size.	objectNameReferences do: 			[:each | 			| class |			class := each valueOrDo: [nil].			(class notNil and: [class isBehavior]) ifTrue: [classes add: class]].	^classes</body><body package="Browser-BaseUI" selector="objectName">objectName	^self any: self objectNames</body><body package="Browser-BaseUI" selector="objectName:">objectName: aName 	objectNameReferences := aName isNil 				ifTrue: [#()]				ifFalse: [Array with: aName asQualifiedReference]</body><body package="Browser-BaseUI" selector="objectNames">objectNames	^objectNameReferences collect: [:each | each asString]</body><body package="Browser-BaseUI" selector="objectNames:">objectNames: aCollection 	objectNameReferences := aCollection 				collect: [:each | each asQualifiedReference]</body><body package="Browser-BaseUI" selector="objectNamesOrderedForRemoval">objectNamesOrderedForRemoval	| objectToNameMap objectsOrderedForUnload |	objectToNameMap := IdentityDictionary new.	objectNameReferences do:		[:each| objectToNameMap at: each value put: each asString].	objectsOrderedForUnload := (SystemUtils sortForLoading: objectToNameMap keys) reverse.	^objectsOrderedForUnload collect: [:each | objectToNameMap at: each]</body><body package="Browser-BaseUI" selector="selectedBinding">selectedBinding	^self any: self selectedBindings</body><body package="Browser-BaseUI" selector="selectedBindings">selectedBindings	| bindings |	bindings := OrderedCollection new: objectNameReferences size.	objectNameReferences do: 			[:each | 			| binding |			binding := each bindingOrNil.			binding notNil ifTrue: [bindings add: binding]].	^bindings</body><body package="Browser-BaseUI" selector="selectedClass">selectedClass	| class |	class := self nonMetaClass.	class isNil ifTrue: [^nil].	^self isMeta ifTrue: [class class] ifFalse: [class]</body><body package="Browser-BaseUI" selector="selectedClass:">selectedClass: aClass 	aClass isNil ifTrue: [^objectNameReferences := #()].	type := aClass isMeta ifTrue: [#class] ifFalse: [#instance].	self objectName: (self isMeta 				ifTrue: [aClass soleInstance fullRootName]				ifFalse: [aClass fullRootName]).	^aClass</body><body package="Browser-BaseUI" selector="selectedClasses">selectedClasses	| classes |	classes := self nonMetaClasses.	^self isMeta ifTrue: [classes collect: [:each | each class]] ifFalse: [classes]</body><body package="Browser-BaseUI" selector="selectedClasses:">selectedClasses: classCollection 	objectNameReferences := classCollection 				collect: [:each | each instanceBehavior fullRootName asQualifiedReference].	classCollection isEmpty 		ifTrue: 			[type := #instance.			^self].	type := classCollection first isMeta ifTrue: [#class] ifFalse: [#instance]</body><body package="Browser-BaseUI" selector="selectedGlobals">selectedGlobals	| globals |	globals := OrderedCollection new: objectNameReferences size.	objectNameReferences do:		[:each | 		each ifDefinedDo: 				[:classOrNameSpace | 				(classOrNameSpace isNameSpace or: [classOrNameSpace isBehavior]) 					ifTrue: [globals add: classOrNameSpace]]].	^globals</body><body package="Browser-BaseUI" selector="selectedNameSpace:">selectedNameSpace: aNameSpace	aNameSpace isNil ifTrue: [^objectNameReferences := #()].	self objectName: aNameSpace fullRootName.	^aNameSpace</body><body package="Browser-BaseUI" selector="type">type	^type</body><body package="Browser-BaseUI" selector="type:">type: aSymbol	type := aSymbol</body></methods><methods><class-id>Refactory.Browser.NavigatorState</class-id> <category>accessing-methods</category><body package="Browser-BaseUI" selector="allDefinitions">allDefinitions	^self propertyAt: #allDefinitions ifAbsent: [#()]</body><body package="Browser-BaseUI" selector="allDefinitions:">allDefinitions: aCollection 	self propertyAt: #allDefinitions put: aCollection</body><body package="Browser-BaseUI" selector="definition">definition	^self any: self definitions</body><body package="Browser-BaseUI" selector="definition:">definition: aMethodDefinition 	self definitions: (aMethodDefinition isNil 				ifTrue: [#()]				ifFalse: [Array with: aMethodDefinition])</body><body package="Browser-BaseUI" selector="definitions">definitions	^definitions</body><body package="Browser-BaseUI" selector="definitions:">definitions: aCollection 	| def |	definitions := aCollection.	aCollection isEmpty ifTrue: [^self].	def := self any: aCollection.	def isForSharedVariable ifTrue: [self type: #sharedVariable]</body><body package="Browser-BaseUI" selector="methodClass">methodClass	| def |	def := self definition.	^def isNil ifTrue: [self selectedClass] ifFalse: [def implementingClass]</body><body package="Browser-BaseUI" selector="methodDefinitions">methodDefinitions	^self definitions reject: [:each | each isForSharedVariable]</body><body package="Browser-BaseUI" selector="selector">selector	^self any: self selectors</body><body package="Browser-BaseUI" selector="selector:">selector: aSymbol 	self 		selectors: (aSymbol isNil ifTrue: [#()] ifFalse: [Array with: aSymbol])</body><body package="Browser-BaseUI" selector="selectors">selectors	| defs class |	defs := self methodDefinitions.	defs isEmpty ifTrue: [^#()].	class := self selectedClass.	^(defs select: [:each | each inheritingClass = class]) 		collect: [:each | each selector]</body><body package="Browser-BaseUI" selector="selectors:">selectors: symbolCollection 	| class |	class := self selectedClass.	class isNil ifTrue: [^self definitions: #()].	self 		definitions: (symbolCollection collect: 					[:each | 					| implementingClass |					implementingClass := class whichClassIncludesSelector: each.					implementingClass isNil ifTrue: [implementingClass := class].					RBMethodDefinition 						class: class						implementor: implementingClass						selector: each])</body><body package="Browser-BaseUI" selector="sharedVariableDefinitions">sharedVariableDefinitions	^self definitions select: [:each | each isForSharedVariable]</body><body package="Browser-BaseUI" selector="sharedVariableName">sharedVariableName	^self any: self sharedVariableNames</body><body package="Browser-BaseUI" selector="sharedVariableNames">sharedVariableNames	^self sharedVariableDefinitions collect: [:each | each variableName]</body></methods><methods><class-id>Refactory.Browser.NavigatorState</class-id> <category>printing</category><body package="Browser-BaseUI" selector="printOn:">printOn: aStream 	| binding |	binding := self selectedBinding.	binding notNil 		ifTrue: 			[aStream nextPutAll: binding key.			self isMeta ifTrue: [aStream nextPutAll: ' class'].			self selector notNil 				ifTrue: 					[aStream						nextPutAll: '&gt;&gt;';						nextPutAll: self selector]				ifFalse: 					[self sharedVariableName notNil 						ifTrue: 							[aStream								nextPut: $.;								nextPutAll: self sharedVariableName]						ifFalse: 							[self protocol notNil 								ifTrue: 									[aStream										nextPut: $&gt;;										nextPutAll: self protocol]]]]		ifFalse: 			[categories isEmpty 				ifTrue: 					[self pundles isEmpty 						ifTrue: 							[self parcels isEmpty 								ifTrue: [aStream nextPutAll: '(nothing selected)']								ifFalse: [aStream nextPutAll: self parcel name]]						ifFalse: [aStream nextPutAll: self pundle name]]				ifFalse: [aStream nextPutAll: self category]]</body></methods><methods><class-id>Refactory.Browser.NavigatorState</class-id> <category>initialize-release</category><body package="Browser-BaseUI" selector="initialize">initialize	parcels := pundles := categories := objectNameReferences := protocols := definitions := #().	nameSpaceName := Smalltalk fullRootName.	type := #instance.	properties := IdentityDictionary new</body></methods><methods><class-id>Refactory.Browser.NavigatorState class</class-id> <category>instance creation</category><body package="Browser-BaseUI" selector="new">new	^super new initialize</body></methods><methods><class-id>Core.Collection class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="browserIcon">browserIcon	^ListIconLibrary visualFor: #collection</body></methods><methods><class-id>UI.Model class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="browserIcon">browserIcon	^ListIconLibrary visualFor: #signal</body></methods><methods><class-id>Refactory.Browser.BrowserEnvironmentWrapper</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="selectionIntervalFor:">selectionIntervalFor: aString 	| interval |	interval := super selectionIntervalFor: aString.	^interval notNil 		ifTrue: [interval]		ifFalse: [environment selectionIntervalFor: aString]</body></methods><methods><class-id>Tools.GeneralMethodDefinition</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="asOverride">asOverride	^Override forSelector: self selector class: self implementingClass</body><body package="Browser-BaseUI" selector="classOrNameSpace">classOrNameSpace	^self inheritingClass</body></methods><methods><class-id>Tools.GeneralMethodDefinition</class-id> <category>printing</category><body package="Browser-BaseUI" selector="fullDisplayText">fullDisplayText	| text |	text := self displayString asText.	self isOverridden 		ifTrue: [text emphasizeAllWith: (Array with: #color -&gt; ColorValue red)].	^text</body></methods><methods><class-id>Tools.GeneralMethodDefinition</class-id> <category>testing</category><body package="Browser-BaseUI" selector="isForSharedVariable">isForSharedVariable	^false</body><body package="Browser-BaseUI" selector="isOverridden">isOverridden	^false</body></methods><methods><class-id>Tools.GeneralMethodDefinition</class-id> <category>printing</category><body package="Browser-BaseUI" selector="simpleDisplayText">simpleDisplayText	| string |	string := self selector asString.	self implementingClass ~= self inheritingClass 		ifTrue: 			[string := self selector asText 						, ((' (' , self implementingClass name , ')') asText 								emphasizeAllWith: #italic)].	^string asText</body></methods><methods><class-id>Kernel.Parcel</class-id> <category>queries</category><body package="Browser-BaseUI" selector="externalMethodsUsedExclusively">externalMethodsUsedExclusively	"The algorithm computes a fixed point of the methods used	  by the parcel which are unused outside it.  The algorithm is			compute messages sent within parcel			repeat until at a fixed point:				compute intersection of this with methods implemented outside parcel				compute messages sent outside parcel not within the intersection				remove these from intersection"	| parcelMessages "&lt;IdentitySet of: Symbol&gt;							messages sent within this parcel"	  externalMethods "&lt;Set of: MethodDescription&gt;							methods implemented outside this parcel"	  danglingMethods "&lt;Set of: MethodDescription&gt;							methods importeded only by this parcel"	  previousDangling "&lt;Set of: MethodDescription&gt;							intermediate value of danglingMethods (for determining if fixed point is reached)"	  danglingMessages "&lt;Set of: Symbol&gt; selectors of methods in danglingMethods"	  noLongerDangling "&lt;Set of: Symbol&gt; selectors to be moved from dangling" |	parcelMessages := IdentitySet new.	self methodsDo:		[:meth| parcelMessages addAll: meth allSymbolLiterals].	"compute starting points for danglingMethods and externalMethods"	danglingMethods := Set new: 50.	externalMethods := Set new: 20000.	SystemUtils allBehaviorsDo:		[:aBehavior| | extends |		(self definesClass: aBehavior) ifFalse:			[extends := self extendsBehavior: aBehavior.			aBehavior selectorsAndMethodsDo:				[:sel :meth|				(extends				and: [self definesSelector: sel forClass: aBehavior]) ifFalse:					[((parcelMessages includes: sel)						ifTrue: [danglingMethods]						ifFalse: [externalMethods])							add: (MethodDefinition class: aBehavior selector: sel)]]]].	["Now iterate to the fixed-point.  Any method in dangling with a selector sent	  in external must be moved into external until dangling reaches its fixed point."	previousDangling := danglingMethods copy.	danglingMessages := danglingMethods collect: [:md| md selector].	noLongerDangling := Set new: danglingMethods size.	externalMethods do:		[:md|		md method allSymbolLiteralsDo:			[:l|			(danglingMessages includes: l) ifTrue:				[noLongerDangling add: l]]].	externalMethods := danglingMethods select: [:md| noLongerDangling includes: md selector].	danglingMethods removeAll: externalMethods.	danglingMethods size ~= previousDangling size] whileTrue.	^danglingMethods</body><body package="Browser-BaseUI" selector="unparceledMethodsOfDefinedClasses">unparceledMethodsOfDefinedClasses	| references |	references := Set new.	SystemUtils allBehaviorsDo: 			[:class | 			(self definesClass: class) 				ifTrue: 					[class selectorsAndMethodsDo: 							[:sel :meth | 							(self definesSelector: sel forClass: class) 								ifFalse: [references add: (MethodDefinition class: class selector: sel)]]]].	^references</body></methods><methods><class-id>External.ExternalInterface class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="browserIcon">browserIcon	^Tools.ListIconLibrary visualFor: #letterC</body></methods><methods><class-id>Refactory.Browser.AndEnvironment</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="selectionIntervalFor:">selectionIntervalFor: aString 	| interval |	interval := super selectionIntervalFor: aString.	interval notNil ifTrue: [^interval].	^andedEnvironment selectionIntervalFor: aString</body></methods><methods><class-id>Tools.InitializerDefinition</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="asOverride">asOverride	^Override forDataKey: key in: nameSpace</body><body package="Browser-BaseUI" selector="classOrNameSpace">classOrNameSpace	^nameSpace</body></methods><methods><class-id>Tools.InitializerDefinition</class-id> <category>testing</category><body package="Browser-BaseUI" selector="isForSharedVariable">isForSharedVariable	^true</body><body package="Browser-BaseUI" selector="isOverridden">isOverridden	^Override isOverriddenStatic: key in: nameSpace</body></methods><methods><class-id>Tools.InitializerDefinition</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="protocol">protocol	^self classOrNameSpace asNameSpace organization 		categoryOfElement: self variableName</body></methods><methods><class-id>Tools.InitializerDefinition</class-id> <category>printing</category><body package="Browser-BaseUI" selector="simpleDisplayText">simpleDisplayText	^self variableName asText</body></methods><methods><class-id>Tools.InitializerDefinition</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="variableName">variableName	^key</body></methods><methods><class-id>UI.ApplicationModel class</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="browserIcon">browserIcon	^ListIconLibrary visualFor: #window</body></methods><methods><class-id>Core.Behavior</class-id> <category>RefactoringBrowser</category><body package="Browser-BaseUI" selector="browserIcon">browserIcon	"This can be overridden to display special icons for classes"	^nil</body></methods><methods><class-id>Refactory.Browser.BrowserEnvironment</class-id> <category>accessing</category><body package="Browser-BaseUI" selector="selectionIntervalFor:">selectionIntervalFor: aString 	| interval |	self searchStrings isEmpty ifTrue: [^nil].	interval := self selectionParseTreeIntervalFor: aString.	interval notNil ifTrue: [^interval].	self searchStrings do: 			[:each | 			| search index |			search := each isSymbol ifTrue: [each keywords first] ifFalse: [each].			index := aString indexOfSubCollection: search startingAt: 1.			index &gt; 0 ifTrue: [^index to: index + search size - 1]].	^nil</body><body package="Browser-BaseUI" selector="selectionParseTreeIntervalFor:">selectionParseTreeIntervalFor: aString 	| parseTree answerBlock |	parseTree := RBParser parseMethod: aString onError: [:str :pos | ^nil].	answerBlock := [:aNode :answer | ^aNode sourceInterval].	self searchStrings do: 			[:each | 			| matcher tree |			matcher := ParseTreeSearcher new.			matcher matchesTree: (RBLiteralNode value: each) do: answerBlock.			each isSymbol 				ifTrue: 					[tree := ParseTreeSearcher buildSelectorTree: each.					tree notNil ifTrue: [matcher matchesTree: tree do: answerBlock]]				ifFalse: 					[each notEmpty 						ifTrue: 							[tree := RBVariableNode named: each.							matcher								matchesTree: tree do: answerBlock;								matchesArgumentTree: tree do: answerBlock]].			matcher executeTree: parseTree].	^nil</body></methods><methods><class-id>Tools.MethodDefinition</class-id> <category>testing</category><body package="Browser-BaseUI" selector="isOverridden">isOverridden	^Override isOverriddenSelector: selector class: implementingClass</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="emptySpec">emptySpec	"UIPainter new openOnClass: self andSelector: #emptySpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 412 284 612 484 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>Refactory.Browser.ListNavigatorPart class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="basicWindowSpec">basicWindowSpec	"UIPainter new openOnClass: self andSelector: #basicWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEnter: #dropSelector 						#drop: #dragStartSelector 						#doDrag: #dragOverSelector 						#dragOver: #dragExitSelector 						#dragLeave: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #objectList 					#model: #objectList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changed 						#doubleClickSelector: #doubleClickItem 						#requestValueChangeSelector: #changeRequest ) 					#menu: #menu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Refactory.Browser.TabNavigatorPart class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 512 384 712 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #subcanvas 					#model: #objectList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedTab 						#requestValueChangeSelector: #changeRequest ) 					#labels: #() ) ) ) )</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="protocolWindowSpec">protocolWindowSpec	"UIPainter new openOnClass: self andSelector: #protocolWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 700 500 900 700 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragStartSelector 						#doDrag: #dragOkSelector 						#wantToDrag: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 26 0 0 1 0 1 ) 					#name: #objectList 					#model: #objectList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changed 						#requestValueChangeSelector: #changeRequest ) 					#menu: #menu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 25 0 ) 					#name: #protocolHolder 					#model: #protocolHolder 					#isReadOnly: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.RBActionEditor class</class-id> <category>resources</category><body package="Browser-BaseUI" selector="actionMenu">actionMenu	"MenuEditor new openOnClass: self andSelector: #actionMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Add #defaultString: '&amp;Add' #catalogID: #browser) 				#nameKey: #'Add Action Specification' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Remove #defaultString: '&amp;Remove' #catalogID: #browser) 				#nameKey: #'Remove Action Specification' 				#value: 				#action: ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.RBActionEditor class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #ActionEditor #defaultString: 'Action Editor' #catalogID: #browser) 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 491 417 1110 784 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 27 0 0 0.4 -35 1 ) 					#name: #actionList 					#flags: 15 					#model: #actionList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedActionSpecification 						#requestValueChangeSelector: #changeRequest ) 					#menu: #actionSpecificationMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 2 ) 					#label: #(#{Kernel.UserMessage} #key: #ActionC #defaultString: 'Action:' #catalogID: #browser) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 90 0.4 10 0 1 0 ) 					#name: #nameLabel 					#label: #(#{Kernel.UserMessage} #key: #NameC #defaultString: 'Name:' #catalogID: #browser) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 95 0.4 8 0 -2 1 35 0 ) 					#name: #nameHolder 					#model: #nameHolder ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.4 0 0 4 0.4 -33 1 ) 					#orientation: #vertical ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 95 0.4 45 0 -2 1 135 0 ) 					#name: #descriptionHolder 					#model: #descriptionHolder 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 90 0.4 45 0 1 0 ) 					#name: #descriptionLabel 					#label: #(#{Kernel.UserMessage} #key: #DescriptionC #defaultString: 'Description:' #catalogID: #browser) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -150 1 305 0 -80 1 330 0 ) 					#name: #acceptButton 					#model: #acceptAction 					#label: #(#{Kernel.UserMessage} #key: #Accept #defaultString: 'Accept' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -75 1 305 0 -5 1 330 0 ) 					#name: #cancelButton 					#model: #changedActionSpecification 					#label: #(#{Kernel.UserMessage} #key: #Cancel #defaultString: 'Cancel' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 95 0.4 143 0 -2 1 170 0 ) 					#name: #actionHolder 					#model: #actionHolder 					#type: #symbol ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 90 0.4 175 0 1 0 ) 					#name: #enabledLabel 					#label: #(#{Kernel.UserMessage} #key: #EnabledC #defaultString: 'Enabled:' #catalogID: #browser) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 95 0.4 173 0 -2 1 200 0 ) 					#name: #enabledHolder 					#model: #enabledHolder 					#type: #symbol ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 90 0.4 205 0 1 0 ) 					#name: #receiverLabel 					#label: #(#{Kernel.UserMessage} #key: #ReceiverC #defaultString: 'Receiver:' #catalogID: #browser) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 95 0.4 203 0 -2 1 230 0 ) 					#name: #receiverHolder 					#model: #receiverHolder 					#type: #symbol ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 95 0.4 233 0 -2 1 300 0 ) 					#name: #typeList 					#model: #typeList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 90 0.4 235 0 1 0 ) 					#name: #typeLabel 					#label: #(#{Kernel.UserMessage} #key: #TypeC #defaultString: 'Type:' #catalogID: #browser) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 0.75 -28 1 50 0.75 -2 1 ) 					#model: #saveActionsToMethod 					#label: #(#{Kernel.UserMessage} #key: #SaveMethod #defaultString: 'Save Method' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 0.5 -28 1 50 0.5 -2 1 ) 					#model: #saveActionsToFile 					#label: #(#{Kernel.UserMessage} #key: #SaveFile #defaultString: 'Save File' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -33 1 0 1 -31 1 ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 0.25 -28 1 50 0.25 -2 1 ) 					#model: #installActions 					#label: #(#{Kernel.UserMessage} #key: #Install #defaultString: 'Install' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 90 0.4 145 0 1 0 ) 					#model: #browseActions 					#tabable: false 					#label: #(#{Kernel.UserMessage} #key: #ActionC #defaultString: 'Action:' #catalogID: #browser) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.FormatterConfigurationTool class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="booleanSpec">booleanSpec	"UIPainter new openOnClass: self andSelector: #booleanSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 0 0 ) 					#name: #enabled 					#model: #booleanHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedBoolean ) 					#label: #(#{Kernel.UserMessage} #key: #Enabled #defaultString: 'Enabled' #catalogID: #browser) ) ) ) )</body><body package="Browser-BaseUI" selector="integerSpec">integerSpec	"UIPainter new openOnClass: self andSelector: #integerSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #numeric 					#model: #numericHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedInteger ) 					#type: #number 					#formatString: '0' ) ) ) )</body><body package="Browser-BaseUI" selector="textSpec">textSpec	"UIPainter new openOnClass: self andSelector: #textSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #text 					#flags: 12 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedText ) 					#tabRequiresControl: true ) ) ) )</body><body package="Browser-BaseUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #FormatterConfiguration #defaultString: 'Formatter Configuration' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1371 1051 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 2 ) 					#name: #Label1 					#label: #(#{Kernel.UserMessage} #key: #OptionsC #defaultString: 'Options:' #catalogID: #browser) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 27 0 -2 0.333333 -2 0.333333 ) 					#name: #optionsList 					#flags: 15 					#model: #optionsList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedOption ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.333333 0 0 2 0.333333 -2 0.333333 ) 					#name: #verticalSplitter 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'optionsList' 					#belowWidgets: 'descriptionLabel description valueSubcanvas valueLabel' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0.333333 2 0 ) 					#name: #descriptionLabel 					#label: #(#{Kernel.UserMessage} #key: #DescriptionC #defaultString: 'Description:' #catalogID: #browser) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.333333 27 0 -2 1 -31 0.333333 ) 					#name: #description 					#flags: 5 					#model: #descriptionHolder 					#isReadOnly: true 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0.333333 -29 0.333333 ) 					#name: #valueLabel 					#label: #(#{Kernel.UserMessage} #key: #ValueC #defaultString: 'Value:' #catalogID: #browser) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0.333333 -29 0.333333 -2 1 -2 0.333333 ) 					#name: #valueSubcanvas 					#flags: 0 					#majorKey: #{Refactory.Browser.FormatterConfigurationTool} 					#minorKey: #emptySpec 					#clientKey: #valueSubcanvas ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.333333 0 1 2 0.333333 ) 					#name: #ResizingSplitter1 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 50 					#aboveWidgets: 'optionsList description valueSubcanvas verticalSplitter valueLabel' 					#belowWidgets: 'formattedText valueSubcanvas' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 2 0.333333 -2 1 -31 1 ) 					#name: #formattedText 					#model: #formattedTextHolder 					#tabRequiresControl: true ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -30 1 0 1 -29 1 ) 					#name: #Divider1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 -27 1 77 0 -2 1 ) 					#name: #formatButton 					#model: #format 					#label: #(#{Kernel.UserMessage} #key: #Format #defaultString: 'Format' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -231 1 -27 1 -156 1 -2 1 ) 					#name: #ok 					#model: #save 					#label: #(#{Kernel.UserMessage} #key: #OK #defaultString: 'OK' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -154 1 -27 1 -79 1 -2 1 ) 					#name: #cancel 					#model: #closeRequest 					#label: #(#{Kernel.UserMessage} #key: #Cancel #defaultString: 'Cancel' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -77 1 -27 1 -2 1 -2 1 ) 					#name: #restoreButton 					#model: #restore 					#label: #(#{Kernel.UserMessage} #key: #Restore #defaultString: 'Restore' #catalogID: #browser) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeComponentTabNavigatorPart class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="categoryHierarchyWindowSpec">categoryHierarchyWindowSpec	"UIPainter new openOnClass: self andSelector: #categoryHierarchyWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #categoryHierarchyClasses 					#flags: 0 					#majorKey: #{Refactory.Browser.HierarchyClassWithCategoryNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #categoryHierarchyClasses ) ) ) )</body><body package="Browser-BaseUI" selector="categoryWindowSpec">categoryWindowSpec	"UIPainter new openOnClass: self andSelector: #categoryWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #categories 					#flags: 0 					#majorKey: #{Refactory.Browser.CategoryNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #categories ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #classes 					#flags: 0 					#majorKey: #{Refactory.Browser.ClassNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #classes ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'categories' 					#belowWidgets: 'classes' ) ) ) )</body><body package="Browser-BaseUI" selector="packageHierarchyWindowSpec">packageHierarchyWindowSpec	"UIPainter new openOnClass: self andSelector: #packageHierarchyWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #hierarchyClasses 					#flags: 0 					#majorKey: #{Refactory.Browser.HierarchyClassNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #hierarchyClasses ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #hierarchyPackages 					#flags: 0 					#majorKey: #{Refactory.Browser.HierarchyPundleNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #hierarchyPackages ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'hierarchyClasses' 					#belowWidgets: 'hierarchyPackages' ) ) ) )</body><body package="Browser-BaseUI" selector="packageWindowSpec">packageWindowSpec	"UIPainter new openOnClass: self andSelector: #packageWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #packages 					#flags: 0 					#majorKey: #{Refactory.Browser.PundleNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #packages ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #classes 					#flags: 0 					#majorKey: #{Refactory.Browser.ClassNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #classes ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'packages' 					#belowWidgets: 'classes' ) ) ) )</body><body package="Browser-BaseUI" selector="parcelHierarchyWindowSpec">parcelHierarchyWindowSpec	"UIPainter new openOnClass: self andSelector: #parcelHierarchyWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #hierarchyClasses 					#flags: 0 					#majorKey: #{Refactory.Browser.HierarchyClassNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #hierarchyClasses ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #hierarchyParcels 					#flags: 0 					#majorKey: #{Refactory.Browser.HierarchyParcelNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #hierarchyParcels ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'hierarchyClasses' 					#belowWidgets: 'hierarchyParcels' ) ) ) )</body><body package="Browser-BaseUI" selector="parcelWindowSpec">parcelWindowSpec	"UIPainter new openOnClass: self andSelector: #parcelWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 1161 871 1361 1071 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #parcels 					#flags: 0 					#majorKey: #{Refactory.Browser.ParcelNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #parcels ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #classes 					#flags: 0 					#majorKey: #{Refactory.Browser.ClassNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #classes ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'parcels' 					#belowWidgets: 'classes' ) ) ) )</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor class</class-id> <category>resources</category><body package="Browser-BaseUI" selector="categoryMenu">categoryMenu	"MenuEditor new openOnClass: self andSelector: #categoryMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #A_dd #defaultString: 'A&amp;dd' #catalogID: #browser) 				#nameKey: #'Check Category' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Re_move #defaultString: 'Re&amp;move' #catalogID: #browser) 				#nameKey: #'Uncheck Category' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_AddAll #defaultString: '&amp;Add All...' #catalogID: #browser) 				#nameKey: #'Check All Categories' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_RemoveAll #defaultString: '&amp;Remove All...' #catalogID: #browser) 				#nameKey: #'Uncheck All Categories' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_FindClass #defaultString: '&amp;Find Class' #catalogID: #browser) 				#nameKey: #'Find Class' 				#value: 				#action: ) ) #(2 2 1 ) nil ) decodeAsLiteralArray</body><body package="Browser-BaseUI" selector="classMenu">classMenu	"MenuEditor new openOnClass: self andSelector: #classMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #A_dd #defaultString: 'A&amp;dd' #catalogID: #browser) 				#nameKey: #'Check Class' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Re_move #defaultString: 'Re&amp;move' #catalogID: #browser) 				#nameKey: #'Uncheck Class' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_AddAll #defaultString: '&amp;Add All...' #catalogID: #browser) 				#nameKey: #'Check All Classes' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_RemoveAll #defaultString: '&amp;Remove All...' #catalogID: #browser) 				#nameKey: #'Uncheck All Classes' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #AddSuperclasses #defaultString: 'Add Superclasses' #catalogID: #browser) 				#nameKey: #'Check All Superclasses' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveSuperclasses #defaultString: 'Remove Superclasses' #catalogID: #browser) 				#nameKey: #'Uncheck All Superclasses' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #AddSubclasses #defaultString: 'Add Subclasses' #catalogID: #browser) 				#nameKey: #'Check All Subclasses' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveSubclasses #defaultString: 'Remove Subclasses' #catalogID: #browser) 				#nameKey: #'Uncheck All Subclasses' 				#value: 				#action: ) ) #(2 2 2 2 ) nil ) decodeAsLiteralArray</body><body package="Browser-BaseUI" selector="protocolMenu">protocolMenu	"MenuEditor new openOnClass: self andSelector: #protocolMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #A_dd #defaultString: 'A&amp;dd' #catalogID: #browser) 				#nameKey: #'Check Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Re_move #defaultString: 'Re&amp;move' #catalogID: #browser) 				#nameKey: #'Uncheck Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_AddAll #defaultString: '&amp;Add All...' #catalogID: #browser) 				#nameKey: #'Check All Protocols' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_RemoveAll #defaultString: '&amp;Remove All...' #catalogID: #browser) 				#nameKey: #'Uncheck All Protocols' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_FindMethodDot #defaultString: '&amp;Find Method...' #catalogID: #browser) 				#nameKey: #'Find Method' 				#value: 				#action: ) ) #(2 2 1 ) nil ) decodeAsLiteralArray</body><body package="Browser-BaseUI" selector="selectorMenu">selectorMenu	"MenuEditor new openOnClass: self andSelector: #selectorMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #A_dd #defaultString: 'A&amp;dd' #catalogID: #browser) 				#nameKey: #'Check Method' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Re_move #defaultString: 'Re&amp;move' #catalogID: #browser) 				#nameKey: #'Uncheck Method' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_AddAll #defaultString: '&amp;Add All...' #catalogID: #browser) 				#nameKey: #'Check All Methods' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_RemoveAll #defaultString: '&amp;Remove All...' #catalogID: #browser) 				#nameKey: #'Uncheck All Methods' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #AddAllImplementors #defaultString: 'Add All Implementors' #catalogID: #browser) 				#nameKey: #'Check All Implementors' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveAllImplementors #defaultString: 'Remove All Implementors' #catalogID: #browser) 				#nameKey: #'Uncheck All Implementors' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #AddAllSenders #defaultString: 'Add All Senders' #catalogID: #browser) 				#nameKey: #'Check All Senders' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveAllSenders #defaultString: 'Remove All Senders' #catalogID: #browser) 				#nameKey: #'Uncheck All Senders' 				#value: 				#action: ) ) #(2 2 2 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.EnvironmentEditor class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="classWindowSpec">classWindowSpec	"UIPainter new openOnClass: self andSelector: #classWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1289 877 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #categoryList 					#flags: 0 					#majorKey: #{Refactory.Browser.CategoryNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #CategoryNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #classList 					#flags: 0 					#majorKey: #{Refactory.Browser.ClassNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #ClassNavigatorPart ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'categoryList' 					#belowWidgets: 'classList' ) ) ) )</body><body package="Browser-BaseUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1289 877 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 -2 0.5 ) 					#name: #categoryList 					#flags: 0 					#majorKey: #{Refactory.Browser.CategoryNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #CategoryNavigatorPart ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 -2 0.5 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'categoryList' 					#belowWidgets: 'classList' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.5 0 1 2 0.5 ) 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'categoryList classList meta' 					#belowWidgets: 'protocolList selectorList meta' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 2 0.5 2 0.5 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'protocolList' 					#belowWidgets: 'selectorList' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 -26 0.5 0 1 -2 0.5 ) 					#name: #meta 					#flags: 0 					#majorKey: #{Refactory.Browser.MetaNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #MetaNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 -27 0.5 ) 					#name: #classList 					#flags: 0 					#majorKey: #{Refactory.Browser.ClassNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #ClassNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0.5 -2 0.5 0 1 ) 					#name: #protocolList 					#flags: 0 					#majorKey: #{Refactory.Browser.SelectorProtocolNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #SelectorProtocolNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 2 0.5 0 1 0 1 ) 					#name: #selectorList 					#flags: 0 					#majorKey: #{Refactory.Browser.SelectorNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #SelectorNavigatorPart ) ) ) )</body></methods><methods><class-id>Refactory.Browser.ClassAndMethodTabNavigatorPart class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="classesSpec">classesSpec	"UIPainter new openOnClass: self andSelector: #classesSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #classes 					#flags: 0 					#majorKey: #{Refactory.Browser.ClassAndObjectNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #classes ) ) ) )</body><body package="Browser-BaseUI" selector="methodsSpec">methodsSpec	"UIPainter new openOnClass: self andSelector: #methodsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #methods 					#flags: 0 					#majorKey: #{Refactory.Browser.MethodNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #methods ) ) ) )</body><body package="Browser-BaseUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 887 750 1087 950 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #subcanvas 					#model: #objectList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedTab 						#requestValueChangeSelector: #changeRequest ) 					#labels: #() ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #selectors 					#flags: 0 					#majorKey: #{Refactory.Browser.NameSpaceItemTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #selectors ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#name: #splitter 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'subcanvas' 					#belowWidgets: 'selectors' ) ) ) )</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="basicWindowSpec">basicWindowSpec	"UIPainter new openOnClass: self andSelector: #basicWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 512 384 712 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEnter: #dragOverSelector 						#dragOver: #dragStartSelector 						#doDrag: #dropSelector 						#drop: #dragExitSelector 						#dragLeave: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #objectList 					#model: #objectList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changed 						#doubleClickSelector: #doubleClickItem 						#requestValueChangeSelector: #changeRequest ) 					#menu: #menu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight 					#useIcons: #other 					#iconSelectors: #(#icon ) ) ) ) )</body></methods><methods><class-id>Refactory.Browser.NameSpaceItemTabNavigatorPart class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="instanceVariableWindowSpec">instanceVariableWindowSpec	"UIPainter new openOnClass: self andSelector: #instanceVariableWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 512 384 712 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #instanceVariables 					#flags: 0 					#majorKey: #{Refactory.Browser.InstanceVariableNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #instanceVariables ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #instanceVariableSelectors 					#flags: 0 					#majorKey: #{Refactory.Browser.SelectorNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #instanceVariableSelectors ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'instanceVariables' 					#belowWidgets: 'instanceVariableSelectors' ) ) ) )</body><body package="Browser-BaseUI" selector="selectorWindowSpec">selectorWindowSpec	"UIPainter new openOnClass: self andSelector: #selectorWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 980 720 1180 920 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #protocols 					#flags: 0 					#majorKey: #{Refactory.Browser.SelectorProtocolNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #protocols ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #selectors 					#flags: 0 					#majorKey: #{Refactory.Browser.SelectorNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #selectors ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'protocols' 					#belowWidgets: 'selectors' ) ) ) )</body><body package="Browser-BaseUI" selector="selectorWithProtocolWindowSpec">selectorWithProtocolWindowSpec	"UIPainter new openOnClass: self andSelector: #selectorWithProtocolWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #selectorsWithProtocol 					#flags: 0 					#majorKey: #{Refactory.Browser.SelectorNavigatorPart} 					#minorKey: #protocolWindowSpec 					#clientKey: #selectorsWithProtocol ) ) ) )</body><body package="Browser-BaseUI" selector="sharedVariableWindowSpec">sharedVariableWindowSpec	"UIPainter new openOnClass: self andSelector: #sharedVariableWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #categories 					#flags: 0 					#majorKey: #{Refactory.Browser.SharedVariableProtocolNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #categories ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #sharedVariables 					#flags: 0 					#majorKey: #{Refactory.Browser.SharedVariableNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #sharedVariables ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'categories' 					#belowWidgets: 'sharedVariables' ) ) ) )</body><body package="Browser-BaseUI" selector="sharedVariableWithProtocolWindowSpec">sharedVariableWithProtocolWindowSpec	"UIPainter new openOnClass: self andSelector: #sharedVariableWithProtocolWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #sharedVariablesWithProtocol 					#flags: 0 					#majorKey: #{Refactory.Browser.SharedVariableNavigatorPart} 					#minorKey: #protocolWindowSpec 					#clientKey: #sharedVariablesWithProtocol ) ) ) )</body></methods><methods><class-id>Refactory.Browser.MetaNavigatorPart class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 706 589 895 612 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 0 0.5 -1 1 ) 					#name: #instance 					#model: #metaHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changed 						#requestValueChangeSelector: #changeRequest ) 					#label: #(#{Kernel.UserMessage} #key: #Instance #defaultString: 'Instance' #catalogID: #browser) 					#select: false ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.5 1 0 -1 1 -1 1 ) 					#name: #class 					#model: #metaHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changed 						#requestValueChangeSelector: #changeRequest ) 					#label: #(#{Kernel.UserMessage} #key: #Class #defaultString: 'Class' #catalogID: #browser) 					#select: true ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserDialog class</class-id> <category>resources</category><body package="Browser-BaseUI" selector="disabledDownIcon">disabledDownIcon	"UIMaskEditor new openOnClass: self andSelector: #disabledDownIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 2) at: 1 put: Graphics.ColorValue white; at: 2 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 254 0 0 63 252 0 0 31 248 0 0 15 240 0 0 7 224 0 0 3 192 0 0 1 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Browser-BaseUI" selector="disabledDownIconMask">disabledDownIconMask	"UIMaskEditor new openOnClass: self andSelector: #disabledDownIconMask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 254 0 0 63 252 0 0 31 248 0 0 15 240 0 0 7 224 0 0 3 192 0 0 1 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Browser-BaseUI" selector="disabledUpIcon">disabledUpIcon	"UIMaskEditor new openOnClass: self andSelector: #disabledUpIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 2) at: 1 put: Graphics.ColorValue white; at: 2 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 128 0 0 3 192 0 0 7 224 0 0 15 240 0 0 31 248 0 0 63 252 0 0 127 254 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Browser-BaseUI" selector="disabledUpIconMask">disabledUpIconMask	"UIMaskEditor new openOnClass: self andSelector: #disabledUpIconMask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 128 0 0 3 192 0 0 7 224 0 0 15 240 0 0 31 248 0 0 63 252 0 0 127 254 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Browser-BaseUI" selector="downIcon">downIcon	"UIMaskEditor new openOnClass: self andSelector: #downIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette blackWhite usingBits: #[255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 128 1 0 0 192 3 0 0 224 7 0 0 240 15 0 0 248 31 0 0 252 63 0 0 254 127 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0])</body><body package="Browser-BaseUI" selector="downIconMask">downIconMask	"UIMaskEditor new openOnClass: self andSelector: #downIconMask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 254 0 0 63 252 0 0 31 248 0 0 15 240 0 0 7 224 0 0 3 192 0 0 1 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Browser-BaseUI" selector="upIcon">upIcon	"UIMaskEditor new openOnClass: self andSelector: #upIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette blackWhite usingBits: #[255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 254 127 0 0 252 63 0 0 248 31 0 0 240 15 0 0 224 7 0 0 192 3 0 0 128 1 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0])</body><body package="Browser-BaseUI" selector="upIconMask">upIconMask	"UIMaskEditor new openOnClass: self andSelector: #upIconMask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 128 0 0 3 192 0 0 7 224 0 0 15 240 0 0 31 248 0 0 63 252 0 0 127 254 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Refactory.Browser.ClassSelectionDialog class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="selectorWindowSpec">selectorWindowSpec	"UIPainter new openOnClass: self andSelector: #selectorWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} #window: #(#{UI.WindowSpec} #label: 'Method Selection' #min: #(#{Core.Point} 40 20) #bounds: #(#{Graphics.Rectangle} 294 223 730 545)) #component: #(#{UI.SpecCollection} #collection: #(#(#{UI.SubCanvasSpec} #layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -40 1) #name: #environmentEditor #flags: 0 #majorKey: #{Refactory.Browser.EnvironmentEditor} #minorKey: #windowSpec #clientKey: #environmentEditor) #(#{UI.ActionButtonSpec} #layout: #(#{UI.AlignmentOrigin} 0 0.666666 -5 1 0.5 1) #name: #cancel #model: #cancel #label: 'Cancel' #defaultable: true) #(#{UI.ActionButtonSpec} #layout: #(#{UI.AlignmentOrigin} 0 0.333333 -5 1 0.5 1) #name: #accept #model: #accept #label: 'OK' #defaultable: true))))</body><body package="Browser-BaseUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Class Selection' 			#bounds: #(#{Graphics.Rectangle} 800 600 1236 837 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -40 1 ) 					#name: #environmentEditor 					#flags: 0 					#majorKey: #{Refactory.Browser.EnvironmentEditor} 					#minorKey: #classWindowSpec 					#clientKey: #environmentEditor ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.666666 -5 1 0.5 1 ) 					#name: #cancel 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.333333 -5 1 0.5 1 ) 					#name: #accept 					#model: #accept 					#label: 'OK' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.ClassAndObjectNavigatorPart class</class-id> <category>interface specs</category><body package="Browser-BaseUI" selector="basicWindowSpec">basicWindowSpec	"UIPainter new openOnClass: self andSelector: #basicWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 700 500 900 700 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEnter: #dropSelector 						#drop: #dragStartSelector 						#doDrag: #dragOverSelector 						#dragOver: #dragExitSelector 						#dragLeave: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 26 0 0 1 0 1 ) 					#name: #objectList 					#model: #objectList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changed 						#doubleClickSelector: #doubleClickItem 						#requestValueChangeSelector: #changeRequest ) 					#menu: #menu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 25 0 ) 					#name: #objectHolder 					#model: #objectHolder 					#tabable: false 					#isReadOnly: true 					#type: #object ) ) ) )</body></methods><methods><class-id>Tools.ListIconLibrary class</class-id> <category>resources</category><body package="Browser-BaseUI" selector="modifiedBundle16x16">modifiedBundle16x16	"UIMaskEditor new openOnClass: self andSelector: #modifiedBundle16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 7 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7549 7613 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6746 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6232 6296 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7741 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7870 7870 5782)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5975 6071 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6007 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6489 6521 5750)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7356 7452 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6456 5718)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5910 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7292 7356 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5718 5846 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7035 7131 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6970 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8095 8127 5975)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7227 5268)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7259 5268)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7870 7870 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6232 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6071 6167 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 6585 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7035)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7292 7388 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7131 7163 6296)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5782 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7806 7838 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 5429)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7035 7163 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8127 8095 6007)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7099 7067 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6649 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7966 7003)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6810 6778 4915)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7870 7902 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7645 7677 6778)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 7998 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7035 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7003 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6874 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7806 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6553 6713 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7099 7099 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7741 5686)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6585 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6553 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7484 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6810 6810 4915)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7259 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6071)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7741 6842)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7035 7067 6232)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7035 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6746 6874 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6296 6360 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6585 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 5011)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6489 6489 5750)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5782 5910 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6232 6424 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7549 7581 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5718 5814 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7259 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7292 8191)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@5MST5MST5MP@WE1\#IQL@MST5MST5MST@E3P_I0T7@CT5MST5MST5@A\PHA$@G @5MP@@@@@@@@@#HA$@MP@@MST@J2,+C@@@IQL7@CT5MST5@B,IFC,@@A,.C0@5MST@MP@+FDPC@@@6PS$@MP@@J0@@ADPNE@@@I!0QKP@$@B,+ACL]JAT@@@DRHS42B@@IFDL]JR(F@@@Q@"HVO (@C@@@NC(,A0@@@@@@@@@@@@@5@CD,OC&lt;@MST5MST5MST5MP@XK4@M@CT5MST5MST5MST@L@-BF @5MST5MST5MST5@@@@@@@@MST5MST5MST5MST5MST5MP@a'))</body><body package="Browser-BaseUI" selector="modifiedBundle16x16mask">modifiedBundle16x16mask	"UIMaskEditor new openOnClass: self andSelector: #modifiedBundle16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[255 0 0 0 255 0 0 0 255 0 0 0 255 63 0 0 251 63 0 0 248 63 0 0 248 191 0 0 251 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 191 0 0 0 63 0 0 0 63 0 0 0 63 0 0 0 0 0 0])</body><body package="Browser-BaseUI" selector="modifiedPackage16x16">modifiedPackage16x16	"UIMaskEditor new openOnClass: self andSelector: #modifiedPackage16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6328 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6328 6360 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 4401)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6521 6489 4690)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6489 6521 4690)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6521 6521 4658)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 3630)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4947 4979 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5782 5750 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8095 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7388 7420 5429)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5750 5782 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5782 5782 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6071)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 4369)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6489 6489 4658)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6778 6810 4915)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5300 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5910 4208)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5942 4208)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8159 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8159 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5782 5782 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4786 3341)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8159 7388)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5525 5525 3919)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6328 6328 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8127 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4979 4947 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 4369)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5750 5750 4112)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6521 6489 4658)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6489 6489 4690)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 4208)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5942 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7099 7099 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4786 3373)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4818 3341)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 7388)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 5525 3919)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5172 5172 3630)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6328 6328 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8159 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 5686)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3501 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4979 4979 3469)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'A@PDA@PDA@PDA@PDA@PDA@PDA@PDA@@DA@PDA@PDA@PDA@PDA@@L@@P@A@PDA@PDA@PDA@@LC@0@A@@DA@PDA@PDA@@LC@0@KA0,@@@@A@PDA@@LC@0@JQ$YJQ$2D@@DA@PD@@0@FA&lt;0G3@2DA4@A@PD@@PTEAPTEAPTDA4''@@PDA@@PA@PDA@PDAB4''B@@DA@P@ERL$D"PEA \''K#L@A@PD@CD^K18AG!8BK"@*@@PDA@@MHRD!HPL!DP$[@@PDA@P@JBTJE"T&amp;E2X+@@PDA@PD@ALKF"HKC &lt;Z@@PDA@PDA@P@@@@@@@@@@@PDA@PDA@PDA@PDA@PDA@PDA@PDA@@a'))</body><body package="Browser-BaseUI" selector="modifiedPackage16x16mask">modifiedPackage16x16mask	"UIMaskEditor new openOnClass: self andSelector: #modifiedPackage16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 2 0 0 0 7 64 0 0 15 224 0 0 31 252 0 0 63 254 0 0 31 254 0 0 63 254 0 0 63 254 0 0 63 254 0 0 63 254 0 0 63 252 0 0 63 248 0 0 63 240 0 0 31 224 0 0 0 0 0 0])</body></methods><initialize><class-id>Refactory.Browser.BrowserApplicationModel</class-id></initialize><initialize><class-id>Refactory.Browser.ProtocolItemNavigatorPart</class-id></initialize><initialize><class-id>Refactory.Browser.PundleItem</class-id></initialize><initialize><class-id>Refactory.Browser.PundleNavigatorPart</class-id></initialize><initialize><class-id>Refactory.Browser.ClassNavigatorPart</class-id></initialize><initialize><class-id>Refactory.Browser.HierarchyClassNavigatorPart</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Parcel</name><environment>Kernel</environment><super>Kernel.CodeComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>definedObjects definedClasses definedBindings classSelectors namedObjects dirty loaded </inst-vars><class-inst-vars>parcels classParcelMap parcelFileInfoCache parcelFileDirectoryCache </class-inst-vars><imports></imports><category>System-Code Components</category><attributes><package>System-Code Components</package></attributes></class><class><name>MultiSelectionInList</name><environment>UI</environment><super>UI.SelectionInList</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Collections</category><attributes><package>UIBasics-Collections</package></attributes></class><class><name>BrowserEnvironment</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label searchStrings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>BrowserEnvironmentWrapper</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironment</super><private>false</private><indexed-type>none</indexed-type><inst-vars>environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>Behavior</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclass methodDict format subclasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>MultiSelectionSequenceView</name><environment>UI</environment><super>UI.SequenceView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selections lastSelectionIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class><class><name>AndEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>andedEnvironment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>Magnitude</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>GeneralMethodDefinition</name><environment>Tools</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Tools-Programming</package></attributes></class><class><name>MethodDefinition</name><environment>Tools</environment><super>Tools.GeneralMethodDefinition</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inheritingClass implementingClass selector extraText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Tools-Programming</package></attributes></class><class><name>InitializerDefinition</name><environment>Tools</environment><super>Tools.GeneralMethodDefinition</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nameSpace key </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Tools-Programming</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class></st-source>