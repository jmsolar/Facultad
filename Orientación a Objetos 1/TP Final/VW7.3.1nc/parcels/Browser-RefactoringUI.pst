<?xml version="1.0"?><st-source><!-- Name: Browser-RefactoringUINotice: Copyright © 2002-2005 Cincom Systems, Inc.  All Rights Reserved.Comment: This package contains the additional UI classes that are related to the refactorings.DbIdentifier: bear73DbTrace: 50531DevelopmentPrerequisites: #(#(#any 'Browser-BaseUI' '') #(#any 'Browser-Refactorings' ''))PackageName: Browser-RefactoringUIParcel: #('Browser-RefactoringUI')PrerequisiteParcels: #(#('Browser-BaseUI' '') #('Browser-Refactorings' ''))PrintStringCache: (7.3 - 1.4,bobw)Version: 7.3.1Date: 5:52:09 pm April 10, 2005 --><time-stamp>From VisualWorks®, 7.3.1 of April 10, 2005 on April 10, 2005 at 5:52:09 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>MethodNameDialog</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>argumentList selector methodName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Refactorings UI</category><attributes><package>Browser-RefactoringUI</package></attributes></class><comment><class-id>Refactory.Browser.MethodNameDialog</class-id><body>MethodNameDialog is a dialog that allows one to enter a selector for a method. In addition to entering the selector, the user can also reorder the parameters.Instance Variables:	argumentList	&lt;SelectionInList&gt;	the method's parameters	methodName	&lt;RBMethodName&gt;	the method name object that contains both the parameters and the selector	selector	&lt;ValueModel&gt;	the symbol for the selector name</body></comment><class><name>VariableTypeDialog</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classNameHolder classList model </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Refactorings UI</category><attributes><package>Browser-RefactoringUI</package></attributes></class><comment><class-id>Refactory.Browser.VariableTypeDialog</class-id><body>VariableTypeDialog is a dialog that allows the user to enter the class of the object (i.e., its type). It is used when extracting a method to another class through an instance variable. We perform a quick and dirty type analysis that catches most types, but we allow the user to change what our guess is through this dialog.Instance Variables:	classList	&lt;MultiSelectionInList&gt;	the list of possible types (selected ones are the real types)	classNameHolder	&lt;ValueModel&gt;	a new type that the user can enter	model	&lt;RBRootNamespace&gt;	our model to use for getting class names</body></comment><class><name>CompositeRefactoryChangeInspector</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>changeDescription changeTree originalCode change dialog </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Refactorings UI</category><attributes><package>Browser-RefactoringUI</package></attributes></class><comment><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id><body>CompositeRefactoryChangeInspector is a special inspector for RefactoryChange objects.Instance Variables:	change	&lt;RefactoryChange&gt;	the top level change object	changeDescription	&lt;ValueHolder on: String&gt;	the description of the change selected at the top	changes	&lt;SelectionInList on: RefactoryChange&gt;	the list of changes at the top of the window	changeTree	&lt;SelectionInTree on: RefactoryChange&gt;	the list of changes at the top of the window	dialog	&lt;SimpleDialog&gt;	if we are opened in a dialog, this is the containing dialog	originalCode	&lt;ValueHolder on: String&gt;	what the code in the image currently looks like for the change</body></comment><shared-variable><name>PromptOnRefactoring</name><environment>Refactory.Browser.BrowserApplicationModel</environment><private>false</private><constant>false</constant><category>variables</category><initializer>false</initializer><attributes><package>Browser-RefactoringUI</package></attributes></shared-variable><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>aspects</category><body package="Browser-RefactoringUI" selector="argumentList">argumentList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^argumentList isNil		ifTrue:			[argumentList := SelectionInList new]		ifFalse:			[argumentList]</body><body package="Browser-RefactoringUI" selector="selector">selector	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^selector isNil		ifTrue:			[selector := '' asValue]		ifFalse:			[selector]</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>accessing</category><body package="Browser-RefactoringUI" selector="arguments">arguments	^argumentList list</body><body package="Browser-RefactoringUI" selector="methodName">methodName	^self selector value asSymbol</body><body package="Browser-RefactoringUI" selector="methodPattern">methodPattern	| stream |	stream := String new writeStream.	self methodName numArgs &gt; 0 		ifTrue: 			[self methodName keywords with: self argumentList list				do: 					[:keyword :arg | 					stream						nextPutAll: keyword;						nextPut: $ ;						nextPutAll: arg;						nextPut: $ ]]		ifFalse: [stream nextPutAll: self methodName].	^stream contents</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>initialize-release</category><body package="Browser-RefactoringUI" selector="arguments:">arguments: aCollection	self argumentList list: aCollection asList.	methodName arguments: aCollection asOrderedCollection</body><body package="Browser-RefactoringUI" selector="for:">for: aMethodName 	self arguments: aMethodName arguments.	aMethodName selector notNil 		ifTrue: [self methodName: aMethodName selector].	methodName := aMethodName</body><body package="Browser-RefactoringUI" selector="initialize">initialize	super initialize.	methodName := RBMethodName selector: #'' arguments: OrderedCollection new.	self argumentList selectionIndexHolder onChangeSend: #changedSelection		to: self</body><body package="Browser-RefactoringUI" selector="methodName:">methodName: aSelector	self selector value: aSelector</body><body package="Browser-RefactoringUI" selector="release">release	super release.	self argumentList selectionIndexHolder retractInterestsFor: self</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>changing</category><body package="Browser-RefactoringUI" selector="changedSelection">changedSelection	| index |	index := self argumentList selectionIndex.	index &gt; 1 ifTrue: [self enable: #up] ifFalse: [self disable: #up].	index &lt; self argumentList list size &amp; (index &gt; 0)		ifTrue: [self enable: #down]		ifFalse: [self disable: #down].	self changedSelector</body><body package="Browser-RefactoringUI" selector="changedSelector">changedSelector	methodName selector: self methodName.	methodName isValid 		ifTrue: 			[self enable: #ok.			self printSelector]		ifFalse: 			[self disable: #ok.			self printNoSelector]</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>actions</category><body package="Browser-RefactoringUI" selector="down">down	| index |	index := self argumentList selectionIndex.	methodName moveArgument: (self argumentList list at: index + 1)		before: self argumentList selection.	self argumentList list swap: index with: index + 1.	self argumentList selectionIndex: index + 1</body><body package="Browser-RefactoringUI" selector="up">up	| index |	index := self argumentList selectionIndex.	methodName moveArgument: self argumentList selection		before: (self argumentList list at: index - 1).	self argumentList list swap: index with: index - 1.	self argumentList selectionIndex: index - 1</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>private</category><body package="Browser-RefactoringUI" selector="methodLabel:">methodLabel: aString	| component |	component := builder componentAt: #methodPattern.	component notNil ifTrue: [component labelString: aString]</body><body package="Browser-RefactoringUI" selector="printNoSelector">printNoSelector	self methodLabel: 		((#NA1pArgSelectorRequired &lt;&lt; #browser &gt;&gt; 'Not available: &lt;1p&gt; argument selector required') 			expandMacrosWith: self arguments size)</body><body package="Browser-RefactoringUI" selector="printSelector">printSelector	self methodLabel: self methodPattern</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>interface opening</category><body package="Browser-RefactoringUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self changedSelection.	(self builder componentAt: #selector) widget controller 		continuousAccept: true</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog class</class-id> <category>instance creation</category><body package="Browser-RefactoringUI" selector="for:">for: aMethodName 	| dialog |	dialog := self new.	dialog for: aMethodName.	^dialog</body><body package="Browser-RefactoringUI" selector="methodNameFor:">methodNameFor: arguments 	| dialog |	dialog := self new.	dialog arguments: arguments.	^dialog</body><body package="Browser-RefactoringUI" selector="methodNameFor:initial:">methodNameFor: arguments initial: aSelector	| dialog |	dialog := self new.	dialog arguments: arguments.	dialog methodName: aSelector.	^dialog</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog class</class-id> <category>private-interface building</category><body package="Browser-RefactoringUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog</class-id> <category>initialize-release</category><body package="Browser-RefactoringUI" selector="chooseClassesFromList:initialSelections:">chooseClassesFromList: aCollection initialSelections: selectedItems 	self classList list: aCollection asList.	self classList selections: selectedItems</body><body package="Browser-RefactoringUI" selector="initialize">initialize	super initialize.	model := RBRootNameSpace new</body><body package="Browser-RefactoringUI" selector="model:">model: aRBNameSpace 	model := aRBNameSpace</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog</class-id> <category>aspects</category><body package="Browser-RefactoringUI" selector="classList">classList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^classList isNil		ifTrue:			[classList := MultiSelectionInList new]		ifFalse:			[classList]</body><body package="Browser-RefactoringUI" selector="classNameHolder">classNameHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^classNameHolder isNil		ifTrue:			[classNameHolder := nil asValue]		ifFalse:			[classNameHolder]</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog</class-id> <category>private</category><body package="Browser-RefactoringUI" selector="getClassesForName">getClassesForName	| classes |	classes := Set new.	model allClassesDo: 			[:each | 			each name = self classNameHolder value asSymbol 				ifTrue: [classes add: each].			each fullName = self classNameHolder value asString 				ifTrue: [classes add: each]].	^classes</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog</class-id> <category>actions</category><body package="Browser-RefactoringUI" selector="addClassToList">addClassToList	| classes |	classes := self getClassesForName.	classes do: 			[:each | 			(self classList list includes: each) 				ifFalse: [self classList list add: each]]</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog</class-id> <category>interface opening</category><body package="Browser-RefactoringUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self visualBlockFor: #classList		is: 			[:view :index | 			Label with: (view sequence at: index) fullName attributes: view textStyle]</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog class</class-id> <category>querying</category><body package="Browser-RefactoringUI" selector="chooseClassesFromList:initialSelections:model:cancel:">chooseClassesFromList: aCollection initialSelections: selectedItems model: aRBNameSpace cancel: cancelBlock 	| dialog |	dialog := self new.	dialog model: aRBNameSpace.	dialog chooseClassesFromList: aCollection initialSelections: selectedItems.	^dialog open 		ifTrue: [dialog classList selections]		ifFalse: [cancelBlock value]</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog class</class-id> <category>private-interface building</category><body package="Browser-RefactoringUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>aspects</category><body package="Browser-RefactoringUI" selector="changeDescription">changeDescription	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^changeDescription isNil		ifTrue:			[changeDescription := Text new asValue]		ifFalse:			[changeDescription]</body><body package="Browser-RefactoringUI" selector="changeTree">changeTree	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^changeTree isNil		ifTrue:			[changeTree := SelectionInTree new]		ifFalse:			[changeTree]</body><body package="Browser-RefactoringUI" selector="originalCode">originalCode	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^originalCode isNil		ifTrue:			[originalCode := Text new asValue]		ifFalse:			[originalCode]</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>actions</category><body package="Browser-RefactoringUI" selector="close">close	self closeRequest.	dialog notNil ifTrue: [dialog close]</body><body package="Browser-RefactoringUI" selector="executeAll">executeAll	self showWaitCursorWhile: [self performChange: change].	self close</body><body package="Browser-RefactoringUI" selector="executeChange">executeChange	self performChange: self changeTree selection</body><body package="Browser-RefactoringUI" selector="removeChange">removeChange	| removedChanges |	change removeChange: self changeTree selection.	removedChanges := self changeTree selection withAllChanges.	self removeFromTree: removedChanges.	self changedChange</body><body package="Browser-RefactoringUI" selector="removeClass">removeClass	| class removedChanges |	class := self changeTree selection changeObject.	class isNil ifTrue: [^self].	removedChanges := OrderedCollection new.	change withAllChanges do: 			[:each | 			each changeObject == class 				ifTrue: 					[removedChanges addAll: each withAllChanges.					change removeChange: each]].	self removeFromTree: removedChanges.	self changedChange</body><body package="Browser-RefactoringUI" selector="removeNameSpace">removeNameSpace	| class removedChanges nameSpace |	class := self changeTree selection changeObject.	class isNil ifTrue: [^self].	nameSpace := class environment.	removedChanges := OrderedCollection new.	change withAllChanges do: 			[:each | 			(each changeObject ifNotNil: [:theClass | theClass environment]) 				== nameSpace 					ifTrue: 						[removedChanges addAll: each withAllChanges.						change removeChange: each]].	self removeFromTree: removedChanges.	self changedChange</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>initialize-release</category><body package="Browser-RefactoringUI" selector="initializeFor:">initializeFor: aRefactoryChange 	change := aRefactoryChange.	self changeTree list: (TreeModel 				on: aRefactoryChange				displayRoot: false				childrenWith: [:each | each changes]).	self changeTree tree expandFully: 1</body><body package="Browser-RefactoringUI" selector="inspect:">inspect: aRefactoryChange 	self initializeFor: aRefactoryChange.	self open</body><body package="Browser-RefactoringUI" selector="inspectDialog:">inspectDialog: aRefactoryChange 	self initializeFor: aRefactoryChange.	dialog := SimpleDialog new.	dialog openFor: self interface: #dialogSpec</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>private</category><body package="Browser-RefactoringUI" selector="originalCodeForChange">originalCodeForChange	^self changeTree selection originalCode</body><body package="Browser-RefactoringUI" selector="removeFromTree:">removeFromTree: removedChanges 	removedChanges 		reverseDo: [:each | self changeTree list remove: each ifAbsent: []]</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>menu</category><body package="Browser-RefactoringUI" selector="changesMenu">changesMenu	^	[self changeTree selection isNil 		ifTrue: [self disableMenu: self class changesMenu except: (Array with: (#ExecuteAll &lt;&lt; #browser &gt;&gt; 'Execute All') asString)]		ifFalse: [self class changesMenu]]</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>changing</category><body package="Browser-RefactoringUI" selector="changedChange">changedChange	| selectedChange changeText originalText |	selectedChange := self changeTree selection.	selectedChange isNil 		ifTrue: 			[changeDescription value: '' asText.			originalCode value: '' asText.			^self].	changeText := selectedChange printString asText.	originalText := self originalCodeForChange asText.	DiffList compareTokensIn: originalText with: changeText.	changeDescription value: changeText.	originalCode value: originalText</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector class</class-id> <category>interface opening</category><body package="Browser-RefactoringUI" selector="openDialogOn:">openDialogOn: aRefactoryBuilder 	self new inspectDialog: aRefactoryBuilder</body><body package="Browser-RefactoringUI" selector="openOn:">openOn: aRefactoryBuilder 	self new inspect: aRefactoryBuilder</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector class</class-id> <category>private-interface building</category><body package="Browser-RefactoringUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel class</class-id> <category>accessing</category><body package="Browser-RefactoringUI" selector="promptOnRefactoring">promptOnRefactoring	^PromptOnRefactoring</body><body package="Browser-RefactoringUI" selector="promptOnRefactoring:">promptOnRefactoring: aBoolean	PromptOnRefactoring := aBoolean</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>error handling</category><body package="Browser-RefactoringUI" selector="handleError:">handleError: aBlock 	^[self showWaitCursorWhile: aBlock] on: Refactoring preconditionSignal		do: 			[:ex | 			ex isResumable 				ifTrue: 					[(self confirm: (ex messageText last == $? 								ifTrue: [ex messageText]								ifFalse: [((#x1sNProceedQ &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;&lt;n&gt;Do you want to proceed?')			expandMacrosWith: ex messageText)])) 						ifTrue: [ex resume]]				ifFalse: 					[ex parameter notNil 						ifTrue: [(self confirm: ex messageText) ifTrue: [ex parameter value]]						ifFalse: [self warn: ex messageText]].			ex return: nil]</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>accessing</category><body package="Browser-RefactoringUI" selector="performChange:">performChange: aRefactoringChange 	RefactoryChangeManager instance performChange: aRefactoringChange</body><body package="Browser-RefactoringUI" selector="performChange:withMessage:">performChange: aRefactoringChange withMessage: aString 	RefactoryChangeManager instance performChange: aRefactoringChange		withMessage: aString</body><body package="Browser-RefactoringUI" selector="performRefactoring:">performRefactoring: aRefactoring 	self class promptOnRefactoring 		ifTrue: 			[aRefactoring primitiveExecute.			CompositeRefactoryChangeInspector 				openDialogOn: aRefactoring changes asCompositeChange]		ifFalse: [aRefactoring execute]</body></methods><methods><class-id>Refactory.Browser.Refactoring class</class-id> <category>accessing</category><body package="Browser-RefactoringUI" selector="initializeRefactoringOptions">initializeRefactoringOptions	"self initializeRefactoringOptions"	RefactoringOptions := IdentityDictionary new.	RefactoringOptions		at: #implementorToInline			put: 				[:ref :imps | 				BrowserApplicationModel basicNew 					choose: (#WhichImpToInline &lt;&lt; #browser &gt;&gt; 'Which implementation should be inlined?')					fromList: imps					values: imps					lines: 5					cancel: [nil]];		at: #methodName			put: 				[:ref :methodName | 				| dialog |				dialog := MethodNameDialog for: methodName.				dialog open ifTrue: [methodName] ifFalse: [nil]];		at: #selfArgumentName			put: 				[:ref | 				ref 					request: (#EnterNameForSelf &lt;&lt; #browser &gt;&gt; 'Enter name for argument to refer to "self" in extracted method')];		at: #selectVariableToMoveTo			put: 				[:ref :class :selector | 				| parseTree nameList ignoreList |				parseTree := class parseTreeFor: selector.				parseTree isNil 					ifTrue: 						[parseTree := RBMethodNode selector: #value									body: (RBSequenceNode statements: #())].				nameList := OrderedCollection new.				nameList					add: (#DashesArgumentsDashes &lt;&lt; #browser &gt;&gt; '---- Arguments ----') asString;					addAll: parseTree argumentNames asSortedCollection;					add: (#DashesInstanceVariablesDashes &lt;&lt; #browser &gt;&gt; '---- Instance Variables ----') asString.				ignoreList := OrderedCollection with: 1 with: nameList size.				nameList addAll: class allInstanceVariableNames asSortedCollection.				BrowserApplicationModel basicNew 					choose: (#SelectVariableToMoveMethod &lt;&lt; #browser &gt;&gt; 'Select variable to move method into:')					fromList: nameList					values: nameList					ignore: ignoreList					initialSelection: nil					lines: 8					cancel: [nil]];		at: #variableTypes			put: 				[:ref :types :selected | 				VariableTypeDialog 					chooseClassesFromList: types					initialSelections: selected					model: ref model					cancel: [nil]];		at: #extractAssignment			put: 				[:ref :varName | 				ref 					confirm: ((#ExtractAssignmentOf1sAtEndQ &lt;&lt; #browser &gt;&gt; 'Do you want to extract the assignment of &lt;1s&gt;&lt;n&gt;at the end of selection?') 							expandMacrosWith: varName)];		at: #inlineExpression			put: 				[:ref :string | 				ref 					confirm: ((#Inline1sOrUseTempQ &lt;&lt; #browser &gt;&gt; 'Do you want to inline "&lt;1s&gt;"? If not, it will be assigned as a temporary.') 							expandMacrosWith: string)];		at: #alreadyDefined			put: 				[:ref :class :selector | 				ref 					confirm: ((#x1sDefinedIn2pUseAnywayQ &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; is already defined in the &lt;2p&gt; hierarchy.&lt;n&gt;Extracting it to an existing selector may change behavior.&lt;n&gt;Do you wish to use &lt;1s&gt; anyway?') 							expandMacrosWith: selector							with: class)];		at: #useExistingMethod			put: 				[:ref :selector | 				ref confirm: ((#UseExistingMethod1sQ &lt;&lt; #browser &gt;&gt; 'Use existing method &lt;1s&gt; instead of creating new method?')			expandMacrosWith: selector)];		at: #openBrowser put: [:ref :env | env openEditor];		at: #sharedVariableScopeExpansion			put: 				[:ref :var | 				BrowserApplicationModel basicNew 					choose: ((#HowToHandle1sReferencesQ &lt;&lt; #browser &gt;&gt; 'How do you want to handle references to "&lt;1s&gt;"?')			expandMacrosWith: var)					fromList: (Array						with: (#CreateAccessors &lt;&lt; #browser &gt;&gt; 'Create Accessors') asString						with: (#SpecificImport &lt;&lt; #browser &gt;&gt; 'Specific Import') asString)					values: #(#createAccessors: #specificImport:)					lines: 5					cancel: [nil]]</body></methods><methods><class-id>Refactory.Browser.Refactoring</class-id> <category>utilities</category><body package="Browser-RefactoringUI" selector="confirm:">confirm: aString 	^Dialog confirm: aString</body><body package="Browser-RefactoringUI" selector="request:">request: aString	^Dialog request: aString</body></methods><methods><class-id>Refactory.Browser.RefactoryChange</class-id> <category>performing-changes</category><body package="Browser-RefactoringUI" selector="executeWithMessage:">executeWithMessage: aString 	| tally controller model done |	model := 0 asValue.	done := 0.	tally := self changesSize.	controller := aString isNil 				ifTrue: [nil]				ifFalse: [ProgressWidgetView progressOpenOn: model label: aString].	model value: 0.	^	[self executeNotifying: 			[done := done + 1.			model value: done asFloat / tally]] 			ensure: [controller notNil ifTrue: [controller closeAndUnschedule]]</body></methods><methods><class-id>Refactory.Browser.RefactoryChange</class-id> <category>user interface</category><body package="Browser-RefactoringUI" selector="inspect">inspect	^CompositeRefactoryChangeInspector openOn: self asCompositeChange</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog class</class-id> <category>interface specs</category><body package="Browser-RefactoringUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: #(#{Kernel.UserMessage} #key: #MethodName #defaultString: 'Method name' #catalogID: #browser) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 512 384 912 684 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 25 0 0 1 ) 					#name: #selectorLabel 					#label: #(#{Kernel.UserMessage} #key: #SelectorC #defaultString: 'Selector:' #catalogID: #browser) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 -35 1 50 0 ) 					#name: #selector 					#model: #selector 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSelector ) 					#type: #string ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 75 0 0 1 ) 					#name: #argumentLabel 					#label: #(#{Kernel.UserMessage} #key: #ArgumentOrderC #defaultString: 'Argument order:' #catalogID: #browser) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 75 0 -35 1 190 0 ) 					#name: #argumentList 					#model: #argumentList ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -30 1 75 0 -5 1 100 0 ) 					#name: #up 					#isOpaque: true 					#model: #up 					#label: #upImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -30 1 105 0 -5 1 130 0 ) 					#name: #down 					#isOpaque: true 					#model: #down 					#label: #downImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 200 0 -35 1 250 0 ) 					#name: #methodPatternBox 					#label: #(#{Kernel.UserMessage} #key: #ResultingPattern #defaultString: 'Resulting pattern' #catalogID: #browser) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 220 0 -45 1 245 0 ) 					#name: #methodPattern 					#label: #(#{Kernel.UserMessage} #key: #LTnoSelectorGT #defaultString: '&lt;no selector&gt;' #catalogID: #browser) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} -5 0.5 265 0 1 0 ) 					#name: #ok 					#model: #accept 					#label: #(#{Kernel.UserMessage} #key: #OK #defaultString: 'OK' #catalogID: #browser) 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0.5 265 0 ) 					#name: #cancel 					#model: #cancel 					#label: #(#{Kernel.UserMessage} #key: #Cancel #defaultString: 'Cancel' #catalogID: #browser) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog class</class-id> <category>interface specs</category><body package="Browser-RefactoringUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #SelectVariableType #defaultString: 'Select variable type' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 353 236 672 533 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 30 0 -5 1 -100 1 ) 					#name: #classList 					#model: #classList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 -70 1 -65 1 -40 1 ) 					#name: #classNameHolder 					#model: #classNameHolder 					#type: #symbol ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -98 1 0 1 -96 1 ) ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -37 1 0 1 -35 1 ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 5 2 ) 					#label: #(#{Kernel.UserMessage} #key: #SelectClassesToMoveToC #defaultString: 'Select classes to move to:' #catalogID: #browser) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.333333 -3 1 0.5 1 ) 					#name: #accept 					#model: #accept 					#label: #(#{Kernel.UserMessage} #key: #OK #defaultString: 'OK' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.666666 -3 1 0.5 1 ) 					#name: #cancel 					#model: #cancel 					#label: #(#{Kernel.UserMessage} #key: #Cancel #defaultString: 'Cancel' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} -5 1 -40 1 1 1 ) 					#name: #addClassToList 					#model: #addClassToList 					#label: #(#{Kernel.UserMessage} #key: #Add #defaultString: 'Add' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 -95 1 ) 					#label: #(#{Kernel.UserMessage} #key: #AddClassToListC #defaultString: 'Add class to list:' #catalogID: #browser) ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector class</class-id> <category>interface specs</category><body package="Browser-RefactoringUI" selector="dialogSpec">dialogSpec	"UIPainter new openOnClass: self andSelector: #dialogSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #Changes #defaultString: 'Changes' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1408 1051 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -2 0.333333 ) 					#name: #changeTree 					#model: #changeTree 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedChange ) 					#menu: #dialogChangesMenu 					#useModifierKeys: true 					#selectionType: #highlight 					#useIcons: #none ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.333333 0 1 2 0.333333 ) 					#name: #ResizingSplitter1 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 50 					#aboveWidgets: 'changes changeTree ' 					#belowWidgets: 'changeDescription ResizingSplitter2 originalCode ImageLabel ChangeLabel' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0 2 0.333333 ) 					#name: #ImageLabel 					#label: #(#{Kernel.UserMessage} #key: #ImageC #defaultString: 'Image:' #catalogID: #browser) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 29 0.333333 -2 0.5 -30 1 ) 					#name: #originalCode 					#model: #originalCode 					#isReadOnly: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0.3333 2 0.5 -30 1 ) 					#name: #ResizingSplitter2 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'originalCode' 					#belowWidgets: 'changeDescription ChangeLabel' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0.5 2 0.333333 ) 					#name: #ChangeLabel 					#label: #(#{Kernel.UserMessage} #key: #ChangeC #defaultString: 'Change:' #catalogID: #browser) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 29 0.333333 0 1 -30 1 ) 					#name: #changeDescription 					#model: #changeDescription 					#isReadOnly: true ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -29 1 0 1 -28 1 ) 					#name: #Divider1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 0.333333 -26 1 50 0.333333 -1 1 ) 					#name: #OKButton 					#model: #executeAll 					#label: #(#{Kernel.UserMessage} #key: #OK #defaultString: 'OK' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 0.666666 -26 1 50 0.666666 -1 1 ) 					#name: #CancelButton 					#model: #close 					#label: #(#{Kernel.UserMessage} #key: #Cancel #defaultString: 'Cancel' #catalogID: #browser) 					#defaultable: true ) ) ) )</body><body package="Browser-RefactoringUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #Changes #defaultString: 'Changes' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1408 1051 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -2 0.333333 ) 					#name: #changeTree 					#model: #changeTree 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedChange ) 					#menu: #changesMenu 					#useModifierKeys: true 					#selectionType: #highlight 					#useIcons: #none ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.333333 0 1 2 0.333333 ) 					#name: #ResizingSplitter1 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'changes changeTree ' 					#belowWidgets: 'changeDescription ResizingSplitter2 originalCode ImageLabel ChangeLabel' ) 			#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0 2 0.333333 ) 					#name: #ImageLabel 					#label: #(#{Kernel.UserMessage} #key: #ImageC #defaultString: 'Image:' #catalogID: #browser) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 29 0.333333 -2 0.5 0 1 ) 					#name: #originalCode 					#model: #originalCode 					#isReadOnly: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0.3333 2 0.5 0 1 ) 					#name: #ResizingSplitter2 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'originalCode' 					#belowWidgets: 'changeDescription ChangeLabel' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0.5 2 0.333333 ) 					#name: #ChangeLabel 					#label: #(#{Kernel.UserMessage} #key: #ChangeC #defaultString: 'Change:' #catalogID: #browser) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 29 0.333333 0 1 0 1 ) 					#name: #changeDescription 					#model: #changeDescription 					#isReadOnly: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector class</class-id> <category>resources</category><body package="Browser-RefactoringUI" selector="changesMenu">changesMenu	"MenuEditor new openOnClass: self andSelector: #changesMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #ExecuteAll #defaultString: 'Execute All' #catalogID: #browser) 				#value: #executeAll ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Execute #defaultString: 'Execute' #catalogID: #browser) 				#value: #executeChange ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Remove #defaultString: 'Remove' #catalogID: #browser) 				#value: #removeChange ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveClass #defaultString: 'Remove Class' #catalogID: #browser) 				#value: #removeClass ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveNameSpace #defaultString: 'Remove Name Space' #catalogID: #browser) 				#nameKey: #removeNameSpace 				#value: #removeNameSpace ) ) #(2 3 ) nil ) decodeAsLiteralArray</body><body package="Browser-RefactoringUI" selector="dialogChangesMenu">dialogChangesMenu	"MenuEditor new openOnClass: self andSelector: #dialogChangesMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Remove #defaultString: 'Remove' #catalogID: #browser) 				#value: #removeChange ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveClass #defaultString: 'Remove Class' #catalogID: #browser) 				#value: #removeClass ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveNameSpace #defaultString: 'Remove Name Space' #catalogID: #browser) 				#nameKey: #removeNameSpace 				#value: #removeNameSpace ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>BrowserApplicationModel</name><environment>Refactory.Browser</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>menus </class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>BrowserDialog</name><environment>Refactory.Browser</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>RefactoryChange</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><class><name>Refactoring</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model options methodClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Refactorings</category><attributes><package>Browser-Refactorings</package></attributes></class></st-source>