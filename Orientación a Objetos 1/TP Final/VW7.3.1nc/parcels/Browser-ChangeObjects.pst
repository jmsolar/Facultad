<?xml version="1.0"?><st-source><!-- Name: Browser-ChangeObjectsNotice: Copyright © 2002-2005 Cincom Systems, Inc.  All Rights Reserved.Comment: This package contains the low level source code changes that the Refactoring Browser. These low level changes are undoable and can be composed to create larger operations. All changes in the Refactoring Browser are performed using these low level changes.DbIdentifier: bear73DbTrace: 50534DevelopmentPrerequisites: #(#(#any 'Browser-Parser' ''))PackageName: Browser-ChangeObjectsParcel: #('Browser-ChangeObjects')PrerequisiteParcels: #(#('Browser-Parser' ''))PrintStringCache: (7.3 - 1.4,bobw)Version: 7.3.1Pre-Unload Block: 	[:t1 | Refactory.Browser.RefactoryChangeManager nuke]Date: 5:51:45 pm April 10, 2005 --><time-stamp>From VisualWorks®, 7.3.1 of April 10, 2005 on April 10, 2005 at 5:51:45 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>RefactoryChangeFailureNotification</name><environment>Refactory.Browser</environment><super>Core.Notification</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RefactoryChangeFailureNotification</class-id><body>RefactoryChangeFailureNotification is signaled when one of the changes fails. When this is raised, the change is not marked as an undoable change. Since something went wrong, we don't know how to undo that.</body></comment><class><name>RefactoryChange</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RefactoryChange</class-id><body>RefactoryChange is an abstract class that represent some change to a class or method. They are used in combination with CompositeRefactoryChange to give transaction-like behavior. All change objects have the ability to undo themselves.Subclasses must implement the following messages:	accessing		changeObject		renameChangesForObject:to:	private		executeNotifying:	private-inspector accessing		removeChange:Instance Variables:	name	&lt;String&gt;	the name that is displayed for undo/redo</body></comment><class><name>RefactoryObjectChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objectName isMeta </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RefactoryObjectChange</class-id><body>RefactoryObjectChange is the abstract superclass of all "atomic" changes (i.e., changes that affect one object).Subclasses must implement the following messages:	private		primitiveExecute		Performs the change.Instance Variables:	isMeta	&lt;Boolean&gt;	True if this change applies to the metaclass.	objectName	&lt;CharacterArray&gt;	Name of the object being changed.</body></comment><class><name>CommentChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>comment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.CommentChange</class-id><body>CommentChange represents a change to a class' comment.Instance Variables:	comment	&lt;String&gt;	the new comment</body></comment><class><name>RemoveMethodChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RemoveMethodChange</class-id><body>RemoveMethodChange is the change that removes a method from the system.Instance Variables:	selector	&lt;Symbol&gt;	The method to remove</body></comment><class><name>ParcelChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parcelName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.ParcelChange</class-id><body>ParcelChange is the abstract superclass of all changes that manipulate parcel contents.Subclasses must implement the following messages:	private		undoClass			The class that implement the inverse operationInstance Variables:	parcelName	&lt;String&gt;	The name of the parcel being changed.</body></comment><class><name>AddClassDefinitionToParcelChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ParcelChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.AddClassDefinitionToParcelChange</class-id><body>AddClassDefinitionToParcelChange is a change that adds an existing class definition to a parcel.</body></comment><class><name>RemoveNameSpaceFromParcelChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ParcelChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RemoveNameSpaceFromParcelChange</class-id><body>RemoveNamespaceFromParcelChange removes a namespace from a parcel. Note: This doesn't remove the namespace from the image.</body></comment><class><name>RemoveSharedVariableFromParcelChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ParcelChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RemoveSharedVariableFromParcelChange</class-id><body>RemoveSharedVariableFromParcelChange removes a shared variable from the parcel. Note: This does not remove the shared variable from the image.</body></comment><class><name>RemoveMethodFromParcelChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ParcelChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RemoveMethodFromParcelChange</class-id><body>RemoveMethodFromParcelChange removes a method definition from a parcel. Note: This does not remove a method from the image.Instance Variables:	selector	&lt;Symbol&gt;	The method to remove.</body></comment><class><name>RefactoryProtocolChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>protocol isData </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RefactoryProtocolChange</class-id><body>RefactoryProtocolChange is the abstract superclass of the changes that manipulate the method protocols.Instance Variables:	isData	&lt;Boolean&gt;	True if this protocol is for shared variables.	protocol	&lt;String&gt;	The protocol being changed.</body></comment><class><name>RemoveProtocolChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryProtocolChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RemoveProtocolChange</class-id><body>RemoveProtocolChange removes a protocol from the system. Note: This doesn't remove the objects in the protocol</body></comment><class><name>OverrideChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>override </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.OverrideChange</class-id><body>OverrideChange is the abstract superclass of the changes that deal with overrides.Instance Variables:	override	&lt;Override&gt;	The override that is being changed.</body></comment><class><name>RemoveOverrideChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.OverrideChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RemoveOverrideChange</class-id><body>RemoveOverrideChange removes an override.</body></comment><class><name>RemoveClassDefinitionFromParcelChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ParcelChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RemoveClassDefinitionFromParcelChange</class-id><body>RemoveClassDefinitionFromParcelChange removes a class from a parcel. Note: this doesn't remove the class from the image.</body></comment><class><name>CompositeRefactoryChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>changes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.CompositeRefactoryChange</class-id><body>CompositeRefactoryChange represents a series of changes (RefactoryChange) that need to be performed. It provides transaction-like behavior by defering all changes until it is told to commit them.Instance Variables:	changes	&lt;SequenceableCollection of: RefactoryChange&gt;	my changes</body></comment><class><name>AddMethodToParcelChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ParcelChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.AddMethodToParcelChange</class-id><body>AddMethodToParcelChange is a change that adds an existing method to a parcel.Instance Variables:	selector	&lt;Symbol&gt;	The selector of the method to add.</body></comment><class><name>RestoreOverrideChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.OverrideChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RestoreOverrideChange</class-id><body>RestoreOverrideChange restores a system override.</body></comment><class><name>RenameObjectChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CompositeRefactoryChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>oldName newName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RenameObjectChange</class-id><body>RenameObjectChange is a special change that renames a class, namespace or shared variable.Instance Variables:	newName	&lt;String&gt;	new name for the object	oldName	&lt;String&gt;	old name of the object</body></comment><class><name>MoveObjectChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>newNameSpace </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.MoveObjectChange</class-id><body>MoveObjectChange moves a class, namespace or shared variable to another namespace.Instance Variables:	newNamespace	&lt;String&gt;	the namespace's name where we are moving to</body></comment><class><name>CodeComponentCommentChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CommentChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentCommentChange</class-id><body>CodeComponentCommentChange represents a change to a code component's (Parcel, Package, etc.) comment.Instance Variables:	type	&lt;Symbol&gt;	#parcel or #package</body></comment><class><name>PackageChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>packageName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.PackageChange</class-id><body>PackageChange is the abstract superclass of changes that manipulate a packages contents.Subclasses must implement the following messages:	private		currentPackageInstance Variables:	packageName	&lt;String&gt;	The package being changed.</body></comment><class><name>MoveClassDefinitionToPackageChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.PackageChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.MoveClassDefinitionToPackageChange</class-id><body>MoveClassDefinitionToPackageChange moves a class definition from its current package into a new package.</body></comment><class><name>MoveMethodToPackageChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.PackageChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.MoveMethodToPackageChange</class-id><body>MoveMethodToPackageChange moves a method from its current package into a new package.Instance Variables:	selector	&lt;Symbol&gt;	The selector of the method to be moved.</body></comment><class><name>MoveNameSpaceToPackageChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.PackageChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.MoveNameSpaceToPackageChange</class-id><body>MoveNamespaceToPackageChange moves a namespace into a new package.</body></comment><class><name>RenameInstanceVariableChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CompositeRefactoryChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>className isMeta oldName newName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RenameInstanceVariableChange</class-id><body>RenameInstanceVariableChange is a special change that renames an instance variable around other changes.Instance Variables:	className	&lt;String&gt;	class name that defines the variable	isMeta	&lt;Boolean&gt;	is meta class?	newName	&lt;String&gt;	new name for the variable	oldName	&lt;String&gt;	old name for the variable</body></comment><class><name>RemoveObjectChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RemoveObjectChange</class-id><body>RemoveObjectChange is the abstract superclass of changes that remove "Global" objects from the system</body></comment><class><name>RemoveClassChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RemoveObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RemoveClassChange</class-id><body>RemoveClassChange removes a class from the system</body></comment><class><name>RemoveNameSpaceChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RemoveObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RemoveNameSpaceChange</class-id><body>RemoveNamespaceChange removes a namespace from the system.</body></comment><class><name>AddProtocolChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryProtocolChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.AddProtocolChange</class-id><body>AddProtocolChange adds a new protocol to a class</body></comment><class><name>MoveToProtocolChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AddProtocolChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>symbol </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.MoveToProtocolChange</class-id><body>MoveToProtocolChange moves an object from another protocol into this one.Instance Variables:	symbol	&lt;Symbol&gt;	The name of the object to move into this protocol</body></comment><class><name>ExecuteCodeChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>definition category parcels isPrivate controller package nameSpaceName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.ExecuteCodeChange</class-id><body>ExecuteCodeChange is a special type of change where some code is executed to perform the change (e.g., defining a class).Subclasses must implement the following messages:	private		fillOutDefinitionInstance Variables:	category	&lt;String&gt;	the category the object will be in	controller	&lt;Controller | nil&gt;	the controller for the view that is defining the object, can be nil if no view is defining the object (e.g., undo/redo)	definition	&lt;String&gt;	the code that is executed	isPrivate	&lt;Boolean&gt;	is the object private?	namespaceName	&lt;String&gt;	where the object is being compiled into	package	&lt;Store.PackageModel&gt;	the default package for the item	parcels	&lt;Collection of: Parcel&gt;	a collection of parcels the object should be added to</body></comment><class><name>AddNameSpaceChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ExecuteCodeChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>imports definedNameSpace </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.AddNameSpaceChange</class-id><body>AddNamespaceChange is a change that represent adding or recompiling a Namespace.Instance Variables:	definedNamespace	&lt;String&gt;	Namespace actually defined.	imports	&lt;Array of: String&gt;	The new namespace's import list.</body></comment><class><name>AddClassChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ExecuteCodeChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclassName instanceVariableNames classInstanceVariableNames imports indexedType definedClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.AddClassChange</class-id><body>AddClassChange is a change that represents adding or recompiling a class.Instance Variables:	classInstanceVariableNames	&lt;SequenceableCollection of: String&gt;	our class instance variable names	definedClass	&lt;Behavior&gt;	the class that was defined	imports	&lt;Collection of: NameSpaceImport&gt;	the imports for the class	indexedType	&lt;Symbol&gt;	#bytes, #none, or #objects	instanceVariableNames	&lt;SequenceableCollection of: String&gt;	our instance variables	superclassName	&lt;String | nil&gt;	the name of our superclass</body></comment><class><name>AddSharedVariableChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ExecuteCodeChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isConstant initializer bindingReference </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.AddSharedVariableChange</class-id><body>AddSharedVariableChange is a change that represents the addition of a shared variable to a class or namespace.Instance Variables:	bindingReference	&lt;GeneralBindingReference&gt;	The reference to the newly compiled variable.	initializer	&lt;String&gt;	The initialize method for the new variable.	isConstant	&lt;Boolean&gt;	True if the new variable is a constant.</body></comment><class><name>AddOverrideChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.OverrideChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.AddOverrideChange</class-id><body>AddOverrideChange adds an override.</body></comment><class><name>RenameProtocolChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryProtocolChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>newProtocol </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RenameProtocolChange</class-id><body>RenameProtocolChange changes the name of an existing protocolInstance Variables:	newProtocol	&lt;String&gt;	The new name of the protocol</body></comment><class><name>AddMethodChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>source selector protocols parcels controller definedSelector package </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.AddMethodChange</class-id><body>AddMethodChange adds a method to a class. If this is used to replace and existing method, the new method will live in the same package and parcels as the original.Instance Variables:	controller	&lt;Controller | nil&gt;		Who to notify on a syntax error.	definedSelector	&lt;Symbol | nil&gt;	The selector of the added method if the source compiled.	package	&lt;Store.PackageModel&gt;			The package that the new method is added to.	parcels	&lt;Collection of: Parcel&gt;	The parcels that the new method belongs to.	protocols	&lt;Collection of: Symbol&gt;	The protocols that the new methods is in.	selector	&lt;Symbol&gt;	The selector of the method to be added.	source	&lt;String&gt;	The source code of the added method.</body></comment><class><name>AddSharedVariableToParcelChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ParcelChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.AddSharedVariableToParcelChange</class-id><body>AddSharedVariableToParcelChange adds a shared variable to a parcel.</body></comment><class><name>CurrentPackageChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>packageName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.CurrentPackageChange</class-id><body>CurrentPackageChange represents changing the current package. While this change does not change any code, it is useful for undoing the setting of the current package.Instance Variables:	packageName	&lt;String&gt;	the name of the package to make current</body></comment><class><name>RemoveSharedVariableChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RemoveObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RemoveSharedVariableChange</class-id><body>RemoveSharedVariableChange removes a shared variable from the system</body></comment><class><name>RefactoryChangeManager</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>undo redo isPerformingRefactoring </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RefactoryChangeManager</class-id><body>RefactoryChangeManager is a singleton that manages all changes performed by the RB. It holds the undo and redo list of changes.Instance Variables:	isPerformingRefactoring	&lt;Boolean&gt;	are we currently executing a change? If we are not currently executing a change and we notice that a change has occurred, then we must clear the undo/redo lists.	redo	&lt;OrderedCollection&gt;	the list of redo changes	undo	&lt;OrderedCollection&gt;	the list of undo changesShared Variables:	Instance	&lt;RefactoryChangeManager&gt;	our sole instance	UndoSize	&lt;Integer&gt;	the maximum size of the undo/redo list</body></comment><class><name>RefactoryVariableChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryObjectChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>variable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RefactoryVariableChange</class-id><body>RefactoryVariableChange is the abstract superclass of all changes that deal with variables.Subclasses must implement the following messages:	private		changeSymbolInstance Variables:	variable	&lt;String&gt;	The name of the variable to be changed.</body></comment><class><name>RemoveInstanceVariableChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryVariableChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.RemoveInstanceVariableChange</class-id><body>RemoveInstanceVariableChange is a change that recompiles a class without an instance variable.</body></comment><class><name>AddInstanceVariableChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RefactoryVariableChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.AddInstanceVariableChange</class-id><body>AddInstanceVariableChange is a change that recompiles a class with a new instance variable added to it.</body></comment><class><name>MoveSharedVariableToPackageChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.PackageChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.MoveSharedVariableToPackageChange</class-id><body>MoveSharedVariableToPackageChange moves a shared variable into a new package.</body></comment><class><name>AddNameSpaceToParcelChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ParcelChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><comment><class-id>Refactory.Browser.AddNameSpaceToParcelChange</class-id><body>AddNamespaceToParcelChange adds a namespace to a parcel.</body></comment><shared-variable><name>Instance</name><environment>Refactory.Browser.RefactoryChangeManager</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Browser-ChangeObjects</package></attributes></shared-variable><shared-variable><name>UndoSize</name><environment>Refactory.Browser.RefactoryChangeManager</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Browser-ChangeObjects</package></attributes></shared-variable><methods><class-id>Refactory.Browser.RefactoryChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="addAttributesTo:for:">addAttributesTo: aString for: anObject 	| parseTree |	parseTree := RBParser parseExpression: aString onError: [:s :p | ^aString].	parseTree isMessage ifFalse: [^aString].	('*:attributes:' match: parseTree selector) ifTrue: [^aString].	^aString , ' attributes: ' 		, (self attributesForObject: anObject) asArray 				storeString</body><body package="Browser-ChangeObjects" selector="asCompositeChange">asCompositeChange	^(CompositeRefactoryChange new)		changes: (OrderedCollection with: self);		name: self name;		yourself</body><body package="Browser-ChangeObjects" selector="attributesForObject:">attributesForObject: anObject 	^SourceFileFormat attributesFor: anObject excluding: #()</body><body package="Browser-ChangeObjects" selector="classChangesForRemoveNameSpace:">classChangesForRemoveNameSpace: aNameSpace 	| changes classes |	classes := self classRootsFor: aNameSpace asNameSpace.	changes := CompositeRefactoryChange new.	classes do: [:each | changes addChange: (self undoForRemoveClass: each)].	^changes</body><body package="Browser-ChangeObjects" selector="classRootsFor:">classRootsFor: aNameSpace 	| classes |	classes := Set new.	aNameSpace bindingsDo: 			[:each | 			each isForNameSpace 				ifTrue: [classes addAll: (self classRootsFor: each value)]				ifFalse: [each isForClass ifTrue: [classes add: each value]]].	^classes 		reject: [:each | each allSuperclasses anySatisfy: [:spr | classes includes: spr]]</body><body package="Browser-ChangeObjects" selector="nameSpaceChangesForRemoveNameSpace:">nameSpaceChangesForRemoveNameSpace: aNameSpace 	| changes |	changes := CompositeRefactoryChange new.	aNameSpace asNameSpace bindingsDo: 			[:each | 			each isForNameSpace 				ifTrue: 					[(changes defineNameSpace: each value definition)						parcels: (Parcel parcelsDefiningBinding: each);						package: (self packageForNameSpace: each value).					changes addChange: (self nameSpaceChangesForRemoveNameSpace: each value)]].	^changes</body><body package="Browser-ChangeObjects" selector="sharedVariableChangesForRemoveNameSpace:">sharedVariableChangesForRemoveNameSpace: aNameSpace 	| changes |	changes := CompositeRefactoryChange new.	aNameSpace asNameSpace bindingsDo: 			[:each | 			each isForNameSpace 				ifTrue: 					[changes 						addChange: (self sharedVariableChangesForRemoveNameSpace: each value)].			each isForGeneral 				ifTrue: 					[(changes defineSharedVariable: (self 								addAttributesTo: (aNameSpace definitionOfStatic: each)								for: (aNameSpace asNameSpace fullyQualifiedReferenceOf: each key)))						parcels: (Parcel parcelsDefiningBinding: each);						package: (self packageForSharedVariable: each key in: aNameSpace)]].	^changes</body><body package="Browser-ChangeObjects" selector="undoForRemoveClass:">undoForRemoveClass: class 	| classChanges |	classChanges := CompositeRefactoryChange new.	(class withAllSubclasses reject: [:each | each isMeta]) do: 			[:each | 			(classChanges 				defineClass: (self addAttributesTo: each definition for: each))				parcels: (Parcel parcelsDefiningClass: each);				package: (self packageForClassDefinition: each).			classChanges addChange: (self undoForRemoveNameSpace: each).			each selectors do: 					[:selector | 					(classChanges compile: (each sourceCodeAt: selector) in: each) 						copyAttributesFrom: selector].			each class selectors do: 					[:selector | 					(classChanges compile: (each class sourceCodeAt: selector) in: each class) 						parcels: (Parcel parcelsDefiningSelector: selector inClass: each class)]].	^classChanges</body><body package="Browser-ChangeObjects" selector="undoForRemoveNameSpace:">undoForRemoveNameSpace: aNameSpace 	| changes |	changes := CompositeRefactoryChange new.	aNameSpace isBehavior 		ifFalse: 			[(changes defineNameSpace: (self addAttributesTo: aNameSpace definition						for: aNameSpace))				parcels: (Parcel 							parcelsDefiningBinding: aNameSpace fullyQualifiedReference binding);				package: (self packageForNameSpace: aNameSpace)].	changes addChange: (self nameSpaceChangesForRemoveNameSpace: aNameSpace).	changes addChange: (self classChangesForRemoveNameSpace: aNameSpace).	changes 		addChange: (self sharedVariableChangesForRemoveNameSpace: aNameSpace).	changes addChange: (self 				undoForRemoveOverrides: (Override overridesForClassOrNameSpace: aNameSpace)).	^changes</body><body package="Browser-ChangeObjects" selector="undoForRemoveOverrides:">undoForRemoveOverrides: overrides	| classChanges |	classChanges := CompositeRefactoryChange new.	overrides isNil ifFalse: [overrides do: [:each | classChanges addChange: (AddOverrideChange for: each)]].	^classChanges</body></methods><methods><class-id>Refactory.Browser.RefactoryChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="changeForClass:selector:">changeForClass: aRBClass selector: aSelector 	^nil</body><body package="Browser-ChangeObjects" selector="changeForMetaclass:selector:">changeForMetaclass: aSymbol selector: aSelector 	^nil</body><body package="Browser-ChangeObjects" selector="changeObject">changeObject	self subclassResponsibility</body><body package="Browser-ChangeObjects" selector="changes">changes	^#()</body><body package="Browser-ChangeObjects" selector="changesSize">changesSize	^1</body><body package="Browser-ChangeObjects" selector="name">name	^name isNil ifTrue: [self changeString] ifFalse: [name]</body><body package="Browser-ChangeObjects" selector="originalCode">originalCode	^''</body><body package="Browser-ChangeObjects" selector="renameChangesForObject:to:">renameChangesForObject: aClassName to: newClassName 	"We're in the middle of performing a rename operation. If we stored 	the class name, we need to change the class name to the new 	name to perform the compiles."	self subclassResponsibility</body><body package="Browser-ChangeObjects" selector="withAllChanges">withAllChanges	| changes index |	changes := OrderedCollection with: self.	index := 1.	[index &lt;= changes size] whileTrue: 			[changes addAll: (changes at: index) changes.			index := index + 1].	^changes</body></methods><methods><class-id>Refactory.Browser.RefactoryChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^self class name</body><body package="Browser-ChangeObjects" selector="displayString">displayString	^name isNil ifTrue: [self changeString] ifFalse: [name]</body></methods><methods><class-id>Refactory.Browser.RefactoryChange</class-id> <category>performing-changes</category><body package="Browser-ChangeObjects" selector="execute">execute	^self executeNotifying: []</body></methods><methods><class-id>Refactory.Browser.RefactoryChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="changeVariable:thatBeginsWith:toBeginWith:">changeVariable: variableName thatBeginsWith: startString toBeginWith: newStartString 	(variableName = startString or: 			[variableName size &gt; (startString size + 1) and: 					[(variableName copyFrom: 1 to: startString size + 1) = (startString , '.')]]) 		ifTrue: 			[^newStartString 				, (variableName copyFrom: startString size + 1 to: variableName size)].	^variableName</body><body package="Browser-ChangeObjects" selector="executeNotifying:">executeNotifying: aBlock 	self subclassResponsibility</body><body package="Browser-ChangeObjects" selector="packageForClass:selector:">packageForClass: aClass selector: aSymbol 	| registry |	registry := self storeRegistry.	registry isNil ifTrue: [^nil].	^registry containingPackageForSelector: aSymbol class: aClass</body><body package="Browser-ChangeObjects" selector="packageForClassDefinition:">packageForClassDefinition: aClass 	| registry |	registry := self storeRegistry.	registry isNil ifTrue: [^nil].	^registry containingPackageForClass: aClass</body><body package="Browser-ChangeObjects" selector="packageForNameSpace:">packageForNameSpace: aNameSpace 	| registry |	registry := self storeRegistry.	registry isNil ifTrue: [^nil].	^registry containingPackageForNameSpaceSymbol: aNameSpace absoluteSymbol</body><body package="Browser-ChangeObjects" selector="packageForSharedVariable:in:">packageForSharedVariable: aName in: aNameSpace 	| registry |	registry := self storeRegistry.	registry isNil ifTrue: [^nil].	^registry containingPackageForDataKey: aName		symbol: aNameSpace absoluteSymbol</body><body package="Browser-ChangeObjects" selector="setPackage:while:">setPackage: package while: aBlock 	| policiesRef |	(package isNil or: [package isBundle]) ifTrue: [^aBlock value].	policiesRef := #{Store.Policies}.	policiesRef isDefined ifFalse: [^aBlock value].	policiesRef value packagePolicy forcePackage: package while: aBlock</body><body package="Browser-ChangeObjects" selector="storeRegistry">storeRegistry	^#{Store.Registry} valueOrDo: [nil]</body></methods><methods><class-id>Refactory.Browser.RefactoryChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="initialize">initialize</body><body package="Browser-ChangeObjects" selector="name:">name: aString	name := aString</body></methods><methods><class-id>Refactory.Browser.RefactoryChange</class-id> <category>comparing</category><body package="Browser-ChangeObjects" selector="=">= aRefactoryClassChange 	^self class = aRefactoryClassChange class</body><body package="Browser-ChangeObjects" selector="hash">hash	^self class hash</body></methods><methods><class-id>Refactory.Browser.RefactoryChange</class-id> <category>private-inspector accessing</category><body package="Browser-ChangeObjects" selector="removeChange:">removeChange: aChange 	self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.RefactoryChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="new">new	^(super new)		initialize;		yourself</body></methods><methods><class-id>Refactory.Browser.RefactoryObjectChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="changeClass:">changeClass: aBehavior 	isMeta := aBehavior isMeta.	objectName := aBehavior instanceBehavior fullName</body><body package="Browser-ChangeObjects" selector="changeObject">changeObject	| class |	class := self bindingReference valueOrDo: [^nil].	^isMeta ifTrue: [class class] ifFalse: [class]</body><body package="Browser-ChangeObjects" selector="methodSourceFor:">methodSourceFor: aSymbol 	(self changeObject includesSelector: aSymbol) ifFalse: [^nil].	^self changeObject sourceCodeAt: aSymbol</body><body package="Browser-ChangeObjects" selector="objectName">objectName	^objectName</body><body package="Browser-ChangeObjects" selector="objectName:">objectName: aString 	objectName := aString</body><body package="Browser-ChangeObjects" selector="renameChangesForObject:to:">renameChangesForObject: aClassName to: newClassName 	| newString |	newString := self 				changeVariable: self objectName				thatBeginsWith: aClassName				toBeginWith: newClassName.	self objectName = newString 		ifFalse: 			[^(self copy)				objectName: newString;				yourself].	^self</body></methods><methods><class-id>Refactory.Browser.RefactoryObjectChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="binding">binding	^self bindingReference binding</body><body package="Browser-ChangeObjects" selector="bindingReference">bindingReference	^objectName asQualifiedReference</body><body package="Browser-ChangeObjects" selector="executeNotifying:">executeNotifying: aBlock 	| undo |	undo := self asUndoOperation.	undo notNil ifTrue: [undo name: self name].	self primitiveExecute.	aBlock value.	^undo</body><body package="Browser-ChangeObjects" selector="isMeta">isMeta	^isMeta</body><body package="Browser-ChangeObjects" selector="isMeta:">isMeta: aBoolean 	isMeta := aBoolean</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	^self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.RefactoryObjectChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^self displayClassName</body><body package="Browser-ChangeObjects" selector="displayClassName">displayClassName	^isMeta == true		ifTrue: [self objectName , ' class']		ifFalse: [self objectName asString]</body><body package="Browser-ChangeObjects" selector="printOn:">printOn: aStream	aStream nextPutAll: self displayString</body></methods><methods><class-id>Refactory.Browser.RefactoryObjectChange</class-id> <category>comparing</category><body package="Browser-ChangeObjects" selector="=">= aRefactoryClassChange 	^super = aRefactoryClassChange and: 			[self objectName = aRefactoryClassChange objectName 				and: [isMeta = aRefactoryClassChange isMeta]]</body><body package="Browser-ChangeObjects" selector="hash">hash	^self objectName hash</body></methods><methods><class-id>Refactory.Browser.RefactoryObjectChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^nil</body></methods><methods><class-id>Refactory.Browser.RefactoryObjectChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="initialize">initialize	super initialize.	isMeta := false</body></methods><methods><class-id>Refactory.Browser.RefactoryObjectChange</class-id> <category>private-inspector accessing</category><body package="Browser-ChangeObjects" selector="removeChange:">removeChange: aChange 	"Do nothing for leaf changes"</body></methods><methods><class-id>Refactory.Browser.CommentChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="comment">comment	^comment</body><body package="Browser-ChangeObjects" selector="comment:">comment: aString 	comment := aString</body></methods><methods><class-id>Refactory.Browser.CommentChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#Comment1s &lt;&lt; #browser &gt;&gt; 'Comment &lt;1s&gt;')			expandMacrosWith: objectName)</body><body package="Browser-ChangeObjects" selector="printOn:">printOn: aStream 	aStream		nextPutAll: objectName;		nextPutAll: ' comment: ';		print: comment;		nextPut: $!</body></methods><methods><class-id>Refactory.Browser.CommentChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="commentObject">commentObject	^self bindingReference value</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self commentObject comment: comment</body></methods><methods><class-id>Refactory.Browser.CommentChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^(self copy)		comment: self commentObject comment;		yourself</body></methods><methods><class-id>Refactory.Browser.CommentChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="object:comment:">object: aClassOrNameSpace comment: aString 	^(self new)		objectName: aClassOrNameSpace fullName;		comment: aString;		yourself</body></methods><methods><class-id>Refactory.Browser.RemoveMethodChange</class-id> <category>comparing</category><body package="Browser-ChangeObjects" selector="=">= aRemoveMethodChange 	^super = aRemoveMethodChange 		and: [selector = aRemoveMethodChange selector]</body><body package="Browser-ChangeObjects" selector="hash">hash	^selector hash</body></methods><methods><class-id>Refactory.Browser.RemoveMethodChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	^self changeObject removeSelector: selector</body><body package="Browser-ChangeObjects" selector="selector">selector	^selector</body></methods><methods><class-id>Refactory.Browser.RemoveMethodChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="selector:">selector: aSymbol 	selector := aSymbol</body></methods><methods><class-id>Refactory.Browser.RemoveMethodChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^(AddMethodChange compile: (self methodSourceFor: self selector)		in: self changeObject)		copyAttributesFrom: self selector;		yourself</body></methods><methods><class-id>Refactory.Browser.RemoveMethodChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^(#RemoveMethod2s1s &lt;&lt; #browser &gt;&gt; 'Remove method, &lt;2s&gt;&gt;&gt;&lt;1s&gt;') expandMacrosWith: selector		with: self displayClassName</body><body package="Browser-ChangeObjects" selector="originalCode">originalCode	^(self changeObject includesSelector: self selector) 		ifTrue: [self methodSourceFor: self selector]		ifFalse: ['']</body><body package="Browser-ChangeObjects" selector="printOn:">printOn: aStream 	aStream		nextPutAll: self displayClassName;		nextPutAll: ' removeSelector: #';		nextPutAll: selector;		nextPut: $!</body></methods><methods><class-id>Refactory.Browser.RemoveMethodChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="remove:from:">remove: aSymbol from: aClass 	^(self new)		changeClass: aClass;		selector: aSymbol;		yourself</body></methods><methods><class-id>Refactory.Browser.ParcelChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="parcel">parcel	^Parcel parcelNamed: parcelName</body><body package="Browser-ChangeObjects" selector="parcel:">parcel: aParcel 	parcelName := aParcel name</body></methods><methods><class-id>Refactory.Browser.ParcelChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="undoClass">undoClass	self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.ParcelChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^(self undoClass new)		name: self name;		objectName: self objectName;		isMeta: self isMeta;		parcel: self parcel;		yourself</body></methods><methods><class-id>Refactory.Browser.ParcelChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="objectName:parcel:">objectName: aString parcel: aParcel 	^(self new)		objectName: aString;		parcel: aParcel;		yourself</body></methods><methods><class-id>Refactory.Browser.AddClassDefinitionToParcelChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self parcel addClass: self changeObject</body><body package="Browser-ChangeObjects" selector="undoClass">undoClass	^RemoveClassDefinitionFromParcelChange</body></methods><methods><class-id>Refactory.Browser.RemoveNameSpaceFromParcelChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self parcel removeNameSpace: self changeObject</body><body package="Browser-ChangeObjects" selector="undoClass">undoClass	^AddNameSpaceToParcelChange</body></methods><methods><class-id>Refactory.Browser.RemoveSharedVariableFromParcelChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	| ref |	ref := self bindingReference.	self parcel removeName: ref simpleName in: ref environment</body><body package="Browser-ChangeObjects" selector="undoClass">undoClass	^AddSharedVariableToParcelChange</body></methods><methods><class-id>Refactory.Browser.RemoveMethodFromParcelChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="selector">selector	^selector</body><body package="Browser-ChangeObjects" selector="selector:">selector: aSymbol 	selector := aSymbol</body></methods><methods><class-id>Refactory.Browser.RemoveMethodFromParcelChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^(super asUndoOperation)		selector: self selector;		yourself</body></methods><methods><class-id>Refactory.Browser.RemoveMethodFromParcelChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self parcel removeSelector: self selector class: self changeObject</body><body package="Browser-ChangeObjects" selector="undoClass">undoClass	^AddMethodToParcelChange</body></methods><methods><class-id>Refactory.Browser.RemoveMethodFromParcelChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="class:selector:parcel:">class: aClass selector: aSymbol parcel: aParcel 	^(self new)		changeClass: aClass;		selector: aSymbol;		parcel: aParcel;		yourself</body></methods><methods><class-id>Refactory.Browser.RefactoryProtocolChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="isData">isData	^isData</body><body package="Browser-ChangeObjects" selector="isData:">isData: aBoolean 	isData := aBoolean</body><body package="Browser-ChangeObjects" selector="protocol">protocol	^protocol</body><body package="Browser-ChangeObjects" selector="protocol:">protocol: aSymbol 	protocol := aSymbol</body></methods><methods><class-id>Refactory.Browser.RefactoryProtocolChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="logProtocolChange:">logProtocolChange: aString 	SourceFileManager default logChange: aString</body><body package="Browser-ChangeObjects" selector="protocolObject">protocolObject	^self isData 		ifTrue: [self bindingReference value asNameSpace]		ifFalse: [self changeObject]</body></methods><methods><class-id>Refactory.Browser.RefactoryProtocolChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="class:protocol:">class: aClass protocol: aSymbol 	^(self new)		changeClass: aClass;		protocol: aSymbol;		isData: false;		yourself</body><body package="Browser-ChangeObjects" selector="nameSpace:protocol:">nameSpace: aNameSpace protocol: aSymbol 	^(self new)		objectName: aNameSpace fullName;		protocol: aSymbol;		isData: true;		yourself</body></methods><methods><class-id>Refactory.Browser.RemoveProtocolChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self protocolObject organization removeCategory: self protocol.	self 		logProtocolChange: self protocolObject printString 				, ' organization removeCategory: ' 					, self protocol storeString.	self protocolObject reorganize</body></methods><methods><class-id>Refactory.Browser.RemoveProtocolChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#GenKey5 &lt;&lt; #browser &gt;&gt; 'Remove protocol, &lt;1s&gt;, from &lt;2s&gt;')			expandMacrosWith: self protocol			with: self protocolObject printString)</body></methods><methods><class-id>Refactory.Browser.RemoveProtocolChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	(self protocolObject organization categories includes: self protocol) 		ifFalse: [^CompositeRefactoryChange new].	^self isData 		ifTrue: 			[AddProtocolChange nameSpace: self changeObject protocol: self protocol]		ifFalse: [AddProtocolChange class: self changeObject protocol: self protocol]</body></methods><methods><class-id>Refactory.Browser.OverrideChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="override:">override: anOverride	override := anOverride</body></methods><methods><class-id>Refactory.Browser.OverrideChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="override">override	^override</body></methods><methods><class-id>Refactory.Browser.OverrideChange</class-id> <category>comparing</category><body package="Browser-ChangeObjects" selector="=">= anObject 	^super = anObject and: [self override = anObject override]</body></methods><methods><class-id>Refactory.Browser.OverrideChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="for:">for: anOverride 	^(self new)		override: anOverride;		yourself</body></methods><methods><class-id>Refactory.Browser.RemoveOverrideChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	Override removeOverride: override</body></methods><methods><class-id>Refactory.Browser.RemoveOverrideChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^AddOverrideChange for: override</body></methods><methods><class-id>Refactory.Browser.RemoveOverrideChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#RemoveOverrideFor1s &lt;&lt; #browser &gt;&gt; 'Remove Override for &lt;1s&gt;')			expandMacrosWith: override printString)</body></methods><methods><class-id>Refactory.Browser.RemoveClassDefinitionFromParcelChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self parcel undefineClass: self changeObject</body><body package="Browser-ChangeObjects" selector="undoClass">undoClass	^AddClassDefinitionToParcelChange</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="addChange:">addChange: aRefactoryChange 	changes add: aRefactoryChange.	^aRefactoryChange</body><body package="Browser-ChangeObjects" selector="changeForClass:selector:">changeForClass: aRBClass selector: aSelector 	changes reverseDo: 			[:each | 			| change |			change := each changeForClass: aRBClass selector: aSelector.			change notNil ifTrue: [^change]].	^nil</body><body package="Browser-ChangeObjects" selector="changeForMetaclass:selector:">changeForMetaclass: aSymbol selector: aSelector 	changes reverseDo: 			[:each | 			| change |			change := each changeForMetaclass: aSymbol selector: aSelector.			change notNil ifTrue: [^change]].	^nil</body><body package="Browser-ChangeObjects" selector="changeObject">changeObject	"Composite Changes don't really have one of these"	^nil</body><body package="Browser-ChangeObjects" selector="changesSize">changesSize	^changes inject: 0 into: [:sum :each | sum + each changesSize]</body><body package="Browser-ChangeObjects" selector="renameChangesForObject:to:">renameChangesForObject: aClassName to: newClassName 	^(self copy)		changes: (self changes 					collect: [:each | each renameChangesForObject: aClassName to: newClassName]);		yourself</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChange</class-id> <category>refactory-changes</category><body package="Browser-ChangeObjects" selector="addInstanceVariable:to:">addInstanceVariable: variableName to: aClass 	^self addChange: (AddInstanceVariableChange add: variableName to: aClass)</body><body package="Browser-ChangeObjects" selector="compile:in:">compile: source in: class 	^self addChange: (AddMethodChange compile: source in: class)</body><body package="Browser-ChangeObjects" selector="compile:in:classified:">compile: source in: class classified: aProtocol 	^self addChange: (AddMethodChange 				compile: source				in: class				classified: aProtocol)</body><body package="Browser-ChangeObjects" selector="defineClass:">defineClass: aString 	^self addChange: (AddClassChange definition: aString)</body><body package="Browser-ChangeObjects" selector="defineNameSpace:">defineNameSpace: aString 	^self addChange: (AddNameSpaceChange definition: aString)</body><body package="Browser-ChangeObjects" selector="defineSharedVariable:">defineSharedVariable: aString 	^self addChange: (AddSharedVariableChange definition: aString)</body><body package="Browser-ChangeObjects" selector="moveObjectNamed:to:">moveObjectNamed: objectName to: nameSpaceName 	^self addChange: (MoveObjectChange move: objectName to: nameSpaceName)</body><body package="Browser-ChangeObjects" selector="removeClass:">removeClass: aClass 	^self addChange: (RemoveClassChange removeClassName: aClass fullName)</body><body package="Browser-ChangeObjects" selector="removeClassNamed:">removeClassNamed: aSymbol 	self addChange: (RemoveClassChange removeClassName: aSymbol)</body><body package="Browser-ChangeObjects" selector="removeInstanceVariable:from:">removeInstanceVariable: variableName from: aClass 	^self 		addChange: (RemoveInstanceVariableChange remove: variableName from: aClass)</body><body package="Browser-ChangeObjects" selector="removeMethod:from:">removeMethod: aSelector from: aClass 	^self addChange: (RemoveMethodChange remove: aSelector from: aClass)</body><body package="Browser-ChangeObjects" selector="removeMethodProtocol:from:">removeMethodProtocol: aSymbol from: aClass 	^self 		addChange: (RemoveProtocolChange class: aClass protocol: aSymbol)</body><body package="Browser-ChangeObjects" selector="removeNameSpaceNamed:">removeNameSpaceNamed: aString 	^self addChange: (RemoveNameSpaceChange objectName: aString)</body><body package="Browser-ChangeObjects" selector="removeSharedVariableNamed:">removeSharedVariableNamed: aString 	^self addChange: (RemoveSharedVariableChange objectName: aString)</body><body package="Browser-ChangeObjects" selector="removeSharedVariableProtocol:from:">removeSharedVariableProtocol: aSymbol from: aNameSpace 	^self 		addChange: (RemoveProtocolChange nameSpace: aNameSpace protocol: aSymbol)</body><body package="Browser-ChangeObjects" selector="restoreOverriddenMethod:for:">restoreOverriddenMethod: aSelector for: aClass 	^self addChange: (RestoreOverrideChange 				for: (Override overridesForSelector: aSelector class: aClass) last)</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChange</class-id> <category>private-inspector accessing</category><body package="Browser-ChangeObjects" selector="changes">changes	^changes</body><body package="Browser-ChangeObjects" selector="changes:">changes: aCollection 	changes := aCollection</body><body package="Browser-ChangeObjects" selector="removeChange:">removeChange: aChange 	changes remove: aChange ifAbsent: [changes do: [:each | each removeChange: aChange]]</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="displayString">displayString	^super displayString asText allBold</body><body package="Browser-ChangeObjects" selector="printOn:">printOn: aStream 	name isNil 		ifTrue: [super printOn: aStream]		ifFalse: [aStream nextPutAll: name]</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChange</class-id> <category>comparing</category><body package="Browser-ChangeObjects" selector="=">= aRefactoryBuilder 	super = aRefactoryBuilder ifFalse: [^false].	changes size = aRefactoryBuilder changes size ifFalse: [^false].	changes with: aRefactoryBuilder changes		do: [:each :change | each = change ifFalse: [^false]].	^true</body><body package="Browser-ChangeObjects" selector="hash">hash	^changes size</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="initialize">initialize	super initialize.	changes := OrderedCollection new</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChange</class-id> <category>copying</category><body package="Browser-ChangeObjects" selector="postCopy">postCopy	super postCopy.	changes := changes collect: [:each | each copy]</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChange</class-id> <category>parcel-changes</category><body package="Browser-ChangeObjects" selector="moveClassDefinition:toParcel:">moveClassDefinition: aClass toParcel: aParcel 	(Parcel parcelsDefiningClass: aClass) do: 			[:each | 			self addChange: (RemoveClassDefinitionFromParcelChange 						objectName: aClass fullName						parcel: each)].	aParcel isUnparceledParcel 		ifFalse: 			[self 				addChange: (AddClassDefinitionToParcelChange objectName: aClass fullName						parcel: aParcel)]</body><body package="Browser-ChangeObjects" selector="moveNameSpace:toParcel:">moveNameSpace: aNameSpace toParcel: aParcel 	(Parcel parcelsDefiningNameSpace: aNameSpace) do: 			[:each | 			self 				addChange: (RemoveNameSpaceFromParcelChange objectName: aNameSpace fullName						parcel: each)].	aParcel isUnparceledParcel 		ifFalse: 			[self 				addChange: (AddNameSpaceToParcelChange objectName: aNameSpace fullName						parcel: aParcel)]</body><body package="Browser-ChangeObjects" selector="moveSelector:in:toParcel:">moveSelector: aSymbol in: aClass toParcel: aParcel 	(Parcel parcelsDefiningSelector: aSymbol inClass: aClass) do: 			[:each | 			self addChange: (RemoveMethodFromParcelChange 						class: aClass						selector: aSymbol						parcel: each)].	aParcel isUnparceledParcel 		ifFalse: 			[self addChange: (AddMethodToParcelChange 						class: aClass						selector: aSymbol						parcel: aParcel)]</body><body package="Browser-ChangeObjects" selector="moveSharedVariable:in:toParcel:">moveSharedVariable: aName in: aNameSpace toParcel: aParcel 	| fullName |	fullName := aNameSpace fullName , '.' , aName.	(Parcel parcelsDefiningBinding: (aNameSpace bindingFor: aName)) do: 			[:each | 			self addChange: (RemoveSharedVariableFromParcelChange objectName: fullName						parcel: each)].	aParcel isUnparceledParcel 		ifFalse: 			[self addChange: (AddSharedVariableToParcelChange objectName: fullName						parcel: aParcel)]</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="executeNotifying:">executeNotifying: aBlock 	| undos undo |	undos := changes collect: 					[:each | 					[each executeNotifying: aBlock] on: RefactoryChangeFailureNotification						do: [:ex | each == changes first ifTrue: [ex pass] ifFalse: [ex resume]]].	(undos anySatisfy: [:each | each isNil]) ifTrue: [^nil].	undo := self copy.	undo changes: undos reverse.	^undo</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="named:">named: aString 	^(self new)		name: aString;		yourself</body></methods><methods><class-id>Refactory.Browser.AddMethodToParcelChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="selector">selector	^selector</body><body package="Browser-ChangeObjects" selector="selector:">selector: aSymbol 	selector := aSymbol</body></methods><methods><class-id>Refactory.Browser.AddMethodToParcelChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self parcel addSelector: self selector class: self changeObject</body><body package="Browser-ChangeObjects" selector="undoClass">undoClass	^RemoveMethodFromParcelChange</body></methods><methods><class-id>Refactory.Browser.AddMethodToParcelChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^(super asUndoOperation)		selector: self selector;		yourself</body></methods><methods><class-id>Refactory.Browser.AddMethodToParcelChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="class:selector:parcel:">class: aClass selector: aSymbol parcel: aParcel 	^(self new)		changeClass: aClass;		selector: aSymbol;		parcel: aParcel;		yourself</body></methods><methods><class-id>Refactory.Browser.RestoreOverrideChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	override reinstall.	Override removeOverride: override</body></methods><methods><class-id>Refactory.Browser.RestoreOverrideChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	| change |	change := CompositeRefactoryChange new.	change addChange: override undoChangeObject.	change addChange: (AddOverrideChange for: override).	^change</body></methods><methods><class-id>Refactory.Browser.RestoreOverrideChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#RestoreOverrideFor1s &lt;&lt; #browser &gt;&gt; 'Restore Override for &lt;1s&gt;')			expandMacrosWith: override printString)</body></methods><methods><class-id>Refactory.Browser.RenameObjectChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="executeNotifying:">executeNotifying: aBlock 		[| undos |	self changeObjectReference renameTo: newName.	undos := changes collect: 					[:each | 					(each renameChangesForObject: oldName asString to: self newFullName) 						executeNotifying: aBlock].	(undos anySatisfy: [:each | each isNil]) ifTrue: [^nil].	^(self copy)		changes: undos reverse;		rename: self newFullName to: oldName asQualifiedReference simpleName;		yourself] 			on: RefactoryChangeFailureNotification			do: [:ex | ex resume]</body><body package="Browser-ChangeObjects" selector="newFullName">newFullName	^oldName asQualifiedReference environment fullName , '.' , newName</body><body package="Browser-ChangeObjects" selector="newName">newName	^newName</body><body package="Browser-ChangeObjects" selector="oldName">oldName	^oldName</body></methods><methods><class-id>Refactory.Browser.RenameObjectChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="changeObjectReference">changeObjectReference	^oldName asQualifiedReference</body><body package="Browser-ChangeObjects" selector="renameChangesForObject:to:">renameChangesForObject: aClassName to: newClassName 	| change newString |	change := super renameChangesForObject: aClassName to: newClassName.	newString := self 				changeVariable: oldName				thatBeginsWith: aClassName				toBeginWith: newClassName.	oldName = newString ifFalse: [change rename: newClassName to: newString].	^change</body></methods><methods><class-id>Refactory.Browser.RenameObjectChange</class-id> <category>comparing</category><body package="Browser-ChangeObjects" selector="=">= aRenameClassChange 	^super = aRenameClassChange and: 			[oldName = aRenameClassChange oldName 				and: [newName = aRenameClassChange newName]]</body></methods><methods><class-id>Refactory.Browser.RenameObjectChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="rename:to:">rename: oldString to: newString 	oldName := oldString.	newName := newString.	name := ((#Rename1sTo2s &lt;&lt; #browser &gt;&gt; 'Rename &lt;1s&gt; to &lt;2s&gt;')			expandMacrosWith: oldName			with: newName)</body></methods><methods><class-id>Refactory.Browser.RenameObjectChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="rename:to:">rename: oldString to: newString 	^(self new)		rename: oldString to: newString;		yourself</body></methods><methods><class-id>Refactory.Browser.MoveObjectChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="nameSpace">nameSpace	^newNameSpace asQualifiedReference value</body><body package="Browser-ChangeObjects" selector="nameSpaceName">nameSpaceName	^newNameSpace</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self changeObjectReference relocateTo: self nameSpace</body></methods><methods><class-id>Refactory.Browser.MoveObjectChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="changeObjectReference">changeObjectReference	^objectName asQualifiedReference</body><body package="Browser-ChangeObjects" selector="renameChangesForObject:to:">renameChangesForObject: aClassName to: newClassName 	| change newObjectName renamedNameSpace |	change := super renameChangesForObject: aClassName to: newClassName.	newObjectName := self 				changeVariable: objectName				thatBeginsWith: aClassName				toBeginWith: newClassName.	renamedNameSpace := self 				changeVariable: newNameSpace				thatBeginsWith: aClassName				toBeginWith: newClassName.	(objectName ~= newObjectName or: [renamedNameSpace ~= newNameSpace]) 		ifTrue: [change move: newObjectName to: newNameSpace].	^change</body></methods><methods><class-id>Refactory.Browser.MoveObjectChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="move:to:">move: oldString to: nameSpaceString 	objectName := oldString.	newNameSpace := nameSpaceString</body></methods><methods><class-id>Refactory.Browser.MoveObjectChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^(self copy)		move: newNameSpace , '.' , objectName asQualifiedReference simpleName			to: objectName asQualifiedReference environment fullName;		yourself</body></methods><methods><class-id>Refactory.Browser.MoveObjectChange</class-id> <category>comparing</category><body package="Browser-ChangeObjects" selector="=">= aMoveObjectChange 	^super = aMoveObjectChange 		and: [newNameSpace = aMoveObjectChange nameSpaceName]</body></methods><methods><class-id>Refactory.Browser.MoveObjectChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="move:to:">move: objectName to: nameSpaceName 	^(self new)		move: objectName to: nameSpaceName;		yourself</body></methods><methods><class-id>Refactory.Browser.CodeComponentCommentChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="type:">type: aSymbol 	type := aSymbol</body></methods><methods><class-id>Refactory.Browser.CodeComponentCommentChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="commentObject">commentObject	type = #parcel ifTrue: [^Parcel parcelNamed: self objectName].	^type = #package 		ifTrue: [self storeRegistry packageNamed: self objectName]		ifFalse: [self storeRegistry bundleNamed: self objectName]</body></methods><methods><class-id>Refactory.Browser.CodeComponentCommentChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="bundle:comment:">bundle: aBundleModel comment: aString 	^(self new)		objectName: aBundleModel name;		type: #bundle;		comment: aString;		yourself</body><body package="Browser-ChangeObjects" selector="codeComponent:comment:">codeComponent: aCodeComponent comment: aString 	aCodeComponent isParcel 		ifTrue: [^self parcel: aCodeComponent comment: aString].	aCodeComponent isPackage 		ifTrue: [^self package: aCodeComponent comment: aString].	aCodeComponent isBundle 		ifTrue: [^self bundle: aCodeComponent comment: aString].	self error: (#UnknownCodeComponent &lt;&lt; #browser &gt;&gt; 'Unknown code component')</body><body package="Browser-ChangeObjects" selector="package:comment:">package: aPackageModel comment: aString 	^(self new)		objectName: aPackageModel name;		type: #package;		comment: aString;		yourself</body><body package="Browser-ChangeObjects" selector="parcel:comment:">parcel: aParcel comment: aString 	^(self new)		objectName: aParcel name;		type: #parcel;		comment: aString;		yourself</body></methods><methods><class-id>Refactory.Browser.PackageChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="package">package	^self storeRegistry packageNamed: packageName</body><body package="Browser-ChangeObjects" selector="package:">package: aPackage 	packageName := aPackage name</body><body package="Browser-ChangeObjects" selector="storeChangeSet">storeChangeSet	^#{Store.XChangeSet} value current</body></methods><methods><class-id>Refactory.Browser.PackageChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="currentPackage">currentPackage	self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.PackageChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	| oldPackage |	oldPackage := self currentPackage.	oldPackage isNil ifTrue: [^nil].	^(self copy)		package: oldPackage;		yourself</body></methods><methods><class-id>Refactory.Browser.MoveClassDefinitionToPackageChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="currentPackage">currentPackage	^self packageForClassDefinition: self changeObject</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self storeChangeSet moveClassDefinition: self changeObject		toPackage: self package</body></methods><methods><class-id>Refactory.Browser.MoveClassDefinitionToPackageChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="class:package:">class: aClass package: aPackage 	^(self new)		changeClass: aClass;		package: aPackage;		yourself</body></methods><methods><class-id>Refactory.Browser.MoveMethodToPackageChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="selector">selector	^selector</body><body package="Browser-ChangeObjects" selector="selector:">selector: aSymbol 	selector := aSymbol</body></methods><methods><class-id>Refactory.Browser.MoveMethodToPackageChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="currentPackage">currentPackage	^self packageForClass: self changeObject selector: self selector</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self storeChangeSet 		moveSelector: self selector		class: self changeObject		toPackage: self package</body></methods><methods><class-id>Refactory.Browser.MoveMethodToPackageChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="class:selector:package:">class: aClass selector: aSelector package: aPackage 	^(self new)		changeClass: aClass;		selector: aSelector;		package: aPackage;		yourself</body></methods><methods><class-id>Refactory.Browser.MoveNameSpaceToPackageChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="currentPackage">currentPackage	^self packageForNameSpace: self changeObject</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self storeChangeSet moveNameSpaceDefinition: self changeObject		toPackage: self package</body></methods><methods><class-id>Refactory.Browser.MoveNameSpaceToPackageChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="nameSpace:package:">nameSpace: aNameSpace package: aPackage 	^(self new)		objectName: aNameSpace fullName;		package: aPackage;		yourself</body></methods><methods><class-id>Refactory.Browser.RenameInstanceVariableChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#Rename1sTo2s &lt;&lt; #browser &gt;&gt; 'Rename &lt;1s&gt; to &lt;2s&gt;')			expandMacrosWith: oldName			with: newName)</body><body package="Browser-ChangeObjects" selector="displayClassName">displayClassName	^isMeta 		ifTrue: [self changeClassName , ' class']		ifFalse: [self changeClassName asString]</body><body package="Browser-ChangeObjects" selector="printOn:">printOn: aStream	aStream nextPutAll: self displayString</body></methods><methods><class-id>Refactory.Browser.RenameInstanceVariableChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="changeClass:">changeClass: aBehavior 	isMeta := aBehavior isMeta.	className := aBehavior instanceBehavior fullName</body><body package="Browser-ChangeObjects" selector="changeClassName">changeClassName	^className</body><body package="Browser-ChangeObjects" selector="changeObject">changeObject	| class |	class := self changeClassName asQualifiedReference value.	^isMeta ifTrue: [class class] ifFalse: [class]</body><body package="Browser-ChangeObjects" selector="newName">newName	^newName</body><body package="Browser-ChangeObjects" selector="oldName">oldName	^oldName</body><body package="Browser-ChangeObjects" selector="renameChangesForObject:to:">renameChangesForObject: aClassName to: newClassName 	| change newString |	change := super renameChangesForObject: aClassName to: newClassName.	newString := self 				changeVariable: className				thatBeginsWith: aClassName				toBeginWith: newClassName.	className = newString ifFalse: [change objectName: newString].	^change</body></methods><methods><class-id>Refactory.Browser.RenameInstanceVariableChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="addNewVariable">addNewVariable	(AddInstanceVariableChange add: newName to: self changeObject) execute</body><body package="Browser-ChangeObjects" selector="copyOldValuesToNewVariable">copyOldValuesToNewVariable	| newIndex oldIndex |	oldIndex := self changeObject allInstVarNames indexOf: oldName asString.	newIndex := self changeObject allInstVarNames indexOf: newName asString.	self changeObject withAllSubclasses do: 			[:each | 			each allInstances 				do: [:inst | inst instVarAt: newIndex put: (inst instVarAt: oldIndex)]]</body><body package="Browser-ChangeObjects" selector="executeNotifying:">executeNotifying: aBlock 		[| undo |	self addNewVariable.	self copyOldValuesToNewVariable.	undo := super executeNotifying: aBlock.	undo isNil ifTrue: [^nil].	undo		oldName: newName;		newName: oldName.	self removeOldVariable.	^undo] 			on: RefactoryChangeFailureNotification			do: [:ex | ex resume]</body><body package="Browser-ChangeObjects" selector="isMeta">isMeta	^isMeta</body><body package="Browser-ChangeObjects" selector="newName:">newName: aString 	newName := aString</body><body package="Browser-ChangeObjects" selector="oldName:">oldName: aString	oldName := aString</body><body package="Browser-ChangeObjects" selector="removeOldVariable">removeOldVariable	(RemoveInstanceVariableChange remove: oldName from: self changeObject) 		execute</body></methods><methods><class-id>Refactory.Browser.RenameInstanceVariableChange</class-id> <category>comparing</category><body package="Browser-ChangeObjects" selector="=">= aRenameVariableChange 	^self class = aRenameVariableChange class and: 			[className = aRenameVariableChange changeClassName and: 					[isMeta = aRenameVariableChange isMeta and: 							[oldName = aRenameVariableChange oldName 								and: [newName = aRenameVariableChange newName]]]]</body><body package="Browser-ChangeObjects" selector="hash">hash	^(self changeClassName hash bitXor: self oldName hash) 		bitXor: self newName hash</body></methods><methods><class-id>Refactory.Browser.RenameInstanceVariableChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="rename:to:in:">rename: oldName to: newName in: aClass 	^(self new)		oldName: oldName;		newName: newName;		changeClass: aClass;		yourself</body></methods><methods><class-id>Refactory.Browser.RemoveObjectChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="printOn:">printOn: aStream 	aStream		nextPutAll: '#{';		nextPutAll: objectName;		nextPutAll: '} removeFromSystem';		nextPut: $!</body></methods><methods><class-id>Refactory.Browser.RemoveObjectChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self bindingReference removeFromSystem</body></methods><methods><class-id>Refactory.Browser.RemoveObjectChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="objectName:">objectName: aString 	^(self new)		objectName: aString;		yourself</body></methods><methods><class-id>Refactory.Browser.RemoveClassChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	| class |	class := self bindingReference value.	^self undoForRemoveClass: class</body></methods><methods><class-id>Refactory.Browser.RemoveClassChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#RemoveClass1s &lt;&lt; #browser &gt;&gt; 'Remove class &lt;1s&gt;')			expandMacrosWith: objectName)</body></methods><methods><class-id>Refactory.Browser.RemoveClassChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="remove:">remove: aClass 	^(self new)		changeClass: aClass;		yourself</body><body package="Browser-ChangeObjects" selector="removeClassName:">removeClassName: aSymbol 	^(self new)		objectName: aSymbol;		yourself</body></methods><methods><class-id>Refactory.Browser.RemoveNameSpaceChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^self undoForRemoveNameSpace: self bindingReference value</body></methods><methods><class-id>Refactory.Browser.RemoveNameSpaceChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#RemoveNameSpace1s &lt;&lt; #browser &gt;&gt; 'Remove name space &lt;1s&gt;')			expandMacrosWith: objectName)</body></methods><methods><class-id>Refactory.Browser.AddProtocolChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self protocolObject organization addCategory: self protocol.	self 		logProtocolChange: self protocolObject printString 				, ' organization addCategory: ' , self protocol printString.	self protocolObject reorganize</body></methods><methods><class-id>Refactory.Browser.AddProtocolChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#AddProtocol1sTo2s &lt;&lt; #browser &gt;&gt; 'Add protocol, &lt;1s&gt;, to &lt;2s&gt;')			expandMacrosWith: self protocol			with: self protocolObject printString)</body></methods><methods><class-id>Refactory.Browser.AddProtocolChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^(self protocolObject organization categories includes: self protocol) 		ifTrue: [self copy]		ifFalse: 			[self isData 				ifTrue: 					[RemoveProtocolChange nameSpace: self changeObject protocol: self protocol]				ifFalse: 					[RemoveProtocolChange class: self changeObject protocol: self protocol]]</body></methods><methods><class-id>Refactory.Browser.MoveToProtocolChange</class-id> <category>testing</category><body package="Browser-ChangeObjects" selector="includesProtocol">includesProtocol	^self protocolObject organization categories includes: self protocol</body></methods><methods><class-id>Refactory.Browser.MoveToProtocolChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="symbol">symbol	^symbol</body><body package="Browser-ChangeObjects" selector="symbol:">symbol: aSymbol 	symbol := aSymbol</body></methods><methods><class-id>Refactory.Browser.MoveToProtocolChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self includesProtocol ifTrue: [super primitiveExecute].	self protocolObject classifySymbol: symbol under: self protocol.	self 		logProtocolChange: self protocolObject printString 				, ' organization classify: ' , symbol printString 				, ' under: ' , self protocol printString.</body></methods><methods><class-id>Refactory.Browser.MoveToProtocolChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#Move1sTo2sIn3s &lt;&lt; #browser &gt;&gt; 'Move &lt;1s&gt;, to &lt;2s&gt; in &lt;3s&gt;')			expandMacrosWith: symbol			with: self protocol			with: self protocolObject printString)</body></methods><methods><class-id>Refactory.Browser.MoveToProtocolChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	| compositeChange category |	compositeChange := CompositeRefactoryChange named: self name.	category := self protocolObject organization 				categoryOfElement: self symbol.	compositeChange addChange: ((self copy)				protocol: category;				yourself).	self includesProtocol 		ifFalse: 			[compositeChange addChange: (self isData 						ifTrue: 							[RemoveProtocolChange nameSpace: self changeObject protocol: self protocol]						ifFalse: 							[RemoveProtocolChange class: self changeObject protocol: self protocol])].	^compositeChange</body></methods><methods><class-id>Refactory.Browser.MoveToProtocolChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="class:protocol:symbol:">class: aClass protocol: protocolSymbol symbol: aSymbol 	^(self class: aClass protocol: protocolSymbol)		symbol: aSymbol;		yourself</body><body package="Browser-ChangeObjects" selector="nameSpace:protocol:symbol:">nameSpace: aNameSpace protocol: protocolSymbol symbol: aSymbol 	^(self nameSpace: aNameSpace protocol: protocolSymbol)		symbol: aSymbol;		yourself</body></methods><methods><class-id>Refactory.Browser.ExecuteCodeChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="category">category	category isNil ifTrue: [self fillOutDefinition].	^category</body><body package="Browser-ChangeObjects" selector="changeClassName">changeClassName	objectName isNil ifTrue: [self fillOutDefinition].	^objectName</body><body package="Browser-ChangeObjects" selector="isPrivate">isPrivate	isPrivate isNil ifTrue: [self fillOutDefinition].	^isPrivate</body><body package="Browser-ChangeObjects" selector="nameSpace">nameSpace	^self nameSpaceName asQualifiedReference value</body><body package="Browser-ChangeObjects" selector="nameSpaceName">nameSpaceName	nameSpaceName isNil ifTrue: [self fillOutDefinition].	^nameSpaceName</body><body package="Browser-ChangeObjects" selector="objectName">objectName	objectName isNil ifTrue: [self fillOutDefinition].	^objectName</body><body package="Browser-ChangeObjects" selector="package">package	^package</body><body package="Browser-ChangeObjects" selector="parcels">parcels	^parcels</body><body package="Browser-ChangeObjects" selector="renameChangesForObject:to:">renameChangesForObject: aClassName to: newClassName 	| newChange tree newReceiver |	newChange := super renameChangesForObject: aClassName to: newClassName.	tree := RBParser parseExpression: newChange definition				onError: [:s :e | ^newChange].	tree isMessage ifFalse: [^newChange].	tree receiver isVariable ifFalse: [^newChange].	newReceiver := self 				changeVariable: tree receiver name				thatBeginsWith: aClassName				toBeginWith: newClassName.	newReceiver = tree receiver name ifTrue: [^newChange].	tree receiver: (RBVariableNode named: newReceiver).	^(newChange copy)		definition: tree formattedCode;		fillOutDefinition;		yourself</body></methods><methods><class-id>Refactory.Browser.ExecuteCodeChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#Define1s &lt;&lt; #browser &gt;&gt; 'Define &lt;1s&gt;')			expandMacrosWith: self displayClassName)</body><body package="Browser-ChangeObjects" selector="originalCode">originalCode	| ref binding |	ref := self objectName asQualifiedReference.	binding := ref bindingOrNil.	^binding isNil ifTrue: [''] ifFalse: [ref definition]</body><body package="Browser-ChangeObjects" selector="printOn:">printOn: aStream 	aStream nextPutAll: definition</body></methods><methods><class-id>Refactory.Browser.ExecuteCodeChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="controller">controller	^controller</body><body package="Browser-ChangeObjects" selector="controller:">controller: aController 	controller := aController</body><body package="Browser-ChangeObjects" selector="definition">definition	^definition</body><body package="Browser-ChangeObjects" selector="fillOutDefinition">fillOutDefinition	self subclassResponsibility</body><body package="Browser-ChangeObjects" selector="namesIn:">namesIn: aString 	| names stream nameStream |	names := OrderedCollection new.	stream := ReadStream on: aString.		[stream skipSeparators.	stream atEnd] whileFalse: 				[nameStream := WriteStream on: (String new: 10).				[stream atEnd or: [stream peek isSeparator]] 					whileFalse: [nameStream nextPut: stream next].				names add: nameStream contents].	^names</body><body package="Browser-ChangeObjects" selector="parseImports:">parseImports: aString 	| imports stream drillDown private importName |	imports := OrderedCollection new.	stream := aString readStream.		[stream skipSeparators.	stream atEnd] whileFalse: 				[drillDown := false.				private := false.				importName := stream upToSeparator.				[importName = 'drillDown' or: [importName = 'private']] whileTrue: 						[importName = 'drillDown' 							ifTrue: [drillDown := true]							ifFalse: [private := true].						stream skipSeparators.						importName := stream upToSeparator].				importName notEmpty 					ifTrue: 						[imports 							add: (((importName last = $* 									ifTrue: [GeneralNameSpaceImport]									ifFalse: [SpecificNameSpaceImport]) path: (importName tokensBasedOn: $.))									drillDown: drillDown;									private: private;									yourself)]].	^imports</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	| object |	[ self setPackage: self package		while: 			[object := Compiler 						evaluate: definition						notifying: self controller						logged: false].	object isNil ifTrue: [RefactoryChangeFailureNotification raise]	] on: RedefinitionNotification 	  do: [ :note | RedefinitionNotification interactiveHandler: note forcedPackage: self package ].	^object</body></methods><methods><class-id>Refactory.Browser.ExecuteCodeChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="definition:">definition: aString 	definition := aString</body><body package="Browser-ChangeObjects" selector="initialize">initialize	super initialize.	parcels := #().	package := nil</body><body package="Browser-ChangeObjects" selector="package:">package: aPackageModel 	package := aPackageModel</body><body package="Browser-ChangeObjects" selector="parcels:">parcels: aCollection 	parcels := aCollection</body></methods><methods><class-id>Refactory.Browser.ExecuteCodeChange</class-id> <category>comparing</category><body package="Browser-ChangeObjects" selector="=">= anExecuteCodeChange 	^self class = anExecuteCodeChange class 		and: [definition = anExecuteCodeChange definition]</body><body package="Browser-ChangeObjects" selector="hash">hash	^definition hash</body></methods><methods><class-id>Refactory.Browser.ExecuteCodeChange</class-id> <category>testing</category><body package="Browser-ChangeObjects" selector="isValidCreationMessage:">isValidCreationMessage: aMessageNode 	(aMessageNode receiver isVariable or: [aMessageNode receiver isLiteralNode]) 		ifFalse: [^false].	(self isValidMessageName: aMessageNode) ifFalse: [^false].	^aMessageNode arguments allSatisfy: [:each | each isLiteralNode]</body><body package="Browser-ChangeObjects" selector="isValidMessageName:">isValidMessageName: aMessageNode 	^false</body></methods><methods><class-id>Refactory.Browser.ExecuteCodeChange class</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="classDefinitionMessages">classDefinitionMessages	^#(#defineClass:superclass:indexedType:private:instanceVariableNames:classInstanceVariableNames:imports:category: #defineClass:superclass:indexedType:private:instanceVariableNames:classInstanceVariableNames:imports:category:attributes: #subclass:instanceVariableNames:classVariableNames:poolDictionaries: #subclass:instanceVariableNames:classVariableNames:poolDictionaries:category: #variableByteSubclass:classVariableNames:poolDictionaries: #variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category: #variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries: #variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:)</body><body package="Browser-ChangeObjects" selector="nameSpaceDefinitionMessages">nameSpaceDefinitionMessages	^#(#defineNameSpace:private:imports:category: #defineNameSpace:private:imports:category:attributes:)</body><body package="Browser-ChangeObjects" selector="parseMessage:">parseMessage: aString 	| message |	message := RBParser parseExpression: aString onError: [:s :p | ^nil].	message isMessage ifFalse: [^nil].	^message</body><body package="Browser-ChangeObjects" selector="sharedVariableDefinitionMessages">sharedVariableDefinitionMessages	^#(#defineStatic:private:constant:category:initializer: #defineStatic:private:constant:category:initializer:attributes: #defineSharedVariable:private:constant:category:initializer: #defineSharedVariable:private:constant:category:initializer:attributes:)</body></methods><methods><class-id>Refactory.Browser.ExecuteCodeChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="definition:">definition: aString 	^self definition: aString for: nil</body><body package="Browser-ChangeObjects" selector="definition:for:">definition: aString for: aController 	| message |	message := self parseMessage: aString.	message isNil ifTrue: [^self new definition: aString].	(self classDefinitionMessages includes: message selector) 		ifTrue: 			[^(AddClassChange new)				definition: aString;				controller: aController;				yourself].	(self nameSpaceDefinitionMessages includes: message selector) 		ifTrue: 			[^(AddNameSpaceChange new)				definition: aString;				controller: aController;				yourself].	(self sharedVariableDefinitionMessages includes: message selector) 		ifTrue: 			[^(AddSharedVariableChange new)				definition: aString;				controller: aController;				yourself].	^self new definition: aString</body></methods><methods><class-id>Refactory.Browser.AddNameSpaceChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="definedObject">definedObject	^definedNameSpace</body><body package="Browser-ChangeObjects" selector="imports">imports	imports isNil ifTrue: [self fillOutDefinition].	^imports</body><body package="Browser-ChangeObjects" selector="newNameSpaceName">newNameSpaceName	^self objectName</body></methods><methods><class-id>Refactory.Browser.AddNameSpaceChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	| binding ref |	ref := self objectName asQualifiedReference.	binding := ref bindingOrNil.	^(binding notNil and: [binding isForNameSpace]) 		ifTrue: 			[(self class definition: binding value definition)				parcels: (Parcel parcelsDefiningBinding: binding);				package: (self packageForNameSpace: binding value);				yourself]		ifFalse: 			[| changes |			changes := CompositeRefactoryChange new.			changes removeNameSpaceNamed: self objectName.			binding notNil 				ifTrue: 					[binding isForClass 						ifTrue: [changes addChange: (self undoForRemoveClass: binding value)]						ifFalse: [changes defineNameSpace: ref definition]].			changes]</body></methods><methods><class-id>Refactory.Browser.AddNameSpaceChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="fillOutDefinition">fillOutDefinition	| parseTree |	parseTree := RBParser parseExpression: definition				onError: [:str :pos | ^self parseDefinitionError].	parseTree isMessage ifFalse: [^self parseDefinitionError].	(self isValidCreationMessage: parseTree) 		ifFalse: [^self parseDefinitionError].	nameSpaceName := parseTree receiver name.	objectName := nameSpaceName , '.' , parseTree arguments first value.	isPrivate := (parseTree arguments at: 2) value.	imports := self parseImports: (parseTree arguments at: 3) value.	category := (parseTree arguments at: 4) value asSymbol</body><body package="Browser-ChangeObjects" selector="parseDefinitionError">parseDefinitionError	nameSpaceName := 'Root'.	objectName := #_UnknownNameSpace.	imports := #()</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	definedNameSpace := super primitiveExecute.	parcels do: [:each | each addNameSpace: definedNameSpace].	^definedNameSpace</body></methods><methods><class-id>Refactory.Browser.AddNameSpaceChange</class-id> <category>testing</category><body package="Browser-ChangeObjects" selector="isValidMessageName:">isValidMessageName: aMessageNode 	^self class nameSpaceDefinitionMessages includes: aMessageNode selector</body></methods><methods><class-id>Refactory.Browser.AddNameSpaceChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="initialize">initialize	super initialize.	imports := nil</body></methods><methods><class-id>Refactory.Browser.AddClassChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="classInstanceVariableNames">classInstanceVariableNames	classInstanceVariableNames isNil ifTrue: [self fillOutDefinition].	^classInstanceVariableNames</body><body package="Browser-ChangeObjects" selector="definedObject">definedObject	^definedClass</body><body package="Browser-ChangeObjects" selector="imports">imports	imports isNil ifTrue: [self fillOutDefinition].	^imports</body><body package="Browser-ChangeObjects" selector="indexedType">indexedType	indexedType isNil ifTrue: [self fillOutDefinition].	^indexedType</body><body package="Browser-ChangeObjects" selector="instanceVariableNames">instanceVariableNames	instanceVariableNames isNil ifTrue: [self fillOutDefinition].	^instanceVariableNames</body><body package="Browser-ChangeObjects" selector="renameChangesForObject:to:">renameChangesForObject: aClassName to: newClassName 	| newChange tree newSuperclass superclass |	newChange := super renameChangesForObject: aClassName to: newClassName.	tree := RBParser parseExpression: newChange definition				onError: [:s :e | ^newChange].	tree isMessage ifFalse: [^newChange].	tree arguments size &lt; 2 ifTrue: [^newChange].	superclass := tree arguments at: 2.	(superclass isLiteralNode and: [superclass value isBindingReference]) 		ifFalse: [^newChange].	newSuperclass := self 				changeVariable: superclass value asString				thatBeginsWith: aClassName				toBeginWith: newClassName.	newSuperclass = superclass value asString ifTrue: [^newChange].	tree arguments at: 2		put: (RBLiteralNode 				value: (LiteralBindingReference pathString: newSuperclass)).	^(newChange copy)		definition: tree formattedCode;		fillOutDefinition;		yourself</body><body package="Browser-ChangeObjects" selector="superclassName">superclassName	objectName isNil ifTrue: [self fillOutDefinition].	^superclassName</body></methods><methods><class-id>Refactory.Browser.AddClassChange</class-id> <category>testing</category><body package="Browser-ChangeObjects" selector="isNewDefinitionFormat:">isNewDefinitionFormat: aParseTree	^aParseTree selector keywords first = 'defineClass:'</body><body package="Browser-ChangeObjects" selector="isValidMessageName:">isValidMessageName: aMessageNode 	^self class classDefinitionMessages includes: aMessageNode selector</body></methods><methods><class-id>Refactory.Browser.AddClassChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="fillOutDefinition">fillOutDefinition	| parseTree |	parseTree := RBParser parseExpression: definition				onError: [:str :pos | ^self parseDefinitionError].	parseTree isMessage ifFalse: [^self parseDefinitionError].	(self isValidCreationMessage: parseTree) 		ifFalse: [^self parseDefinitionError].	(self isNewDefinitionFormat: parseTree) 		ifTrue: [self fillOutUsingNewFormat: parseTree]		ifFalse: [self fillOutUsingOldFormat: parseTree]</body><body package="Browser-ChangeObjects" selector="fillOutUsingNewFormat:">fillOutUsingNewFormat: parseTree 	nameSpaceName := parseTree receiver name.	superclassName := (parseTree arguments at: 2) value isNil 				ifTrue: [nil]				ifFalse: [(parseTree arguments at: 2) value asString].	objectName := nameSpaceName , '.' , parseTree arguments first value.	indexedType := (parseTree arguments at: 3) value.	isPrivate := (parseTree arguments at: 4) value.	instanceVariableNames := self namesIn: (parseTree arguments at: 5) value.	classInstanceVariableNames := self 				namesIn: (parseTree arguments at: 6) value.	imports := self parseImports: (parseTree arguments at: 7) value.	category := parseTree arguments size &lt; 8 				ifTrue: [#Unknown]				ifFalse: [(parseTree arguments at: 8) value asSymbol]</body><body package="Browser-ChangeObjects" selector="fillOutUsingOldFormat:">fillOutUsingOldFormat: parseTree 	nameSpaceName := 'Smalltalk'.	superclassName := parseTree receiver isVariable 				ifTrue: [parseTree receiver name asSymbol]				ifFalse: [parseTree receiver value].	objectName := 'Smalltalk.' , parseTree arguments first value.	isPrivate := false.	indexedType := ('variableByte' match: parseTree selector) 				ifTrue: [#bytes]				ifFalse: 					[('variable' match: parseTree selector) ifTrue: [#objects] ifFalse: [#none]].	instanceVariableNames := self namesIn: (parseTree arguments at: 2) value.	classInstanceVariableNames := #().	"classVariableNames := self namesIn: (parseTree arguments at: 3) value."	imports := self namesIn: (parseTree arguments at: 4) value.	category := parseTree arguments size &lt; 5 				ifTrue: [#Unknown]				ifFalse: [(parseTree arguments at: 5) value asSymbol]</body><body package="Browser-ChangeObjects" selector="parseDefinitionError">parseDefinitionError	nameSpaceName := 'Root'.	objectName := #_UnknownClass.	instanceVariableNames := #().	classInstanceVariableNames := #()</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	definedClass := super primitiveExecute.	parcels do: [:each | each addClass: definedClass].	^definedClass</body></methods><methods><class-id>Refactory.Browser.AddClassChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	| ref |	ref := self objectName asQualifiedReference.	^(ref isDefined and: [ref bindingOrNil value environment = self nameSpace]) 		ifTrue: 			[(self class definition: ref definition)				parcels: (Parcel parcelsDefiningBinding: ref binding);				package: (self packageForClassDefinition: ref binding value);				yourself]		ifFalse: [RemoveClassChange removeClassName: self objectName]</body></methods><methods><class-id>Refactory.Browser.AddSharedVariableChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="initialize">initialize	super initialize.	isConstant := false.	initializer := nil</body></methods><methods><class-id>Refactory.Browser.AddSharedVariableChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="definedObject">definedObject	^bindingReference</body><body package="Browser-ChangeObjects" selector="initializer">initializer	initializer isNil ifTrue: [self fillOutDefinition].	^initializer</body><body package="Browser-ChangeObjects" selector="isConstant">isConstant	isConstant isNil ifTrue: [self fillOutDefinition].	^isConstant</body></methods><methods><class-id>Refactory.Browser.AddSharedVariableChange</class-id> <category>testing</category><body package="Browser-ChangeObjects" selector="isValidMessageName:">isValidMessageName: aMessageNode 	^self class sharedVariableDefinitionMessages 		includes: aMessageNode selector</body></methods><methods><class-id>Refactory.Browser.AddSharedVariableChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="fillOutDefinition">fillOutDefinition	| parseTree |	parseTree := RBParser parseExpression: definition				onError: [:str :pos | ^self parseDefinitionError].	parseTree isMessage ifFalse: [^self parseDefinitionError].	(self isValidCreationMessage: parseTree) 		ifFalse: [^self parseDefinitionError].	nameSpaceName := parseTree receiver name.	objectName := nameSpaceName , '.' , parseTree arguments first value.	isPrivate := (parseTree arguments at: 2) value.	isConstant := (parseTree arguments at: 3) value.	category := (parseTree arguments at: 4) value asSymbol.	initializer := (parseTree arguments at: 5) value</body><body package="Browser-ChangeObjects" selector="parseDefinitionError">parseDefinitionError	nameSpaceName := 'Root'.	objectName := #_UnknownSharedVariable</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	| binding nameSpace |	bindingReference := super primitiveExecute.	binding := bindingReference bindingOrNil.	binding notNil 		ifTrue: 			[nameSpace := bindingReference environment.			parcels do: [:each | each addBinding: binding in: nameSpace]].	^bindingReference</body></methods><methods><class-id>Refactory.Browser.AddSharedVariableChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	| binding ref |	ref := self objectName asQualifiedReference.	binding := ref bindingOrNil.	^(binding notNil and: [binding isForGeneral]) 		ifTrue: 			[(self class definition: ref definition)				parcels: (Parcel parcelsDefiningBinding: binding);				package: (self packageForSharedVariable: ref simpleName in: ref environment);				yourself]		ifFalse: [RemoveSharedVariableChange objectName: self objectName]</body></methods><methods><class-id>Refactory.Browser.AddOverrideChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	Override installOverride: override</body></methods><methods><class-id>Refactory.Browser.AddOverrideChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^RemoveOverrideChange for: override</body></methods><methods><class-id>Refactory.Browser.AddOverrideChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#AddOverrideFor1s &lt;&lt; #browser &gt;&gt; 'Add Override for &lt;1s&gt;')			expandMacrosWith: override printString)</body></methods><methods><class-id>Refactory.Browser.RenameProtocolChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^(self copy)		protocol: self newProtocol;		newProtocol: self protocol;		yourself</body></methods><methods><class-id>Refactory.Browser.RenameProtocolChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	(self protocolObject renameCategory: self protocol		to: self newProtocol) 			ifTrue: 				[self 					logProtocolChange: self protocolObject printString 							, ' organization renameCategory: ' , self protocol printString 							, ' to: ' , self newProtocol printString]</body></methods><methods><class-id>Refactory.Browser.RenameProtocolChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#RenameProtocol1sTo2sIn3s &lt;&lt; #browser &gt;&gt; 'Rename protocol, &lt;1s&gt;, to &lt;2s&gt; in &lt;3s&gt;')			expandMacrosWith: self protocol			with: self newProtocol			with: self protocolObject printString)</body></methods><methods><class-id>Refactory.Browser.RenameProtocolChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="newProtocol">newProtocol	^newProtocol</body><body package="Browser-ChangeObjects" selector="newProtocol:">newProtocol: aSymbol 	newProtocol := aSymbol</body></methods><methods><class-id>Refactory.Browser.RenameProtocolChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="class:oldProtocol:newProtocol:">class: aClass oldProtocol: oldSymbol newProtocol: newSymbol 	^(self new)		changeClass: aClass;		protocol: oldSymbol;		newProtocol: newSymbol;		isData: false;		yourself</body><body package="Browser-ChangeObjects" selector="nameSpace:oldProtocol:newProtocol:">nameSpace: aNameSpace oldProtocol: oldSymbol newProtocol: newSymbol 	^(self new)		objectName: aNameSpace fullName;		protocol: oldSymbol;		newProtocol: newSymbol;		isData: true;		yourself</body></methods><methods><class-id>Refactory.Browser.AddMethodChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="class:protocol:source:">class: aClass protocol: aProtocol source: aString 	self changeClass: aClass.	self protocols: aProtocol.	source := aString</body><body package="Browser-ChangeObjects" selector="class:source:">class: aClass source: aString 	self changeClass: aClass.	source := aString.	self protocols: self currentProtocol</body><body package="Browser-ChangeObjects" selector="copyAttributesFrom:">copyAttributesFrom: aSelector 	self copyAttributesFrom: aSelector in: self changeObject</body><body package="Browser-ChangeObjects" selector="copyAttributesFrom:in:">copyAttributesFrom: aSelector in: class 	class isNil ifTrue: [^self].	parcels := Parcel parcelsDefiningSelector: aSelector inClass: class.	package := self packageForClass: class selector: aSelector</body><body package="Browser-ChangeObjects" selector="initialize">initialize	super initialize.	parcels := #().	package := nil</body><body package="Browser-ChangeObjects" selector="package:">package: aPackageModel 	package := aPackageModel</body><body package="Browser-ChangeObjects" selector="parcels:">parcels: aCollection 	parcels := aCollection</body><body package="Browser-ChangeObjects" selector="protocols:">protocols: aCollection 	protocols := aCollection isString 				ifTrue: [Array with: aCollection]				ifFalse: [aCollection].	protocols isNil 		ifTrue: [protocols := Array with: ClassOrganizer defaultProtocol]</body></methods><methods><class-id>Refactory.Browser.AddMethodChange</class-id> <category>comparing</category><body package="Browser-ChangeObjects" selector="=">= anAddMethodChange 	^super = anAddMethodChange 		and: [self parseTree = anAddMethodChange parseTree]</body><body package="Browser-ChangeObjects" selector="hash">hash	^self parseTree hash</body></methods><methods><class-id>Refactory.Browser.AddMethodChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="controller">controller	^controller</body><body package="Browser-ChangeObjects" selector="controller:">controller: aController 	controller := aController</body><body package="Browser-ChangeObjects" selector="parseSelector">parseSelector	| class |	class := self changeObject.	^class isNil		ifTrue: [RBParser parseMethodPattern: source]		ifFalse: [class parserClass new parseSelector: source]</body><body package="Browser-ChangeObjects" selector="parseTree">parseTree	^RBParser parseMethod: source onError: [:str :pos | ^nil]</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self setPackage: self package		while: 			[definedSelector := self changeObject 						compile: source						classified: self protocol						notifying: self controller].	definedSelector isNil 		ifTrue: 			[RefactoryChangeFailureNotification raiseSignal.			^nil].	parcels 		do: [:each | each addSelector: definedSelector forClass: self changeObject].	^definedSelector</body></methods><methods><class-id>Refactory.Browser.AddMethodChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="changeForClass:selector:">changeForClass: aSymbol selector: aSelector 	^(isMeta not and: [self selector = aSelector and: [objectName = aSymbol]]) 		ifTrue: [self]		ifFalse: [nil]</body><body package="Browser-ChangeObjects" selector="changeForMetaclass:selector:">changeForMetaclass: aSymbol selector: aSelector 	^(isMeta and: [self selector = aSelector and: [objectName = aSymbol]]) 		ifTrue: [self]		ifFalse: [nil]</body><body package="Browser-ChangeObjects" selector="definedSelector">definedSelector	^definedSelector</body><body package="Browser-ChangeObjects" selector="package">package	^package</body><body package="Browser-ChangeObjects" selector="parcels">parcels	^parcels</body><body package="Browser-ChangeObjects" selector="protocol">protocol	^self protocols first</body><body package="Browser-ChangeObjects" selector="protocols">protocols	^protocols</body><body package="Browser-ChangeObjects" selector="selector">selector	selector isNil ifTrue:		[selector := self parseSelector ifNil: [#unknown]].	^selector</body></methods><methods><class-id>Refactory.Browser.AddMethodChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	| change |	change := (self changeObject includesSelector: self selector) 				ifTrue: 					[| oldProtocol |					oldProtocol := self currentProtocol.					oldProtocol isNil ifTrue: [oldProtocol := #accessing].					(self class 						compile: (self methodSourceFor: self selector)						in: self changeObject						classified: oldProtocol)						copyAttributesFrom: self selector;						yourself]				ifFalse: [RemoveMethodChange remove: selector from: self changeObject].	(self changeObject organization categories includes: self protocol) 		ifFalse: 			[change := (CompositeRefactoryChange named: self name)						addChange: change;						yourself.			change addChange: (RemoveProtocolChange class: self changeObject						protocol: self protocol)].	^change</body><body package="Browser-ChangeObjects" selector="currentProtocol">currentProtocol	^self changeObject organization categoryOfElement: self selector</body></methods><methods><class-id>Refactory.Browser.AddMethodChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#Compile1s2s &lt;&lt; #browser &gt;&gt; 'Compile &lt;1s&gt;%&gt;%&gt;&lt;2s&gt;')			expandMacrosWith: self displayClassName			with: self selector)</body><body package="Browser-ChangeObjects" selector="originalCode">originalCode	self changeObject isNil ifTrue: [^''].	^(self changeObject includesSelector: self selector) 		ifTrue: [self methodSourceFor: self selector]		ifFalse: ['']</body><body package="Browser-ChangeObjects" selector="printOn:">printOn: aStream 	aStream nextPutAll: source</body></methods><methods><class-id>Refactory.Browser.AddMethodChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="compile:in:">compile: aString in: aClass 	^(self new)		class: aClass source: aString;		yourself</body><body package="Browser-ChangeObjects" selector="compile:in:classified:">compile: aString in: aBehavior classified: aProtocol 	^(self new)		class: aBehavior			protocol: aProtocol			source: aString;		yourself</body><body package="Browser-ChangeObjects" selector="compile:in:classified:for:">compile: aString in: aBehavior classified: aProtocol for: aController 	^(self 		compile: aString		in: aBehavior		classified: aProtocol)		controller: aController;		yourself</body><body package="Browser-ChangeObjects" selector="compile:in:for:">compile: aString in: aClass for: aController 	^(self compile: aString in: aClass)		controller: aController;		yourself</body></methods><methods><class-id>Refactory.Browser.AddSharedVariableToParcelChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	| ref |	ref := self bindingReference.	self parcel addName: ref simpleName in: ref environment</body><body package="Browser-ChangeObjects" selector="undoClass">undoClass	^RemoveSharedVariableFromParcelChange</body></methods><methods><class-id>Refactory.Browser.CurrentPackageChange</class-id> <category>accessing</category><body package="Browser-ChangeObjects" selector="changeObject">changeObject	^nil</body><body package="Browser-ChangeObjects" selector="package">package	^packageName isNil 		ifTrue: [nil]		ifFalse: [self storeRegistry packageNamed: packageName]</body><body package="Browser-ChangeObjects" selector="renameChangesForObject:to:">renameChangesForObject: aClassName to: newClassName</body></methods><methods><class-id>Refactory.Browser.CurrentPackageChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#GenKey2 &lt;&lt; #browser &gt;&gt; 'Make &lt;1s&gt; the default package for changes.')			expandMacrosWith: (packageName isNil					ifTrue: [(#none1 &lt;&lt; #browser &gt;&gt; '(none)')]					ifFalse: [packageName]))</body></methods><methods><class-id>Refactory.Browser.CurrentPackageChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="package:">package: aPackage 	packageName := aPackage isNil ifTrue: [nil] ifFalse: [aPackage name]</body></methods><methods><class-id>Refactory.Browser.CurrentPackageChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="executeNotifying:">executeNotifying: aBlock 	| undo |	undo := self class package: self storeRegistry currentPackage.	undo name: self name.	self storeRegistry currentPackage: self package.	^undo</body></methods><methods><class-id>Refactory.Browser.CurrentPackageChange</class-id> <category>private-inspector accessing</category><body package="Browser-ChangeObjects" selector="removeChange:">removeChange: aChange 	"Do nothing for leaf changes"</body></methods><methods><class-id>Refactory.Browser.CurrentPackageChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="package:">package: aPackage 	^(self new)		package: aPackage;		yourself</body></methods><methods><class-id>Refactory.Browser.RemoveSharedVariableChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^((#RemoveSharedVariable1s &lt;&lt; #browser &gt;&gt; 'Remove shared variable &lt;1s&gt;')			expandMacrosWith: objectName)</body></methods><methods><class-id>Refactory.Browser.RemoveSharedVariableChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	| ref classChanges overs addVarChange |	ref := self bindingReference.	addVarChange := (AddSharedVariableChange definition: ref definition)				parcels: (Parcel parcelsDefiningBinding: self binding);				package: (self packageForSharedVariable: ref simpleName in: ref environment);				yourself.	overs := Override overridesForStatic: self binding in: ref environment.	overs isNil ifTrue: [^addVarChange].	classChanges := CompositeRefactoryChange new.	classChanges addChange: addVarChange.	classChanges addChange: (self undoForRemoveOverrides: overs).	^classChanges</body></methods><methods><class-id>Refactory.Browser.RefactoryChangeManager</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="clearUndoRedoList">clearUndoRedoList	undo := OrderedCollection new.	redo := OrderedCollection new</body></methods><methods><class-id>Refactory.Browser.RefactoryChangeManager</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="connectToChanges">connectToChanges	ChangeSet addDependent: self</body><body package="Browser-ChangeObjects" selector="disconnectFromChanges">disconnectFromChanges	ChangeSet removeDependent: self</body><body package="Browser-ChangeObjects" selector="initialize">initialize	undo := OrderedCollection new.	redo := OrderedCollection new.	isPerformingRefactoring := false.	self connectToChanges</body><body package="Browser-ChangeObjects" selector="release">release	super release.	self disconnectFromChanges</body></methods><methods><class-id>Refactory.Browser.RefactoryChangeManager</class-id> <category>testing</category><body package="Browser-ChangeObjects" selector="hasRedoableOperations">hasRedoableOperations	^redo notEmpty</body><body package="Browser-ChangeObjects" selector="hasUndoableOperations">hasUndoableOperations	^undo notEmpty</body></methods><methods><class-id>Refactory.Browser.RefactoryChangeManager</class-id> <category>public access</category><body package="Browser-ChangeObjects" selector="addUndo:">addUndo: aRefactoringChange 	aRefactoringChange isNil ifTrue: [^self clearUndoRedoList].	undo addLast: aRefactoringChange.	undo size &gt; UndoSize ifTrue: [undo removeFirst].	redo := OrderedCollection new</body><body package="Browser-ChangeObjects" selector="ignoreChangesWhile:">ignoreChangesWhile: aBlock 	isPerformingRefactoring ifTrue: [^aBlock value].	isPerformingRefactoring := true.	aBlock ensure: [isPerformingRefactoring := false]</body><body package="Browser-ChangeObjects" selector="performChange:">performChange: aRefactoringChange 	self ignoreChangesWhile: 			[[self addUndo: aRefactoringChange execute] 				on: RefactoryChangeFailureNotification				do: [:ex | ex return]]</body><body package="Browser-ChangeObjects" selector="performChange:withMessage:">performChange: aRefactoringChange withMessage: aString 	self ignoreChangesWhile: 			[[self addUndo: (aRefactoringChange executeWithMessage: aString)] 				on: RefactoryChangeFailureNotification				do: [:ex | ex return]]</body><body package="Browser-ChangeObjects" selector="redoChange">redoChange	^redo last</body><body package="Browser-ChangeObjects" selector="redoOperation">redoOperation	redo isEmpty ifTrue: [^self].	self ignoreChangesWhile: 			[| change undoChange |			change := redo removeLast.			undoChange := change execute.			undoChange isNil 				ifTrue: [self clearUndoRedoList]				ifFalse: [undo add: undoChange]]</body><body package="Browser-ChangeObjects" selector="undoChange">undoChange	^undo last</body><body package="Browser-ChangeObjects" selector="undoOperation">undoOperation	undo isEmpty ifTrue: [^self].	self ignoreChangesWhile: 			[| change redoChange |			change := undo removeLast.			redoChange := change execute.			redoChange isNil 				ifTrue: [self clearUndoRedoList]				ifFalse: [redo add: redoChange]]</body></methods><methods><class-id>Refactory.Browser.RefactoryChangeManager</class-id> <category>updating</category><body package="Browser-ChangeObjects" selector="update:with:from:">update: anAspectSymbol with: aParameter from: aSender 	| changeType |	(aSender == ChangeSet and: [isPerformingRefactoring not]) ifFalse: [^self].	changeType := (anAspectSymbol isString 				ifTrue: [anAspectSymbol asString]				ifFalse: ['class']) asLowercase.	(changeType indexOfSubCollection: 'class' startingAt: 1) 		+ (changeType indexOfSubCollection: 'selector' startingAt: 1) &gt; 0 		ifTrue: [self clearUndoRedoList]</body></methods><methods><class-id>Refactory.Browser.RefactoryChangeManager class</class-id> <category>class initialization</category><body package="Browser-ChangeObjects" selector="initialize">initialize	self nuke.	UndoSize := 5</body><body package="Browser-ChangeObjects" selector="undoSize">undoSize	^UndoSize</body><body package="Browser-ChangeObjects" selector="undoSize:">undoSize: anInteger 	UndoSize := anInteger max: 0</body></methods><methods><class-id>Refactory.Browser.RefactoryChangeManager class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="instance">instance	Instance isNil 		ifTrue: 			[Instance := self basicNew.			Instance initialize].	^Instance</body><body package="Browser-ChangeObjects" selector="new">new	^self shouldNotImplement</body></methods><methods><class-id>Refactory.Browser.RefactoryChangeManager class</class-id> <category>public access</category><body package="Browser-ChangeObjects" selector="nuke">nuke	Instance notNil ifTrue: [Instance release].	Instance := nil</body></methods><methods><class-id>Refactory.Browser.RefactoryVariableChange</class-id> <category>comparing</category><body package="Browser-ChangeObjects" selector="=">= aRefactoryVariableChange 	^super = aRefactoryVariableChange 		and: [variable = aRefactoryVariableChange variable]</body><body package="Browser-ChangeObjects" selector="hash">hash	^self class hash bitXor: variable hash</body></methods><methods><class-id>Refactory.Browser.RefactoryVariableChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="changeSymbol">changeSymbol	self subclassResponsibility</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	| changeSymbol |	changeSymbol := self changeSymbol.	self changeObject perform: changeSymbol with: self variable</body><body package="Browser-ChangeObjects" selector="variable">variable	^variable</body></methods><methods><class-id>Refactory.Browser.RefactoryVariableChange</class-id> <category>initialize-release</category><body package="Browser-ChangeObjects" selector="class:variable:">class: aBehavior variable: aString 	self changeClass: aBehavior.	variable := aString</body></methods><methods><class-id>Refactory.Browser.RemoveInstanceVariableChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^(#RemoveInstVar1sFrom2s &lt;&lt; #browser &gt;&gt; 'Remove instance variable named, &lt;1s&gt;, from &lt;2s&gt;') 		expandMacrosWith: variable		with: self displayClassName</body><body package="Browser-ChangeObjects" selector="printOn:">printOn: aStream 	aStream		nextPutAll: self displayClassName;		nextPutAll: ' removeInstVarNamed: ';		nextPutAll: variable;		nextPut: $!</body></methods><methods><class-id>Refactory.Browser.RemoveInstanceVariableChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="changeSymbol">changeSymbol	^#removeInstVarName:</body></methods><methods><class-id>Refactory.Browser.RemoveInstanceVariableChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^AddInstanceVariableChange add: variable to: self changeObject</body></methods><methods><class-id>Refactory.Browser.RemoveInstanceVariableChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="remove:from:">remove: aVariable from: aBehavior 	^(self new)		class: aBehavior variable: aVariable;		yourself</body></methods><methods><class-id>Refactory.Browser.AddInstanceVariableChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="changeSymbol">changeSymbol	^#addInstVarName:</body></methods><methods><class-id>Refactory.Browser.AddInstanceVariableChange</class-id> <category>printing</category><body package="Browser-ChangeObjects" selector="changeString">changeString	^(#AddInstVar1sFrom2s &lt;&lt; #browser &gt;&gt; 'Add instance variable named, &lt;1s&gt;, from &lt;2s&gt;') expandMacrosWith: variable		with: self displayClassName</body><body package="Browser-ChangeObjects" selector="printOn:">printOn: aStream 	aStream		nextPutAll: self displayClassName;		nextPutAll: ' addInstVarNamed: ';		nextPutAll: variable;		nextPut: $!</body></methods><methods><class-id>Refactory.Browser.AddInstanceVariableChange</class-id> <category>converting</category><body package="Browser-ChangeObjects" selector="asUndoOperation">asUndoOperation	^RemoveInstanceVariableChange remove: variable from: self changeObject</body></methods><methods><class-id>Refactory.Browser.AddInstanceVariableChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="add:to:">add: aVariable to: aBehavior 	^(self new)		class: aBehavior variable: aVariable;		yourself</body></methods><methods><class-id>Refactory.Browser.MoveSharedVariableToPackageChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="currentPackage">currentPackage	| binding |	binding := self bindingReference bindingOrNil.	^self packageForSharedVariable: binding key		in: (Root whoDefinesBinding: binding)</body><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	| ref |	ref := self bindingReference.	self storeChangeSet 		moveDataKey: ref simpleName		owner: ref environment		toPackage: self package</body></methods><methods><class-id>Refactory.Browser.MoveSharedVariableToPackageChange class</class-id> <category>instance creation</category><body package="Browser-ChangeObjects" selector="sharedVariableNamed:package:">sharedVariableNamed: aString package: aPackage 	^(self new)		objectName: aString;		package: aPackage;		yourself</body></methods><methods><class-id>Refactory.Browser.AddNameSpaceToParcelChange</class-id> <category>private</category><body package="Browser-ChangeObjects" selector="primitiveExecute">primitiveExecute	self parcel addNameSpace: self changeObject</body><body package="Browser-ChangeObjects" selector="undoClass">undoClass	^RemoveNameSpaceFromParcelChange</body></methods><methods><class-id>Kernel.Override class</class-id> <category>RefactoringBrowser</category><body package="Browser-ChangeObjects" selector="removeClassOrNameSpaceOverride:">removeClassOrNameSpaceOverride: override 	| list |	list := self overriddenClassesAndNameSpaces at: override object				ifAbsent: [^self].	list remove: override ifAbsent: [].	list isEmpty 		ifTrue: [self overriddenClassesAndNameSpaces removeKey: override object]</body><body package="Browser-ChangeObjects" selector="removeMethodOverride:">removeMethodOverride: override 	| dict list |	dict := self overriddenMethods at: override owner ifAbsent: [^self].	list := dict at: override selector ifAbsent: [^self].	list remove: override ifAbsent: [].	list isEmpty ifTrue: [dict removeKey: override selector].	dict isEmpty ifTrue: [self overriddenMethods removeKey: override owner]</body><body package="Browser-ChangeObjects" selector="removeOverride:">removeOverride: override 	override isForMethod ifTrue: [^self removeMethodOverride: override].	override isForGeneral 		ifTrue: [^self removeSharedVariableOverride: override].	^self removeClassOrNameSpaceOverride: override</body><body package="Browser-ChangeObjects" selector="removeSharedVariableOverride:">removeSharedVariableOverride: override 	| dict list |	dict := self overriddenStatics at: override owner ifAbsent: [^self].	list := dict at: override key ifAbsent: [^self].	list remove: override ifAbsent: [].	list isEmpty ifTrue: [dict removeKey: override key].	dict isEmpty ifTrue: [self overriddenStatics removeKey: override owner]</body></methods><methods><class-id>Kernel.Override</class-id> <category>RefactoringBrowser</category><body package="Browser-ChangeObjects" selector="undoChangeObject">undoChangeObject	self subclassResponsibility</body></methods><methods><class-id>Kernel.Parcel class</class-id> <category>Refactoring Browser</category><body package="Browser-ChangeObjects" selector="isBindingDefinedInParcel:">isBindingDefinedInParcel: aBinding 	aBinding isForClass ifTrue: [^self isClassDefinedInParcel: aBinding value].	^(self parcelsDefiningBinding: aBinding) notEmpty</body><body package="Browser-ChangeObjects" selector="isClassDefinedInParcel:">isClassDefinedInParcel: aClass 	| classParcels |	classParcels := self parcelsForClass: aClass.	classParcels isNil ifTrue: [^false].	^classParcels contains: [:each | each definesClass: aClass]</body><body package="Browser-ChangeObjects" selector="isSelector:parceledInClass:">isSelector: aSelector parceledInClass: aClass 	| methodParcels |	methodParcels := self parcelsForClass: aClass.	methodParcels isNil ifTrue: [^false].	^methodParcels 		contains: [:each | each definesSelector: aSelector forClass: aClass]</body><body package="Browser-ChangeObjects" selector="parcelsDefiningBinding:">parcelsDefiningBinding: aBinding 	| bindingParcels |	bindingParcels := self parcelsForBinding: aBinding.	bindingParcels isNil ifTrue: [^#()].	aBinding isForGeneral ifTrue: [^bindingParcels].	^aBinding isForClass 		ifTrue: [bindingParcels select: [:each | each definesClass: aBinding value]]		ifFalse: [bindingParcels select: [:each | each definesObject: aBinding value]]</body><body package="Browser-ChangeObjects" selector="parcelsDefiningClass:">parcelsDefiningClass: aClass 	| classParcels |	classParcels := self parcelsForClass: aClass.	classParcels isNil ifTrue: [^#()].	^classParcels select: [:each | each definesClass: aClass]</body><body package="Browser-ChangeObjects" selector="parcelsDefiningNameSpace:">parcelsDefiningNameSpace: aNameSpace 	| nameSpaceParcels |	nameSpaceParcels := self parcelsForClassOrNameSpace: aNameSpace.	nameSpaceParcels isNil ifTrue: [^#()].	^nameSpaceParcels select: [:each | each definesObject: aNameSpace]</body><body package="Browser-ChangeObjects" selector="parcelsDefiningSelector:inClass:">parcelsDefiningSelector: aSelector inClass: aClass 	| methodParcels |	methodParcels := self parcelsForClass: aClass.	methodParcels isNil ifTrue: [^#()].	^methodParcels 		select: [:each | each definesSelector: aSelector forClass: aClass]</body></methods><methods><class-id>Kernel.Parcel</class-id> <category>Refactoring Browser</category><body package="Browser-ChangeObjects" selector="isUnparceledParcel">isUnparceledParcel	^false</body></methods><methods><class-id>Kernel.NameSpaceImport</class-id> <category>testing</category><body package="Browser-ChangeObjects" selector="isDrillDown">isDrillDown	^drillDown</body><body package="Browser-ChangeObjects" selector="isPrivate">isPrivate	^private</body></methods><methods><class-id>Kernel.OverridenNameSpace</class-id> <category>Refactoring Browser</category><body package="Browser-ChangeObjects" selector="undoChangeObject">undoChangeObject	| change |	change := Refactory.Browser.AddNameSpaceChange definition: self object definition.	change parcels: (Parcel parcelsDefiningClass: self object).	change package: (change packageForNameSpace: self object).	^change</body></methods><methods><class-id>Kernel.OverridenClass</class-id> <category>Refactoring Browser</category><body package="Browser-ChangeObjects" selector="undoChangeObject">undoChangeObject	| change |	change := Refactory.Browser.AddClassChange definition: self object definition.	change parcels: (Parcel parcelsDefiningClass: self object).	change package: (change packageForClassDefinition: self object).	^change</body></methods><methods><class-id>Kernel.OverridenMethod</class-id> <category>Refactoring Browser</category><body package="Browser-ChangeObjects" selector="undoChangeObject">undoChangeObject	| change |	change := Refactory.Browser.AddMethodChange 				compile: (self implementingClass sourceCodeAt: self selector)				in: self implementingClass.	change parcels: (Parcel parcelsDefiningSelector: self selector				inClass: self implementingClass).	change package: (change packageForClass: self implementingClass				selector: self selector).	^change</body></methods><methods><class-id>Kernel.OverridenStatic</class-id> <category>Refactoring Browser</category><body package="Browser-ChangeObjects" selector="undoChangeObject">undoChangeObject	| change |	change := Refactory.Browser.AddSharedVariableChange 				definition: (self owner asNameSpace definitionOfStatic: self object).	change parcels: (Parcel parcelsDefiningBinding: self object).	change package: (change packageForSharedVariable: self key in: self owner).	^change</body></methods><initialize><class-id>Refactory.Browser.RefactoryChangeManager</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Notification</name><environment>Core</environment><super>Core.Exception</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>Parcel</name><environment>Kernel</environment><super>Kernel.CodeComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>definedObjects definedClasses definedBindings classSelectors namedObjects dirty loaded </inst-vars><class-inst-vars>parcels classParcelMap parcelFileInfoCache parcelFileDirectoryCache </class-inst-vars><imports></imports><category>System-Code Components</category><attributes><package>System-Code Components</package></attributes></class><class><name>Override</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sources definition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Overrides</category><attributes><package>System-Overrides</package></attributes></class><class><name>OverridenStatic</name><environment>Kernel</environment><super>Kernel.Override</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Overrides</category><attributes><package>System-Overrides</package></attributes></class><class><name>OverridenClass</name><environment>Kernel</environment><super>Kernel.Override</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>comment documentation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Overrides</category><attributes><package>System-Overrides</package></attributes></class><class><name>NameSpaceImport</name><environment>Kernel</environment><super>Kernel.BindingReference</super><private>false</private><indexed-type>none</indexed-type><inst-vars>drillDown private </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Name Spaces</category><attributes><package>System-Name Spaces</package></attributes></class><class><name>OverridenMethod</name><environment>Kernel</environment><super>Kernel.Override</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selector protocol instVarNames </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Overrides</category><attributes><package>System-Overrides</package></attributes></class><class><name>OverridenNameSpace</name><environment>Kernel</environment><super>Kernel.Override</super><private>false</private><indexed-type>none</indexed-type><inst-vars>comment documentation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Overrides</category><attributes><package>System-Overrides</package></attributes></class></st-source>