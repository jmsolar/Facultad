<?xml version="1.0"?><st-source><!-- Name: RBStoreExtensionsNotice: Copyright © 2004 Cincom Systems, Inc.  All Rights Reserved.Comment: This package contains the Version History tool for Store. The Version History tool allows you to graphically view the history of version of program items. From this graphical display you can browse versions and differences as well as load the program item.DbIdentifier: bear73DbTrace: 50581DevelopmentPrerequisites: #(#(#any 'HotDraw Framework' '') #(#any 'Store-Base' '') #(#any 'Browser-BrowserUI' ''))PackageName: RBStoreExtensionsParcel: #('RBStoreExtensions')PrerequisiteParcels: #(#('HotDraw Framework' '') #('Store-Base' '') #('Browser-BrowserUI' ''))PrintStringCache: (1.44,bobw)Version: 7.3Post-Load Block: 	[ :pkg |  	Refactory.HotDraw.Tool reinitialize]Post-Unload Block: 	[	Refactory.HotDraw.Tool reinitialize]Date: 3:55:49 pm November 22, 2004 --><time-stamp>From VisualWorks®, 7.3 of November 22, 2004 on November 22, 2004 at 3:55:49 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>VersionCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>versionEditor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-StoreExtensions</category><attributes><package>RBStoreExtensions</package></attributes></class><comment><class-id>Refactory.Browser.VersionCodeTool</class-id><body>VersionCodeTool is the code tool that displays a version history diagram of the selected item.Instance Variables:	versionEditor	&lt;VersionDrawingEditor&gt;	the HotDraw diagram of the version history</body></comment><class><name>VersionCodeToolSelectionPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeToolSelectionPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-StoreExtensions</category><attributes><package>RBStoreExtensions</package></attributes></class><comment><class-id>Refactory.Browser.VersionCodeToolSelectionPolicy</class-id><body>VersionCodeToolSelectionPolicy is the code tool selection policy for the VersionCodeTool.</body></comment><class><name>Tree</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>figure subtrees tops bottoms </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-StoreExtensions</category><attributes><package>RBStoreExtensions</package></attributes></class><comment><class-id>Refactory.Browser.Tree</class-id><body>Tree is a helper class for the version code tool. It performs the layout of the nodes in the diagram. It makes an approximation of the optimal tree layout.Instance Variables:	bottoms	&lt;OrderedCollection of: Integer&gt;	the bottoms of each level in the tree	figure	&lt;Refactory.HotDraw.Figure&gt;	the version figure for us	subtrees	&lt;SequenceableCollection of: Tree&gt;	our subtrees	tops	&lt;OrderedCollection of: Integer&gt;	the tops of each level in the tree</body></comment><class><name>VersionDrawingEditor</name><environment>Refactory.Browser</environment><super>Refactory.HotDraw.DrawingEditor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>versionInformationHolder </inst-vars><class-inst-vars></class-inst-vars><imports>			private Refactory.HotDraw.*			private Store.*			</imports><category>Browser-StoreExtensions</category><attributes><package>RBStoreExtensions</package></attributes></class><comment><class-id>Refactory.Browser.VersionDrawingEditor</class-id><body>VersionDrawingEditor is the drawing editor for the version history diagram.Instance Variables:	versionInformationHolder	&lt;ValueHolder&gt;	a value holder that is used to display the information of the program item that the mouse is currently over</body></comment><class><name>VersionFigure</name><environment>Refactory.Browser</environment><super>Refactory.HotDraw.TextFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-StoreExtensions</category><attributes><package>RBStoreExtensions</package></attributes></class><comment><class-id>Refactory.Browser.VersionFigure</class-id><body>VersionFigure is a Figure that is used to display a version of a program item.Subclasses must implement the following messages:	accessing		browse			this method should open a browser on the specific version of the program item</body></comment><class><name>PundleVersionFigure</name><environment>Refactory.Browser</environment><super>Refactory.Browser.VersionFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-StoreExtensions</category><attributes><package>RBStoreExtensions</package></attributes></class><comment><class-id>Refactory.Browser.PundleVersionFigure</class-id><body>PundleVersionFigure is the version figure for bundles and packages.Subclasses must implement the following messages:	private		codeComponent			returns the package or bundle we are viewing</body></comment><class><name>PackageVersionFigure</name><environment>Refactory.Browser</environment><super>Refactory.Browser.PundleVersionFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-StoreExtensions</category><attributes><package>RBStoreExtensions</package></attributes></class><comment><class-id>Refactory.Browser.PackageVersionFigure</class-id><body>PackageVersionFigure is the version figure for packages.</body></comment><class><name>BundleVersionFigure</name><environment>Refactory.Browser</environment><super>Refactory.Browser.PundleVersionFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-StoreExtensions</category><attributes><package>RBStoreExtensions</package></attributes></class><comment><class-id>Refactory.Browser.BundleVersionFigure</class-id><body>BundleVersionFigure is the version figure for a bundle.</body></comment><class><name>PackageItemFigure</name><environment>Refactory.Browser</environment><super>Refactory.Browser.VersionFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars>package </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-StoreExtensions</category><attributes><package>RBStoreExtensions</package></attributes></class><comment><class-id>Refactory.Browser.PackageItemFigure</class-id><body>PackageItemFigure is the version figure for items contained within packages (e.g., classes and methods).Instance Variables:	package	&lt;Store.Package&gt;	the package we are contained within</body></comment><class><name>ClassVersionFigure</name><environment>Refactory.Browser</environment><super>Refactory.Browser.PackageItemFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-StoreExtensions</category><attributes><package>RBStoreExtensions</package></attributes></class><comment><class-id>Refactory.Browser.ClassVersionFigure</class-id><body>ClassVersionFigure is the version figure for a class.</body></comment><class><name>MethodVersionFigure</name><environment>Refactory.Browser</environment><super>Refactory.Browser.PackageItemFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-StoreExtensions</category><attributes><package>RBStoreExtensions</package></attributes></class><comment><class-id>Refactory.Browser.MethodVersionFigure</class-id><body>MethodVersionFigure is the version figure for a method.</body></comment><methods><class-id>Refactory.Browser.VersionCodeTool</class-id> <category>updating</category><body package="RBStoreExtensions" selector="updateContents">updateContents	super updateContents.	self updateDrawing</body><body package="RBStoreExtensions" selector="updateDisplay">updateDisplay	super updateDisplay.	self updateDrawing</body><body package="RBStoreExtensions" selector="updateDrawing">updateDrawing	[self selector notNil 		ifTrue: 			[^self versionEditor displaySelector: self selector in: self selectedClass].	self nonMetaClass notNil 		ifTrue: [^self versionEditor displayClass: self nonMetaClass].	self pundle isNil 		ifTrue: [self versionEditor clearDrawing]		ifFalse: 			[self pundle isPackage 				ifTrue: [self versionEditor displayPackage: self package]				ifFalse: [self versionEditor displayBundle: self pundle]]]		on: MessageNotUnderstood		do: [:ex | ex return]</body></methods><methods><class-id>Refactory.Browser.VersionCodeTool</class-id> <category>accessing</category><body package="RBStoreExtensions" selector="versionEditor">versionEditor	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^versionEditor isNil 		ifTrue: [versionEditor := VersionDrawingEditor new]		ifFalse: [versionEditor]</body></methods><methods><class-id>Refactory.Browser.VersionCodeTool</class-id> <category>private</category><body package="RBStoreExtensions" selector="resetBuilder">resetBuilder	super resetBuilder.	versionEditor := nil</body></methods><methods><class-id>Refactory.Browser.VersionCodeTool class</class-id> <category>private-interface building</category><body package="RBStoreExtensions" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.VersionCodeToolSelectionPolicy</class-id> <category>accessing-classes</category><body package="RBStoreExtensions" selector="codeToolClassForBundle:">codeToolClassForBundle: aBundleModel 	^VersionCodeTool</body><body package="RBStoreExtensions" selector="codeToolClassForClass:">codeToolClassForClass: aBehavior 	^VersionCodeTool</body><body package="RBStoreExtensions" selector="codeToolClassForPackage:">codeToolClassForPackage: aPackageModel 	^VersionCodeTool</body><body package="RBStoreExtensions" selector="codeToolClassForSelector:andClass:">codeToolClassForSelector: aSymbol andClass: aBehavior 	^VersionCodeTool</body></methods><methods><class-id>Refactory.Browser.VersionCodeToolSelectionPolicy</class-id> <category>accessing</category><body package="RBStoreExtensions" selector="name">name	^(#VersionHistory &lt;&lt; #browser &gt;&gt; 'Version History') asString</body><body package="RBStoreExtensions" selector="toolClass">toolClass	^(#{Store.DbRegistry} valueOrDo: [^nil]) isOnlineImage 		ifTrue: [super toolClass]		ifFalse: [nil]</body></methods><methods><class-id>Refactory.Browser.VersionCodeToolSelectionPolicy class</class-id> <category>class initialization</category><body package="RBStoreExtensions" selector="initialize">initialize	(CodeModel dependents includes: self) 		ifFalse: [CodeModel addDependent: self].	self addSelectionPolicy</body><body package="RBStoreExtensions" selector="obsolete">obsolete	CodeModel removeDependent: self.	self removeSelectionPolicy.	^super obsolete</body></methods><methods><class-id>Refactory.Browser.Tree</class-id> <category>layout</category><body package="RBStoreExtensions" selector="addBottomsFrom:">addBottomsFrom: aTree 	aTree bottoms keysAndValuesDo: 			[:index :each | 			index &gt; bottoms size 				ifTrue: [bottoms add: each]				ifFalse: [(bottoms at: index) &lt; each ifTrue: [bottoms at: index put: each]]]</body><body package="RBStoreExtensions" selector="addSubtreesInto:level:">addSubtreesInto: aCollection level: aNumber 	aCollection size &lt; aNumber 		ifTrue: [aCollection add: OrderedCollection new].	(aCollection at: aNumber) add: figure.	subtrees 		do: [:each | each addSubtreesInto: aCollection level: aNumber + 1]</body><body package="RBStoreExtensions" selector="addTopsFrom:">addTopsFrom: aTree 	aTree tops keysAndValuesDo: 			[:index :each | 			index &gt; tops size 				ifTrue: [tops add: each]				ifFalse: [(tops at: index) &gt; each ifTrue: [tops at: index put: each]]]</body><body package="RBStoreExtensions" selector="bottom">bottom	^bottoms inject: 0 into: [:sum :each | sum max: each]</body><body package="RBStoreExtensions" selector="bottoms">bottoms	^bottoms</body><body package="RBStoreExtensions" selector="layoutBelow:space:">layoutBelow: aCollection space: aNumber 	| moveDistance top bottom |	moveDistance := 0.	1 to: (self tops size max: aCollection size)		do: 			[:index | 			top := index &gt; self tops size 						ifTrue: [SmallInteger maxVal]						ifFalse: [self tops at: index].			bottom := index &gt; aCollection size 						ifTrue: [SmallInteger minVal]						ifFalse: [aCollection at: index].			moveDistance := moveDistance max: bottom + aNumber - top].	moveDistance ~~ 0 ifTrue: [self moveDownBy: moveDistance]</body><body package="RBStoreExtensions" selector="layoutWithHorizontalSpacing:">layoutWithHorizontalSpacing: aNumber 	| levels |	levels := OrderedCollection new.	self addSubtreesInto: levels level: 1.	levels inject: aNumber negated into: [:x :collection |			| max |			max := collection inject: 0 into: [:sum :each | sum max: each extent x].			collection do: [:each | each translateBy: (x) @ 0].			x + max + aNumber]</body><body package="RBStoreExtensions" selector="layoutWithSpacing:">layoutWithSpacing: aPoint 	self		layoutWithHorizontalSpacing: aPoint x;		layoutWithVerticalSpacing: aPoint y</body><body package="RBStoreExtensions" selector="layoutWithVerticalSpacing:">layoutWithVerticalSpacing: aNumber 	subtrees do: [:each | each layoutWithVerticalSpacing: aNumber].	subtrees isEmpty 		ifTrue: 			[tops := OrderedCollection with: figure top.			bottoms := OrderedCollection with: figure bottom.			^self].	tops := OrderedCollection withAll: subtrees first tops.	bottoms := OrderedCollection withAll: subtrees first bottoms.	2 to: subtrees size		do: 			[:index | 			| each |			each := subtrees at: index.			each layoutBelow: bottoms space: aNumber.			self				addBottomsFrom: each;				addTopsFrom: each].	figure translateTo: figure left 				@ ((self bottom + self top) // 2 - (figure extent // 2) y).	tops addFirst: figure top.	bottoms addFirst: figure bottom</body><body package="RBStoreExtensions" selector="moveDownBy:">moveDownBy: aNumber 	figure translateBy: 0 @ aNumber.	subtrees do: [:each | each moveDownBy: aNumber].	tops notNil ifTrue: [tops := tops collect: [:each | each + aNumber]].	bottoms notNil 		ifTrue: [bottoms := bottoms collect: [:each | each + aNumber]]</body><body package="RBStoreExtensions" selector="top">top	^tops inject: SmallInteger maxVal into: [:sum :each | sum min: each]</body><body package="RBStoreExtensions" selector="tops">tops	^tops</body></methods><methods><class-id>Refactory.Browser.Tree</class-id> <category>initialize-release</category><body package="RBStoreExtensions" selector="figure:subtrees:">figure: aFigure subtrees: aTreeCollection 	figure := aFigure.	subtrees := aTreeCollection</body></methods><methods><class-id>Refactory.Browser.Tree class</class-id> <category>instance creation</category><body package="RBStoreExtensions" selector="figure:subtrees:">figure: aFigure subtrees: aTreeCollection 	^(self new)		figure: aFigure subtrees: aTreeCollection;		yourself</body></methods><methods><class-id>Refactory.Browser.VersionDrawingEditor</class-id> <category>accessing</category><body package="RBStoreExtensions" selector="clearDrawing">clearDrawing	self drawing removeAll: self drawing figures copy</body><body package="RBStoreExtensions" selector="displayBundle:">displayBundle: aBundleModel 	| bundles |	bundles := Bundle allVersionsWithName: aBundleModel name.	self 		displayFigures: (bundles collect: [:each | BundleVersionFigure on: each])</body><body package="RBStoreExtensions" selector="displayClass:">displayClass: aClass 	| classRecords package |	classRecords := ClassRecord allVersionsWithName: aClass name.	package := Registry containingPackageForClass: aClass.	self displayFigures: (classRecords 				collect: [:each | ClassVersionFigure on: each package: package])</body><body package="RBStoreExtensions" selector="displayNameSpace:">displayNameSpace: aNameSpace 	| nameSpaces |	nameSpaces := NameSpaceRecord allVersionsWithName: aNameSpace name.	self displayFigures: (nameSpaces collect: [:each | VersionFigure on: each])</body><body package="RBStoreExtensions" selector="displayPackage:">displayPackage: aPackageModel 	| packages |	packages := Package allVersionsWithName: aPackageModel name.	self 		displayFigures: (packages collect: [:each | PackageVersionFigure on: each])</body><body package="RBStoreExtensions" selector="displaySelector:in:">displaySelector: aSelector in: aClass 	| methods package |	methods := Method 				allMethodVersionsNamed: aSelector				inClass: aClass absoluteSymbol				meta: aClass isMeta.	package := (Registry allContainingPackagesForSelector: aSelector				class: aClass) detect: [:each | true] ifNone: [nil].	self displayFigures: (methods 				collect: [:each | MethodVersionFigure on: each package: package])</body></methods><methods><class-id>Refactory.Browser.VersionDrawingEditor</class-id> <category>interface opening</category><body package="RBStoreExtensions" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	builder window damageRepairPolicy: DoubleBufferingWindowDisplayPolicy new</body></methods><methods><class-id>Refactory.Browser.VersionDrawingEditor</class-id> <category>aspects</category><body package="RBStoreExtensions" selector="versionInformationHolder">versionInformationHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^versionInformationHolder isNil		ifTrue:			[versionInformationHolder := String new asValue]		ifFalse:			[versionInformationHolder]</body></methods><methods><class-id>Refactory.Browser.VersionDrawingEditor</class-id> <category>layout</category><body package="RBStoreExtensions" selector="displayFigures:">displayFigures: figures 	| map traceMap previousMap |	self clearDrawing.	traceMap := Dictionary new.	figures do: [:each | traceMap at: each primaryKey put: each].	map := Dictionary new.	previousMap := Dictionary new.	figures do: 			[:each | 			| figure |			figure := traceMap at: each trace ifAbsent: [nil].			figure notNil 				ifTrue: 					[previousMap at: each put: figure.					(map at: figure						ifAbsentPut: [SortedCollection sortBlock: [:a :b | a timestamp &lt; b timestamp]]) 							add: each]				ifFalse: [previousMap at: each put: nil]].	figures 		do: [:each | each translateTo: self xSeparation @ self ySeparation].	self layoutFiguresUsingForwardMap: map backwardMap: previousMap.	previousMap keysAndValuesDo: 			[:key :value | 			value notNil 				ifTrue: 					[figures add: (key 								connectFromPoint: key center								to: value								at: value center)]].	drawing		addAll: figures;		recomputePreferredBounds;		mergeBounds: (0 @ 0 corner: 1 @ 1)</body><body package="RBStoreExtensions" selector="layoutFiguresUsingForwardMap:backwardMap:">layoutFiguresUsingForwardMap: map backwardMap: previousMap 	| initialNodes root trees |	initialNodes := (previousMap keys 				select: [:each | (previousMap at: each) isNil]) 					asSortedCollection: [:a :b | a timestamp &lt; b timestamp].	trees := initialNodes collect: [:each | self treeFor: each using: map].	root := Tree figure: (RectangleFigure 						createAt: self xSeparation negated @ self ySeparation)				subtrees: trees.	root layoutWithSpacing: self xSeparation @ self ySeparation</body><body package="RBStoreExtensions" selector="treeFor:using:">treeFor: aFigure using: mapDictionary 	^Tree figure: aFigure		subtrees: ((mapDictionary at: aFigure ifAbsent: [#()]) 				collect: [:each | self treeFor: each using: mapDictionary])</body><body package="RBStoreExtensions" selector="xSeparation">xSeparation	^20</body><body package="RBStoreExtensions" selector="ySeparation">ySeparation	^20</body></methods><methods><class-id>Refactory.Browser.VersionDrawingEditor</class-id> <category>drawing description</category><body package="RBStoreExtensions" selector="toolNames">toolNames	^(Array with: (#VersionTool &lt;&lt; #browser &gt;&gt; 'Version Tool') asString)</body></methods><methods><class-id>Refactory.Browser.VersionDrawingEditor class</class-id> <category>opening</category><body package="RBStoreExtensions" selector="openOnBundle:">openOnBundle: aBundleModel 	"self openOnBundle: (Store.Registry bundleNamed: 'RefactoringBrowser')"	(self new)		displayBundle: aBundleModel;		open</body><body package="RBStoreExtensions" selector="openOnClass:">openOnClass: aClass 	"self openOnClass: Refactoring"	(self new)		displayClass: aClass;		open</body><body package="RBStoreExtensions" selector="openOnNameSpace:">openOnNameSpace: aNameSpace 	"self openOnNameSpace: Refactory.Browser"	(self new)		displayNameSpace: aNameSpace;		open</body><body package="RBStoreExtensions" selector="openOnPackage:">openOnPackage: aPackageModel 	"self openOnPackage: (Store.Registry packageNamed: 'RBBrowserUI')"	(self new)		displayPackage: aPackageModel;		open</body><body package="RBStoreExtensions" selector="openOnSelector:in:">openOnSelector: aSelector in: aClass 	"self openOnSelector: #execute in: Refactoring"	(self new)		displaySelector: aSelector in: aClass ;		open</body></methods><methods><class-id>Refactory.Browser.VersionDrawingEditor class</class-id> <category>private-interface building</category><body package="RBStoreExtensions" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.VersionFigure</class-id> <category>displaying</category><body package="RBStoreExtensions" selector="displayOn:">displayOn: aGraphicsContext 	super displayOn: aGraphicsContext.	aGraphicsContext paint: ColorValue black.	self isLoaded ifTrue: [aGraphicsContext lineWidth: 2].	self bounds displayStrokedOn: aGraphicsContext</body></methods><methods><class-id>Refactory.Browser.VersionFigure</class-id> <category>initialize-release</category><body package="RBStoreExtensions" selector="initialize">initialize	super initialize.	self opaque</body><body package="RBStoreExtensions" selector="label">label	^self storeRecord timeStampString</body><body package="RBStoreExtensions" selector="on:">on: aPackage 	model := aPackage.	self		setParagraph: (self isLoaded 					ifTrue: [self label asText allBold]					ifFalse: [self label]) asComposedText			origin: 0 @ 0;		bottomRight: self bottomRight + (7 @ 0);		alignUsing: #centered</body></methods><methods><class-id>Refactory.Browser.VersionFigure</class-id> <category>testing</category><body package="RBStoreExtensions" selector="isLoaded">isLoaded	^false	"This is hard to compute for some code components"</body></methods><methods><class-id>Refactory.Browser.VersionFigure</class-id> <category>accessing</category><body package="RBStoreExtensions" selector="browse">browse	self subclassResponsibility</body><body package="RBStoreExtensions" selector="compareVersionTo:">compareVersionTo: aStoreSourceObject</body><body package="RBStoreExtensions" selector="menuAt:">menuAt: aPoint 	| mb |	mb := MenuBuilder new.	mb		add: (#Inspect &lt;&lt; #browser &gt;&gt; 'Inspect') -&gt; #inspect;		line;		add: (#Browse &lt;&lt; #browser &gt;&gt; 'Browse') -&gt; [self browse];		add: (#Load &lt;&lt; #browser &gt;&gt; 'Load') -&gt; #loadSrc.	^mb menu</body><body package="RBStoreExtensions" selector="primaryKey">primaryKey	^self storeRecord primaryKey</body><body package="RBStoreExtensions" selector="storeRecord">storeRecord	^model</body><body package="RBStoreExtensions" selector="timestamp">timestamp	^self storeRecord timeStamp</body><body package="RBStoreExtensions" selector="trace">trace	^self storeRecord trace</body><body package="RBStoreExtensions" selector="versionInformation">versionInformation	^((#UserC1sTimeC2s &lt;&lt; #browser &gt;&gt; 'User: &lt;1s&gt;; Time: &lt;2s&gt;')			expandMacrosWith: self storeRecord userName			with: self storeRecord timeStampString)</body></methods><methods><class-id>Refactory.Browser.VersionFigure class</class-id> <category>instance creation</category><body package="RBStoreExtensions" selector="on:">on: storeRecord 	^(self new)		on: storeRecord;		yourself</body></methods><methods><class-id>Refactory.Browser.PundleVersionFigure</class-id> <category>testing</category><body package="RBStoreExtensions" selector="isLoaded">isLoaded	| bundleModel |	bundleModel := self codeComponent.	bundleModel isNil ifTrue: [^false].	^bundleModel dbTrace = self storeRecord primaryKey</body></methods><methods><class-id>Refactory.Browser.PundleVersionFigure</class-id> <category>private</category><body package="RBStoreExtensions" selector="codeComponent">codeComponent	^self subclassResponsibility</body><body package="RBStoreExtensions" selector="connectToDatabaseName">connectToDatabaseName	| names |	names := Store.ConnectionDialog profiles collect: [:each | each name].	^Dialog 		choose: (#SelectADatabaseToReplicateToC &lt;&lt; #browser &gt;&gt; 'Select a database to replicate to:')		fromList: names		values: names		lines: 8		cancel: [nil]</body><body package="RBStoreExtensions" selector="label">label	^self storeRecord version</body><body package="RBStoreExtensions" selector="listContents">listContents	(#{Store.PundlesTool} valueOrDo: [^self]) 		openOnPublishedBlock: [self model containedItems asList]		sendUpdatesFor: #()		windowTitle: self model printString</body><body package="RBStoreExtensions" selector="replicateTo:">replicateTo: aString 	self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.PundleVersionFigure</class-id> <category>accessing</category><body package="RBStoreExtensions" selector="browse">browse	TabApplicationSystemBrowser openOnPackage: self model</body><body package="RBStoreExtensions" selector="menuAt:">menuAt: aPoint 	| mb |	mb := MenuBuilder new.	mb		add: (#Inspect &lt;&lt; #browser &gt;&gt; 'Inspect') -&gt; #inspect;		line;		add: (#Browse &lt;&lt; #browser &gt;&gt; 'Browse') -&gt; [self browse].	self model isBundle ifTrue: [mb add: (#ListContents &lt;&lt; #browser &gt;&gt; 'List Contents') -&gt; #listContents].	mb		line;		add: (#Load &lt;&lt; #browser &gt;&gt; 'Load') -&gt; #loadSrc;		add: (#MergeIntoImage &lt;&lt; #browser &gt;&gt; 'Merge Into Image') -&gt; 						[Store.DbRegistry doIfOnlineImage: 								[Store.MergeTool openOnPundles: (Array with: self storeRecord)]];		add: (#Reconcile &lt;&lt; #browser &gt;&gt; 'Reconcile') 					-&gt; [self model getImagePundle reconcileWithDbVersion: self model];		line;		add: (#FileOut &lt;&lt; #browser &gt;&gt; 'File Out') -&gt; #fileOut;		line;		add: (#CompareWithImage &lt;&lt; #browser &gt;&gt; 'Compare with Image') 					-&gt; [self compareVersionTo: self model getImagePundle];		line;		add: (#SetBlessingLevel &lt;&lt; #browser &gt;&gt; 'Set Blessing Level') 					-&gt; [Store.BlessingDialog setBlessingFor: self model];		line.	#{Refactory.StoreReplication.Replicator} isDefined 		ifTrue: [mb add: (#ReplicateToDots &lt;&lt; #browser &gt;&gt; 'Replicate to...') -&gt; #replicate].	^mb menu</body><body package="RBStoreExtensions" selector="replicate">replicate	| name |	name := self connectToDatabaseName.	name isNil ifTrue: [^self].	Cursor wait showWhile: [self replicateTo: name]</body><body package="RBStoreExtensions" selector="versionInformation">versionInformation	^((#x1sBlessingC2s &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;; Blessing: &lt;2s&gt;')			expandMacrosWith: super versionInformation			with: self storeRecord blessingLevelString)</body></methods><methods><class-id>Refactory.Browser.PackageVersionFigure</class-id> <category>private</category><body package="RBStoreExtensions" selector="codeComponent">codeComponent	^#{Store.Registry} value packageNamed: self storeRecord name</body><body package="RBStoreExtensions" selector="replicateTo:">replicateTo: aString 	Notice 		showNotice: (#Replicating &lt;&lt; #browser &gt;&gt; 'Replicating')		complete: 0		while: 			[(#{Refactory.StoreReplication.Replicator} value new)				connectTo: aString;				replicateSinglePackage: self model;				disconnect]		title: (#Store &lt;&lt; #browser &gt;&gt; 'Store')</body></methods><methods><class-id>Refactory.Browser.PackageVersionFigure</class-id> <category>accessing</category><body package="RBStoreExtensions" selector="compareVersionTo:">compareVersionTo: aPundle 	#{Store.ComparisonBrowser} value comparePackage: self storeRecord		toPackage: aPundle</body></methods><methods><class-id>Refactory.Browser.BundleVersionFigure</class-id> <category>private</category><body package="RBStoreExtensions" selector="codeComponent">codeComponent	^#{Store.Registry} value bundleNamed: self storeRecord name</body><body package="RBStoreExtensions" selector="replicateTo:">replicateTo: aString 	Notice 		showNotice: (#Replicating &lt;&lt; #browser &gt;&gt; 'Replicating')		complete: 0		while: 			[(#{Refactory.StoreReplication.Replicator} value new)				connectTo: aString;				replicateSingleBundle: self model;				disconnect]		title: (#Store &lt;&lt; #browser &gt;&gt; 'Store')</body></methods><methods><class-id>Refactory.Browser.BundleVersionFigure</class-id> <category>accessing</category><body package="RBStoreExtensions" selector="compareVersionTo:">compareVersionTo: aPundle 	#{Store.BundleDifferenceBrowser} value compare: self storeRecord		with: aPundle</body></methods><methods><class-id>Refactory.Browser.PackageItemFigure</class-id> <category>accessing</category><body package="RBStoreExtensions" selector="package">package	^package</body><body package="RBStoreExtensions" selector="package:">package: aPackageModel	package := aPackageModel</body></methods><methods><class-id>Refactory.Browser.PackageItemFigure class</class-id> <category>instance creation</category><body package="RBStoreExtensions" selector="on:package:">on: aClassRecord package: aPackageModel 	^(self on: aClassRecord)		package: aPackageModel;		yourself</body></methods><methods><class-id>Refactory.Browser.ClassVersionFigure</class-id> <category>accessing</category><body package="RBStoreExtensions" selector="browse">browse	TabApplicationSystemBrowser openOnPackage: self package		classOrNameSpace: self model</body><body package="RBStoreExtensions" selector="compareVersionTo:">compareVersionTo: aClassRecord 	#{Store.ComparisonBrowser} value compareClass: self storeRecord		toClass: aClassRecord</body></methods><methods><class-id>Refactory.Browser.MethodVersionFigure</class-id> <category>accessing</category><body package="RBStoreExtensions" selector="browse">browse	TabApplicationSystemBrowser openOnPackage: self package		methods: (Array with: self model)</body><body package="RBStoreExtensions" selector="compareVersionTo:">compareVersionTo: aMethod 	(Differator newOn: self storeRecord sourceCode and: aMethod sourceCode) 		open</body></methods><methods><class-id>Refactory.HotDraw.Tool class</class-id> <category>tool states</category><body package="RBStoreExtensions" selector="versionInformationToolStates">versionInformationToolStates	"This method was automatically generated by the HotDraw ToolStateMachineEditor.	To edit this method, evaluate the comment below"	"| states transitions stateTable |	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Version Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 242 y: 51); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Update Information'; instVarAt: 3 put: '[:tool :event | tool drawing model versionInformationHolder value: (tool figureAtEvent: event) versionInformation]'; instVarAt: 4 put: (Core.Point x: 42 y: 139); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Clear Information'; instVarAt: 3 put: '[:tool :event | tool drawing model versionInformationHolder value: '''']'; instVarAt: 4 put: (Core.Point x: 24 y: 63); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 563 y: 96); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Compare Editions'; instVarAt: 3 put: '[:tool :event | | startFigure endFigure origin |origin := tool valueAt: #startPoint.tool drawing 	invalidateRectangle:		(Rectangle vertex: origin vertex: (tool valueAt: #lastPoint))	repairNow: true.startFigure := tool valueAt: #figure.endFigure := tool figureAtEvent: event.startFigure ~~ endFigure ifTrue: [startFigure compareVersionTo: endFigure model]]'; instVarAt: 4 put: (Core.Point x: 392 y: 479); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Mouse Press Compare'; instVarAt: 3 put: '[:tool :event | | startPoint |startPoint := tool cursorPointFor: event.tool 	valueAt: #figure put: (tool figureAtEvent: event);	valueAt: #startPoint put: startPoint;	valueAt: #lastPoint put: startPoint]'; instVarAt: 4 put: (Core.Point x: 409 y: 250); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Abort Compare'; instVarAt: 3 put: '[:tool :event | | origin |origin := tool valueAt: #startPoint.tool drawing 	invalidateRectangle:		(Rectangle vertex: origin vertex: (tool valueAt: #lastPoint))	repairNow: true]'; instVarAt: 4 put: (Core.Point x: 651 y: 338); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Mouse Compare'; instVarAt: 3 put: '[:tool :event | | currentPoint origin |origin := tool valueAt: #startPoint.tool drawing 	invalidateRectangle:		(Rectangle vertex: origin vertex: (tool valueAt: #lastPoint))	repairNow: true.currentPoint := tool cursorPointFor: event.(LineSegment from: currentPoint to: origin)	displayStrokedOn: tool graphicsContext.tool valueAt: #lastPoint put: currentPoint]'; instVarAt: 4 put: (Core.Point x: 333 y: 363); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Browse'; instVarAt: 3 put: '[:tool :event | (tool figureAtEvent: event) browse]'; instVarAt: 4 put: (Core.Point x: 41 y: 311); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).	stateTable := Dictionary new.	states do: [:each | stateTable at: each name put: each].	transitions := OrderedCollection new.	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Version Tool'); to: (stateTable at: 'Update Information'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #mouseMove; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.Browser.VersionFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 265.43 y: 80.5707); add: (Core.Point x: 150.195 y: 143.964); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Version Tool'); to: (stateTable at: 'Clear Information'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 241.915 y: 69.5427); add: (Core.Point x: 131.537 y: 76.3101); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Version Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #yellowButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.Browser.VersionFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 324.541 y: 62.9899); add: (Core.Point x: 562.311 y: 110.264); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Mouse Press Compare'); to: (stateTable at: 'Abort Compare'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 490.195 y: 280.607); add: (Core.Point x: 666.255 y: 340.395); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Version Tool'); to: (stateTable at: 'Mouse Press Compare'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.Browser.VersionFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 287.299 y: 82.8945); add: (Core.Point x: 453.078 y: 249.629); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Mouse Compare'); to: (stateTable at: 'Compare Editions'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonRelease; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.Browser.VersionFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 400.748 y: 394.919); add: (Core.Point x: 439.343 y: 478.161); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Mouse Compare'); to: (stateTable at: 'Abort Compare'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 403.384 y: 394.802); add: (Core.Point x: 655.286 y: 361.385); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Mouse Compare'); to: (stateTable at: 'Move Mouse Compare'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 332.332 y: 381.272); add: (Core.Point x: 274 y: 394); add: (Core.Point x: 283 y: 410); add: (Core.Point x: 354.489 y: 390.475); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Mouse Press Compare'); to: (stateTable at: 'Move Mouse Compare'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 478.62 y: 281.598); add: (Core.Point x: 436.549 y: 363.49); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Version Tool'); to: (stateTable at: 'Browse'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #doubleClick; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.Browser.VersionFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 275.523 y: 81.8984); add: (Core.Point x: 62.8048 y: 310.398); yourself); yourself).	ToolStateMachineEditor openWithStates: states connections: transitions"	Tool states at: 'Version Tool' put: (ToolState name: 'Version Tool' command: [:tool :event | ]).	Tool states at: 'Update Information' put: (EndToolState name: 'Update Information' command: [:tool :event | tool drawing model versionInformationHolder value: (tool figureAtEvent: event) versionInformation]).	Tool states at: 'Clear Information' put: (EndToolState name: 'Clear Information' command: [:tool :event | tool drawing model versionInformationHolder value: '']).	Tool states at: 'Compare Editions' put: (EndToolState name: 'Compare Editions' command: [:tool :event | | startFigure endFigure origin |origin := tool valueAt: #startPoint.tool drawing 	invalidateRectangle:		(Rectangle vertex: origin vertex: (tool valueAt: #lastPoint))	repairNow: true.startFigure := tool valueAt: #figure.endFigure := tool figureAtEvent: event.startFigure ~~ endFigure ifTrue: [startFigure compareVersionTo: endFigure model]]).	Tool states at: 'Mouse Press Compare' put: (ToolState name: 'Mouse Press Compare' command: [:tool :event | | startPoint |startPoint := tool cursorPointFor: event.tool 	valueAt: #figure put: (tool figureAtEvent: event);	valueAt: #startPoint put: startPoint;	valueAt: #lastPoint put: startPoint]).	Tool states at: 'Abort Compare' put: (EndToolState name: 'Abort Compare' command: [:tool :event | | origin |origin := tool valueAt: #startPoint.tool drawing 	invalidateRectangle:		(Rectangle vertex: origin vertex: (tool valueAt: #lastPoint))	repairNow: true]).	Tool states at: 'Move Mouse Compare' put: (ToolState name: 'Move Mouse Compare' command: [:tool :event | | currentPoint origin |origin := tool valueAt: #startPoint.tool drawing 	invalidateRectangle:		(Rectangle vertex: origin vertex: (tool valueAt: #lastPoint))	repairNow: true.currentPoint := tool cursorPointFor: event.(LineSegment from: currentPoint to: origin)	displayStrokedOn: tool graphicsContext.tool valueAt: #lastPoint put: currentPoint]).	Tool states at: 'Browse' put: (EndToolState name: 'Browse' command: [:tool :event | (tool figureAtEvent: event) browse]).	(Tool stateFor: 'Version Tool') yellowButtonPress: ((FigureTransitionTable new)  on: Refactory.Browser.VersionFigure goto: (Tool stateFor: 'Menu'); yourself).	(Tool stateFor: 'Version Tool') redButtonPress: ((FigureTransitionTable new)  on: Refactory.Browser.VersionFigure goto: (Tool stateFor: 'Mouse Press Compare'); yourself).	(Tool stateFor: 'Version Tool') mouseMove: ((FigureTransitionTable new)  on: Refactory.Browser.VersionFigure goto: (Tool stateFor: 'Update Information'); goto: (Tool stateFor: 'Clear Information'); yourself).	(Tool stateFor: 'Version Tool') doubleClick: ((FigureTransitionTable new)  on: Refactory.Browser.VersionFigure goto: (Tool stateFor: 'Browse'); yourself).	(Tool stateFor: 'Move Mouse Compare') redButtonRelease: ((FigureTransitionTable new)  on: Refactory.Browser.VersionFigure goto: (Tool stateFor: 'Compare Editions'); goto: (Tool stateFor: 'Abort Compare'); yourself).	(Tool stateFor: 'Move Mouse Compare') mouseMove: ((SimpleTransitionTable new) goto: (Tool stateFor: 'Move Mouse Compare'); yourself).	(Tool stateFor: 'Mouse Press Compare') redButtonRelease: ((SimpleTransitionTable new) goto: (Tool stateFor: 'Abort Compare'); yourself).	(Tool stateFor: 'Mouse Press Compare') mouseMove: ((SimpleTransitionTable new) goto: (Tool stateFor: 'Move Mouse Compare'); yourself).</body></methods><methods><class-id>Refactory.Browser.VersionCodeTool class</class-id> <category>interface specs</category><body package="RBStoreExtensions" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #DrawingEditor #defaultString: 'Drawing Editor' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1355 1080 ) 			#colors: #(#{UI.LookPreferences} ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #versionEditor 					#flags: 0 					#majorKey: #{Refactory.Browser.VersionDrawingEditor} 					#minorKey: #windowSpec 					#clientKey: #versionEditor ) ) ) )</body></methods><methods><class-id>Refactory.Browser.VersionDrawingEditor class</class-id> <category>interface specs</category><body package="RBStoreExtensions" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #DrawingEditor #defaultString: 'Drawing Editor' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1355 1080 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -28 1 ) 					#flags: 11 					#component: #drawing ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -28 1 0 1 0 1 ) 					#flags: 0 					#model: #versionInformationHolder 					#tabable: false 					#isReadOnly: true ) ) ) )</body></methods><initialize><class-id>Refactory.Browser.VersionCodeToolSelectionPolicy</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>DrawingEditor</name><environment>Refactory.HotDraw</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>buttons drawing </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Framework</category><attributes><package>HotDraw Framework</package></attributes></class><class><name>TextFigure</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.Figure</super><private>false</private><indexed-type>none</indexed-type><inst-vars>paragraph selection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Figures</category><attributes><package>HotDraw Framework</package></attributes></class><class><name>CodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel menu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>CodeToolSelectionPolicy</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tool Selection Policies</category><attributes><package>Browser-BrowserUI</package></attributes></class></st-source>