<?xml version="1.0"?><st-source><!-- Name: Browser-BrowserUINotice: Copyright © 2002-2005 Cincom Systems, Inc.  All Rights Reserved.Comment: Converted from parcel: RBBrowserUI  7DbIdentifier: bear73DbTrace: 53639DevelopmentPrerequisites: #(#(#any 'Browser-RefactoringUI' ''))PackageName: Browser-BrowserUIParcel: #('Browser-BrowserUI')ParcelName: Browser-BrowserUIPrerequisiteParcels: #(#('Browser-RefactoringUI' ''))PrintStringCache: (7.3.1 - 1.8,bobw)Version: 7.3.1Pre-Unload Block: 	[:t1 | Refactory.Browser.BrowserCodeTool preUnloadActionFor: t1.Refactory.Browser.CodeModel withAllSubclasses do: [:t2 | t2 defaultSelectionPolicies: #()]]Date: 5:52:10 pm April 10, 2005 --><time-stamp>From VisualWorks®, 7.3.1 of April 10, 2005 on April 10, 2005 at 5:52:10 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.Navigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>navigatorType cachedSelectors windowLabel </inst-vars><class-inst-vars>navigatorSpecBlocks </class-inst-vars><imports>			Store.*			</imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserNavigator</class-id><body>BrowserNavigator is the navigator for the RB. The navigator is the part of the browser that is displayed at the top of the browser and is responsible for selecting the classes and methods.Instance Variables:	cachedSelectors	&lt;Association key: CompiledMethod value: Collection&gt;	the symbols in our method	navigatorType	&lt;Symbol&gt;	#Package, #Parcel, or #Category -- what is our current view?Class Instance Variables:	navigatorSpecBlocks	&lt;Collection of: BlockClosure&gt;	a collection of blocks that return the symbol of the spec to open. The first block that returns a non-nil value is the one that is used.Shared Variables:	LastMoveMethodProtocol	&lt;Symbol&gt;	the last entered protocol for move method to protocol	NavigatorType	&lt;Symbol&gt;	#Category, #Parcel, or #Package, what should be the primary browser type</body></comment><class><name>Prerequisite</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type version </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.Prerequisite</class-id><body>Prerequisite is a helper object for the prerequisite tools. They are displayed in the prereq tool lists.Instance Variables:	name	&lt;String&gt;	name of the object	type	&lt;Symbol&gt;	type of prereq	version	&lt;String&gt;	version for the prereq</body></comment><class><name>ReferenceFinder</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>backlinks objectsLeft testBlock foundBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Support</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.ReferenceFinder</class-id><body>ReferenceFinder finds reference paths from the Root namespace to some object. This is used for finding objects that should have been garbage collected, but are still referenced.Instance Variables:	backlinks	&lt;SequenceableCollection of: Dictionary&gt;	a collection of links from the referencee to the referencer	foundBlock	&lt;BlockClosure&gt;	when a match is found execute this block with the path	objectsLeft	&lt;Collection&gt;	our todo list of objects	testBlock	&lt;BlockClosure&gt;	test if we have found the object we are looking for</body></comment><class><name>ClassDiagramView</name><environment>Refactory.Browser</environment><super>Graphics.CompositePart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classes navigator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Hierarchy Diagram</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.ClassDiagramView</class-id><body>ClassDiagramView is a VisualComponent that contains all the individual ClassDiagramClassView objects. It's mainly used for laying out the classes.Instance Variables:	classes	&lt;Collection of: Behavior&gt;	which classes are being displayed	navigator	&lt;BrowserNavigator&gt;	the navigator we're connected to</body></comment><class><name>CodeModelLockPolicy</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Support</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeModelLockPolicy</class-id><body>CodeModelLockPolicy is an abstract class. It defines the protocol that CodeModels use to check to see if it is locked. The implementation of this class is for a tool that is always unlocked.</body></comment><class><name>StateLockPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeModelLockPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>locked </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Support</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.StateLockPolicy</class-id><body>StateLockPolicy is a CodeModelLockPolicy that has an explicit locked/unlocked state. The (un)locked state can be set by using lock and unlock methods.Instance Variables:	locked	&lt;Boolean&gt;	contains true if the model is locked and shouldn't be updated</body></comment><class><name>VariableNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>variableClassList instanceVariableList variableEnvironment instanceVariableMenuHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.VariableNavigator</class-id><body>VariableNavigator is a special navigator that allows you to browse instance variable references. It is mainly used for Smalllint.Instance Variables:	instanceVariableList	&lt;SelectionInList&gt;	the list of instance variables for the selected class	instanceVariableMenuHolder	&lt;Menu&gt;	the menu for the instance variable list	variableClassList	&lt;SelectionInList&gt;	the list of classes	variableEnvironment	&lt;VariableEnvironment&gt;	the variable environment that contains the items we are viewing</body></comment><class><name>CodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel menu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeTool</class-id><body>CodeTool is an abstact class represents the tools that can appear when a user has selected an item (e.g., a class) using the navigator. These tools are dynamically switched depending on current selection.Instance Variables:	codeModel	&lt;CodeModel&gt; contains the CodeModel that the CodeTool is in	menu	&lt;Menu&gt;	our main menu</body></comment><class><name>CompareCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text1 text2 definition1 definition2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBDiffs</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CompareCodeTool</class-id><body>CompareCodeTool is a code tool allowing to compare two or more selected methods.Instance Variables:	definition1	&lt;ValueHolder on: RBMethodDefinition&gt;	holds selection for the left combobox	definition2	&lt;ValueHolder on: RBMethodDefinition&gt;	holds selection for the right combobox	text1	&lt;ValueHolder on: Text&gt;	holds source code for the left code pane	text2	&lt;ValueHolder on: Text&gt;	holds source code for the right code pane</body></comment><class><name>CodeComponentPropertiesTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>propertiesList informationHolder subcanvas inspectorSubcanvas originalInspectedProperties isViewingInspector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id><body>CodeComponentPropertiesTool is a code tool that is used to edit the properties of packages and parcels.Instance Variables:	informationHolder	&lt;ValueModel&gt;	the package information	inspectorSubcanvas	&lt;Inspector&gt;	the inspector used for package properties	propertiesList	&lt;SelectionInList&gt;	the list of properties	subcanvas	&lt;ApplicationModel&gt;	our subcanvas that displays the propertiesList selection	originalInspectedProperties	&lt;Dictionary&gt;	A copy of the properties dictionary passed to the inspectorSubcanvas, for comparison when applying	isVieweingInspector	&lt;Boolean&gt; Set to true when the inspector (on 'Other' properties) is being displayed.Shared Variables:	PropertiesList	&lt;OrderedCollection&gt;		the properties that can be edited and the method that builds the properties tool</body></comment><class><name>ClassDiagramTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view oldClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.ClassDiagramTool</class-id><body>ClassDiagramTool is the CodeTool for a graphical hierarchy diagram.Instance Variables:	oldClass	&lt;Behavior&gt;	the class for the diagram we are displaying	view	&lt;ClassDiagramView&gt;	the diagram view</body></comment><class><name>ClassDiagramController</name><environment>Refactory.Browser</environment><super>UI.ControllerWithMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Hierarchy Diagram</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.ClassDiagramController</class-id><body>ClassDiagramController is the controller for the ClassDiagramClassView. It both passes input down to its subwidgets, and processes input outside of its subwidgets.</body></comment><class><name>CodeModel</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>navigator tool lockPolicy state selectionPolicies isZoomed labelHolder packageLabelHolder parcelLabelHolder tabList labels </inst-vars><class-inst-vars>defaultSelectionPolicies showStatusBarHolder </class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeModel</class-id><body>CodeModel is the application that swaps the subcanvas (CodeTool) on the bottom of a browser. It is also responsible for updating the tool if it is not locked. The codeToolClass method is the method that returns the class of the code tool to create. You can change this method if you want to add your own code tool.Instance Variables:	labelHolder	&lt;ValueModel&gt;	the value holder for the left most label	labels	&lt;OrderedCollection&gt;	the display text of the tabList labels. Whenever they change we force the tab list to redraw itself.	lockPolicy	&lt;CodeModelLockPolicy&gt;	the locking policy for updating the tool	navigator	&lt;BrowserNavigator&gt;	contains the navigator connected to the code tool	packageLabelHolder	&lt;ValueModel&gt;	the value holder for the right most label	parcelLabelHolder	&lt;ValueModel&gt;	the value holder for the middle label	selectionPolicies	&lt;Collection of: CodeToolSelectionPolicy&gt;	the CodeToolSelectionPolicy's that we have installed	state	&lt;NavigatorState&gt;	the state returned by navigator that is used to update the navigator when this tool is unlocked 	tabList	&lt;SelectionInList&gt;	the tab list model that contains the valid selectionPolicies for the current selection	tool	&lt;CodeTool&gt;	the current code tool that is being displayed in the subcanvasClass Instance Variables:	defaultSelectionPolicies	&lt;OrderedCollection of: CodeToolSelectionPolicy&gt;	the default list of tabs for each code tool	showStatusBarHolder &lt;ValueHolder on: Boolean&gt;	should we display a status bar</body></comment><class><name>ClassDiagramClassView</name><environment>Refactory.Browser</environment><super>UI.CompositeView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>extent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Hierarchy Diagram</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.ClassDiagramClassView</class-id><body>ClassDiagramClassView is the view that displays a class in the class hierarchy diagram.Instance Variables:	extent	&lt;Point&gt;	our extent - based on the class name length</body></comment><class><name>CodeToolSelectionPolicy</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tool Selection Policies</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id><body>CodeToolSelectionPolicy determines what CodeTool should be installed whenever a selection is made in the navigator. If this tool isn't valid for a selection, then we return nil.Subclasses must implement the following messages:	accessing		name			our name to be displayed in the tab listInstance Variables:	codeModel	&lt;CodeModel&gt;	the code model we are attached to</body></comment><class><name>HierarchyDiagramSelectionPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeToolSelectionPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tool Selection Policies</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.HierarchyDiagramSelectionPolicy</class-id><body>HierarchyDiagramSelectionPolicy is the code tool selection policy for the class diagram tool.</body></comment><class><name>VisualSelectionPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeToolSelectionPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tool Selection Policies</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.VisualSelectionPolicy</class-id><body>VisualSelectionPolicy is a code tool selection policy for the "Visual" tab.Shared Variables:	ResourceTypes	&lt;Collection&gt;	the mapping of each type of resource to a class that edits resources of that type</body></comment><class><name>CodeComponentPropertiesSelectionPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeToolSelectionPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tool Selection Policies</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentPropertiesSelectionPolicy</class-id><body>CodeComponentPropertiesSelectionPolicy is the selection policy for the CodeComponentPropertiesTool.</body></comment><class><name>CompareCodeToolSelectionPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeToolSelectionPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBDiffs</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CompareCodeToolSelectionPolicy</class-id><body>CompareCodeToolSelectionPolicy is the code tool selection policy for installing the method comparison tool.</body></comment><class><name>OverrideSelectionPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeToolSelectionPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tool Selection Policies</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.OverrideSelectionPolicy</class-id><body>OverrideSelectionPolicy  is the selection policy for the OverrideCodeTool.</body></comment><class><name>CommentSelectionPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeToolSelectionPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hasComment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tool Selection Policies</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CommentSelectionPolicy</class-id><body>CommentSelectionPolicy is the code tool selection policy for comments.Instance Variables:	hasComment	&lt;Boolean&gt;	does our current object have a comment. Objects that don't have comments have a different look on the tab list.</body></comment><class><name>SourceSelectionPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeToolSelectionPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tool Selection Policies</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.SourceSelectionPolicy</class-id><body>SourceSelectionPolicy is the code tool selection policy for the "Source" tab.</body></comment><class><name>ClassDiagramModel</name><environment>Refactory.Browser</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>class instVarNames methods classMenuHolder instVarMenuHolder methodMenuHolder navigator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Hierarchy Diagram</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.ClassDiagramModel</class-id><body>ClassDiagramModel is the model for the ClassDiagramClassView.Instance Variables:	class	&lt;Behavior&gt;	the class we're for	classMenuHolder	&lt;ValueHolder on: Menu&gt;	the menu for the class	instVarMenuHolder	&lt;ValueHolder on: Menu&gt;	the menu for the inst var list	instVarNames	&lt;SelectionInList on: String&gt;	the list of inst var names	methodMenuHolder	&lt;ValueHolder on: Menu&gt;	the menu for the methods	methods	&lt;SelectionInList on: Symbol&gt;	the list of selectors	navigator	&lt;Navigator&gt;	the navigator we're associated with</body></comment><class><name>BrowserTextTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>savedText changed textHolder originalText parsedSource parseTree menuBarMenu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserTextTool</class-id><body>BrowserTextTool is an abstract class for all of the CodeTool's that have a textual display.Subclasses must implement the following messages:	accepting		accept:from:			defines the actions that is performed when you save the textInstance Variables:	changed	&lt;Boolean&gt;	has the text changed?	originalText	&lt;Text&gt;	the original text for the selection before anyone started to edit it	parsedSource	&lt;Text&gt;	the source of the method when we last parsed it	parseTree	&lt;RBProgramNode&gt;	the parse tree representing the parsedSource	savedText	&lt;Text&gt;	if the text has changed and we are switched out, then save the text here	textHolder	&lt;ValueHolder on: String&gt;	contains the original textShared Variables:	ParserTextLimit	&lt;Integer&gt;	the maximum size of text that should be parsed for menu options</body></comment><class><name>CodeComponentBlockTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>property blockArgumentCount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentBlockTool</class-id><body>CodeComponentBlockTool is a code tool that edits the property blocks of packages and parcels.Instance Variables:	blockArgumentCount	&lt;Integer&gt;	the number of arguments that the block should have	property	&lt;Symbol&gt;	the property block that we are editingShared Variables:	DefaultBlockStrings	&lt;Dictionary&gt;	the default text for each block	HelpStrings	&lt;Dictionary&gt;	the help text for each block</body></comment><class><name>BrowserCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modified initialLookPrefs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserCodeTool</class-id><body>BrowserCodeTool is the CodeTool that modifies methods.Instance Variables:	initialLookPrefs	&lt;LookPreferences | nil&gt;	the look preferences of the text widget before we set the text to be red	modified	&lt;Boolean&gt;	has the been changed since we initially displayed it?</body></comment><class><name>BrowserCommentTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserCommentTool</class-id><body>BrowserCommentTool is the CodeTool that edits class comments.</body></comment><class><name>BrowserDefinitionTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserDefinitionTool</class-id><body>BrowserDefinitionTool is the CodeTool that edits class/namespace/shared variable definitions.</body></comment><class><name>SharedVariableCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDefinitionTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.SharedVariableCodeTool</class-id><body>SharedVariableCodeTool is a code tools for shared variables. It adds an inspector to the normal BrowserDefinitionTool.</body></comment><class><name>OverrideCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sourceHolder overrideList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.OverrideCodeTool</class-id><body>OverrideCodeTool is a code tool that displays the overrides of a class/method. On the left it displays all previous overriden versions of the item. When one item is selected, it shows the original source on the right. Instance Variables:	overrideList	&lt;SelectionInList&gt;	the model for the list of overrides	sourceHolder	&lt;ValueModel&gt;	the model for the original source code</body></comment><class><name>VisualViewer</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.VisualViewer</class-id><body>VisualViewer is the abstract class for viewing visual components (e.g., menus, icons, etc.).Subclasses must implement the following messages:	private		editorClass			the editor for the visual component</body></comment><class><name>MenuViewer</name><environment>Refactory.Browser</environment><super>Refactory.Browser.VisualViewer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.MenuViewer</class-id><body>MenuViewer is a class to view menus graphically instead of textually. This is used when you are viewing a menu resource.Instance Variables:	selection	&lt;ValueHolder on: Symbol&gt;	contains the last selection from the menu</body></comment><class><name>IconViewer</name><environment>Refactory.Browser</environment><super>Refactory.Browser.VisualViewer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.IconViewer</class-id><body>IconViewer is a simple CodeTool that displayes images/icons. When a method for an icon is selected, this will display the icon instead of the text for the icon.</body></comment><class><name>CanvasViewer</name><environment>Refactory.Browser</environment><super>Refactory.Browser.VisualViewer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.CanvasViewer</class-id><body>CanvasViewer is a class to view canvases graphically instead of textually. This is used when you are viewing a canvas method.</body></comment><class><name>RefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>navigator tools currentBuffer policyClass dispatcher findHolder findList toolbarMenuHolder </inst-vars><class-inst-vars>showToolbarHolder </class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.RefactoringBrowser</class-id><body>RefactoringBrowser is the glue for the browser application. It's main responsibility is maintaining the buffers for the different code tools.Instance Variables:	currentBuffer	&lt;ValueHolder on: CodeModel&gt;	the current buffer that is being displayed by the browser. For multi-window applications, this value is not-updated.	dispatcher	&lt;RBActionDispatcher&gt;	the dispatcher for menu items	findHolder	&lt;ValueModel&gt;	the value holder for the find entry field	findList	&lt;ValueModel&gt;	the list of items in the find drop down list	navigator	&lt;BrowserNavigator&gt;	the navigator that displays the environment	policyClass	&lt;CodeModelLockPolicy class&gt;	the class of the lock policy for this browser (state or window)	tools	&lt;SequenceableCollection of: CodeModel&gt;	the buffers for all the different code toolsClass Instance Variables:	showToolbarHolder	&lt;ValueHolder&gt;	Should the browsers show a toolbar at the top?Shared Variables:	FindList	&lt;Collection&gt;	the list of items that have recently been entered into the Find list</body></comment><class><name>DeploymentPrerequisitesTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>allPackagesList versionHolder entryPrerequisiteHolder prerequisitesList isChanged selectedPrerequisiteHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.DeploymentPrerequisitesTool</class-id><body>DeploymentPrerequisitesTool is a code tool that edits deployment prereqs.Instance Variables:	allPackagesList	&lt;MultiSelectionInList&gt;	list of all packages/parcels	entryPrerequisiteHolder	&lt;ValueModel&gt;	the entry field that allows a user to entry a parcel name that isn't in the current system	isChanged	&lt;Boolean&gt;	have our prereqs changed?	prerequisitesList	&lt;MultiSelectionInList&gt;	list of our prereqs	selectedPrerequisiteHolder	&lt;ValueModel&gt;	the selected prereq	versionHolder	&lt;ValueHolder&gt;	the value holder for entering the version number</body></comment><class><name>DevelopmentPrerequisitesTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.DeploymentPrerequisitesTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typeHolder typeList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.DevelopmentPrerequisitesTool</class-id><body>DevelopmentPrerequisitesTool is a code tool for editing development prereqs.Instance Variables:	typeHolder	&lt;ValueHolder&gt;	what type of prereq is this (package, parcel, any, bundle)	typeList	&lt;ValueModel&gt;	a list of the types of prereqs</body></comment><shared-variable><name>PropertiesList</name><environment>Refactory.Browser.CodeComponentPropertiesTool</environment><private>false</private><constant>false</constant><category>variables</category><initializer>OrderedCollection new	add: #Information &lt;&lt; #browser &gt;&gt; 'Information' -&gt; #buildInformation;	add: #DeploymentPrerequisites &lt;&lt; #browser &gt;&gt; 'Deployment Prerequisites' -&gt; #buildDeploymentPrerequisites;	add: #DevelopmentPrerequisites &lt;&lt; #browser &gt;&gt; 'Development Prerequisites' -&gt; #buildDevelopmentPrerequisites;	add: #WarningSuppressionAction &lt;&lt; #browser &gt;&gt; 'Warning Suppression Action' -&gt; #buildWarningSuppressionAction;	add: #PrerequisiteVersionSelectionAction &lt;&lt; #browser &gt;&gt; 'Prerequisite Version Selection Action' -&gt; #buildPrerequisiteVersionSelectionAction;	add: #PreReadAction &lt;&lt; #browser &gt;&gt; 'Pre-read Action' -&gt; #buildPreReadAction;	add: #PreLoadAction &lt;&lt; #browser &gt;&gt; 'Pre-load Action' -&gt; #buildPreLoadAction;	add: #PostLoadAction &lt;&lt; #browser &gt;&gt; 'Post-load Action' -&gt; #buildPostLoadAction;	add: #PreUnloadAction &lt;&lt; #browser &gt;&gt; 'Pre-unload Action' -&gt; #buildPreUnloadAction;	add: #PostUnloadAction &lt;&lt; #browser &gt;&gt; 'Post-unload Action' -&gt; #buildPostUnloadAction;	add: #PreSaveAction &lt;&lt; #browser &gt;&gt; 'Pre-save Action' -&gt; #buildPreSaveAction;	add: #OtherProperties &lt;&lt; #browser &gt;&gt; 'Other Properties' -&gt; #buildInspector;	yourself</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>ResourceTypes</name><environment>Refactory.Browser.VisualSelectionPolicy</environment><private>false</private><constant>false</constant><category>types</category><initializer>		Dictionary new			at: #image put: IconViewer;			at: #menu put: MenuViewer;			at: #canvas put: CanvasViewer;			yourself</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>NavigatorType</name><environment>Refactory.Browser.BrowserNavigator</environment><private>false</private><constant>false</constant><category>variables</category><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>LastMoveMethodProtocol</name><environment>Refactory.Browser.BrowserNavigator</environment><private>false</private><constant>false</constant><category>variables</category><initializer>''</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>ParserTextLimit</name><environment>Refactory.Browser.BrowserTextTool</environment><private>false</private><constant>false</constant><category>variables</category><initializer>10000</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>HelpStrings</name><environment>Refactory.Browser.CodeComponentBlockTool</environment><private>false</private><constant>false</constant><category>variables</category><initializer>Dictionary new	at: #warningSuppressionBlock put: 'Warning Suppression Action';	at: #versionSelectionBlock put: 'Prerequisite Version Action';	at: #preReadBlock put: 'Pre-read Action';	at: #postLoadBlock put: 'Post-load Action';	at: #postUnloadBlock put: 'Post-unload Action';	at: #preLoadBlock put: 'Pre-load Action';	at: #preSaveBlock put: 'Pre-save Action';	at: #preUnloadBlock put: 'Pre-unload Action';	yourself</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>DefaultBlockStrings</name><environment>Refactory.Browser.CodeComponentBlockTool</environment><private>false</private><constant>false</constant><category>variables</category><initializer>| packageBlock |packageBlock := '[:package | ]'.Dictionary new	at: #warningSuppressionBlock		put: '[:prerequisiteName |\booleanExpression]' withCRs;	at: #versionSelectionBlock		put: '[:parcelName :versionString :requiredVersionString |\booleanExpression]' withCRs;	at: #preReadBlock		put: '[booleanExpression]';	at: #postLoadBlock put: packageBlock;	at: #postUnloadBlock put: '[]';	at: #preLoadBlock put: packageBlock;	at: #preSaveBlock put: packageBlock;	at: #preUnloadBlock put: packageBlock;	yourself</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><shared-variable><name>FindList</name><environment>Refactory.Browser.RefactoringBrowser</environment><private>false</private><constant>false</constant><category>variables</category><initializer>List with: 'Object' with: '#printOn:'</initializer><attributes><package>Browser-BrowserUI</package></attributes></shared-variable><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-parcels</category><body package="Browser-BrowserUI" selector="browseChangedMethods">browseChangedMethods	| extensions fileIndex sfm |	(self parcel propertyAt: #hideSource ifAbsent: [false]) 		ifTrue: 			[^self warn: (#ParcelSourceIsHidden &lt;&lt; #browser &gt;&gt; 'Parcel source is hidden. Cannot determine changed methods')].	extensions := SortedCollection new.	fileIndex := self parcel propertyAt: #sourceIndex.	sfm := SourceFileManager default.	self parcel methodsDo: 			[:cm | 			| def |			(fileIndex ~= (sfm fileIndexFor: cm sourcePointer) 				and: [(def := cm definition) notNil]) ifTrue: [extensions add: def]].	self		browseEnvironment:			((SelectorEnvironment onMethods: extensions)				label: ((#ChangedMethodsIn1s &lt;&lt; #browser &gt;&gt; 'Changed methods in &lt;1s&gt;')					expandMacrosWith: self parcel name))		ifEmptyDisplay: #NoChangedMethods &lt;&lt; #browser &gt;&gt; 'No changed methods'</body><body package="Browser-BrowserUI" selector="browseExclusiveMethodImports">browseExclusiveMethodImports	self browseEnvironment:		((SelectorEnvironment onMethods: self parcel externalMethodsUsedExclusively)			label: ((#MethodsUsedBy1sButNotIn2s &lt;&lt; #browser &gt;&gt; 'Methods used only by &lt;1s&gt; but not in &lt;2s&gt;')				expandMacrosWith: self parcel name				with: self parcel name))</body><body package="Browser-BrowserUI" selector="browseExtensionMethods">browseExtensionMethods	| env |	env := SelectorEnvironment new.	self parcel 		extensionsDo: [:aClass :aSelector | env addClass: aClass selector: aSelector].	self browseEnvironment:		(env			label: ((#ExtensionMethodsIn1s &lt;&lt; #browser &gt;&gt; 'Extension methods in &lt;1s&gt;')				expandMacrosWith: self parcel name))</body><body package="Browser-BrowserUI" selector="browseExtensionsOfDefinedClasses">browseExtensionsOfDefinedClasses	self showWaitCursorWhile: 			[| env |			env := SelectorEnvironment new.			self parcel danglingReferencesIfUnloadedDo: 					[:object :class | 					object isSymbol ifTrue: [env addClass: class selector: object]].			self browseEnvironment:				(env					label: ((#ExtensionsOfDefinedClassesIn1s &lt;&lt; #browser &gt;&gt; 'Extensions of defined classes in &lt;1s&gt;')						expandMacrosWith: self parcel name))]</body><body package="Browser-BrowserUI" selector="browseReferencesToDefinedClasses">browseReferencesToDefinedClasses	self showWaitCursorWhile: 			[| env |			env := SelectorEnvironment new.			self parcel danglingReferencesIfUnloadedDo: 					[:object :class | 					| def |					(object isSymbol or: [object isBehavior]) 						ifFalse: 							[def := object definition.							env								addClass: def implementingClass selector: def selector;								addSearchString: class name asString]].			self browseEnvironment:				(env label: ((#ReferencesToDefinedClassesIn1s &lt;&lt; #browser &gt;&gt; 'References to defined classes in &lt;1s&gt;')					expandMacrosWith: self parcel name))]</body><body package="Browser-BrowserUI" selector="browseSubclassesOfDefinedClasses">browseSubclassesOfDefinedClasses	self showWaitCursorWhile: 			[| env |			env := ClassEnvironment new.			self parcel danglingReferencesIfUnloadedDo: 					[:object :class | 					object isBehavior ifTrue: [env addClass: object]].			self browseEnvironment:				((env forCategories: env categories)					label: ((#SubclassesOfDefinedClassesIn1s &lt;&lt; #browser &gt;&gt; 'Subclasses of defined classes in &lt;1s&gt;')						expandMacrosWith: self parcel name))]</body><body package="Browser-BrowserUI" selector="browseUnparceledMethodsOnDefinedClasses">browseUnparceledMethodsOnDefinedClasses	self browseEnvironment:		((SelectorEnvironment 			onMethods: self parcel unparceledMethodsOfDefinedClasses)			label: ((#UnparcelledMethodsInClassesDefinedIn1s &lt;&lt; #browser &gt;&gt; 'Unparcelled methods in classes defined in &lt;1s&gt;')				expandMacrosWith: self parcel name))</body><body package="Browser-BrowserUI" selector="chooseParcel:">chooseParcel: includeUnparceled 	| parcels |	self changeRequest ifFalse: [^nil].	parcels := includeUnparceled 				ifTrue: [OrderedCollection with: UnparceledParcel new]				ifFalse: [OrderedCollection new].	parcels addAll: Parcel parcels.	parcels := parcels asSortedCollection: [:a :b | a name &lt; b name].	^(IncrementalSearchDialog			forSelectionFrom: parcels			filterBlock: [:entry :parcel | entry, '*' match: parcel name])		firstLabel: #FilterC &lt;&lt; #browser &gt;&gt; 'Filter:';		secondLabel: (#SelectParcelToMoveToC &lt;&lt; #browser &gt;&gt; 'Select parcel to move to:');		iconBlock: 			[:parcel | (parcel respondsTo: #toolListIcon)				ifTrue: [parcel toolListIcon]				ifFalse: [nil]];		select</body><body package="Browser-BrowserUI" selector="moveCategories:toParcel:">moveCategories: aSymbolCollection toParcel: aParcel 	| allNames |	allNames := Set new.	aSymbolCollection do: 			[:each | 			allNames 				addAll: ((self allReferencesInNameSpaces: Root withAllNameSpaces						andCategory: each) collect: [:ref | ref fullName])].	self moveObjectsNamed: allNames toParcel: aParcel</body><body package="Browser-BrowserUI" selector="moveCategoryToParcel">moveCategoryToParcel	| parcel |	self changeRequest ifFalse: [^self].	parcel := self chooseParcel: true.	parcel isNil ifTrue: [^self].	self moveCategories: self categories toParcel: parcel</body><body package="Browser-BrowserUI" selector="moveCompleteObjectToParcel">moveCompleteObjectToParcel	| parcel |	self changeRequest ifFalse: [^self].	parcel := self chooseParcel: true.	parcel isNil ifTrue: [^self].	^self moveObjectsNamed: self objectNames toParcel: parcel</body><body package="Browser-BrowserUI" selector="moveDefinitions:toParcel:">moveDefinitions: definitionCollection toParcel: aParcel 	| changes |	changes := CompositeRefactoryChange 				named: (#MoveMethodssharedVariablesToParcel &lt;&lt; #browser &gt;&gt; 'Move methods/shared variables to parcel').	definitionCollection do: 			[:each | 			each isForSharedVariable 				ifTrue: 					[changes 						moveSharedVariable: each variableName						in: each classOrNameSpace						toParcel: aParcel]				ifFalse: 					[changes 						moveSelector: each selector						in: each implementingClass						toParcel: aParcel]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveEntireClass:toParcel:usingChanges:">moveEntireClass: aClass toParcel: aParcel usingChanges: aCompositeRefactoryChange 	aCompositeRefactoryChange moveClassDefinition: aClass toParcel: aParcel.	aClass selectors do: 			[:each | 			aCompositeRefactoryChange 				moveSelector: each				in: aClass				toParcel: aParcel].	aClass class selectors do: 			[:each | 			aCompositeRefactoryChange 				moveSelector: each				in: aClass class				toParcel: aParcel].	aClass classPool keys do: 			[:each | 			aCompositeRefactoryChange 				moveSharedVariable: each				in: aClass				toParcel: aParcel]</body><body package="Browser-BrowserUI" selector="moveObjectDefinitionToParcel">moveObjectDefinitionToParcel	| parcel changes |	self changeRequest ifFalse: [^self].	parcel := self chooseParcel: true.	parcel isNil ifTrue: [^self].	changes := CompositeRefactoryChange named: (#MoveDefinitionsToParcel &lt;&lt; #browser &gt;&gt; 'Move definitions to parcel').	self classesAndNameSpaces do: 			[:each | 			each isBehavior 				ifTrue: [changes moveClassDefinition: each toParcel: parcel]				ifFalse: [changes moveNameSpace: each toParcel: parcel]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveObjects:in:toParcel:">moveObjects: aNavigatorState in: codeComponents toParcel: aParcel 	| changes |	changes := CompositeRefactoryChange named: (#MoveObjectsToParcel &lt;&lt; #browser &gt;&gt; 'Move objects to parcel').	self 		codeIn: aNavigatorState objectNames		codeComponents: codeComponents		sharedVariablesDo: 			[:sv | 			changes 				moveSharedVariable: sv simpleName				in: sv environment				toParcel: aParcel]		nameSpacesDo: [:ns | changes moveNameSpace: ns toParcel: aParcel]		definedClassesDo: [:cls | changes moveClassDefinition: cls toParcel: aParcel]		methodsDo: 			[:cls :sel | 			changes 				moveSelector: sel				in: cls				toParcel: aParcel].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveObjectsIn:toParcel:">moveObjectsIn: aNavigatorState toParcel: aParcel 	| codeComponents |	codeComponents := aNavigatorState parcels isEmpty 				ifTrue: [aNavigatorState packages]				ifFalse: [aNavigatorState parcels].	codeComponents notEmpty 		ifTrue: 			[^self 				moveObjects: aNavigatorState				in: codeComponents				toParcel: aParcel].	^self moveObjectsNamed: aNavigatorState objectNames toParcel: aParcel</body><body package="Browser-BrowserUI" selector="moveObjectsNamed:toParcel:">moveObjectsNamed: nameCollection toParcel: aParcel 	| changes |	changes := CompositeRefactoryChange named: (#MoveObjectsToParcel &lt;&lt; #browser &gt;&gt; 'Move objects to parcel').	nameCollection do: 			[:each | 			| binding |			binding := each asQualifiedReference bindingOrNil.			binding notNil 				ifTrue: 					[binding isForClass 						ifTrue: 							[self 								moveEntireClass: binding value								toParcel: aParcel								usingChanges: changes]						ifFalse: [changes moveNameSpace: binding value toParcel: aParcel]]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveObjectToParcel">moveObjectToParcel	| parcel |	self changeRequest ifFalse: [^self].	parcel := self chooseParcel: true.	parcel isNil ifTrue: [^self].	^self moveObjectsIn: state toParcel: parcel</body><body package="Browser-BrowserUI" selector="moveProtocolToParcel">moveProtocolToParcel	| parcel |	self changeRequest ifFalse: [^self].	parcel := self chooseParcel: true.	parcel isNil ifTrue: [^self].	self moveDefinitions: state allDefinitions toParcel: parcel</body><body package="Browser-BrowserUI" selector="openParcelProperties">openParcelProperties	PackagePropertiesDialog on: self parcel</body><body package="Browser-BrowserUI" selector="overrideDefinitionsInParcel">overrideDefinitionsInParcel	| parcel changes |	self changeRequest ifFalse: [^self].	parcel := self chooseParcel: false.	parcel isNil ifTrue: [^self].	changes := CompositeRefactoryChange 				named: (#OverrideMethodsSharedsInParcel &lt;&lt; #browser &gt;&gt; 'Override methods/shared variables in parcel').	self definitions do: 			[:each | 			changes addChange: (each isForSharedVariable 						ifTrue: 							[AddSharedVariableToParcelChange objectName: each fullName parcel: parcel]						ifFalse: 							[AddMethodToParcelChange 								class: each implementingClass								selector: each selector								parcel: parcel]).			changes addChange: (AddOverrideChange for: each asOverride)].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="overrideObjectInParcel">overrideObjectInParcel	| parcel changes |	self changeRequest ifFalse: [^self].	parcel := self chooseParcel: false.	parcel isNil ifTrue: [^self].	changes := CompositeRefactoryChange named: (#OverrideObjectsInParcel &lt;&lt; #browser &gt;&gt; 'Override objects in parcel').	self classesAndNameSpaces do: 			[:each | 			| override |			override := Override forClassOrNameSpace: each.			changes 				addChange: ((each isBehavior 						ifTrue: [AddClassDefinitionToParcelChange]						ifFalse: [AddNameSpaceToParcelChange]) objectName: each fullName							parcel: parcel).			changes addChange: (AddOverrideChange for: override)].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="parcelAddChanges">parcelAddChanges	self changeRequest ifFalse: [^self].	"self saveParcelsForUndo."	self parcel addChangeSet: ChangeSet current.	self refreshLists</body><body package="Browser-BrowserUI" selector="parcelAddToChanges">parcelAddToChanges	self parcel cleanse.	ChangeSet current addChangeSet: self parcel</body><body package="Browser-BrowserUI" selector="parcelCreateParcel">parcelCreateParcel	| newName currentParcel newState |	self changeRequest ifFalse: [^self].	newName := self request: (#EnterNameForTheNewParcel &lt;&lt; #browser &gt;&gt; 'Enter name for the new parcel').	newName isEmpty ifTrue: [^self].	newName := Parcel normalizedNameFor: newName.	(Parcel parcelNamed: newName) notNil 		ifTrue: 			[self warn: (#AParcelWithThisNameAlreadyExists &lt;&lt; #browser &gt;&gt; 'A parcel with this name already exists').			^self].	currentParcel := Parcel createParcelNamed: newName.	currentParcel isNil ifTrue: [^self].	newState := self getState.	newState parcels: (Array with: currentParcel).	self updateWithState: newState</body><body package="Browser-BrowserUI" selector="parcelCreateRemoveScript">parcelCreateRemoveScript	| fileName stream |	fileName := Dialog requestNewFileName: (#SaveRemoveScriptToFileNamed &lt;&lt; #browser &gt;&gt; 'Save remove script to file named?')				default: ((#x1srm &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;.rm')			expandMacrosWith: self parcel name asString).	fileName isEmpty ifTrue: [^self].	stream := fileName asFilename writeStream.	[self parcel writeRemovalScriptOn: stream] ensure: [stream close]</body><body package="Browser-BrowserUI" selector="parcelDiscardParcel">parcelDiscardParcel	self changeRequest ifFalse: [^self].	(self confirm: (#DiscardButNotUnloadParcelQ &lt;&lt; #browser &gt;&gt; 'Really discard (but not unload) the parcel?')) 		ifFalse: [^self].	Parcel destroyParcelNamed: self parcel name.	self refreshLists</body><body package="Browser-BrowserUI" selector="parcelEmptyParcel">parcelEmptyParcel	self changeRequest ifFalse: [^self].	self parcel uiForEmpty ifTrue: [self refreshLists]</body><body package="Browser-BrowserUI" selector="parcelFileIn">parcelFileIn	| fileName |	self changeRequest ifFalse: [^self].	fileName := Dialog 				requestFileName: (#FileInFromFileNamed &lt;&lt; #browser &gt;&gt; 'File in from file named')				default: '*.st'				version: #mustBeOld				ifFail: [''].	fileName isEmpty ifTrue: [^self].	Notice 		show: ((#FilingIntoFromn1s &lt;&lt; #browser &gt;&gt; 'Filing Into From&lt;n&gt;&lt;1s&gt;')			expandMacrosWith: fileName asString) 		while: [self parcel fileIntoFrom: fileName].	self refreshLists</body><body package="Browser-BrowserUI" selector="parcelFileoutParcel">parcelFileoutParcel	self changeRequest ifFalse: [^self].	self parcel fileOutAsFor: nil</body><body package="Browser-BrowserUI" selector="parcelLoadParcel">parcelLoadParcel	self changeRequest ifFalse: [^self].	Parcel loadParcelFor: nil.	self refreshLists</body><body package="Browser-BrowserUI" selector="parcelRemoveChanges">parcelRemoveChanges	self changeRequest ifFalse: [^self].	"self saveParcelsForUndo."	self parcel removeChangeSet: ChangeSet current.	self refreshLists</body><body package="Browser-BrowserUI" selector="parcelRemoveFromChanges">parcelRemoveFromChanges	self parcel cleanse.	ChangeSet current removeChangeSet: self parcel</body><body package="Browser-BrowserUI" selector="parcelRemoveParcel">parcelRemoveParcel	self changeRequest ifFalse: [^self].	(self confirm: (#UnloadAndRemoveParcelCodeQ &lt;&lt; #browser &gt;&gt; 'Really unload (and remove) the parcel''s code?')) 		ifTrue: 			[self showWaitCursorWhile: 					[self parcel hasDanglingReferencesIfUnloaded 						ifTrue: 							[(self confirm: ((#x1sHasDanglingRefsRemoveQ &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; has dangling references.&lt;n&gt;Do you really want to remove the parcel''s code?')			expandMacrosWith: self parcel name)) 								ifFalse: [^self]].					(Parcel removeParcelNamed: self parcel name) 						ifTrue: [self postUnloadParcel]]].	self refreshLists</body><body package="Browser-BrowserUI" selector="parcelRenameParcel">parcelRenameParcel	self changeRequest ifFalse: [^self].	self parcel uiForRename ifTrue: [self refreshLists]</body><body package="Browser-BrowserUI" selector="parcelSaveParcel">parcelSaveParcel	self changeRequest ifFalse: [^self].	self parcel saveParcelDialogFor: nil.	self refreshLists</body><body package="Browser-BrowserUI" selector="parcelUnloadParcel">parcelUnloadParcel	| parcel |	self changeRequest ifFalse: [^self].	parcel := self parcel.	parcel isNil ifTrue: [^self].	(self confirm: (#UnloadAndDiscardParcelCodeQ &lt;&lt; #browser &gt;&gt; 'Really unload (and discard) the parcel''s code?')) 		ifTrue: 			[self showWaitCursorWhile: 					[parcel hasDanglingReferencesIfUnloaded 						ifTrue: 							[(self confirm: ((#x1sHasDanglingRefsUnloadQ &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; has dangling references.&lt;n&gt;Do you really want to unload the parcel''s code?')			expandMacrosWith: parcel name)) 								ifFalse: [^self]].					(Parcel unloadParcelNamed: parcel name) ifTrue: [self postUnloadParcel]]].	self refreshLists</body><body package="Browser-BrowserUI" selector="postUnloadParcel">postUnloadParcel	(self confirm: (#RemoveEmptyCategoriesAndPurgeQ &lt;&lt; #browser &gt;&gt; 'Remove empty categories and purge Undeclared?')) 		ifTrue: 			[Cursor execute showWhile: 					[Root allNameSpaces do: [:ns | ns organization removeEmptyCategories].					ClassOrganizer allInstancesDo: [:clo | clo removeEmptyCategories].					Undeclared purgeUnusedBindings]]</body><body package="Browser-BrowserUI" selector="spawnParcel">spawnParcel	self openBrowserOnEnvironment: (self environment forParcels: self parcels)</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>browsing</category><body package="Browser-BrowserUI" selector="browseGlobalImplementors">browseGlobalImplementors	self browseGlobalImplementorsOf: self selector</body><body package="Browser-BrowserUI" selector="browseGlobalImplementorsOf:">browseGlobalImplementorsOf: aSelector 	self showWaitCursorWhile: 		[self 			browseEnvironment:				(BrowserEnvironment new implementorsOf: aSelector)]</body><body package="Browser-BrowserUI" selector="browseGlobalInstVarReadersTo:in:">browseGlobalInstVarReadersTo: instVar in: aClass 	self showWaitCursorWhile: 		[self browseEnvironment:			(BrowserEnvironment new instVarReadersTo: instVar in: aClass)]</body><body package="Browser-BrowserUI" selector="browseGlobalInstVarRefsTo:in:">browseGlobalInstVarRefsTo: instVar in: aClass 	self showWaitCursorWhile: 		[self			browseEnvironment:				(BrowserEnvironment new instVarRefsTo: instVar in: aClass)]</body><body package="Browser-BrowserUI" selector="browseGlobalInstVarWritersTo:in:">browseGlobalInstVarWritersTo: instVar in: aClass 	self showWaitCursorWhile: 		[self browseEnvironment:			(BrowserEnvironment new instVarWritersTo: instVar in: aClass)]</body><body package="Browser-BrowserUI" selector="browseGlobalReferencesTo:">browseGlobalReferencesTo: aLiteral 	self showWaitCursorWhile: 		[self browseEnvironment: (BrowserEnvironment new referencesTo: aLiteral)]</body><body package="Browser-BrowserUI" selector="browseGlobalSenders">browseGlobalSenders	self browseGlobalReferencesTo: self selector</body><body package="Browser-BrowserUI" selector="browseHierarchyImplementors">browseHierarchyImplementors	self browseHierarchyImplementorsOf: self selector</body><body package="Browser-BrowserUI" selector="browseHierarchyImplementorsOf:">browseHierarchyImplementorsOf: aSelector 	self showWaitCursorWhile: 		[self browseEnvironment:			((self environmentForHierarchy: self nonMetaClass) 				implementorsOf: aSelector)]</body><body package="Browser-BrowserUI" selector="browseHierarchyReferencesTo:">browseHierarchyReferencesTo: aLiteral 	self showWaitCursorWhile: 		[self browseEnvironment:			((self environmentForHierarchy: self nonMetaClass) 				referencesTo: aLiteral)]</body><body package="Browser-BrowserUI" selector="browseHierarchySenders">browseHierarchySenders	self browseHierarchyReferencesTo: self selector</body><body package="Browser-BrowserUI" selector="browseImplementorsOf:">browseImplementorsOf: aSelector 	self showWaitCursorWhile: 		[self browseEnvironment:			(self environment implementorsOf: aSelector)]</body><body package="Browser-BrowserUI" selector="browseInstVarReadersTo:in:">browseInstVarReadersTo: instVar in: aClass 	self showWaitCursorWhile: 		[self browseEnvironment:			(self environment instVarReadersTo: instVar in: aClass)]</body><body package="Browser-BrowserUI" selector="browseInstVarRefsTo:in:">browseInstVarRefsTo: instVar in: aClass 	self showWaitCursorWhile: 		[self			browseEnvironment: 				(self environment instVarRefsTo: instVar in: aClass)]</body><body package="Browser-BrowserUI" selector="browseInstVarWritersTo:in:">browseInstVarWritersTo: instVar in: aClass 	self showWaitCursorWhile: 		[self browseEnvironment:			(self environment instVarWritersTo: instVar in: aClass)]</body><body package="Browser-BrowserUI" selector="browseLocalImplementors">browseLocalImplementors	self browseLocalImplementorsOf: self selector</body><body package="Browser-BrowserUI" selector="browseLocalImplementorsOf:">browseLocalImplementorsOf: aSelector 	self showWaitCursorWhile: 		[self browseEnvironment:			(self environment implementorsOf: aSelector)]</body><body package="Browser-BrowserUI" selector="browseLocalReferencesTo:">browseLocalReferencesTo: aLiteral 	self showWaitCursorWhile:		[self browseEnvironment:			(self environment referencesTo: aLiteral)]</body><body package="Browser-BrowserUI" selector="browseLocalSenders">browseLocalSenders	self browseLocalReferencesTo: self selector</body><body package="Browser-BrowserUI" selector="browseReferencesTo:">browseReferencesTo: aLiteral 	self showWaitCursorWhile:		[self browseEnvironment:			(self environment referencesTo: aLiteral)]</body><body package="Browser-BrowserUI" selector="environmentForHierarchy:">environmentForHierarchy: aClass 	| classes |	classes := Set withAll: aClass withAllSuperclasses.	classes addAll: aClass class withAllSuperclasses.	classes addAll: aClass allSubclasses.	classes addAll: aClass class allSubclasses.	^ClassEnvironment onEnvironment: BrowserEnvironment new classes: classes</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private</category><body package="Browser-BrowserUI" selector="areAllSelectorsVisibleIn:">areAllSelectorsVisibleIn: protocolSymbol	| selectors parcels pundles |	self showOnlyFiltered ifFalse: [^true].	selectors := BrowserEnvironment new selectorsFor: protocolSymbol in: self selectedClass.	(parcels := self parcels) notEmpty ifTrue: 		[^selectors allSatisfy: 			[:each |			parcels anySatisfy:				[:parcel |				parcel definesSelector: each forClass: self selectedClass]]].	(pundles := self pundles) isEmpty ifTrue: [^true].	^selectors allSatisfy:		[:each |		pundles anySatisfy: 			[:pundle | 			pundle 				includesSelector: each				className: self selectedClass instanceBehavior absoluteName				meta: self selectedClass isMeta]]</body><body package="Browser-BrowserUI" selector="browseEnvironment:">browseEnvironment: aBrowserEnvironment	self		browseEnvironment: aBrowserEnvironment		ifEmptyDisplay: #NoResultsToBrowse &lt;&lt; #browser &gt;&gt; 'No results to browse'</body><body package="Browser-BrowserUI" selector="browseEnvironment:ifEmptyDisplay:">browseEnvironment: aBrowserEnvironment ifEmptyDisplay: aMessage	aBrowserEnvironment isEmpty		ifTrue: [Dialog warn: aMessage]		ifFalse: [aBrowserEnvironment openEditor]</body><body package="Browser-BrowserUI" selector="checkProtocolFor:in:">checkProtocolFor: aSelector in: aClass 	| protocol |	protocol := aClass organization categoryOfElement: aSelector.	^protocol isNil 		ifTrue: 			[(self confirm: ((#x1sIsNotClassifiedClassifyQ &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; is not classified under a protocol.&lt;n&gt;Do you want to classify it?')			expandMacrosWith: aSelector asString)) 				ifTrue: 					[protocol := self 								request: ((#EnterAProtocolNameFor1sC &lt;&lt; #browser &gt;&gt; 'Enter a protocol name for &lt;1s&gt;:')			expandMacrosWith: (aSelector asText emphasizeAllWith: #(#italic))).					protocol notEmpty 						ifTrue: 							[self 								moveMethods: (Array with: aSelector)								to: protocol								in: aClass]].			true]		ifFalse: [false]</body><body package="Browser-BrowserUI" selector="checkProtocolMatchFor:in:">checkProtocolMatchFor: aSelector in: aClass 	| protocol superClass superProtocol patchClass |	protocol := aClass organization categoryOfElement: aSelector.	protocol isNil ifTrue: [^false].	superClass := aClass superclass whichClassIncludesSelector: aSelector.	superClass isNil ifTrue: [^false].	superProtocol := superClass organization categoryOfElement: aSelector.	superProtocol == protocol ifTrue: [^false].	superProtocol isNil ifTrue: [^false].	patchClass := Dialog 				choose: ((#x1sIsClassifiedUnder2sIn3sAndUnder4sIn5sPatchQ &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; is classified under "&lt;2s&gt;" in &lt;3s&gt;&lt;n&gt;and under "&lt;4s&gt;" in &lt;5s&gt;. Patch?')			expandMacrosWithArguments: (OrderedCollection new 				add: aSelector printString;				add: protocol;				add: aClass name;				add: superProtocol;				add: superClass name; asArray))				labels: (Array 						with: aClass name asString						with: superClass name asString						with: (#neither &lt;&lt; #browser &gt;&gt; 'neither'))				values: (Array 						with: aClass						with: superClass						with: nil)				default: aClass.	patchClass isNil ifTrue: [^false].	patchClass == aClass 		ifTrue: 			[self 				moveMethods: (Array with: aSelector)				to: superProtocol				in: aClass]		ifFalse: 			[self 				moveMethods: (Array with: aSelector)				to: protocol				in: superClass].	^true</body><body package="Browser-BrowserUI" selector="checkProtocolsFor:">checkProtocolsFor: aClass 	^(self environment selectorsForClass: aClass) inject: false		into: 			[:bool :each | 			bool | (self checkProtocolFor: each in: aClass)				| (self checkProtocolMatchFor: each in: aClass)]</body><body package="Browser-BrowserUI" selector="filterFilename:">filterFilename: fName	^Filename defaultClass suggest: (Filename defaultClass filterSeps: fName)</body><body package="Browser-BrowserUI" selector="hardcopyStream:">hardcopyStream: aStream 	self showWaitCursorWhile: [aStream contents asText asParagraph hardcopy]</body><body package="Browser-BrowserUI" selector="performChangeWithUpdate:">performChangeWithUpdate: aRefactoryChange 	self performChange: aRefactoryChange.	self refreshLists</body><body package="Browser-BrowserUI" selector="sentSelectors">sentSelectors	| method symbols |	self selector isNil ifTrue: [^Set new].	method := self methodClass compiledMethodAt: self selector ifAbsent: [nil].	method isNil ifTrue: [^#()].	cachedSelectors key == method ifTrue: [^cachedSelectors value].	symbols := method allSymbolLiterals asSet.	symbols remove: self selector ifAbsent: [].	symbols := symbols asSortedCollection.	cachedSelectors key: method value: symbols.	^symbols</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-class</category><body package="Browser-BrowserUI" selector="addClassChangeFromDialog:">addClassChangeFromDialog: aCreateClassDialog	| arguments definition change |	arguments := OrderedCollection new.	arguments		add: (aCreateClassDialog nameSpaceOrDo: [^nil]) fullName;		add: (aCreateClassDialog nameOrDo: [^nil]);		add: (aCreateClassDialog superclassOrDo: [^nil]) fullyQualifiedReference;		add: aCreateClassDialog indexedType;		add: aCreateClassDialog private;		add: aCreateClassDialog instanceVariables;		add: aCreateClassDialog classInstanceVariables;		add: aCreateClassDialog imports;		add: aCreateClassDialog category.	definition := '&lt;1s&gt; defineClass: #&lt;2s&gt; superclass: &lt;3p&gt; indexedType: #&lt;4s&gt; private: &lt;5p&gt;  instanceVariableNames: ''&lt;6s&gt;'' classInstanceVariableNames: ''&lt;7s&gt;'' imports: ''&lt;8s&gt;'' category: &lt;9p&gt;'		expandMacrosWithArguments: arguments.	change := AddClassChange definition: definition.	change package: (aCreateClassDialog packageOrDo: [^nil]).	^change</body><body package="Browser-BrowserUI" selector="browseMethodsWithSourceMatching">browseMethodsWithSourceMatching	| env class string |	string := self request: (#EnterStringToSearchFor &lt;&lt; #browser &gt;&gt; 'Enter string to search for').	string isEmpty ifTrue: [^self].	string := '*' , string , '*'.	class := self nonMetaClass.	env := self environment forClasses: (Array with: class with: class class).	self browseEnvironment: (env sourceCodeMatching: string)</body><body package="Browser-BrowserUI" selector="changeClassCategory">changeClassCategory	self changeRequest ifFalse: [^self].	self changeClassCategoryFor: self classesAndNameSpaces</body><body package="Browser-BrowserUI" selector="changeClassCategoryFor:">changeClassCategoryFor: classAndNameSpaceCollection 	| newCategory oldCategory changes |	classAndNameSpaceCollection isEmpty ifTrue: [^self].	oldCategory := classAndNameSpaceCollection first category.	newCategory := self request: (#EnterNewCategory &lt;&lt; #browser &gt;&gt; 'Enter new category')				initialAnswer: oldCategory.	newCategory isEmpty ifTrue: [^self].	newCategory := newCategory asSymbol.	changes := CompositeRefactoryChange named: (#ChangeCategory &lt;&lt; #browser &gt;&gt; 'Change category').	classAndNameSpaceCollection do: 			[:each | 			each = Root 				ifTrue: [self warn: (#CannotChangeCategoryOfRoot &lt;&lt; #browser &gt;&gt; 'Cannot change category of Root name space')]				ifFalse: 					[changes addChange: (MoveToProtocolChange 								nameSpace: each environment								protocol: newCategory								symbol: each name)]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="checkProtocols">checkProtocols	self changeRequest ifFalse: [^self].	self showWaitCursorWhile: 			[(self nonMetaClasses inject: false				into: 					[:changed :class | 					changed | (self checkProtocolsFor: class) 						| (self checkProtocolsFor: class class)]) 					ifTrue: [self refreshLists]					ifFalse: [self warn: (#NoChangesMade &lt;&lt; #browser &gt;&gt; 'No changes made.')]]</body><body package="Browser-BrowserUI" selector="classRefs">classRefs	self browseReferencesTo: self selectedBinding</body><body package="Browser-BrowserUI" selector="classSideNewMethodSource">classSideNewMethodSource	| comment |	comment := #ClassSideNewMethodCommentText &lt;&lt; #browser &gt;&gt; 'Answer a newly created and initialized instance.'.	^'new&lt;n&gt;&lt;t&gt;"&lt;1s&gt;"&lt;n&gt;&lt;n&gt;&lt;t&gt;^super new initialize'		expandMacrosWith: comment expandMacros</body><body package="Browser-BrowserUI" selector="convertToSibling">convertToSibling	| name subclasses newState |	self changeRequest ifFalse: [^self].	name := self request: (#EnterNameForNewParentClass &lt;&lt; #browser &gt;&gt; 'Enter name for new parent class').	name isEmpty ifTrue: [^self].	subclasses := self selectSubclassesOf: self nonMetaClass.	subclasses isNil ifTrue: [^self].	self handleError: 			[self performRefactoring: (ChildrenToSiblingsRefactoring 						name: self nonMetaClass environment fullName , '.' , name						class: self nonMetaClass						subclasses: subclasses).			newState := self getState.			newState objectName: name asSymbol.			self updateWithState: newState]</body><body package="Browser-BrowserUI" selector="createAccessorsInNewClass:">createAccessorsInNewClass: aClass	| names |	names := aClass instVarNames.	names isEmpty ifTrue: [^self].	names do:		[:each |		self handleError:			[self performRefactoring: 				(CreateAccessorsForVariableRefactoring					variable: each					class: aClass)]]</body><body package="Browser-BrowserUI" selector="createClassFromDialog:">createClassFromDialog: aCreateClassDialog	| addClassChange class |	addClassChange := self addClassChangeFromDialog: aCreateClassDialog.	addClassChange isNil ifTrue: [^nil].	self performChange: addClassChange.	class := addClassChange definedObject.	aCreateClassDialog shouldCreateAccessors ifTrue:		[self createAccessorsInNewClass: class].	aCreateClassDialog shouldCreateInitializer ifTrue:		[self createInitializerInNewClass: class].	aCreateClassDialog shouldDefineSubclassResponsibilities ifTrue:		[self createSubclassResponsibilityStubsInNewClass: class.		self createSubclassResponsibilityStubsInNewClass: class class].	^class</body><body package="Browser-BrowserUI" selector="createInitializerInNewClass:">createInitializerInNewClass: aClass	| superclassHasInitialize |	superclassHasInitialize := aClass canUnderstand: #initialize.	self performChange: 		(AddMethodChange			compile: (self 				initializerMethodSourceFor: aClass 				withSuperSend: superclassHasInitialize)			in: aClass			classified: #'initialize-release').	superclassHasInitialize ifFalse:		[self performChange:			(AddMethodChange				compile: self classSideNewMethodSource				in: aClass class				classified: #'instance creation')]</body><body package="Browser-BrowserUI" selector="createSubclass">createSubclass	| class |	self changeRequest ifFalse: [^self].	class := self createSubclassOf: self nonMetaClass.	class isNil ifTrue: [^self].	self selectClass: class.	self refreshLists</body><body package="Browser-BrowserUI" selector="createSubclassOf:">createSubclassOf: aClass 	| name subclasses category |	name := self requestClassName.	name isNil ifTrue: [^nil].	subclasses := self selectSubclassesOf: aClass.	subclasses isNil ifTrue: [^nil].	category := self nameSpace organization categoryOfElement: aClass name.	^self handleError: 			[self performRefactoring: (AddClassRefactoring 						addClass: self nameSpace fullName , '.' , name						superclass: aClass						subclasses: subclasses						category: category).			self nameSpace at: name asSymbol ifAbsent: [nil]]</body><body package="Browser-BrowserUI" selector="createSubclassResponsibilityStubsInNewClass:">createSubclassResponsibilityStubsInNewClass: aClass	| methods |	methods := self subclassResponsibilityMethodsIn: aClass.	methods isEmpty ifTrue: [^self].	methods do:		[:each |		self performChange: 			(AddMethodChange				compile: (self subclassResponsibilityImplementationStubFor: each in: aClass)				in: aClass				classified: each protocol)]</body><body package="Browser-BrowserUI" selector="fileOutClass">fileOutClass	| fileName fileManager |	fileName := Dialog requestNewFileName: (#FileOutOn &lt;&lt; #browser &gt;&gt; 'File out on')				default: (self filterFilename: ((#x1sst &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;.st')			expandMacrosWith: self nonMetaClass name)).	fileName isEmpty ifTrue: [^nil].	fileManager := SourceCodeStream write: fileName encoding: #Source.		[fileManager timeStamp.	self nonMetaClasses do: [:each | each fileOutSourceOn: fileManager]] 			ensure: [fileManager close]</body><body package="Browser-BrowserUI" selector="fileOutGlobal">fileOutGlobal	| theGlobals fileName fileManager |	theGlobals := self selectedGlobals.	fileName := Dialog requestNewFileName: (#FileOutOn &lt;&lt; #browser &gt;&gt; 'File out on')				default: (self filterFilename: ((#x1sst &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;.st')			expandMacrosWith: theGlobals first name)).	fileName isEmpty ifTrue: [^nil].	fileManager := SourceCodeStream write: fileName encoding: #Source.		[fileManager timeStamp.	theGlobals do: [:each | each fileOutSourceOn: fileManager]] 			ensure: [fileManager close]</body><body package="Browser-BrowserUI" selector="findAllReferencesToInstances">findAllReferencesToInstances	self showWaitCursorWhile: 			[| paths |			paths := ReferenceFinder findAllPathsToInstanceOf: self selectedClass.			paths isEmpty 				ifTrue: [self warn: (#NoReferencePathsExist &lt;&lt; #browser &gt;&gt; 'No reference paths exist')]				ifFalse: [paths inspect]]</body><body package="Browser-BrowserUI" selector="findReferencePathToInstance">findReferencePathToInstance	self showWaitCursorWhile: 			[| path |			path := ReferenceFinder findPathToInstanceOf: self selectedClass.			path notNil 				ifTrue: [path inspect]				ifFalse: [self warn: (#NoReferencePathsExist &lt;&lt; #browser &gt;&gt; 'No reference paths exist')]]</body><body package="Browser-BrowserUI" selector="globalClassRefs">globalClassRefs	self browseGlobalReferencesTo: self selectedBinding</body><body package="Browser-BrowserUI" selector="initializeBindings">initializeBindings	self initializeVariables: (self nonMetaClasses 				collect: [:each | each fullyQualifiedReference])</body><body package="Browser-BrowserUI" selector="initializerMethodSourceFor:withSuperSend:">initializerMethodSourceFor: aClass withSuperSend: aBoolean	| comment bodyStream |	comment := #InitializerMethodCommentText &lt;&lt; #browser &gt;&gt; 'Initialize a newly created instance. This method must answer the receiver.'.	bodyStream := (String new: 100) writeStream.	aClass instVarNames isEmpty		ifTrue:			[bodyStream nextPutAll:				('"&lt;1s&gt;"&lt;n&gt;&lt;t&gt;' expandMacrosWith:					#ReplaceInitializersCommentText &lt;&lt; #browser &gt;&gt; 				' *** Replace this comment with the appropriate initialization code *** ')]		ifFalse:			[bodyStream nextPut: $"; nextPutAll: 				(#UseInitializersBelowCommentText &lt;&lt; #browser &gt;&gt;				' *** Edit the following to properly initialize instance variables ***') 					asString.			bodyStream nextPut: $"; crtab.			aClass instVarNames				do: [:each | 	bodyStream nextPutAll: each; nextPutAll: ' := nil.'; crtab].			bodyStream nextPut: $"; nextPutAll:				(#EndOfInitializationCommentText &lt;&lt; #browser &gt;&gt; 				' *** And replace this comment with additional initialization code *** ')					asString.			bodyStream nextPut: $"; crtab].	^'initialize&lt;n&gt;&lt;t&gt;"&lt;1s&gt;"&lt;n&gt;&lt;n&gt;&lt;t&gt;&lt;2s&gt;&lt;3s&gt;^self'		expandMacrosWith: comment expandMacros		with: (aBoolean ifTrue: ['super initialize.&lt;n&gt;&lt;t&gt;'] ifFalse: ['']) expandMacros		with: bodyStream contents</body><body package="Browser-BrowserUI" selector="inspectAllInstances">inspectAllInstances	(self nonMetaClass allInstancesWeakly: true) inspect</body><body package="Browser-BrowserUI" selector="mostPopularNameSpaceIn:">mostPopularNameSpaceIn: aPackage	| classesByNameSpace |	aPackage isNil ifTrue: [^nil].	classesByNameSpace := aPackage allDefinedClasses 		groupedBy: [:each | each environment].	classesByNameSpace isEmpty ifTrue:		[^aPackage definedNameSpaces size = 1 			ifTrue: [aPackage definedNameSpaces first]			ifFalse: [nil]].	^(classesByNameSpace associations fold:		[:a :b | a value size &gt;= b value size ifTrue: [a] ifFalse: [b]])			key</body><body package="Browser-BrowserUI" selector="moveObjectToNameSpace">moveObjectToNameSpace	| newNameSpace changes omitNameSpaces |	omitNameSpaces := Set new.	self classesAndNameSpaces 		do: [:each | each isNameSpace ifTrue: [omitNameSpaces addAll: each withAllNameSpaces]].	newNameSpace := self selectNameSpace: (#PickANameSpace &lt;&lt; #browser &gt;&gt; 'Pick a name space')				without: omitNameSpaces.	newNameSpace isNil ifTrue: [^self].	changes := CompositeRefactoryChange named: (#MoveObjectsToNameSpace &lt;&lt; #browser &gt;&gt; 'Move objects to name space').	self objectNames 		do: [:each | changes moveObjectNamed: each to: newNameSpace fullName].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="printOutClass">printOutClass	"Print the class."	| stream |	stream := TextStream on: (String new: 1000).	self nonMetaClasses do: [:each | each printOutOn: stream].	self hardcopyStream: stream</body><body package="Browser-BrowserUI" selector="removeClassNamed:">removeClassNamed: aString 	| change class |	class := aString asQualifiedReference value.	(class subclasses isEmpty 		or: [self confirm: ((#x1sHasSubclassesRemoveAnyway &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; has subclasses. Remove anyway?')			expandMacrosWith: class name)]) 			ifFalse: [^self].	change := ((Override isOverriddenClassOrNameSpace: class) and: 					[(Dialog 						choose: ((#x1sIsOverridden &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; is overridden') expandMacrosWith: aString)						fromVerticallyAlignedButtonsWithLabels: (Array with: (#RestoreOverridden &lt;&lt; #browser &gt;&gt; 'Restore Overridden') with: (#RemoveFromSystem &lt;&lt; #browser &gt;&gt; 'Remove from System') with: (#Cancel &lt;&lt; #browser &gt;&gt; 'Cancel'))						values: (Array 								with: [true]								with: [false]								with: [^self])						default: [false]) value]) 				ifTrue: 					[RestoreOverrideChange 						for: (Override overridesForClassOrNameSpace: class) last]				ifFalse: [RemoveClassChange removeClassName: aString].	self showWaitCursorWhile: [self performChangeWithUpdate: change]</body><body package="Browser-BrowserUI" selector="removeNameSpaceNamed:">removeNameSpaceNamed: aString 	| namespace change |	namespace := aString asQualifiedReference value.	(namespace localBindings isEmpty 		or: [self confirm: ((#x1sIsNotEmptyRemoveAnyway &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; is not empty. Remove anyway?')			expandMacrosWith: namespace name)]) 			ifFalse: [^self].	change := ((Override isOverriddenClassOrNameSpace: namespace) and: 					[(Dialog 						choose: ((#x1sIsOverridden &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; is overridden') expandMacrosWith: aString)						fromVerticallyAlignedButtonsWithLabels: (Array with: (#RestoreOverridden &lt;&lt; #browser &gt;&gt; 'Restore Overridden') with: (#RemoveFromSystem &lt;&lt; #browser &gt;&gt; 'Remove from System') with: (#Cancel &lt;&lt; #browser &gt;&gt; 'Cancel'))						values: (Array 								with: [true]								with: [false]								with: [^self])						default: [false]) value]) 				ifTrue: 					[RestoreOverrideChange 						for: (Override overridesForClassOrNameSpace: namespace) last]				ifFalse: [RemoveNameSpaceChange objectName: aString].	self showWaitCursorWhile: [self performChangeWithUpdate: change]</body><body package="Browser-BrowserUI" selector="removeObject">removeObject	self changeRequest ifFalse: [^self].	(self 		confirm: (#RemoveAllSelectedObjectsQ &lt;&lt; #browser &gt;&gt; 'Are you certain that you want to remove all selected objects?')) 			ifFalse: [^self].	self objectNamesOrderedForRemoval do: [:each | self removeObjectNamed: each].	self refreshLists</body><body package="Browser-BrowserUI" selector="removeObjectNamed:">removeObjectNamed: aString	| binding |	binding := aString asQualifiedReference bindingOrNil.	aString asQualifiedReference isDefined ifFalse: [^self].	binding isForClass				ifTrue: [self removeClassNamed: aString]				ifFalse: [self removeNameSpaceNamed: aString]</body><body package="Browser-BrowserUI" selector="removeObjectOverride">removeObjectOverride	| over overs |	overs := Override overridesForClassOrNameSpace: self classOrNameSpace.	over := self 				choose: (#ChooseOverrideToRemove &lt;&lt; #browser &gt;&gt; 'Choose override to remove')				fromList: (overs collect: [:each | each componentName])				values: overs				lines: 5				cancel: [nil].	over isNil ifTrue: [^self].	self performChangeWithUpdate: (RemoveOverrideChange for: over)</body><body package="Browser-BrowserUI" selector="removeObjectsNamedSafe:">removeObjectsNamedSafe: nameCollection 	self handleError: 			[self 				performRefactoring: (RemoveObjectRefactoring objectNames: nameCollection)]</body><body package="Browser-BrowserUI" selector="removeObjectsSafe">removeObjectsSafe	self changeRequest ifFalse: [^self].	self removeObjectsNamedSafe: self objectNames.	self refreshLists</body><body package="Browser-BrowserUI" selector="removeSharedVariableNamed:">removeSharedVariableNamed: aString 	| change ref |	ref := aString asQualifiedReference.	change := ((Override isOverriddenStatic: ref simpleName in: ref environment) 				and: 					[(Dialog 						choose: ((#x1sIsOverridden &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; is overridden') expandMacrosWith: aString)						fromVerticallyAlignedButtonsWithLabels: (Array with: (#RestoreOverridden &lt;&lt; #browser &gt;&gt; 'Restore Overridden') with: (#RemoveFromSystem &lt;&lt; #browser &gt;&gt; 'Remove from System') with: (#Cancel &lt;&lt; #browser &gt;&gt; 'Cancel'))						values: (Array 								with: [true]								with: [false]								with: [^self])						default: [false]) value]) 					ifTrue: 						[RestoreOverrideChange 							for: (Override overridesForDataKey: ref simpleName in: ref environment) 									last]					ifFalse: [RemoveSharedVariableChange objectName: aString].	^self performChangeWithUpdate: change</body><body package="Browser-BrowserUI" selector="renameObject">renameObject	self renameObjectNamed: self objectName</body><body package="Browser-BrowserUI" selector="renameObjectNamed:">renameObjectNamed: aString 	| newName binding |	self changeRequest ifFalse: [^self].	binding := aString asQualifiedReference bindingOrNil.	binding isNil ifTrue: [^self].	newName := self request: (#EnterNewName &lt;&lt; #browser &gt;&gt; 'Enter new name') initialAnswer: binding key.	newName isEmpty ifTrue: [^self].	self handleError: 			[self 				performRefactoring: (RenameObjectRefactoring renameObjectNamed: aString						to: newName asSymbol).			self setBinding: binding.			self refreshLists]</body><body package="Browser-BrowserUI" selector="requestClassName">requestClassName	| name |	name := self request: (#EnterAClassNameC &lt;&lt; #browser &gt;&gt; 'Enter a class name:').	^name isEmpty ifTrue: [nil] ifFalse: [name]</body><body package="Browser-BrowserUI" selector="restoreObjectOverride">restoreObjectOverride	| over overs |	overs := Override overridesForClassOrNameSpace: self classOrNameSpace.	over := self 				choose: (#ChooseOverrideToRestore &lt;&lt; #browser &gt;&gt; 'Choose override to restore')				fromList: (overs collect: [:each | each componentName])				values: overs				lines: 5				cancel: [nil].	over isNil ifTrue: [^self].	self performChangeWithUpdate: (RestoreOverrideChange for: over)</body><body package="Browser-BrowserUI" selector="selectSubclassesOf:">selectSubclassesOf: aClass 	| subclasses |	subclasses := aClass subclasses 				asSortedCollection: [:a :b | a name &lt; b name].	subclasses isEmpty ifTrue: [^#()].	^Dialog dialogSupplier 		chooseMultiple: (#ChooseSubclassesC &lt;&lt; #browser &gt;&gt; 'Choose subclasses:')		fromList: (subclasses collect: [:each | each name])		values: subclasses		buttons: #()		values: #()		lines: 8		cancel: [nil]		for: nil</body><body package="Browser-BrowserUI" selector="spawnClass">spawnClass	self showWaitCursorWhile: 			[| allClasses |			allClasses := OrderedCollection withAll: self nonMetaClasses.			allClasses addAll: (self nonMetaClasses collect: [:each | each class]).			self 				openBrowserOnEnvironment: (BrowserEnvironment new forClasses: allClasses)]</body><body package="Browser-BrowserUI" selector="spawnHierarchy">spawnHierarchy	| hierarchyState |	hierarchyState := self getState.	self environment isSystem ifFalse: [hierarchyState categories: #()].	RefactoringBrowser openHierarchyWithSelection: hierarchyState</body><body package="Browser-BrowserUI" selector="subclassResponsibilityImplementationStubFor:in:">subclassResponsibilityImplementationStubFor: aMethodDefinition in: aClass	| source parser pattern comment errorText |	source := aMethodDefinition sourceCode.	(parser := aClass parserClass new) parseSelector: source.	pattern := source copyFrom: 1 to: (parser endOfLastToken min: source size).	comment := #SubclassResponsibilityStubComment &lt;&lt; #browser &gt;&gt; ' *** This method was defined by &lt;1p&gt; as a subclass responsibility.&lt;n&gt;&lt;t&gt;Replace its body with a proper implementation. *** ' 		expandMacrosWith: aMethodDefinition implementingClass.	errorText := #SubclassResponsibilityStubNotReimplemented &lt;&lt; #browser &gt;&gt; 'Subclass responsibility stub not reimplemented'.	^'&lt;1s&gt;&lt;n&gt;&lt;t&gt;"&lt;2s&gt;"&lt;n&gt;&lt;n&gt;&lt;t&gt;self error: ''&lt;3s&gt;'''		expandMacrosWith: pattern		with: comment		with: errorText</body><body package="Browser-BrowserUI" selector="subclassResponsibilityMethodsIn:">subclassResponsibilityMethodsIn: aClass	| results |	results := OrderedCollection new.	aClass withAllSuperclasses reverseDo:		[:class |		class selectors do: 			[:each | results := results reject: [:some | some selector = each]].		(class whichSelectorsReferTo: #subclassResponsibility) do:			[:each |			results add: (MethodDefinition class: class selector: each)]].	^results</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-protocol</category><body package="Browser-BrowserUI" selector="addProtocol">addProtocol	| newProtocol newState |	self changeRequest ifFalse: [^self].	newProtocol := self requestMethodProtocolName:		#NewProtocol &lt;&lt; #browser &gt;&gt; 'New Protocol'.	newProtocol isNil ifTrue: [^self].	newProtocol := newProtocol asSymbol.	self		performChange:			(self isData				ifTrue:					[AddProtocolChange						nameSpace: self classOrNameSpace						protocol: newProtocol]				ifFalse:					[AddProtocolChange						class: self selectedClass						protocol: newProtocol]).	newState := self getState.	newState		protocol: newProtocol;		selectors: #().	self		updatePartsWith: newState;		changed</body><body package="Browser-BrowserUI" selector="fileOutMethodProtocol">fileOutMethodProtocol	| fileManager fileName |	fileName := Dialog requestNewFileName: (#FileOutAs &lt;&lt; #browser &gt;&gt; 'File out as')				default: (self 						filterFilename: self objectName , '-' , self protocol , '.st').	fileName isEmpty ifTrue: [^nil].	fileManager := SourceCodeStream write: fileName encoding: #Source.		[fileManager timeStamp.	self protocols do: 			[:each | 			fileManager 				fileOutMessages: (self environment selectorsFor: each in: self selectedClass)				for: self selectedClass]] 			ensure: [fileManager close]</body><body package="Browser-BrowserUI" selector="fileOutProtocol">fileOutProtocol	self isData 		ifTrue: [self fileOutVariableProtocol]		ifFalse: [self fileOutMethodProtocol]</body><body package="Browser-BrowserUI" selector="fileOutVariableProtocol">fileOutVariableProtocol	| fileManager fileName |	fileName := Dialog requestNewFileName: #FileOutAs &lt;&lt; #browser &gt;&gt; 'File out as'				default: (self 						filterFilename: self objectName , '-' , self protocol , '.st').	fileName isEmpty ifTrue: [^nil].	fileManager := SourceCodeStream write: fileName encoding: #Source.		[fileManager timeStamp.	self protocols do: 			[:each | 			fileManager fileOutSharedVariables: (self environment sharedVariablesFor: each						in: self classOrNameSpace)				for: self classOrNameSpace]] 			ensure: [fileManager close]</body><body package="Browser-BrowserUI" selector="printOutProtocol">printOutProtocol	| stream |	stream := TextStream on: (String new: 1000).	self protocols do: 			[:each | 			(self isData 				ifTrue: [self classOrNameSpace asNameSpace]				ifFalse: [self selectedClass]) printOutCategory: each on: stream].	self hardcopyStream: stream</body><body package="Browser-BrowserUI" selector="removeMethodProtocols">removeMethodProtocols	| changes |	(self protocols allSatisfy: 			[:each | 			(BrowserEnvironment new selectorsFor: each in: self selectedClass) isEmpty]) 		ifFalse: 			[(self confirm: (#RemoveSelectedProtocolsAndMethodsQ &lt;&lt; #browser &gt;&gt; 'Remove the selected protocols and their methods?')) 					ifFalse: [^self]].	(self protocols allSatisfy: [:each | self areAllSelectorsVisibleIn: each]) ifFalse:		[(Dialog 			confirm: (#ProtocolsContainInvisibleMethodsContinueQ &lt;&lt; #browser &gt;&gt; 'These protocols contain methods that are not currently visible.Removing the protocols will remove those methods. Continue?')			initialAnswer: false)				ifFalse: [^self]].	changes := CompositeRefactoryChange named: (#RemoveProtocol1 &lt;&lt; #browser &gt;&gt; 'Remove protocol').	self protocols do: 			[:each | 			(BrowserEnvironment new selectorsFor: each in: self selectedClass) 				do: [:sel | changes removeMethod: sel from: self selectedClass].			changes removeMethodProtocol: each from: self selectedClass].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="removeProtocol">removeProtocol	self changeRequest ifFalse: [^self].	self isData 		ifTrue: [self removeSharedVariableProtocols]		ifFalse: [self removeMethodProtocols]</body><body package="Browser-BrowserUI" selector="removeSharedVariableProtocols">removeSharedVariableProtocols	self removeCategories: self protocols		fromNameSpaces: (Array with: self classOrNameSpace)</body><body package="Browser-BrowserUI" selector="renameMethodProtocolTo:">renameMethodProtocolTo: newProtocol 	| change |	change := RenameProtocolChange 				class: self selectedClass				oldProtocol: self protocol				newProtocol: newProtocol.	self performChange: change</body><body package="Browser-BrowserUI" selector="renameProtocol">renameProtocol	| newProtocol newState |	self changeRequest ifFalse: [^self].	newProtocol := self requestMethodProtocolName:		#RenameProtocol &lt;&lt; #browser &gt;&gt; 'Rename Protocol'.	newProtocol isNil ifTrue: [^self].	newProtocol := newProtocol asSymbol.	self isData 		ifTrue: [self renameSharedVariableProtocolTo: newProtocol]		ifFalse: [self renameMethodProtocolTo: newProtocol].	newState := self getState.	newState protocol: newProtocol.	self		updatePartsWith: newState;		changed</body><body package="Browser-BrowserUI" selector="renameSharedVariableProtocolTo:">renameSharedVariableProtocolTo: newProtocol 	self 		rename: self protocol		to: newProtocol		inNameSpaces: (Array with: self classOrNameSpace)</body><body package="Browser-BrowserUI" selector="requestMethodProtocolName:">requestMethodProtocolName: prompt	| suggestions |	suggestions := self suggestedProtocols.	^(IncrementalSearchDialog			forRequestWithSuggestions: suggestions			filterBlock: [:input :protocol | input , '*' match: protocol])		windowLabel: prompt;		firstLabel: #NameC &lt;&lt; #browser &gt;&gt; 'Name:';		secondLabel: #SuggestionsC &lt;&lt; #browser &gt;&gt; 'Suggestions:';		entry: (LastProtocol ifNil: [String new]);		request</body><body package="Browser-BrowserUI" selector="spawnProtocol">spawnProtocol	self showWaitCursorWhile: 			[| class |			class := self selectedClass.			self openBrowserOnEnvironment: (self environment 						forClass: (class ifNil: [self classOrNameSpace])						protocols: self protocols)]</body><body package="Browser-BrowserUI" selector="suggestedProtocols">suggestedProtocols	^self isData		ifTrue: [Array new]		ifFalse: [self suggestedProtocolsForClass: self selectedClass]</body><body package="Browser-BrowserUI" selector="suggestedProtocolsForClass:">suggestedProtocolsForClass: aClass	| protocols |	protocols := Set new.	aClass allSuperclasses do:		[:class | protocols addAll: class organization categories].	aClass organization categories do:		[:each | protocols remove: each ifAbsent: []].	^protocols asSortedCollection</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>menus</category><body package="Browser-BrowserUI" selector="globalImplementorsActions">globalImplementorsActions	^self sendersImplementorsActionsFor: #browseGlobalImplementorsOf:</body><body package="Browser-BrowserUI" selector="globalSendersActions">globalSendersActions	^self sendersImplementorsActionsFor: #browseGlobalReferencesTo:</body><body package="Browser-BrowserUI" selector="hierarchyImplementorsActions">hierarchyImplementorsActions	^self sendersImplementorsActionsFor: #browseHierarchyImplementorsOf:</body><body package="Browser-BrowserUI" selector="hierarchySendersActions">hierarchySendersActions	^self sendersImplementorsActionsFor: #browseHierarchyReferencesTo:</body><body package="Browser-BrowserUI" selector="localImplementorsActions">localImplementorsActions	^self sendersImplementorsActionsFor: #browseLocalImplementorsOf:</body><body package="Browser-BrowserUI" selector="localSendersActions">localSendersActions	^self sendersImplementorsActionsFor: #browseLocalReferencesTo:</body><body package="Browser-BrowserUI" selector="maxSentSelectors">maxSentSelectors	^30</body><body package="Browser-BrowserUI" selector="menuNameFor:">menuNameFor: aSelector 	aSelector isEmpty ifTrue: [^(#emptySymbol &lt;&lt; #browser &gt;&gt; '-empty symbol-')].	aSelector isInfix ifFalse: [^super menuNameFor: aSelector].	^aSelector asString copyReplaceAll: '&amp;' with: '&amp;&amp;'</body><body package="Browser-BrowserUI" selector="sendersImplementorsActionsFor:">sendersImplementorsActionsFor: aSymbol 	| messages firstSelectors actions |	messages := self sentSelectors.	firstSelectors := messages copyFrom: 1				to: (messages size min: self maxSentSelectors).	actions := firstSelectors collect: 					[:each | 					RBCommand 						named: (self menuNameFor: each)						description: (#SendersImplementors &lt;&lt; #browser &gt;&gt; 'Senders/Implementors')						action: [self perform: aSymbol with: each]						receiver: #yourself].	firstSelectors size = messages size 		ifFalse: 			[actions				add: nil;				add: (RBCommand 							named: (#_MoreSelectorsDots &lt;&lt; #browser &gt;&gt; '&amp;More selectors...')							description: ''							action: 								[| selector |								selector := self choose: (#SelectAMessageC &lt;&lt; #browser &gt;&gt; 'Select a message:') from: messages.								selector notNil 									ifTrue: [self perform: aSymbol with: selector]									ifFalse: [nil]]							receiver: #yourself)].	^actions</body><body package="Browser-BrowserUI" selector="showOnlyFilteredSpecifications">showOnlyFilteredSpecifications	navigatorType = #Category ifTrue: [^#()].	^Array 		with: ((self showOnlyFiltered 				ifTrue: [RBCheckedCommand]				ifFalse: [RBCommand]) 					named: (navigatorType = #Parcel 							ifTrue: [(#ShowOnlyInSelectedParcel &lt;&lt; #browser &gt;&gt; 'Show Only In Selected Parcel')]							ifFalse: [(#ShowOnlyInSelectedPackage &lt;&lt; #browser &gt;&gt; 'Show Only In Selected Package')])					description: (#ShowOnlyItemsInSelectedComponents &lt;&lt; #browser &gt;&gt; 'Show only items in the selected code components')					action: 						[self changeRequest 							ifTrue: 								[showOnlyFiltered := showOnlyFiltered not.								self refreshLists]]					receiver: #yourself)</body><body package="Browser-BrowserUI" selector="windowMenuItems">windowMenuItems	| items |	items := OrderedCollection new.	environment isSystem 		ifTrue: 			[navigatorType = #Package 				ifTrue: [items add: (#Pac_kage &lt;&lt; #browser &gt;&gt; 'Pac&amp;kage') asString -&gt; (self menuNamed: #pundleMenu)].			navigatorType = #Parcel 				ifTrue: [items add: (#P_arcel &lt;&lt; #browser &gt;&gt; 'P&amp;arcel') asString -&gt; (self menuNamed: #parcelMenu)].			navigatorType = #Category 				ifTrue: [items add: (#Ca_tegory &lt;&lt; #browser &gt;&gt; 'Ca&amp;tegory') asString -&gt; (self menuNamed: #categoryMenu)]].	items add: (#_Class &lt;&lt; #browser &gt;&gt; '&amp;Class') asString -&gt; (self menuNamed: #classMenu).	environment isSystem 		ifTrue: [items add: (#_Protocol &lt;&lt; #browser &gt;&gt; '&amp;Protocol') asString -&gt; (self menuNamed: #protocolMenu)].	items add: (#_Method &lt;&lt; #browser &gt;&gt; '&amp;Method') asString -&gt; (self menuNamed: #selectorMenu).	^items</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-store</category><body package="Browser-BrowserUI" selector="chooseMoveToPackage">chooseMoveToPackage	^self choosePackage: (#SelectPackageToMoveToC &lt;&lt; #browser &gt;&gt; 'Select package to move to:')</body><body package="Browser-BrowserUI" selector="choosePackage:">choosePackage: aString 	^self choosePackage: aString without: #()</body><body package="Browser-BrowserUI" selector="choosePackage:without:">choosePackage: aString without: withoutPackages 	| nullPackage packages |	self changeRequest ifFalse: [^nil].	nullPackage := self storeRegistry nullPackage.	packages := OrderedCollection with: nullPackage.	packages addAll: self storeRegistry allPackages.	withoutPackages do: [:each | packages remove: each ifAbsent: []].	packages := packages asSortedCollection: [:a :b | a name &lt; b name].	^(IncrementalSearchDialog 			forSelectionFrom: packages			filterBlock: [:entry :package | entry, '*' match: package name])		windowLabel: #ChoosePackage &lt;&lt; #browser &gt;&gt; 'Choose Package';		firstLabel: #FilterC &lt;&lt; #browser &gt;&gt; 'Filter:';		secondLabel: aString;		objectToStringBlock: [:package | package name asString];		iconBlock: 			[:package | 			package == nullPackage ifTrue: [nil] ifFalse: [package toolListIcon]];		select</body><body package="Browser-BrowserUI" selector="isStoreLoadedAndIsData">isStoreLoadedAndIsData	^self isStoreLoaded and: [self isData]</body><body package="Browser-BrowserUI" selector="isStoreLoadedAndIsMethod">isStoreLoadedAndIsMethod	^self isStoreLoaded and: [self isMethod]</body><body package="Browser-BrowserUI" selector="moveCategories:toPackage:">moveCategories: aSymbolCollection toPackage: aPackage 	| allNames |	allNames := Set new.	aSymbolCollection do: 			[:each | 			allNames 				addAll: ((self allReferencesInNameSpaces: Root withAllNameSpaces						andCategory: each) collect: [:ref | ref fullName])].	self moveObjectsNamed: allNames toPackage: aPackage</body><body package="Browser-BrowserUI" selector="moveCategoryToPackage">moveCategoryToPackage	| package |	self changeRequest ifFalse: [^self].	package := self chooseMoveToPackage.	package isNil ifTrue: [^self].	self moveCategories: self categories toPackage: package</body><body package="Browser-BrowserUI" selector="moveCompleteObjectToPackage">moveCompleteObjectToPackage	| package |	self changeRequest ifFalse: [^self].	package := self chooseMoveToPackage.	package isNil ifTrue: [^self].	^self moveObjectsNamed: self objectNames toPackage: package</body><body package="Browser-BrowserUI" selector="moveDefinitions:toPackage:">moveDefinitions: definitionCollection toPackage: aPackage 	| changes |	changes := CompositeRefactoryChange named: (#MoveMethodsOrSharedsToPackage &lt;&lt; #browser &gt;&gt; 'Move methods/shared variables to package').	definitionCollection do: 			[:each | 			changes addChange: (each isForSharedVariable 						ifTrue: 							[MoveSharedVariableToPackageChange sharedVariableNamed: each fullName								package: aPackage]						ifFalse: 							[MoveMethodToPackageChange 								class: each implementingClass								selector: each selector								package: aPackage])].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveMethodToPackage">moveMethodToPackage	| package |	self changeRequest ifFalse: [^self].	package := self chooseMoveToPackage.	package isNil ifTrue: [^self].	self moveDefinitions: self definitions toPackage: package</body><body package="Browser-BrowserUI" selector="moveObjectDefinitionToPackage">moveObjectDefinitionToPackage	| package changes |	self changeRequest ifFalse: [^self].	package := self chooseMoveToPackage.	package isNil ifTrue: [^self].	changes := CompositeRefactoryChange named: (#MoveDefinitionsToPackage &lt;&lt; #browser &gt;&gt; 'Move definitions to package').	self classesAndNameSpaces do: 			[:each | 			each isBehavior 				ifTrue: 					[changes 						addChange: (MoveClassDefinitionToPackageChange class: each package: package)]				ifFalse: 					[changes 						addChange: (MoveNameSpaceToPackageChange nameSpace: each package: package)]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveObjects:in:toPackage:">moveObjects: aNavigatorState in: codeComponents toPackage: aPackage 	| changes |	changes := CompositeRefactoryChange named: (#MoveObjectsToPackage &lt;&lt; #browser &gt;&gt; 'Move objects to package').	self 		codeIn: aNavigatorState objectNames		codeComponents: codeComponents		sharedVariablesDo: 			[:sv | 			changes addChange: (MoveSharedVariableToPackageChange 						sharedVariableNamed: sv fullName						package: aPackage)]		nameSpacesDo: 			[:ns | 			changes 				addChange: (MoveNameSpaceToPackageChange nameSpace: ns package: aPackage)]		definedClassesDo: 			[:cls | 			changes 				addChange: (MoveClassDefinitionToPackageChange class: cls package: aPackage)]		methodsDo: 			[:cls :sel | 			changes addChange: (MoveMethodToPackageChange 						class: cls						selector: sel						package: aPackage)].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveObjectsIn:toPackage:">moveObjectsIn: aNavigatorState toPackage: aPackage 	| codeComponents |	codeComponents := aNavigatorState parcels isEmpty 				ifTrue: [aNavigatorState packages]				ifFalse: [aNavigatorState parcels].	codeComponents notEmpty 		ifTrue: 			[^self 				moveObjects: aNavigatorState				in: codeComponents				toPackage: aPackage].	^self moveObjectsNamed: aNavigatorState objectNames toPackage: aPackage</body><body package="Browser-BrowserUI" selector="moveObjectsNamed:toPackage:">moveObjectsNamed: nameCollection toPackage: aPackage 	| changes |	changes := CompositeRefactoryChange named: (#MoveObjectsToPackage &lt;&lt; #browser &gt;&gt; 'Move objects to package').	nameCollection do: 			[:each | 			| binding ref |			ref := each asQualifiedReference.			binding := ref bindingOrNil.			binding notNil 				ifTrue: 					[binding isForGeneral 						ifTrue: 							[changes 								addChange: (MoveSharedVariableToPackageChange sharedVariableNamed: each										package: aPackage)]						ifFalse: 							[binding isForClass 								ifTrue: 									[changes 										addChange: (MoveClassDefinitionToPackageChange class: binding value												package: aPackage).									binding value selectors do: 											[:sel | 											changes addChange: (MoveMethodToPackageChange 														class: binding value														selector: sel														package: aPackage)].									binding value class selectors do: 											[:sel | 											changes addChange: (MoveMethodToPackageChange 														class: binding value class														selector: sel														package: aPackage)].									binding value dataKeys do: 											[:var | 											changes addChange: (MoveSharedVariableToPackageChange 														sharedVariableNamed: binding value fullName , '.' , var														package: aPackage)]]								ifFalse: 									[changes addChange: (MoveNameSpaceToPackageChange nameSpace: binding value												package: aPackage)]]]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveObjectToPackage">moveObjectToPackage	| package |	self changeRequest ifFalse: [^self].	package := self chooseMoveToPackage.	package isNil ifTrue: [^self].	self moveObjectsIn: state toPackage: package</body><body package="Browser-BrowserUI" selector="moveProtocolToPackage">moveProtocolToPackage	| package |	self changeRequest ifFalse: [^self].	package := self chooseMoveToPackage.	package isNil ifTrue: [^self].	self moveDefinitions: state allDefinitions toPackage: package</body><body package="Browser-BrowserUI" selector="overrideDefinitionsInPackage">overrideDefinitionsInPackage	| package changes |	self changeRequest ifFalse: [^self].	package := self choosePackage: (#SelectPackageToOverrideInC &lt;&lt; #browser &gt;&gt; 'Select package to override in:').	package isNil ifTrue: [^self].	changes := CompositeRefactoryChange 				named: (#OverrideMethodsOrSharedsInPackage &lt;&lt; #browser &gt;&gt; 'Override methods/shared variables in package').	self definitions do: 			[:each | 			changes addChange: (each isForSharedVariable 						ifTrue: 							[MoveSharedVariableToPackageChange sharedVariableNamed: each fullName								package: package]						ifFalse: 							[MoveMethodToPackageChange 								class: each implementingClass								selector: each selector								package: package]).			changes addChange: (AddOverrideChange for: each asOverride)].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="overrideObjectInPackage">overrideObjectInPackage	| package changes |	self changeRequest ifFalse: [^self].	package := self chooseMoveToPackage.	package isNil ifTrue: [^self].	changes := CompositeRefactoryChange named: (#OverrideObjectsInPackage &lt;&lt; #browser &gt;&gt; 'Override objects in package').	self classesAndNameSpaces do: 			[:each | 			| override |			override := Override forClassOrNameSpace: each.			changes addChange: (each isBehavior 						ifTrue: [MoveClassDefinitionToPackageChange class: each package: package]						ifFalse: [MoveNameSpaceToPackageChange nameSpace: each package: package]).			changes addChange: (AddOverrideChange for: override)].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="spawnPundle">spawnPundle	self openBrowserOnEnvironment: (self environment forPundles: self pundles)</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-selector</category><body package="Browser-BrowserUI" selector="addParameter">addParameter	| newSelector newState |	self changeRequest ifFalse: [^self].	newState := self getState.	newSelector := self addParameterTo: self selector in: self methodClass.	newSelector isNil ifTrue: [^self].	newState selector: newSelector.	self		updatePartsWith: newState;		changed</body><body package="Browser-BrowserUI" selector="addParameterTo:in:">addParameterTo: aSelector in: aClass 	| initializer newSelector initialAnswer |	initialAnswer := aSelector numArgs == 0 				ifTrue: [aSelector , ':']				ifFalse: [aSelector].	newSelector := self request: (#EnterNewSelectorC &lt;&lt; #browser &gt;&gt; 'Enter new selector:')				initialAnswer: initialAnswer.	newSelector isEmpty ifTrue: [^nil].	newSelector := newSelector asSymbol.	initializer := self request: (#EnterDefaultValueForParameterC &lt;&lt; #browser &gt;&gt; 'Enter default value for parameter:')				initialAnswer: 'nil'.	initializer isEmpty ifTrue: [^nil].	^self handleError: 			[self performRefactoring: (AddParameterRefactoring 						addParameterToMethod: aSelector						in: aClass						newSelector: newSelector						initializer: initializer).			newSelector]</body><body package="Browser-BrowserUI" selector="browseMethodChanges">browseMethodChanges	ChangeList new openOn: (ChangeScanner scanForSelector: self selector				class: self selectedClass)</body><body package="Browser-BrowserUI" selector="canRemoveParameter">canRemoveParameter	| selector |	selector := self selector.	selector isNil ifTrue: [^false].	^selector isKeyword</body><body package="Browser-BrowserUI" selector="copyMethods:from:toProtocol:">copyMethods: selectorCollection from: aClass toProtocol: aProtocol 	| protStart newProtocol destClassName destClass classPart changes |	newProtocol := aProtocol.	classPart := newProtocol copyUpTo: $&gt;.	destClassName := classPart copyUpTo: Character space.	destClass := destClassName asQualifiedReference valueOrDo: [nil].	destClass isBehavior ifFalse: [^self].	classPart size = destClassName size 		ifFalse: 			[(classPart size - destClassName size = 6 				and: [(classPart copyFrom: classPart size - 5 to: classPart size) = ' class']) 					ifTrue: [destClass := destClass class]					ifFalse: [^self]].	protStart := classPart size + 2.	[(newProtocol at: protStart) = $ ] whileTrue: [protStart := protStart + 1].	newProtocol := (newProtocol copyFrom: protStart to: newProtocol size) 				asSymbol.	changes := CompositeRefactoryChange named: (#CopyMethods &lt;&lt; #browser &gt;&gt; 'Copy methods').	destClass == aClass 		ifFalse: 			[selectorCollection do: 					[:each | 					changes 						compile: (aClass sourceCodeAt: each)						in: destClass						classified: newProtocol]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="fileNameForSelectors">fileNameForSelectors	| sel |	sel := self definition isForSharedVariable 				ifTrue: 					[self definition classOrNameSpace name , '-' , self definition variableName]				ifFalse: 					[self selectedClass name , '-' , (self selector isKeyword 								ifTrue: 									[(self selector keywords inject: (WriteStream on: (String new: 20))										into: 											[:sum :each | 											sum												nextPutAll: (each copyFrom: 1 to: each size - 1);												yourself]) 											contents]								ifFalse: [self selector])].	^Dialog requestNewFileName: (#FileOutAs &lt;&lt; #browser &gt;&gt; 'File out as')		default: (self filterFilename: sel , '.st')</body><body package="Browser-BrowserUI" selector="fileOutMessage">fileOutMessage	| fileName fileManager |	fileName := self fileNameForSelectors.	fileName isEmpty ifTrue: [^nil].	fileManager := SourceCodeStream write: fileName encoding: #Source.		[fileManager timeStamp.	self definitions do: 			[:each | 			each isForSharedVariable 				ifTrue: 					[fileManager fileOutSharedVariables: (Array with: each variableName)						for: each classOrNameSpace]				ifFalse: 					[fileManager fileOutMessages: (Array with: each selector)						for: each implementingClass]]] 			ensure: [fileManager close]</body><body package="Browser-BrowserUI" selector="inlineSelfSends">inlineSelfSends	self changeRequest ifFalse: [^self].	self handleError: 			[| refactoring |			refactoring := InlineAllSelfSendersRefactoring sendersOf: self selector						in: self methodClass.			self performRefactoring: refactoring.			refactoring messagesNotReplaced &gt; 0 				ifTrue: 					[self warn: ((#x1pMessageSendsWereNotReplaced &lt;&lt; #browser &gt;&gt; '&lt;1p&gt; message sends were not replaced') 								expandMacrosWith: refactoring messagesNotReplaced)].			self refreshLists]</body><body package="Browser-BrowserUI" selector="inspectMethod">inspectMethod	| def |	def := self definition.	def isNil ifTrue: [^self].	def isForSharedVariable 		ifTrue: [def binding inspect]		ifFalse: [def method inspect]</body><body package="Browser-BrowserUI" selector="moveMethod">moveMethod	| newProtocol newClass |	self changeRequest ifFalse: [^self].	newProtocol := IncrementalSearchDialog		requestProtocol: (#EnterNewProtocolOrClassProtoToCopyC &lt;&lt; #browser &gt;&gt; 'Enter new protocol or class&gt;protocol to copy:')		initialAnswer: LastMoveMethodProtocol		inClass: self selectedClass		ifClassNameProvided: [:name | newClass := name].	newProtocol isNil ifTrue: [^self].	newClass notNil ifTrue: [newProtocol := newClass, '&gt;', newProtocol].	LastMoveMethodProtocol := newProtocol.	self 		moveMethods: self selectors		to: newProtocol		in: self selectedClass</body><body package="Browser-BrowserUI" selector="moveMethods:to:in:">moveMethods: selectorCollection to: aProtocol in: aClass 	(aProtocol includes: $&gt;) 		ifTrue: 			[self 				copyMethods: selectorCollection				from: aClass				toProtocol: aProtocol]		ifFalse: 			[self 				recategorizeMethods: selectorCollection				in: aClass				to: aProtocol]</body><body package="Browser-BrowserUI" selector="moveMethodToOtherObject">moveMethodToOtherObject	| variable |	self changeRequest ifFalse: [^self].	variable := self selectVariableForMoveMethod.	variable notNil 		ifTrue: 			[self handleError: 					[self performRefactoring: (MoveMethodRefactoring 								selector: self selector								class: self methodClass								variable: variable).					self refreshLists]]</body><body package="Browser-BrowserUI" selector="moveMethodToParcel">moveMethodToParcel	| parcel |	parcel := self chooseParcel: true.	parcel isNil ifTrue: [^self].	self moveDefinitions: self definitions toParcel: parcel</body><body package="Browser-BrowserUI" selector="printOutMessage">printOutMessage	| stream |	stream := TextStream on: (String new: 1000).	self definitions 		do: [:each | each implementingClass printMethod: each selector on: stream].	self hardcopyStream: stream</body><body package="Browser-BrowserUI" selector="pushDownSelector">pushDownSelector	| refactoring |	self changeRequest ifFalse: [^self].	refactoring := CompositeRefactoring new.	refactoring 		refactorings: (self definitions collect: 					[:each | 					PushDownMethodRefactoring 						model: refactoring model						pushDown: (Array with: each selector)						from: each implementingClass]).	self handleError: 			[self performRefactoring: refactoring.			self refreshLists]</body><body package="Browser-BrowserUI" selector="pushUpSelector">pushUpSelector	| refactoring |	self changeRequest ifFalse: [^self].	refactoring := CompositeRefactoring new.	refactoring 		refactorings: (self definitions collect: 					[:each | 					PushUpMethodRefactoring 						model: refactoring model						pushUp: (Array with: each selector)						from: each implementingClass]).	self handleError: 			[self performRefactoring: refactoring.			self refreshLists]</body><body package="Browser-BrowserUI" selector="recategorizeMethods:in:to:">recategorizeMethods: selectorCollection in: aClass to: aProtocol 	| newProtocol changes |	newProtocol := aProtocol asSymbol.	changes := CompositeRefactoryChange named: (#RecategorizeMethods &lt;&lt; #browser &gt;&gt; 'Recategorize methods').	selectorCollection do: 			[:each | 			| destClass |			destClass := aClass whichClassIncludesSelector: each.			changes addChange: (MoveToProtocolChange 						class: destClass						protocol: newProtocol						symbol: each)].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="removeFromList">removeFromList	self changeRequest ifFalse: [^self].	self definitions do: 			[:each | 			each isForSharedVariable 				ifTrue: 					[self environment 						removeInitializer: (each classOrNameSpace fullyQualifiedReference 								append: each variableName)]				ifFalse: 					[self environment removeClass: each implementingClass						selector: each selector]].	self refreshLists</body><body package="Browser-BrowserUI" selector="removeMethod">removeMethod	| changes |	(self changeRequest and: 			[self 				confirm: (#RemoveAllSelectedMethodsQ &lt;&lt; #browser &gt;&gt; 'Are you certain that you want to remove all selected methods?')]) 		ifFalse: [^self].	changes := CompositeRefactoryChange named: (#RemoveMethods &lt;&lt; #browser &gt;&gt; 'Remove methods').	self methodDefinitions do: 			[:each | 			(each isOverridden and: 					[(Dialog 						choose: ((#x1pIsOverridden &lt;&lt; #browser &gt;&gt; '&lt;1p&gt; is overridden') expandMacrosWith: each)						fromVerticallyAlignedButtonsWithLabels: (Array with: (#RestoreOverridden &lt;&lt; #browser &gt;&gt; 'Restore Overridden') with: (#RemoveFromSystem &lt;&lt; #browser &gt;&gt; 'Remove from System') with: (#Cancel &lt;&lt; #browser &gt;&gt; 'Cancel'))						values: (Array 								with: [true]								with: [false]								with: [^self])						default: [false]) value]) 				ifTrue: 					[changes restoreOverriddenMethod: each selector for: each implementingClass]				ifFalse: [changes removeMethod: each selector from: each implementingClass]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="removeMethodOrStaticOverride">removeMethodOrStaticOverride	self isSharedVariableSelected 		ifTrue: [self removeSharedVariableOverride]		ifFalse: [self removeMethodOverride]</body><body package="Browser-BrowserUI" selector="removeMethodOverride">removeMethodOverride	| overs over |	overs := Override overridesForSelector: self selector				class: self selectedClass.	over := self 				choose: (#ChooseOverrideToRemove &lt;&lt; #browser &gt;&gt; 'Choose override to remove')				fromList: (overs collect: [:each | each componentName])				values: overs				lines: 5				cancel: [nil].	over isNil ifTrue: [^self].	self performChangeWithUpdate: (RemoveOverrideChange for: over)</body><body package="Browser-BrowserUI" selector="removeMethodSafe">removeMethodSafe	| refactoring |	self changeRequest ifFalse: [^self].	refactoring := CompositeRefactoring new.	refactoring 		refactorings: (self definitions collect: 					[:each | 					RemoveMethodRefactoring 						model: refactoring model						removeMethods: (Array with: each selector)						from: each implementingClass]).	self handleError: 			[self performRefactoring: refactoring.			self refreshLists]</body><body package="Browser-BrowserUI" selector="removeMethodsSafe:from:">removeMethodsSafe: selectors from: aClass 	self handleError: 			[self performRefactoring: (RemoveMethodRefactoring removeMethods: selectors						from: aClass)]</body><body package="Browser-BrowserUI" selector="removeParameter">removeParameter	| parseTree argument |	parseTree := self methodClass parseTreeFor: self selector.	parseTree isNil ifTrue: [^self warn: (#CouldNotParseMethodSource &lt;&lt; #browser &gt;&gt; 'Could not parse method source')].	argument := self choose: (#ChooseAnArgumentToRemoveC &lt;&lt; #browser &gt;&gt; 'Choose an argument to remove:')				from: (parseTree arguments collect: [:each | each name]).	argument isNil ifTrue: [^self].	self handleError: 			[| ref |			ref := RemoveParameterRefactoring 						removeParameter: argument						in: self methodClass						selector: self selector.			self performRefactoring: ref.			self setSelector: ref newSelector]</body><body package="Browser-BrowserUI" selector="renameMethod">renameMethod	| newSelector |	self changeRequest ifFalse: [^self].	newSelector := self renameMethod: self selector in: self methodClass.	newSelector isNil ifTrue: [^self].	self setSelector: newSelector</body><body package="Browser-BrowserUI" selector="renameMethod:in:">renameMethod: aSelector in: aClass 	| selector tree dialog args newArgs map |	tree := aClass parseTreeFor: aSelector.	tree isNil 		ifTrue: 			[self warn: (#CouldNotParseTheMethod &lt;&lt; #browser &gt;&gt; 'Could not parse the method').			^nil].	args := tree argumentNames.	dialog := MethodNameDialog methodNameFor: args initial: aSelector.	dialog open ifFalse: [^nil].	selector := dialog methodName.	newArgs := dialog arguments asOrderedCollection.	map := (1 to: args size) collect: [:i | args indexOf: (newArgs at: i)].	^self handleError: 			[self performRefactoring: (RenameMethodRefactoring 						renameMethod: aSelector						in: aClass						to: selector						permutation: map).			selector asSymbol]</body><body package="Browser-BrowserUI" selector="restoreMethodOrStaticOverride">restoreMethodOrStaticOverride	self isSharedVariableSelected 		ifTrue: [self restoreSharedVariableOverride]		ifFalse: [self restoreMethodOverride]</body><body package="Browser-BrowserUI" selector="restoreMethodOverride">restoreMethodOverride	| overs over |	overs := Override overridesForSelector: self selector				class: self selectedClass.	over := self 				choose: (#ChooseOverrideToRestore &lt;&lt; #browser &gt;&gt; 'Choose override to restore')				fromList: (overs collect: [:each | each componentName])				values: overs				lines: 5				cancel: [nil].	over isNil ifTrue: [^self].	self performChangeWithUpdate: (RestoreOverrideChange for: over)</body><body package="Browser-BrowserUI" selector="selectVariableForMoveMethod">selectVariableForMoveMethod	| parseTree nameList ignoreList |	parseTree := self methodClass parseTreeFor: self selector.	parseTree isNil ifTrue: [^self warn: (#CouldNotParseSources &lt;&lt; #browser &gt;&gt; 'Could not parse sources')].	nameList := OrderedCollection new.	nameList		add: (#DashesArgumentsDashes &lt;&lt; #browser &gt;&gt; '---- Arguments ----');		addAll: parseTree argumentNames asSortedCollection;		add: (#DashesInstanceVariablesDashes &lt;&lt; #browser &gt;&gt; '---- Instance Variables ----').	ignoreList := OrderedCollection with: 1 with: nameList size.	nameList addAll: self methodClass allInstVarNames asSortedCollection.	^self 		choose: (#SelectVariableToMoveMethod &lt;&lt; #browser &gt;&gt; 'Select variable to move method into:')		fromList: nameList		values: nameList		ignore: ignoreList		initialSelection: nil		lines: 8		cancel: [nil]</body><body package="Browser-BrowserUI" selector="spawnMethod">spawnMethod	self showWaitCursorWhile: 			[self 				openBrowserOnEnvironment: (SelectorEnvironment onMethods: self definitions)]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>accessing-browser</category><body package="Browser-BrowserUI" selector="beHierarchy">beHierarchy	parts 		do: [:each | (each respondsTo: #beHierarchy) ifTrue: [each beHierarchy]]</body><body package="Browser-BrowserUI" selector="navigatorType">navigatorType	^navigatorType</body><body package="Browser-BrowserUI" selector="navigatorType:">navigatorType: aSymbol 	| newState |	newState := self getState.	navigatorType := aSymbol.	newState clearCodeComponents.	self updateWithState: newState</body><body package="Browser-BrowserUI" selector="replace:with:in:">replace: oldObject with: newObject in: specArray 	^specArray collect: 			[:each | 			oldObject = each 				ifTrue: [newObject]				ifFalse: 					[each class = Array 						ifTrue: 							[self 								replace: oldObject								with: newObject								in: each]						ifFalse: [each]]]</body><body package="Browser-BrowserUI" selector="spec">spec	^self class perform: self windowSpecSymbol</body><body package="Browser-BrowserUI" selector="windowSpecSymbol">windowSpecSymbol	self class navigatorSpecBlocks do: 			[:each | 			| spec |			spec := each value: self.			spec notNil ifTrue: [^spec]].	^#systemWindowSpec</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-category</category><body package="Browser-BrowserUI" selector="addCategory">addCategory	| newCategory categoryName newState |	self changeRequest ifFalse: [^self].	categoryName := self request: (#EnterNewCategory &lt;&lt; #browser &gt;&gt; 'Enter new category').	(categoryName isNil or: [categoryName isEmpty]) ifTrue: [^self].	newCategory := categoryName asSymbol.	self performChange: (AddProtocolChange nameSpace: self nameSpace				protocol: newCategory).	newState := self getState.	newState category: newCategory.	self updatePartsWith: newState</body><body package="Browser-BrowserUI" selector="allReferencesInNameSpaces:andCategory:">allReferencesInNameSpaces: nameSpaceCollection andCategory: aCategory 	| refs |	refs := OrderedCollection new.	nameSpaceCollection do: 			[:each | 			(each asNameSpace organization listAtCategoryNamed: aCategory) 				do: [:name | refs add: (each fullName asQualifiedReference append: name)]].	^refs</body><body package="Browser-BrowserUI" selector="changesForMoveNames:to:">changesForMoveNames: nameCollection to: aCategory 	| changes |	changes := CompositeRefactoryChange named: (#MoveObjectsToCategory &lt;&lt; #browser &gt;&gt; 'Move objects to category').	nameCollection do: 			[:each | 			| ref |			ref := each asQualifiedReference.			ref bindingOrNil notNil 				ifTrue: 					[changes addChange: (MoveToProtocolChange 								nameSpace: ref environment								protocol: aCategory								symbol: ref simpleName)]].	^changes</body><body package="Browser-BrowserUI" selector="changesForRemoveCategories:fromNameSpaces:">changesForRemoveCategories: categoryCollection fromNameSpaces: nameSpaceCollection 	| nameSpaces changes classes variables |	classes := Set new.	variables := Set new.	nameSpaces := Set new.	categoryCollection do: 			[:each | 			(self allReferencesInNameSpaces: nameSpaceCollection				andCategory: each asSymbol) do: 						[:ref | 						| title |						title := ref value.						title isBehavior 							ifTrue: [classes add: title]							ifFalse: 								[title isNameSpace 									ifTrue: [nameSpaces add: title fullName]									ifFalse: [variables add: ref fullName]]]].	classes := SystemUtils sortForLoading: classes.	changes := CompositeRefactoryChange named: (#RemoveCategory1 &lt;&lt; #browser &gt;&gt; 'Remove category').	variables do: [:each | changes removeSharedVariableNamed: each].	classes reverseDo: [:cls | changes removeClass: cls].	nameSpaces do: [:each | changes removeNameSpaceNamed: each].	categoryCollection do: 			[:each | 			nameSpaceCollection 				do: [:nameSpace | changes removeSharedVariableProtocol: each from: nameSpace]].	^changes</body><body package="Browser-BrowserUI" selector="fileOutCategory">fileOutCategory	| fileName fileManager |	fileName := Dialog requestNewFileName: (#FileOutOn &lt;&lt; #browser &gt;&gt; 'File out on')				default: (self filterFilename: self category , '.st').	fileName isEmpty ifTrue: [^nil].	fileManager := SourceCodeStream write: fileName encoding: #Source.		[self categories do: 			[:each | 			self environment nameSpacesDo: 					[:nameSpace | 					nameSpace organization fileOutCategorySource: each on: fileManager]]] 			ensure: [fileManager close]</body><body package="Browser-BrowserUI" selector="hardcopyCategory">hardcopyCategory	| stream |	stream := TextStream on: (String new: 1000).	self categories do: 			[:each | 			self environment 				nameSpacesDo: [:nameSpace | nameSpace organization printOutCategory: each on: stream]].	self hardcopyStream: stream</body><body package="Browser-BrowserUI" selector="moveNames:to:">moveNames: nameCollection to: aCategory 	| changes |	changes := self changesForMoveNames: nameCollection to: aCategory.	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="openBrowserOnEnvironment:">openBrowserOnEnvironment: env 	^RefactoringBrowser openOnEnvironment: env withSelection: self getState</body><body package="Browser-BrowserUI" selector="removeCategories:fromNameSpaces:">removeCategories: categoryCollection fromNameSpaces: nameSpaceCollection 	| changes |	self changeRequest ifFalse: [^self].	(categoryCollection allSatisfy: 			[:each | 			(self allReferencesInNameSpaces: nameSpaceCollection				andCategory: each asSymbol) isEmpty]) 		ifFalse: 			[(self 				confirm: (#RemoveAllClassesAndSharedInSelectedCategoriesQ &lt;&lt; #browser &gt;&gt; 'Are you certain that you want to remove all classes and shared variables in the selected categories?')) 					ifFalse: [^self]].	changes := self changesForRemoveCategories: categoryCollection				fromNameSpaces: nameSpaceCollection.	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="removeCategory">removeCategory	self removeCategories: self categories		fromNameSpaces: Root withAllNameSpaces</body><body package="Browser-BrowserUI" selector="rename:to:inNameSpaces:">rename: category to: newCategory inNameSpaces: nameSpaces 	| changes refs |	changes := CompositeRefactoryChange named: (#RenameProtocol1 &lt;&lt; #browser &gt;&gt; 'Rename protocol').	refs := self allReferencesInNameSpaces: nameSpaces andCategory: category.	changes addChange: (self 				changesForMoveNames: (refs collect: [:each | each fullName])				to: newCategory).	nameSpaces do: 			[:each | 			(each asNameSpace organization categories includes: category) 				ifTrue: 					[(each asNameSpace organization listAtCategoriesNamed: category) isEmpty 						ifTrue: 							[changes addChange: (RenameProtocolChange 										nameSpace: each										oldProtocol: category										newProtocol: newCategory)]						ifFalse: 							[changes 								addChange: (RemoveProtocolChange nameSpace: each protocol: category)]]].	self performChange: changes</body><body package="Browser-BrowserUI" selector="renameCategory">renameCategory	| newCategory categoryName newState |	self changeRequest ifFalse: [^self].	categoryName := self request: (#EnterNewCategory &lt;&lt; #browser &gt;&gt; 'Enter new category')				initialAnswer: self category.	(categoryName isNil or: [categoryName isEmpty]) ifTrue: [^self].	newCategory := categoryName asSymbol.	newState := self getState.	self 		rename: self category		to: newCategory		inNameSpaces: Root withAllNameSpaces.	newState category: newCategory.	self updateWithState: newState</body><body package="Browser-BrowserUI" selector="spawnCategory">spawnCategory	self showWaitCursorWhile: 			[self 				openBrowserOnEnvironment: (self environment forCategories: self categories)]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>store-packages</category><body package="Browser-BrowserUI" selector="defaultDbId">defaultDbId	| id |	id := self dbRegistry dbIdentifier.	^id isNil ifTrue: [#''] ifFalse: [id]</body><body package="Browser-BrowserUI" selector="loadAnotherPundle">loadAnotherPundle	self dbRegistry doIfOnlineImage: 		[#{PublishedPundlesTool} ifDefinedDo: 			[:tool |  tool openOnAllPublishedPundles]]</body><body package="Browser-BrowserUI" selector="loadPundle:">loadPundle: pundle 	| imagePundle existingImagePundle |	existingImagePundle := pundle getImagePundle.	(existingImagePundle notNil 		and: [(existingImagePundle allDatabases includes: pundle dbIdentifier) not]) 			ifTrue: 				[(self 					confirm: ((#x1sIsNotLinkedToDatabaseReconcileQ &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; is not linked to the current database.&lt;n&gt;It cannot be loaded until it has been reconciled.&lt;n&gt;Do you want to do that now?') 							expandMacrosWith: pundle name)) 						ifFalse: [^nil].				existingImagePundle reconcileWithDb: pundle].	imagePundle := pundle loadSrc.	^imagePundle</body><body package="Browser-BrowserUI" selector="storeAllDbsBrowseChanges">storeAllDbsBrowseChanges	^self storeDbsPerforming: #storeBrowseChanges:</body><body package="Browser-BrowserUI" selector="storeAllDbsChangeListOnChanges">storeAllDbsChangeListOnChanges	^self storeDbsPerforming: #storeChangeListOnChanges:</body><body package="Browser-BrowserUI" selector="storeAllDbsFileoutChanges">storeAllDbsFileoutChanges	^self storeDbsPerforming: #storeFileoutPundleChanges:</body><body package="Browser-BrowserUI" selector="storeAllDbsInspectChangeSet">storeAllDbsInspectChangeSet	^self storeDbsPerforming: #storeInspectChangeSet:</body><body package="Browser-BrowserUI" selector="storeBrowseChanges">storeBrowseChanges	self storeBrowseChanges: self defaultDbId</body><body package="Browser-BrowserUI" selector="storeBrowseChanges:">storeBrowseChanges: dbIdentifier 	| env |	env := SelectorEnvironment new.	env label: (#ChangedMethods1 &lt;&lt; #browser &gt;&gt; 'Changed methods').	self packages do: 			[:each | 			(each changedMessageListFor: dbIdentifier) 				do: [:meth | env addClass: meth implementingClass selector: meth selector]].	self browseEnvironment: env</body><body package="Browser-BrowserUI" selector="storeBrowsePundleVersions">storeBrowsePundleVersions	self dbRegistry doIfOnlineImage: 			[self pundles 				do: [:each | TabApplicationSystemBrowser browseVersionsOfPundle: each]]</body><body package="Browser-BrowserUI" selector="storeChangeListOnChanges">storeChangeListOnChanges	self storeChangeListOnChanges: self defaultDbId</body><body package="Browser-BrowserUI" selector="storeChangeListOnChanges:">storeChangeListOnChanges: dbid 	self pundleChangeListClass openOn: self pundle for: dbid</body><body package="Browser-BrowserUI" selector="storeComparePundleVersion">storeComparePundleVersion	self dbRegistry doIfOnlineImage: 			[| trPkg |			trPkg := self pundle selectVersion.			trPkg isNil ifTrue: [^self].			self pundle isPackage 				ifTrue: 					[self comparisonBrowserClass comparePackage: self pundle toPackage: trPkg]				ifFalse: [self bundleDifferenceBrowserClass compare: self pundle with: trPkg]]</body><body package="Browser-BrowserUI" selector="storeCompareWithParent">storeCompareWithParent	self dbRegistry doIfOnlineImage: 			[self pundles do: 					[:each | 					| trace |					(trace := each parentRecord) isNil ifTrue: [^self].					each isPackage 						ifTrue: [self comparisonBrowserClass comparePackage: each toPackage: trace]						ifFalse: [self bundleDifferenceBrowserClass compare: each with: trace]]]</body><body package="Browser-BrowserUI" selector="storeCreateBundle">storeCreateBundle	self bundleSpecEditorClass open</body><body package="Browser-BrowserUI" selector="storeCreatePackage">storeCreatePackage	| newName pkg newState |	newName := SmalltalkWorkbench requestNewPackageName.	newName isNil ifTrue: [^self].	pkg := PackageModel named: newName.	self isBundleSelected ifTrue: [self pundle addItem: pkg].	newState := self getState.	newState pundle: pkg.	self updateWithState: newState</body><body package="Browser-BrowserUI" selector="storeDbsPerforming:">storeDbsPerforming: aSymbol 	| pundle |	pundle := self pundle.	pundle isNil ifTrue: [^#()].	^pundle databaseList asSortedCollection collect: 			[:each | 			RBCommand 				named: each				description: (#StoreAction &lt;&lt; #browser &gt;&gt; 'Store action')				action: [self perform: aSymbol with: each]				receiver: #yourself]</body><body package="Browser-BrowserUI" selector="storeEditBundleSpecification">storeEditBundleSpecification	self bundleSpecEditorClass openOnBundle: self pundle</body><body package="Browser-BrowserUI" selector="storeFileinPackage">storeFileinPackage	| fileName |	self changeRequest ifFalse: [^self].	fileName := Dialog 				requestFileName: (#FileInFromFileNamed &lt;&lt; #browser &gt;&gt; 'File in from file named')				default: '*.st'				version: #mustBeOld				ifFail: [''].	fileName isEmpty ifTrue: [^self].	[ self setPackage: self package		while: 			[Notice 				show: ((#LoadingFilen1s &lt;&lt; #browser &gt;&gt; 'Loading file&lt;n&gt;&lt;1s&gt;')			expandMacrosWith: fileName asString)				while: [(fileName asFilename withEncoding: #Source) fileIn]]	] on: RedefinitionNotification do:		[ :note | 		note currentPackage = self package			ifFalse: [ note override install ].		note resume.		].	self refreshLists</body><body package="Browser-BrowserUI" selector="storeFileoutPundle">storeFileoutPundle	self pundles do: [:each | each fileOut]</body><body package="Browser-BrowserUI" selector="storeFileoutPundleChanges">storeFileoutPundleChanges	^self storeFileoutPundleChanges: self defaultDbId</body><body package="Browser-BrowserUI" selector="storeFileoutPundleChanges:">storeFileoutPundleChanges: dbid 	| pundles filename stream |	pundles := self pundles.	filename := pundles size = 1 				ifTrue: [self pundle name asString]				ifFalse: [(#changes &lt;&lt; #browser &gt;&gt; 'changes') asString].	filename := Dialog requestNewFileName: (#FileOutChangesOn &lt;&lt; #browser &gt;&gt; 'File out changes on')				default: (Filename filterFilename: filename , '.st').	filename isEmpty ifTrue: [^self].	Cursor write showWhile: 			[stream := SourceCodeStream write: filename.						[stream timeStamp.			pundles do: [:pun | pun fileOutChangesForDb: dbid on: stream]] 					ensure: [stream close]]</body><body package="Browser-BrowserUI" selector="storeFileoutPundleDifferences">storeFileoutPundleDifferences	| pundle otherVersion |	pundle := self pundle.	(otherVersion := pundle selectVersion) isNil ifTrue: [^self].	(pundle pundleChangesClass with: pundle with: otherVersion) 		fileOutChangesFor: 1</body><body package="Browser-BrowserUI" selector="storeInspectChangeSet">storeInspectChangeSet	self storeInspectChangeSet: self defaultDbId</body><body package="Browser-BrowserUI" selector="storeInspectChangeSet:">storeInspectChangeSet: dbid 	| hasChanges |	hasChanges := false.	self packages do: 			[:each | 			| changeSet |			changeSet := each changeSetFor: dbid.			(changeSet notNil and: [changeSet notEmpty]) 				ifTrue: 					[hasChanges := true.					changeSet inspect]].	hasChanges ifFalse: [self warn: (#NoChanges &lt;&lt; #browser &gt;&gt; 'No changes')]</body><body package="Browser-BrowserUI" selector="storeLoadPundle">storeLoadPundle	self changeRequest ifFalse: [^self].	self dbRegistry doIfOnlineImage: 			[| pundle |			pundle := self pundle selectVersion.			pundle isNil ifTrue: [^self].			(self confirm: ((#DoYouWantToLoad1s &lt;&lt; #browser &gt;&gt; 'Do you want to load &lt;1s&gt; ?')			expandMacrosWith: pundle itemString)) 				ifTrue: [(self loadPundle: pundle) notNil ifTrue: [self refreshLists]]]</body><body package="Browser-BrowserUI" selector="storeMakeCurrent">storeMakeCurrent	self performChange: (CurrentPackageChange package: self package)</body><body package="Browser-BrowserUI" selector="storeNewClassExtension">storeNewClassExtension	| class |	self changeRequest ifFalse: [^self].	class := SelectClassDialog selectClass: (#SelectClassToExtend &lt;&lt; #browser &gt;&gt; 'Select Class to Extend').	class isNil ifTrue: [^self].	self extend: class inPackage: self package</body><body package="Browser-BrowserUI" selector="storePublishAsParcel">storePublishAsParcel	self publishAsParcelDialogClass publishAsParcel: self pundle</body><body package="Browser-BrowserUI" selector="storePublishPundle">storePublishPundle	self dbRegistry doIfOnlineImage: 			[self showWaitCursorWhile: [self pundles do: [:each | each storeInDB]]]</body><body package="Browser-BrowserUI" selector="storePundleProperties">storePundleProperties	PackagePropertiesDialog on: self pundle</body><body package="Browser-BrowserUI" selector="storeReconcilePundle">storeReconcilePundle	| pundle |	pundle := self pundle.	(pundle hasTrace and: [pundle validateDatabaseId]) 		ifTrue: 			[(self confirm: (#PackageHasParentSelectNewQ &lt;&lt; #browser &gt;&gt; 'Package already has a parent.&lt;n&gt;Select a new parent?') 						expandMacros) 				ifFalse: [^self]].	self dbRegistry doIfOnlineImage: [pundle reconcileWithDb]</body><body package="Browser-BrowserUI" selector="storeRenamePundle">storeRenamePundle	| pundle string |	self changeRequest ifFalse: [^self].	pundle := self pundle.	string := self request: (#EnterNewName &lt;&lt; #browser &gt;&gt; 'Enter new name') initialAnswer: pundle name.	string isEmpty ifTrue: [^self].	(pundle isPackage 		ifTrue: [self storeRegistry packageNamed: string]		ifFalse: [self storeRegistry bundleNamed: string]) isNil 		ifFalse: [^self warn: ((#x1sAlreadyExists &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; already exists')			expandMacrosWith: string)].	pundle renameTo: string.	self refreshLists</body><body package="Browser-BrowserUI" selector="storeUnloadPundle">storeUnloadPundle	| pundles |	self changeRequest ifFalse: [^self].	pundles := self pundles.	(self 		confirm: ((#Unload1s &lt;&lt; #browser &gt;&gt; 'Unload&lt;1s&gt;?')			expandMacrosWith: (pundles inject: '' into: [:sum :each | ('&lt;1s&gt; &lt;2s&gt;'					expandMacrosWith: sum					with: each name)]))) 		ifFalse: [^self].	Notice 		show: (#UnloadingDots &lt;&lt; #browser &gt;&gt; 'Unloading...') 		while: [pundles do: [:each | each unloadFromImage]].	self refreshLists</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>store-classes</category><body package="Browser-BrowserUI" selector="extend:inPackage:">extend: class inPackage: package 	package modelAtFullSymbol: class absoluteSymbol hasDefinition: false.	self updateWithState: ((self navigatorStateClass new)				pundle: package;				classOrNameSpace: class;				yourself)</body><body package="Browser-BrowserUI" selector="extendClassInPackage">extendClassInPackage	| package class |	package := self choosePackage: (#ExtendInPackageC &lt;&lt; #browser &gt;&gt; 'Extend in package:')				without: (self storeRegistry packagesContaining: self classOrNameSpace).	package isNil ifTrue: [^self].	class := self classOrNameSpace.	self extend: class inPackage: package</body><body package="Browser-BrowserUI" selector="storeBrowseClassVersions">storeBrowseClassVersions	self dbRegistry doIfOnlineImage: 			[TabApplicationSystemBrowser 				browseVersionsOfNamespaceOrClass: self storeClass]</body><body package="Browser-BrowserUI" selector="storeBrowseRemovedMethods">storeBrowseRemovedMethods	self dbRegistry doIfOnlineImage: 			[TabApplicationSystemBrowser browseAvailableMethodsNamed: '*'				in: self selectedClass]</body><body package="Browser-BrowserUI" selector="storeClass">storeClass	^self storeRegistry defClassModelForClassSymbol: state objectName asSymbol</body><body package="Browser-BrowserUI" selector="storeCompareBindingWithVersion:">storeCompareBindingWithVersion: binding 	self dbRegistry doIfOnlineImage: 			[| trace imageObject |			binding isForGeneral 				ifTrue: 					[trace := self storeSharedVariableClass selectVersionNamed: binding key								in: (Root whoDefinesBinding: binding) absoluteName.					imageObject := self sharedVariableDescriptorClass fromDataKey: binding key								owner: (Root whoDefinesBinding: binding)]				ifFalse: 					[binding isForClass 						ifTrue: 							[trace := self storeClassClass 										selectVersionNamed: binding value absoluteName.							imageObject := self classDescriptorClass fromModel: binding value]						ifFalse: 							[trace := self storeNameSpaceClass 										selectVersionNamed: binding value absoluteName.							imageObject := self nameSpaceDescriptorClass fromModel: binding value]].			trace isNil ifTrue: [^self].			self comparisonBrowserClass compareClass: imageObject toClass: trace]</body><body package="Browser-BrowserUI" selector="storeCompareWithVersion">storeCompareWithVersion	self storeCompareBindingWithVersion: self selectedBinding</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>store-shared variables</category><body package="Browser-BrowserUI" selector="sharedVariableBinding">sharedVariableBinding	^self classOrNameSpace bindingFor: self sharedVariableName</body><body package="Browser-BrowserUI" selector="storeBrowseSharedVariableVersions">storeBrowseSharedVariableVersions	self dbRegistry doIfOnlineImage: 			[TabApplicationSystemBrowser 				browseVersionsOfStaticNamed: self sharedVariableName				in: self classOrNameSpace]</body><body package="Browser-BrowserUI" selector="storeCompareSharedVariableWithVersion">storeCompareSharedVariableWithVersion	self storeCompareBindingWithVersion: self sharedVariableBinding</body><body package="Browser-BrowserUI" selector="storeRevertSharedVariable">storeRevertSharedVariable	self changeRequest ifFalse: [^self].	self dbRegistry doIfOnlineImage: 			[(self confirm: (#ReplaceThisWithStoredVersionQ &lt;&lt; #browser &gt;&gt; 'Do you want to replace this with the stored version?')) 				ifFalse: [^self].			self storeChangeSet revertData: self sharedVariableName				owner: self classOrNameSpace.			self refreshLists]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>store-methods</category><body package="Browser-BrowserUI" selector="storeBrowseMethodVersions">storeBrowseMethodVersions	self dbRegistry doIfOnlineImage: 			[TabApplicationSystemBrowser 				browseVersionsOfMethodOrStatic: self storeMethod]</body><body package="Browser-BrowserUI" selector="storeCompareMethodWithVersion">storeCompareMethodWithVersion	self dbRegistry doIfOnlineImage: 			[| trace |			trace := self storeMethodClass 						selectVersionNamed: self selector						in: self methodClass instanceBehavior absoluteName						meta: self methodClass isMeta.			trace isNil ifTrue: [^self].			self comparisonBrowserClass compareMethod: self storeMethod toMethod: trace]</body><body package="Browser-BrowserUI" selector="storeMethod">storeMethod	| package selector class |	class := self methodClass.	selector := self selector.	package := self storeRegistry containingPackageForSelector: selector				class: class.	^package 		method: selector		forClassNamed: class instanceBehavior absoluteName		meta: class isMeta</body><body package="Browser-BrowserUI" selector="storeRevertMethod">storeRevertMethod	self changeRequest ifFalse: [^self].	self dbRegistry doIfOnlineImage: 			[(self confirm: (#RevertToLastPublishedVersionQ &lt;&lt; #browser &gt;&gt; 'Revert this method to the last published version?')) 				ifFalse: [^self].			self storeChangeSet revertSelector: self selector class: self methodClass.			self refreshLists]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-code components</category><body package="Browser-BrowserUI" selector="browseOverridden">browseOverridden	| overrides |	overrides := OrderedCollection new.	self packages do: [:each | overrides addAll: each overrides].	self parcels do: [:each | overrides addAll: each overrides].	overrides isEmpty ifTrue: [^self warn: (#NoOverriddenCode &lt;&lt; #browser &gt;&gt; 'No overridden code')].	OverrideList new openOn: overrides</body><body package="Browser-BrowserUI" selector="browseOverrides">browseOverrides	| overrides |	overrides := OrderedCollection new.	self packages 		do: [:each | overrides addAll: (Override overriddenByComponent: each)].	self parcels 		do: [:each | overrides addAll: (Override overriddenByComponent: each)].	overrides isEmpty ifTrue: [^Dialog warn: (#NoOverrides &lt;&lt; #browser &gt;&gt; 'No overrides')].	OverrideList new openOn: overrides</body><body package="Browser-BrowserUI" selector="codeIn:codeComponents:sharedVariablesDo:nameSpacesDo:definedClassesDo:methodsDo:">codeIn: aNameCollection codeComponents: parcelPackageCollection sharedVariablesDo: svBlock nameSpacesDo: nsBlock definedClassesDo: cBlock methodsDo: mBlock 	aNameCollection do: 			[:each | 			| binding ref |			ref := each asQualifiedReference.			binding := ref bindingOrNil.			parcelPackageCollection do: 					[:codeComponent | 					binding isForNameSpace 						ifTrue: 							[(codeComponent definesObject: binding value) 								ifTrue: [nsBlock value: binding value]]						ifFalse: 							[(codeComponent definesClass: binding value) 								ifTrue: [cBlock value: binding value].							(codeComponent definedSelectorsFor: binding value) copy 								do: [:sel | mBlock value: binding value value: sel].							(codeComponent definedSelectorsFor: binding value class) copy 								do: [:sel | mBlock value: binding value class value: sel]].					(codeComponent definedBindingsFor: binding value) copy do: 							[:sv | 							sv isForGeneral 								ifTrue: 									[svBlock 										value: (binding value fullName , '.' , sv key) asQualifiedReference]]]]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="copyProtocols:from:to:">copyProtocols: protocols from: fromClass to: class 	| changes |	changes := CompositeRefactoryChange named: (#DropProtocols &lt;&lt; #browser &gt;&gt; 'Drop protocols').	protocols do: 			[:each | 			(fromClass organization listAtCategoryNamed: each) do: 					[:sel | 					self 						copySelector: sel						from: fromClass						to: class						classified: each						using: changes]].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="copySelector:from:to:classified:using:">copySelector: each from: fromClass to: class classified: protocol using: aCompositeRefactoryChange 	((class includesSelector: each) and: 			[(self 				confirm: ((#DoYouWantToReplace1sIn2p &lt;&lt; #browser &gt;&gt; 'Do you want to replace &lt;1s&gt; in &lt;2p&gt;') expandMacrosWith: each						with: class)) 					not]) 		ifFalse: 			[aCompositeRefactoryChange 				compile: (fromClass sourceCodeAt: each)				in: class				classified: protocol]</body><body package="Browser-BrowserUI" selector="copySelectors:from:to:">copySelectors: fromClass from: selectors to: class 	| changes |	changes := CompositeRefactoryChange named: (#CopyMethods &lt;&lt; #browser &gt;&gt; 'Copy methods').	selectors do: 			[:each | 			| definingClass |			definingClass := fromClass whichClassIncludesSelector: each.			self 				copySelector: each				from: definingClass				to: class				classified: (definingClass whichCategoryIncludesSelector: each)				using: changes].	self performChangeWithUpdate: changes</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>store-testing</category><body package="Browser-BrowserUI" selector="hasMultipleDatabases">hasMultipleDatabases	| pundle |	pundle := self pundle.	^pundle notNil and: [pundle databaseList size &gt; 1]</body><body package="Browser-BrowserUI" selector="hasSingleDatabase">hasSingleDatabase	| pundle |	pundle := self pundle.	^pundle isNil or: [pundle databaseList size &lt; 2]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-shared variables</category><body package="Browser-BrowserUI" selector="addSharedVariableChangeFromDialog:">addSharedVariableChangeFromDialog: aCreationDialog	| arguments definition change |	arguments := OrderedCollection new.	arguments		add: (aCreationDialog nameSpaceOrDo: [^nil]) fullName;		add: (aCreationDialog nameOrDo: [^nil]);		add: aCreationDialog private;		add: aCreationDialog constant;		add: aCreationDialog category asString;		add: aCreationDialog initializer.	definition := '&lt;1s&gt; defineSharedVariable: #&lt;2s&gt; private: &lt;3p&gt;  constant: &lt;4p&gt; category: &lt;5p&gt; initializer: &lt;6p&gt;'		expandMacrosWithArguments: arguments.	change := AddSharedVariableChange definition: definition.	change package: (aCreationDialog packageOrDo: [^nil]).	^change</body><body package="Browser-BrowserUI" selector="createSharedVariableFromDialog:">createSharedVariableFromDialog: aCreationDialog	| addSharedVariableChange |	addSharedVariableChange := self addSharedVariableChangeFromDialog: aCreationDialog.	addSharedVariableChange isNil ifTrue: [^nil].	self performChange: addSharedVariableChange.	^addSharedVariableChange definedObject</body><body package="Browser-BrowserUI" selector="globalSharedVariableReferences">globalSharedVariableReferences	| binding |	binding := self sharedVariableBinding.	binding isNil ifTrue: [^self].	self browseGlobalReferencesTo: binding</body><body package="Browser-BrowserUI" selector="initializeSharedVariable">initializeSharedVariable	| variableRefs |	variableRefs := self sharedVariableDefinitions 				collect: [:each | each objectName asQualifiedReference].	self initializeVariables: variableRefs</body><body package="Browser-BrowserUI" selector="initializeVariables:">initializeVariables: bindingReferences 	self changeRequest ifFalse: [^self].	bindingReferences do: 			[:each | 			each initialize.			SourceFileManager default initializeThisObject: each].	self refreshLists</body><body package="Browser-BrowserUI" selector="localSharedVariableReferences">localSharedVariableReferences	| binding |	binding := self sharedVariableBinding.	binding isNil ifTrue: [^self].	self browseLocalReferencesTo: binding</body><body package="Browser-BrowserUI" selector="moveSharedVariableNames:to:in:">moveSharedVariableNames: aCollection to: aProtocol in: aClassOrNameSpace 	| newProtocol changes |	newProtocol := aProtocol asSymbol.	changes := CompositeRefactoryChange named: (#RecategorizeVariables &lt;&lt; #browser &gt;&gt; 'Recategorize variables').	aCollection do: 			[:each | 			changes addChange: (MoveToProtocolChange 						nameSpace: aClassOrNameSpace						protocol: newProtocol						symbol: each)].	self performChangeWithUpdate: changes</body><body package="Browser-BrowserUI" selector="moveSharedVariableToPackage">moveSharedVariableToPackage	self moveMethodToPackage</body><body package="Browser-BrowserUI" selector="moveSharedVariableToProtocol">moveSharedVariableToProtocol	| newProtocol |	self changeRequest ifFalse: [^self].	newProtocol := self request: (#EnterNewProtocol &lt;&lt; #browser &gt;&gt; 'Enter new protocol')				initialAnswer: LastMoveMethodProtocol.	newProtocol isEmpty ifTrue: [^self].	LastMoveMethodProtocol := newProtocol.	self 		moveSharedVariableNames: self sharedVariableNames		to: newProtocol		in: self classOrNameSpace</body><body package="Browser-BrowserUI" selector="removeSharedVariable">removeSharedVariable	self changeRequest ifFalse: [^self].	(self 		confirm: (#RemoveAllSelectedVarsQ &lt;&lt; #browser &gt;&gt; 'Are you certain that you want to remove all selected variables?')) 			ifFalse: [^self].	self sharedVariableNames 		do: [:each | self removeSharedVariableNamed: self classOrNameSpace fullName , '.' , each].	self refreshLists</body><body package="Browser-BrowserUI" selector="removeSharedVariableOverride">removeSharedVariableOverride	| overs over |	overs := Override overridesForStatic: (self classOrNameSpace 						bindingFor: self sharedVariableName)				in: self classOrNameSpace.	over := self 				choose: (#ChooseOverrideToRemove &lt;&lt; #browser &gt;&gt; 'Choose override to remove')				fromList: (overs collect: [:each | each componentName])				values: overs				lines: 5				cancel: [nil].	over isNil ifTrue: [^self].	self performChangeWithUpdate: (RemoveOverrideChange for: over)</body><body package="Browser-BrowserUI" selector="removeSharedVariableSafe">removeSharedVariableSafe	self changeRequest ifFalse: [^self].	self removeObjectsNamedSafe: (self sharedVariableNames 				collect: [:each | self classOrNameSpace fullName , '.' , each]).	self refreshLists</body><body package="Browser-BrowserUI" selector="renameSharedVariable">renameSharedVariable	self renameObjectNamed: self classOrNameSpace fullName , '.' 				, self sharedVariableName</body><body package="Browser-BrowserUI" selector="restoreSharedVariableOverride">restoreSharedVariableOverride	| overs over |	overs := Override overridesForStatic: (self classOrNameSpace 						bindingFor: self sharedVariableName)				in: self classOrNameSpace.	over := self 				choose: (#ChooseOverrideToRestore &lt;&lt; #browser &gt;&gt; 'Choose override to restore')				fromList: (overs collect: [:each | each componentName])				values: overs				lines: 5				cancel: [nil].	over isNil ifTrue: [^self].	self performChangeWithUpdate: (RestoreOverrideChange for: over)</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	navigatorType := NavigatorType.	cachedSelectors := nil -&gt; nil.	windowLabel := ''.	super initialize</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-instance variables support</category><body package="Browser-BrowserUI" selector="abstractInstanceVariable:in:">abstractInstanceVariable: aString in: aClass 	self handleError: 			[self 				performRefactoring: (AbstractInstanceVariableRefactoring variable: aString						class: aClass)]</body><body package="Browser-BrowserUI" selector="abstractInstanceVariableType:">abstractInstanceVariableType: aSymbol 	| instVars |	self changeRequest ifFalse: [^self].	instVars := self selectInstanceVariables: aSymbol.	instVars isEmpty ifTrue: [^self].	instVars do: 			[:each | 			self abstractInstanceVariable: each				in: (self nonMetaClass perform: aSymbol)].	self refreshLists</body><body package="Browser-BrowserUI" selector="addInstanceVariableIn:">addInstanceVariableIn: aClass 	| newName |	newName := self requestInstanceVariableName: ''.	newName isNil ifTrue: [^self].	self handleError: 			[self performRefactoring: (AddInstanceVariableRefactoring variable: newName						class: aClass)]</body><body package="Browser-BrowserUI" selector="addInstanceVariableType:">addInstanceVariableType: aSymbol 	self changeRequest ifFalse: [^self].	self addInstanceVariableIn: (self nonMetaClass perform: aSymbol).	self refreshLists</body><body package="Browser-BrowserUI" selector="createInstanceVariableAccessorsType:">createInstanceVariableAccessorsType: aSymbol 	| instVars |	self changeRequest ifFalse: [^self].	instVars := self selectInstanceVariables: aSymbol.	instVars isEmpty ifTrue: [^self].	instVars do: 			[:each | 			self handleError: 					[self 						performRefactoring: (CreateAccessorsForVariableRefactoring variable: each								class: (self nonMetaClass perform: aSymbol))]].	self refreshLists</body><body package="Browser-BrowserUI" selector="forClasses:showVariableMenu:collect:">forClasses: aCollection showVariableMenu: generatorBlock collect: valueBlock 	| variables labels tab listW sd spec buttons |	variables := OrderedCollection new.	labels := SelectionInList new.	tab := String with: Character tab.	aCollection do: 			[:eachClass | 			| varList |			varList := generatorBlock value: eachClass.			varList notEmpty 				ifTrue: 					[labels list add: (Text string: eachClass name emphasis: #italic).					labels selectionIndex: labels list size + 1.					variables add: nil.					(generatorBlock value: eachClass) do: 							[:var | 							labels list add: tab , (valueBlock value: var).							variables addLast: var]]].	variables isEmpty ifTrue: [^nil].	sd := SimpleDialog new.	spec := sd class interfaceSpecFor: #emptySpec.	sd builder add: spec window.	sd builder add: spec component.	sd setInitialGap.	sd addMessage: (#SelectVariableC &lt;&lt; #browser &gt;&gt; 'Select variable:') centered: true.	sd addGap: 8.	listW := sd 				addList: labels				lines: (20 min: variables size + 2)				validation: [labels selectionIndex &gt; 0].	listW widget setValidTargetIndex: labels selectionIndex.	sd addGap: 4.	buttons := sd addOK: [labels selectionIndex ~= 0].	sd addGap: 6.	sd bottomAlignLowerEdge: listW.	sd bottomAlign: (Array with: buttons).	sd preOpen.	sd builder openDialogWithExtent: sd builder window displayBox extent.	^sd accept value 		ifTrue: [variables at: labels selectionIndex]		ifFalse: [nil]</body><body package="Browser-BrowserUI" selector="globalInstanceVariableReadersType:">globalInstanceVariableReadersType: aSymbol 	| instVar |	instVar := self selectInstanceVariable: aSymbol.	instVar notNil 		ifTrue: 			[self browseGlobalInstVarReadersTo: instVar				in: (self nonMetaClass perform: aSymbol)]</body><body package="Browser-BrowserUI" selector="globalInstanceVariableReferencesType:">globalInstanceVariableReferencesType: aSymbol 	| instVar |	instVar := self selectInstanceVariable: aSymbol.	instVar notNil 		ifTrue: 			[self browseGlobalInstVarRefsTo: instVar				in: (self nonMetaClass perform: aSymbol)]</body><body package="Browser-BrowserUI" selector="globalInstanceVariableWritersType:">globalInstanceVariableWritersType: aSymbol 	| instVar |	instVar := self selectInstanceVariable: aSymbol.	instVar notNil 		ifTrue: 			[self browseGlobalInstVarWritersTo: instVar				in: (self nonMetaClass perform: aSymbol)]</body><body package="Browser-BrowserUI" selector="instanceVariableReadersType:">instanceVariableReadersType: aSymbol 	| instVar |	instVar := self selectInstanceVariable: aSymbol.	instVar notNil 		ifTrue: 			[self browseInstVarReadersTo: instVar				in: (self nonMetaClass perform: aSymbol)]</body><body package="Browser-BrowserUI" selector="instanceVariableReferencesType:">instanceVariableReferencesType: aSymbol 	| instVar |	instVar := self selectInstanceVariable: aSymbol.	instVar notNil 		ifTrue: 			[self browseInstVarRefsTo: instVar in: (self nonMetaClass perform: aSymbol)]</body><body package="Browser-BrowserUI" selector="instanceVariableWritersType:">instanceVariableWritersType: aSymbol 	| instVar |	instVar := self selectInstanceVariable: aSymbol.	instVar notNil 		ifTrue: 			[self browseInstVarWritersTo: instVar				in: (self nonMetaClass perform: aSymbol)]</body><body package="Browser-BrowserUI" selector="protectInstanceVariable:in:">protectInstanceVariable: aString in: aClass 	self handleError: 			[self 				performRefactoring: (ProtectInstanceVariableRefactoring variable: aString						class: aClass)]</body><body package="Browser-BrowserUI" selector="protectInstanceVariableType:">protectInstanceVariableType: aSymbol 	| instVars |	self changeRequest ifFalse: [^self].	instVars := self selectInstanceVariables: aSymbol.	instVars isEmpty ifTrue: [^self].	instVars do: 			[:each | 			self protectInstanceVariable: each in: (self nonMetaClass perform: aSymbol)].	self refreshLists</body><body package="Browser-BrowserUI" selector="pullUpInstanceVariableType:">pullUpInstanceVariableType: aSymbol 	| instVar |	self changeRequest ifFalse: [^self].	instVar := self selectSubclassInstanceVariable: aSymbol.	instVar isNil ifTrue: [^self].	self handleError: 			[self 				performRefactoring: (PullUpInstanceVariableRefactoring variable: instVar						class: (self nonMetaClass perform: aSymbol)).			self refreshLists]</body><body package="Browser-BrowserUI" selector="pushDownInstanceVariableType:">pushDownInstanceVariableType: aSymbol 	| instVar class |	self changeRequest ifFalse: [^self].	instVar := self selectInstanceVariable: aSymbol.	instVar isNil ifTrue: [^self].	class := (self nonMetaClass perform: aSymbol) 				whichClassDefinesInstVar: instVar.	self handleError: 			[self 				performRefactoring: (PushDownInstanceVariableRefactoring variable: instVar						class: class).			self refreshLists]</body><body package="Browser-BrowserUI" selector="pushUpInstanceVariableType:">pushUpInstanceVariableType: aSymbol 	| superclass instVar class |	self changeRequest ifFalse: [^self].	instVar := self selectInstanceVariable: aSymbol.	instVar isNil ifTrue: [^self].	class := (self nonMetaClass perform: aSymbol) 				whichClassDefinesInstVar: instVar.	superclass := class superclass.	superclass isNil ifTrue: [^self warn: (#ThisClassHasNoSuperclass &lt;&lt; #browser &gt;&gt; 'This class has no superclass')].	self handleError: 			[self 				performRefactoring: (PullUpInstanceVariableRefactoring variable: instVar						class: superclass).			self refreshLists]</body><body package="Browser-BrowserUI" selector="removeInstanceVariable:fromClass:">removeInstanceVariable: aString fromClass: aClass 	self handleError: 			[self 				performRefactoring: (RemoveInstanceVariableRefactoring variable: aString						class: aClass).			self refreshLists]</body><body package="Browser-BrowserUI" selector="removeInstanceVariableType:">removeInstanceVariableType: aSymbol 	| instVar class |	self changeRequest ifFalse: [^self].	instVar := self selectInstanceVariable: aSymbol.	instVar isNil ifTrue: [^self].	class := (self nonMetaClass perform: aSymbol) 				whichClassDefinesInstVar: instVar.	self removeInstanceVariable: instVar fromClass: class</body><body package="Browser-BrowserUI" selector="renameInstanceVariable:in:">renameInstanceVariable: oldName in: aClass 	| newName |	newName := self requestInstanceVariableName: oldName.	newName isNil ifTrue: [^self].	self handleError: 			[self performRefactoring: (RenameInstanceVariableRefactoring 						rename: oldName						to: newName						in: aClass)]</body><body package="Browser-BrowserUI" selector="renameInstanceVariableType:">renameInstanceVariableType: aSymbol 	| instVar class |	self changeRequest ifFalse: [^self].	instVar := self selectInstanceVariable: aSymbol.	instVar isNil ifTrue: [^self].	class := (self nonMetaClass perform: aSymbol) 				whichClassDefinesInstVar: instVar.	self renameInstanceVariable: instVar in: class.	self refreshLists</body><body package="Browser-BrowserUI" selector="requestInstanceVariableName:">requestInstanceVariableName: oldName 	| name |	name := self request: (#EnterAnInstanceVariableNameC &lt;&lt; #browser &gt;&gt; 'Enter an instance variable name:')				initialAnswer: oldName.	(name isEmpty or: [oldName = name]) ifTrue: [^nil].	^name</body><body package="Browser-BrowserUI" selector="selectInstanceVariable:">selectInstanceVariable: aSymbol 	| instVar classes class |	class := self nonMetaClass perform: aSymbol.	instVar := class isMeta 				ifTrue: [self classInstanceVariable]				ifFalse: [self instanceVariable].	instVar isNil ifFalse: [^instVar].	classes := OrderedCollection with: class.	classes addAllFirst: class allSuperclasses reverse.	^self 		forClasses: classes		showVariableMenu: [:each | each instVarNames]		collect: [:each | each]</body><body package="Browser-BrowserUI" selector="selectInstanceVariables:">selectInstanceVariables: aSymbol 	| variables class |	class := self nonMetaClass perform: aSymbol.	variables := class isMeta 				ifTrue: [self classInstanceVariables]				ifFalse: [self instanceVariables].	variables notEmpty ifTrue: [^variables].	variables := class instVarNames asSortedCollection.	variables isEmpty ifTrue: [^#()].	^SimpleDialog new 		chooseMultiple: (#ChooseVariablesC &lt;&lt; #browser &gt;&gt; 'Choose variables:')		fromList: variables		values: variables		buttons: #()		values: #()		lines: 8		cancel: [#()]		for: nil</body><body package="Browser-BrowserUI" selector="selectInstanceVariableSupers:subs:">selectInstanceVariableSupers: superBoolean subs: subBoolean 	| classes |	classes := OrderedCollection with: self selectedClass.	superBoolean 		ifTrue: [classes addAllFirst: self selectedClass allSuperclasses reverse].	subBoolean ifTrue: [classes addAllLast: self selectedClass allSubclasses].	^self 		forClasses: classes		showVariableMenu: [:class | class instVarNames]		collect: [:cname | cname]</body><body package="Browser-BrowserUI" selector="selectSubclassInstanceVariable:">selectSubclassInstanceVariable: aSymbol 	| varNames |	varNames := ((self nonMetaClass perform: aSymbol) allSubclasses 				inject: Set new				into: 					[:set :each | 					set						addAll: each instVarNames;						yourself]) 					asSortedCollection.	varNames isEmpty ifTrue: [^nil].	^self choose: (#SelectInstanceVariableC &lt;&lt; #browser &gt;&gt; 'Select instance variable:') from: varNames</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-class instance variables</category><body package="Browser-BrowserUI" selector="abstractClassInstanceVariable">abstractClassInstanceVariable	self abstractInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="addClassInstanceVariable">addClassInstanceVariable	self addInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="classInstanceVariableReaders">classInstanceVariableReaders	self instanceVariableReadersType: #class</body><body package="Browser-BrowserUI" selector="classInstanceVariableReferences">classInstanceVariableReferences	self instanceVariableReferencesType: #class</body><body package="Browser-BrowserUI" selector="classInstanceVariableWriters">classInstanceVariableWriters	self instanceVariableWritersType: #class</body><body package="Browser-BrowserUI" selector="createClassInstanceVariableAccessors">createClassInstanceVariableAccessors	self createInstanceVariableAccessorsType: #class</body><body package="Browser-BrowserUI" selector="globalClassInstanceVariableReaders">globalClassInstanceVariableReaders	self globalInstanceVariableReadersType: #class</body><body package="Browser-BrowserUI" selector="globalClassInstanceVariableReferences">globalClassInstanceVariableReferences	self globalInstanceVariableReferencesType: #class</body><body package="Browser-BrowserUI" selector="globalClassInstanceVariableWriters">globalClassInstanceVariableWriters	self globalInstanceVariableWritersType: #class</body><body package="Browser-BrowserUI" selector="protectClassInstanceVariable">protectClassInstanceVariable	self protectInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="pullUpClassInstanceVariable">pullUpClassInstanceVariable	self pullUpInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="pushDownClassInstanceVariable">pushDownClassInstanceVariable	self pushDownInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="pushUpClassInstanceVariable">pushUpClassInstanceVariable	^self pushUpInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="removeClassInstanceVariable">removeClassInstanceVariable	self removeInstanceVariableType: #class</body><body package="Browser-BrowserUI" selector="renameClassInstanceVariable">renameClassInstanceVariable	self renameInstanceVariableType: #class</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-instance variables</category><body package="Browser-BrowserUI" selector="abstractInstanceVariable">abstractInstanceVariable	self abstractInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="addInstanceVariable">addInstanceVariable	self addInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="createInstanceVariableAccessors">createInstanceVariableAccessors	self createInstanceVariableAccessorsType: #yourself</body><body package="Browser-BrowserUI" selector="globalInstanceVariableReaders">globalInstanceVariableReaders	self globalInstanceVariableReadersType: #yourself</body><body package="Browser-BrowserUI" selector="globalInstanceVariableReferences">globalInstanceVariableReferences	self globalInstanceVariableReferencesType: #yourself</body><body package="Browser-BrowserUI" selector="globalInstanceVariableWriters">globalInstanceVariableWriters	self globalInstanceVariableWritersType: #yourself</body><body package="Browser-BrowserUI" selector="instanceVariableReaders">instanceVariableReaders	self instanceVariableReadersType: #yourself</body><body package="Browser-BrowserUI" selector="instanceVariableReferences">instanceVariableReferences	self instanceVariableReferencesType: #yourself</body><body package="Browser-BrowserUI" selector="instanceVariableWriters">instanceVariableWriters	self instanceVariableWritersType: #yourself</body><body package="Browser-BrowserUI" selector="protectInstanceVariable">protectInstanceVariable	self protectInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="pullUpInstanceVariable">pullUpInstanceVariable	self pullUpInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="pushDownInstanceVariable">pushDownInstanceVariable	self pushDownInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="pushUpInstanceVariable">pushUpInstanceVariable	^self pushUpInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="removeInstanceVariable">removeInstanceVariable	self removeInstanceVariableType: #yourself</body><body package="Browser-BrowserUI" selector="renameInstanceVariable">renameInstanceVariable	self renameInstanceVariableType: #yourself</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="setState:">setState: aNavigatorState 	aNavigatorState pundles isEmpty 		ifTrue: 			[aNavigatorState parcels isEmpty 				ifTrue: 					[aNavigatorState categories notEmpty ifTrue: [navigatorType := #Category]]				ifFalse: [navigatorType := #Parcel]]		ifFalse: [navigatorType := #Package].	^super setState: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isViewingCategories">isViewingCategories	^self navigatorType = #Category</body><body package="Browser-BrowserUI" selector="isViewingPackages">isViewingPackages	^self navigatorType = #Package</body><body package="Browser-BrowserUI" selector="isViewingParcels">isViewingParcels	^self navigatorType = #Parcel</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="changed">changed	self updateWindowLabel.	^super changed</body><body package="Browser-BrowserUI" selector="defaultWindowLabel">defaultWindowLabel	| label type |	label := self environment label.	label asString isEmpty 		ifTrue: 			[type := self navigatorType.			label := (#Browser &lt;&lt; #browser &gt;&gt; 'Browser').			type = #Package ifTrue: [label := (#Packages &lt;&lt; #browser &gt;&gt; 'Packages')].			type = #Parcel ifTrue: [label := (#Parcels &lt;&lt; #browser &gt;&gt; 'Parcels')].			type = #Category ifTrue: [label := (#Categories &lt;&lt; #browser &gt;&gt; 'Categories')]].	^label asString</body><body package="Browser-BrowserUI" selector="updateWindowLabel">updateWindowLabel	| window |	self builder isNil ifTrue: [^self].	window := self builder window.	window isNil ifTrue: [^self].	(windowLabel = window label or: [window label isEmpty]) 		ifFalse: [self environment label: window label].	windowLabel := self state hasSelection 				ifTrue: 					[windowLabel := self environment label.					windowLabel asString notEmpty ifTrue: [windowLabel := windowLabel asString , ' - '].					windowLabel asString , self state printString]				ifFalse: [self defaultWindowLabel].	window label: windowLabel</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-namespaces</category><body package="Browser-BrowserUI" selector="addNameSpaceChangeFromDialog:">addNameSpaceChangeFromDialog: aCreationDialog	| arguments definition change |	arguments := OrderedCollection new.	arguments		add: (aCreationDialog nameSpaceOrDo: [^nil]) fullName;		add: (aCreationDialog nameOrDo: [^nil]);		add: aCreationDialog private;		add: aCreationDialog imports;		add: aCreationDialog category asString.	definition := '&lt;1s&gt; defineNameSpace: #&lt;2s&gt; private: &lt;3p&gt;  imports: &lt;4p&gt; category: &lt;5p&gt;'		expandMacrosWithArguments: arguments.	change := AddNameSpaceChange definition: definition.	change package: (aCreationDialog packageOrDo: [^nil]).	^change</body><body package="Browser-BrowserUI" selector="createNameSpaceFromDialog:">createNameSpaceFromDialog: aCreationDialog	| addNameSpaceChange |	addNameSpaceChange := self addNameSpaceChangeFromDialog: aCreationDialog.	addNameSpaceChange isNil ifTrue: [^nil].	self performChange: addNameSpaceChange.	^addNameSpaceChange definedObject</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="createNewClass">createNewClass	| selectedClass dialog newClass |	selectedClass := self nonMetaClass.	dialog := ClassCreationDialog new.	dialog 		category: (self package ifNotNil: [:p | p name]);		superclass: selectedClass;		indexedType: (selectedClass ifNotNil: [:c | c behaviorType]);		package: self package.	(self mostPopularNameSpaceIn: self package) ifNotNil:		[:nameSpace | dialog nameSpace: nameSpace].	selectedClass ifNotNil: [dialog nameSpace: selectedClass environment].	dialog open ifTrue: 		[newClass := self createClassFromDialog: dialog.		newClass notNil ifTrue:			[self selectClass: newClass; refreshLists]]</body><body package="Browser-BrowserUI" selector="createNewNameSpace">createNewNameSpace	| dialog newNameSpace |	dialog := NameSpaceCreationDialog new.	dialog category: (self category ifNil: [self package ifNotNil: [:p | p name]]).	dialog package: self package.	(self mostPopularNameSpaceIn: self package) ifNotNil:		[:nameSpace | dialog nameSpace: nameSpace].	dialog open ifTrue: 		[newNameSpace := self createNameSpaceFromDialog: dialog.		newNameSpace notNil ifTrue:			[state				clearClassDependentFields; 				selectedNameSpace: newNameSpace.			self 				updatePartsWith: state;				refreshLists]]</body><body package="Browser-BrowserUI" selector="createNewSharedVariable">createNewSharedVariable	| dialog newVariable definition |	dialog := SharedVariableCreationDialog new.	dialog category: (self category ifNil: [self package ifNotNil: [:p | p name]]).	dialog package: self package.	(self mostPopularNameSpaceIn: self package) ifNotNil:		[:nameSpace | dialog nameSpace: nameSpace].	dialog open ifTrue: 		[newVariable := self createSharedVariableFromDialog: dialog.		newVariable notNil ifTrue:			[definition := RBInitializerDefinition				nameSpace: newVariable environment 				key: newVariable name.			state				clearClassDependentFields; 				selectedNameSpace: newVariable environment;				definitions: (Array with: definition).			self 				updatePartsWith: state;				refreshLists]]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="forEnvironment:dispatcher:">forEnvironment: aBrowserEnvironment dispatcher: aRBActionDispatcher 	^(self basicNew)		dispatcher: aRBActionDispatcher;		environment: aBrowserEnvironment;		initialize;		yourself</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="addCategorySpec">addCategorySpec	navigatorSpecBlocks addFirst: 			[:navigator | 			navigator environment useCategoryNavigator 				ifTrue: 					[navigator 						addConstantStateBlock: [:ns | ns categories: navigator environment categories].					#codeComponentWindowSpec]				ifFalse: [nil]]</body><body package="Browser-BrowserUI" selector="addClassSpec">addClassSpec	navigatorSpecBlocks addFirst: 			[:navigator | 			navigator environment useSingleClassNavigator 				ifTrue: 					[| classRef category classNames |					classNames := navigator environment classNames asArray.					classNames isEmpty 						ifTrue: [nil]						ifFalse: 							[classRef := classNames first asQualifiedReference.							category := navigator environment 										whichCategoryIncludes: classRef bindingOrNil value.							navigator addConstantStateBlock: 									[:ns | 									ns										category: category;										objectName: classNames first].							#classWindowSpec]]				ifFalse: [nil]]</body><body package="Browser-BrowserUI" selector="addDefaultSpec">addDefaultSpec	navigatorSpecBlocks add: 			[:navigator | 			navigator environment isSystem 				ifTrue: [#systemWindowSpec]				ifFalse: [#methodWindowSpec]]</body><body package="Browser-BrowserUI" selector="addParcelSpec">addParcelSpec	navigatorSpecBlocks addFirst: 			[:navigator | 			navigator environment useParcelNavigator 				ifTrue: 					[navigator 						addConstantStateBlock: [:ns | ns parcels: navigator environment parcels].					#codeComponentWindowSpec]				ifFalse: [nil]]</body><body package="Browser-BrowserUI" selector="addProtocolSpec">addProtocolSpec	navigatorSpecBlocks addFirst: 			[:navigator | 			navigator environment useProtocolNavigator 				ifTrue: [#protocolWindowSpec]				ifFalse: [nil]]</body><body package="Browser-BrowserUI" selector="addPundleSpec">addPundleSpec	navigatorSpecBlocks addFirst: 			[:navigator | 			navigator environment usePundleNavigator 				ifTrue: 					[navigator 						addConstantStateBlock: [:ns | ns pundles: navigator environment pundles].					#codeComponentWindowSpec]				ifFalse: [nil]]</body><body package="Browser-BrowserUI" selector="initializeSpecBlocks">initializeSpecBlocks	navigatorSpecBlocks := OrderedCollection new.	self		addDefaultSpec;		addProtocolSpec;		addClassSpec;		addCategorySpec;		addParcelSpec;		addPundleSpec.	self changed: #navigatorSpecBlocks</body><body package="Browser-BrowserUI" selector="navigatorSpecBlocks">navigatorSpecBlocks	navigatorSpecBlocks isNil ifTrue: [self initializeSpecBlocks].	^navigatorSpecBlocks</body><body package="Browser-BrowserUI" selector="navigatorType">navigatorType	^NavigatorType isNil 		ifTrue: [ #Package ]		ifFalse: [ NavigatorType ]</body><body package="Browser-BrowserUI" selector="navigatorType:">navigatorType: aSymbol 	NavigatorType := aSymbol</body><body package="Browser-BrowserUI" selector="navigatorTypes">navigatorTypes	^OrderedCollection		with: (#Package &lt;&lt; #labels &gt;&gt; 'Package') -&gt; #Package		with: (#Parcel &lt;&lt; #labels &gt;&gt; 'Parcel') -&gt; #Parcel</body></methods><methods><class-id>Refactory.Browser.Prerequisite</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="deploymentPrerequisite">deploymentPrerequisite	^Array with: self name with: self version</body><body package="Browser-BrowserUI" selector="developmentPrerequisite">developmentPrerequisite	^Array 		with: self type		with: self name		with: self version</body><body package="Browser-BrowserUI" selector="name">name	^name</body><body package="Browser-BrowserUI" selector="name:">name: aString	name := aString</body><body package="Browser-BrowserUI" selector="type">type	^type isNil ifTrue: [#any] ifFalse: [type]</body><body package="Browser-BrowserUI" selector="type:">type: aSymbol	type := aSymbol</body><body package="Browser-BrowserUI" selector="version">version	^version</body><body package="Browser-BrowserUI" selector="version:">version: aString	version := aString</body></methods><methods><class-id>Refactory.Browser.Prerequisite</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	name := ''.	type := nil.	version := ''</body><body package="Browser-BrowserUI" selector="name:type:version:">name: aString type: aSymbol version: versionString 	name := aString.	type := aSymbol.	version := versionString</body></methods><methods><class-id>Refactory.Browser.Prerequisite</class-id> <category>printing</category><body package="Browser-BrowserUI" selector="printOn:">printOn: aStream 	(type notNil and: [type notEmpty]) 		ifTrue: 			[| typeString |			typeString := type asString.			typeString at: 1 put: typeString first asUppercase.			aStream				nextPutAll: typeString;				nextPutAll: ': '].	aStream		nextPutAll: name;		nextPut: $ ;		nextPutAll: version</body></methods><methods><class-id>Refactory.Browser.Prerequisite</class-id> <category>comparing</category><body package="Browser-BrowserUI" selector="=">= anObject 	self class = anObject class ifFalse: [^false].	^self name = anObject name and: [self type = anObject type]</body><body package="Browser-BrowserUI" selector="hash">hash	^self name hash</body></methods><methods><class-id>Refactory.Browser.Prerequisite class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="name:type:version:">name: aString type: aSymbol version: versionString 	^(self new)		name: aString			type: aSymbol			version: versionString;		yourself</body><body package="Browser-BrowserUI" selector="name:version:">name: aString version: versionString 	^self 		name: aString		type: nil		version: versionString</body><body package="Browser-BrowserUI" selector="new">new	^(super new)		initialize;		yourself</body></methods><methods><class-id>Refactory.Browser.ReferenceFinder</class-id> <category>private</category><body package="Browser-BrowserUI" selector="addBacklinkFrom:to:">addBacklinkFrom: newObject to: anObject 	backlinks last at: newObject put: anObject</body><body package="Browser-BrowserUI" selector="addBacklinkLevel">addBacklinkLevel	backlinks add: self identityDictionaryClass new</body><body package="Browser-BrowserUI" selector="backlinkFor:">backlinkFor: anObject 	| toObject |	backlinks do: 			[:each | 			toObject := each at: anObject ifAbsent: [nil].			toObject notNil ifTrue: [^toObject]].	^nil</body><body package="Browser-BrowserUI" selector="computePathFor:">computePathFor: anObject 	| path object |	path := OrderedCollection new.	object := anObject.	[object isNil] whileFalse: 			[path add: object.			object := self backlinkFor: object].	^path reverse</body><body package="Browser-BrowserUI" selector="find">find	self searchForObject</body><body package="Browser-BrowserUI" selector="hasSearched:">hasSearched: newObject 	^backlinks anySatisfy: [:each | each includesKey: newObject]</body><body package="Browser-BrowserUI" selector="identityDictionaryClass">identityDictionaryClass	^IdentityDictionary</body><body package="Browser-BrowserUI" selector="printToDoNotice">printToDoNotice	Transcript		cr;		show: 			((#Level1pWith2pObjectsToSearch &lt;&lt; #browser &gt;&gt; 'Level &lt;1p&gt; with &lt;2p&gt; objects to search') 				expandMacrosWith: backlinks size				with: objectsLeft size)</body><body package="Browser-BrowserUI" selector="processLinkTo:from:">processLinkTo: newObject from: anObject 	newObject class instSize + newObject basicSize = 0 		ifTrue: 			[^(testBlock value: newObject) 				ifTrue: 					[(self computePathFor: anObject)						add: newObject;						yourself]				ifFalse: [nil]].	(self hasSearched: newObject) 		ifFalse: 			[(testBlock value: newObject) 				ifTrue: 					[^(self computePathFor: anObject)						add: newObject;						yourself].			objectsLeft add: newObject.			self addBacklinkFrom: newObject to: anObject].	^nil</body><body package="Browser-BrowserUI" selector="searchForObject">searchForObject		[| objects |	self printToDoNotice.	objects := objectsLeft.	objectsLeft := OrderedCollection new.	self addBacklinkLevel.	objects do: 			[:each | 			| path |			(path := self searchVariablesIn: each) notNil 				ifTrue: [foundBlock value: path].			(path := self searchIndicesIn: each) notNil 				ifTrue: [foundBlock value: path]].	objectsLeft isEmpty] 			whileFalse</body><body package="Browser-BrowserUI" selector="searchIndicesIn:">searchIndicesIn: anObject	| class |	class := self _objectClass: anObject.	class isBits ifTrue: [^nil].	class isWeak ifTrue: [^nil].	1 to: (self _objectSize: anObject) do:		[:i | | path |		path := self processLinkTo: (self _object: anObject at: i) from: anObject.		path notNil ifTrue: [^path]].	^nil</body><body package="Browser-BrowserUI" selector="searchVariablesIn:">searchVariablesIn: anObject	| class |	class := self _objectClass: anObject.	(class isEphemeronClass and: [anObject isActiveEphemeron]) 		ifTrue: [^nil].	1 to: class instSize do:		[:i | | path |		path := self processLinkTo: (self _object: anObject instVarAt: i) from: anObject.		path notNil ifTrue: [^path]].	^nil</body><body package="Browser-BrowserUI" selector="_object:at:">_object: anObject at: anInteger	"Answer the value of an indexable field in anObject. Fail if the	 argument anInteger is not an Integer or is out of bounds."	&lt;primitive: 160&gt;	^Object subscriptOutOfBoundsSignal raiseRequestWith: anInteger</body><body package="Browser-BrowserUI" selector="_object:instVarAt:">_object: anObject instVarAt: anInteger	"Answer with a fixed variable in anObject.  The numbering of the variables	 corresponds to the named instance variables.  Fail if the index is not an	 Integer or is not the index of a fixed variable."	&lt;primitive: 173&gt;	^Object subscriptOutOfBoundsSignal raiseRequestWith: anInteger</body><body package="Browser-BrowserUI" selector="_objectClass:">_objectClass: anObject	"Answer the object which is the argument's class.."	&lt;primitive: 211&gt;	^self primitiveFailed</body><body package="Browser-BrowserUI" selector="_objectSize:">_objectSize: anObject	"Answer the number of indexable fields in the argument anObject.	 This value is the same as the largest legal subscript."	&lt;primitive: 162&gt;	"The number of indexable fields of fixed-length objects is 0"	^0</body></methods><methods><class-id>Refactory.Browser.ReferenceFinder</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="findAllPaths:">findAllPaths: aBlock 	| paths |	paths := OrderedCollection new.	foundBlock := [:path | paths add: path].	testBlock := aBlock.	self find.	^paths</body><body package="Browser-BrowserUI" selector="findPath:">findPath: aBlock 	foundBlock := [:path | ^path].	testBlock := aBlock.	self find.	^nil</body><body package="Browser-BrowserUI" selector="ignore:">ignore: anObject 	self addBacklinkFrom: anObject to: anObject</body></methods><methods><class-id>Refactory.Browser.ReferenceFinder</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	self startFrom: Root</body><body package="Browser-BrowserUI" selector="startFrom:">startFrom: anObject 	backlinks := OrderedCollection new.	self addBacklinkLevel.	objectsLeft := OrderedCollection with: anObject.	backlinks last at: anObject put: nil</body></methods><methods><class-id>Refactory.Browser.ReferenceFinder class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="findAllPathsTo:">findAllPathsTo: anObject 	"self findAllPathsTo: (Object compiledMethodAt: #printString)"	^self findAllPathsTo: anObject from: Root</body><body package="Browser-BrowserUI" selector="findAllPathsTo:from:">findAllPathsTo: anObject from: fromObject 	"self findAllPathsTo: (Object compiledMethodAt: #printString) from: Object"	^(self new)		startFrom: fromObject;		findAllPaths: [:each | each == anObject]</body><body package="Browser-BrowserUI" selector="findAllPathsToInstanceOf:">findAllPathsToInstanceOf: aBehavior 	"self findAllPathsToInstanceOf: RefactoringBrowser"	^self findAllPathsToInstanceOf: aBehavior from: Root</body><body package="Browser-BrowserUI" selector="findAllPathsToInstanceOf:from:">findAllPathsToInstanceOf: aBehavior from: fromObject 	"self findAllPathsToInstanceOf: RefactoringBrowser from: ScheduledControllers"	^(self new)		startFrom: fromObject;		findAllPaths: [:each | each class == aBehavior]</body><body package="Browser-BrowserUI" selector="findPathTo:">findPathTo: anObject 	^self findPathTo: anObject from: Root</body><body package="Browser-BrowserUI" selector="findPathTo:from:">findPathTo: anObject from: fromObject 	"self findPathTo: RefactoringManager instance from: Object"	^(self new)		startFrom: fromObject;		findPath: [:each | each == anObject]</body><body package="Browser-BrowserUI" selector="findPathToInstanceOf:">findPathToInstanceOf: aBehavior 	^self findPathToInstanceOf: aBehavior from: Root</body><body package="Browser-BrowserUI" selector="findPathToInstanceOf:from:">findPathToInstanceOf: aBehavior from: fromObject 	"self findPathToInstanceOf: RefactoringManager from: Object"	^(self new)		startFrom: fromObject;		findPath: [:each | each class == aBehavior]</body></methods><methods><class-id>Refactory.Browser.ReferenceFinder class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="new">new	^(super new)		initialize;		yourself</body></methods><methods><class-id>Refactory.Browser.ClassDiagramView</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="classes:in:">classes: aCollection in: aNavigator	classes := aCollection.	navigator := aNavigator.	self layoutClasses</body><body package="Browser-BrowserUI" selector="scrollOffsetHolder:">scrollOffsetHolder: aValueHolder 	aValueHolder grid: 25 @ 25</body></methods><methods><class-id>Refactory.Browser.ClassDiagramView</class-id> <category>private</category><body package="Browser-BrowserUI" selector="findRootOfHierarchy">findRootOfHierarchy	^classes detect: [:each | (classes includes: each superclass) not]</body><body package="Browser-BrowserUI" selector="horizontalSpacing">horizontalSpacing	^10</body><body package="Browser-BrowserUI" selector="horizontalSubclassLineFrom:to:">horizontalSubclassLineFrom: left to: right 	"Fixes a bug for displaying long lines"	(left x - right x) abs &gt; 16000 		ifTrue: 			[^self				horizontalSubclassLineFrom: left to: (left + right) / 2;				horizontalSubclassLineFrom: (left + right) / 2 to: right].	self add: (StrokingWrapper on: (LineSegment from: left to: right))</body><body package="Browser-BrowserUI" selector="layout:at:">layout: rootClass at: aPoint 	| subclasses xLocation rootClassView bounds top subclassPositions |	subclasses := rootClass subclasses 				select: [:each | classes includes: each].	rootClassView := ClassDiagramClassView viewFor: rootClass in: navigator.	bounds := rootClassView preferredBounds translatedBy: aPoint.	top := bounds bottom + self verticalSpacing.	xLocation := aPoint x.	subclassPositions := subclasses collect: 					[:each | 					| subclassBounds |					subclassBounds := self layout: each at: xLocation @ top.					bounds := bounds merge: subclassBounds.					xLocation := bounds right + self horizontalSpacing.					subclassBounds topCenter].	rootClassView := (BorderedWrapper on: rootClassView				at: ((bounds extent x - rootClassView preferredBounds extent x) // 2) @ 0 						+ aPoint)				border: BeveledBorder raised;				yourself.	self add: rootClassView.	subclasses notEmpty 		ifTrue: 			[self subclassLinesAt: rootClassView preferredBounds bottomCenter				to: subclassPositions].	^bounds</body><body package="Browser-BrowserUI" selector="layoutClasses">layoutClasses	| rootClass |	rootClass := self findRootOfHierarchy.	self layout: rootClass at: self horizontalSpacing @ 10</body><body package="Browser-BrowserUI" selector="subclassLinesAt:to:">subclassLinesAt: aPoint to: pointCollection 	| vertices interval bottom |	bottom := aPoint y + 28.	vertices := Array new: 5.	vertices at: 1 put: aPoint.	vertices at: 5 put: (vertices at: 2 put: aPoint + (0 @ 13)).	vertices at: 3 put: (aPoint x + 15) @ bottom.	vertices at: 4 put: (aPoint x - 15) @ bottom.	self add: (StrokingWrapper on: (Polyline vertices: vertices)).	pointCollection do: 			[:each | 			self 				add: (StrokingWrapper on: (LineSegment from: each to: each x @ bottom))].	interval := pointCollection inject: (aPoint x to: aPoint x)				into: [:int :each | (int first min: each x) to: (int last max: each x)].	(aPoint x - 13 &gt; interval first or: [aPoint x + 13 &lt; interval last]) 		ifTrue: 			[self horizontalSubclassLineFrom: interval first @ bottom				to: interval last @ bottom]</body><body package="Browser-BrowserUI" selector="verticalSpacing">verticalSpacing	^50</body></methods><methods><class-id>Refactory.Browser.ClassDiagramView class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="classes:in:">classes: aCollection in: aBrowser 	^(self new)		classes: aCollection in: aBrowser;		yourself</body></methods><methods><class-id>Refactory.Browser.CodeModelLockPolicy</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize</body><body package="Browser-BrowserUI" selector="on:">on: aCodeTool</body></methods><methods><class-id>Refactory.Browser.CodeModelLockPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="isLocked">isLocked	^false</body><body package="Browser-BrowserUI" selector="lock">lock</body><body package="Browser-BrowserUI" selector="unlock">unlock</body></methods><methods><class-id>Refactory.Browser.CodeModelLockPolicy class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="on:">on: aCodeTool 	^(self new)		initialize;		on: aCodeTool;		yourself</body></methods><methods><class-id>Refactory.Browser.StateLockPolicy</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	locked := false</body></methods><methods><class-id>Refactory.Browser.StateLockPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="isLocked">isLocked	^locked</body><body package="Browser-BrowserUI" selector="lock">lock	locked := true</body><body package="Browser-BrowserUI" selector="unlock">unlock	locked := false</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="canPerformPullUpVariable">canPerformPullUpVariable	| instVar class |	class := self variableClass.	instVar := self selectedInstanceVariable.	class isNil | instVar isNil ifTrue: [^false].	^(self doesClass: class defineInstanceVariable: instVar) not</body><body package="Browser-BrowserUI" selector="canPerformRemoveVariable">canPerformRemoveVariable	| instVar class |	class := self variableClass.	instVar := self selectedInstanceVariable.	class isNil | instVar isNil ifTrue: [^false].	^environment isEmpty</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="changedInstanceVariable">changedInstanceVariable	| newEnv selectedVariable |	selectedVariable := self selectedInstanceVariable.	newEnv := selectedVariable isNil 				ifTrue: [variableEnvironment]				ifFalse: 					[variableEnvironment environmentForInstanceVariable: selectedVariable						in: self variableClass].	self selectEnvironment: newEnv</body><body package="Browser-BrowserUI" selector="changedVariableClass">changedVariableClass	| class |	class := self variableClass.	class isNil 		ifTrue: 			[self instanceVariableList list: List new.			self selectEnvironment: self environment]		ifFalse: 			[self instanceVariableList 				list: (variableEnvironment instanceVariablesFor: class) asSortedCollection 						asList.			self selectEnvironment: SelectorEnvironment new]</body><body package="Browser-BrowserUI" selector="selectEnvironment:">selectEnvironment: newEnv 	environment := newEnv.	super setState: self navigatorStateClass new</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>menus</category><body package="Browser-BrowserUI" selector="doesClass:defineInstanceVariable:">doesClass: class defineInstanceVariable: instVar 	^class allInstVarNames includes: instVar</body><body package="Browser-BrowserUI" selector="instanceVariableMenuHolder">instanceVariableMenuHolder	instanceVariableMenuHolder isNil 		ifTrue: 			[instanceVariableMenuHolder := self buildTopLevelMenuFrom: #variableMenu].	^instanceVariableMenuHolder</body><body package="Browser-BrowserUI" selector="windowMenuItems">windowMenuItems	| items |	items := OrderedCollection 				with: (#_Variable &lt;&lt; #browser &gt;&gt; '&amp;Variable') asString -&gt; self instanceVariableMenuHolder.	items addAll: super windowMenuItems.	^items</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="environment:">environment: anEnvironment 	super environment: anEnvironment.	variableEnvironment := anEnvironment</body><body package="Browser-BrowserUI" selector="getState">getState	| newState |	newState := super getState.	newState		propertyAt: #variableClassName put: self variableClassName;		propertyAt: #instanceVariable put: self selectedInstanceVariable.	^newState</body><body package="Browser-BrowserUI" selector="selectedInstanceVariable">selectedInstanceVariable	^self instanceVariableList selection</body><body package="Browser-BrowserUI" selector="setState:">setState: aNavigatorState 	self variableClassList 		selection: (aNavigatorState propertyAt: #variableClassName ifAbsent: [nil]).	self changedVariableClass.	self instanceVariableList 		selection: (aNavigatorState propertyAt: #instanceVariable ifAbsent: [nil]).	self selectedInstanceVariable notNil 		ifTrue: [self changedInstanceVariable].	^super setState: aNavigatorState</body><body package="Browser-BrowserUI" selector="variableClass">variableClass	| name |	name := self variableClassName.	^name notNil ifTrue: [self variableClassForName: name] ifFalse: [nil]</body><body package="Browser-BrowserUI" selector="variableClassName">variableClassName	^self variableClassList selection</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="instanceVariableList">instanceVariableList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^instanceVariableList isNil 		ifTrue: [instanceVariableList := SelectionInList new]		ifFalse: [instanceVariableList]</body><body package="Browser-BrowserUI" selector="variableClassList">variableClassList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^variableClassList isNil		ifTrue:			[variableClassList := SelectionInList new]		ifFalse:			[variableClassList]</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self updateNavigator</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>private</category><body package="Browser-BrowserUI" selector="refreshLists">refreshLists	| selection |	selection := self variableClassList selection.	self variableClassList 		list: variableEnvironment classNamesWithVariables asSortedCollection asList.	self variableClassList selection: selection.	self changedVariableClass.	super refreshLists</body><body package="Browser-BrowserUI" selector="variableClassForName:">variableClassForName: aSymbol 	| class index |	aSymbol isNil ifTrue: [^nil].	(index := aSymbol indexOf: $ ) &gt; 0 		ifTrue: 			[class := (aSymbol copyFrom: 1 to: index - 1) asQualifiedReference 						valueOrDo: [nil].			class isBehavior ifFalse: [^nil].			^class class]		ifFalse: 			[class := aSymbol asQualifiedReference valueOrDo: [nil].			class isBehavior ifFalse: [^nil].			^class]</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>accessing-browser</category><body package="Browser-BrowserUI" selector="spec">spec	^self 		replace: #navigatorSpec		with: self windowSpecSymbol		in: self class HorizontalWindowSpec</body></methods><methods><class-id>Refactory.Browser.VariableNavigator</class-id> <category>refactorings</category><body package="Browser-BrowserUI" selector="pullUpSelectedInstanceVariable">pullUpSelectedInstanceVariable	| class variable |	class := self variableClass.	variable := self selectedInstanceVariable.	class isNil | variable isNil ifTrue: [^self].	self handleError: 			[self 				performRefactoring: (PullUpInstanceVariableRefactoring variable: variable						class: class)]</body><body package="Browser-BrowserUI" selector="removeSelectedInstanceVariable">removeSelectedInstanceVariable	| class variable |	self changeRequest ifFalse: [^self].	class := self variableClass.	variable := self selectedInstanceVariable.	class isNil | variable isNil ifTrue: [^self].	self handleError: 			[self 				performRefactoring: (RemoveInstanceVariableRefactoring variable: variable						class: class).			variableEnvironment removeClass: class instanceVariable: variable.			self refreshLists]</body></methods><methods><class-id>Refactory.Browser.VariableNavigator class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="navigatorTypes">navigatorTypes	^#()</body></methods><methods><class-id>Refactory.Browser.VariableNavigator class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="activeTool">activeTool	^self</body><body package="Browser-BrowserUI" selector="categories">categories	^codeModel categories</body><body package="Browser-BrowserUI" selector="category">category	^codeModel category</body><body package="Browser-BrowserUI" selector="classOrNameSpace">classOrNameSpace	^codeModel classOrNameSpace</body><body package="Browser-BrowserUI" selector="codeComponent">codeComponent	| codeComponent |	codeComponent := self parcel.	codeComponent isNil ifTrue: [codeComponent := self pundle].	^codeComponent</body><body package="Browser-BrowserUI" selector="definition">definition	^codeModel definition</body><body package="Browser-BrowserUI" selector="definitions">definitions	^codeModel definitions</body><body package="Browser-BrowserUI" selector="dispatcher">dispatcher	^self navigator dispatcher</body><body package="Browser-BrowserUI" selector="environment">environment	^self navigator environment</body><body package="Browser-BrowserUI" selector="isData">isData	^codeModel isData</body><body package="Browser-BrowserUI" selector="isMeta">isMeta	^codeModel isMeta</body><body package="Browser-BrowserUI" selector="methodClass">methodClass	^codeModel methodClass</body><body package="Browser-BrowserUI" selector="nameSpace">nameSpace	^codeModel nameSpace</body><body package="Browser-BrowserUI" selector="navigator">navigator	^codeModel navigator</body><body package="Browser-BrowserUI" selector="nonMetaClass">nonMetaClass	^codeModel nonMetaClass</body><body package="Browser-BrowserUI" selector="nonMetaClasses">nonMetaClasses	^codeModel nonMetaClasses</body><body package="Browser-BrowserUI" selector="objectName">objectName	^codeModel objectName</body><body package="Browser-BrowserUI" selector="objectNames">objectNames	^codeModel objectNames</body><body package="Browser-BrowserUI" selector="package">package	^codeModel package</body><body package="Browser-BrowserUI" selector="packages">packages	^codeModel packages</body><body package="Browser-BrowserUI" selector="parcel">parcel	^codeModel parcel</body><body package="Browser-BrowserUI" selector="parcels">parcels	^codeModel parcels</body><body package="Browser-BrowserUI" selector="protocol">protocol	^codeModel protocol</body><body package="Browser-BrowserUI" selector="protocols">protocols	^codeModel protocols</body><body package="Browser-BrowserUI" selector="pundle">pundle	^codeModel pundle</body><body package="Browser-BrowserUI" selector="pundles">pundles	^codeModel pundles</body><body package="Browser-BrowserUI" selector="selectedBinding">selectedBinding	^codeModel selectedBinding</body><body package="Browser-BrowserUI" selector="selectedBindings">selectedBindings	^codeModel selectedBindings</body><body package="Browser-BrowserUI" selector="selectedClass">selectedClass	^codeModel selectedClass</body><body package="Browser-BrowserUI" selector="selectedClasses">selectedClasses	^codeModel selectedClasses</body><body package="Browser-BrowserUI" selector="selector">selector	^codeModel selector</body><body package="Browser-BrowserUI" selector="selectors">selectors	^codeModel selectors</body><body package="Browser-BrowserUI" selector="sharedVariableName">sharedVariableName	^codeModel sharedVariableName</body><body package="Browser-BrowserUI" selector="sharedVariableNames">sharedVariableNames	^codeModel sharedVariableNames</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isEditing">isEditing	"Return true if your contents have changed and haven't been accepted."	^self subcanvases anySatisfy: [:each | each isEditing]</body><body package="Browser-BrowserUI" selector="isTextSelected">isTextSelected	^false</body><body package="Browser-BrowserUI" selector="isTextTool">isTextTool	^false</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>private-environments</category><body package="Browser-BrowserUI" selector="categoryEnvironment">categoryEnvironment	^CategoryEnvironment onEnvironment: self environment		categories: self categories</body><body package="Browser-BrowserUI" selector="classEnvironment">classEnvironment	| classes |	classes := self nonMetaClasses.	classes := classes , (classes collect: [:each | each class]).	^ClassEnvironment onEnvironment: self wrappedEnvironment classes: classes</body><body package="Browser-BrowserUI" selector="parcelEnvironment">parcelEnvironment	^ParcelEnvironment onEnvironment: self environment parcels: self parcels</body><body package="Browser-BrowserUI" selector="protocolEnvironment">protocolEnvironment	^ProtocolEnvironment 		onEnvironment: self wrappedEnvironment		class: self selectedClass		protocols: self protocols</body><body package="Browser-BrowserUI" selector="pundleEnvironment">pundleEnvironment	^PundleEnvironment onEnvironment: self environment pundles: self pundles</body><body package="Browser-BrowserUI" selector="selectedEnvironment">selectedEnvironment	self definition notNil ifTrue: [^self selectorEnvironment].	self protocol notNil ifTrue: [^self protocolEnvironment].	self selectedClass notNil ifTrue: [^self classEnvironment].	self category notNil ifTrue: [^self categoryEnvironment].	self parcel notNil ifTrue: [^self parcelEnvironment].	self pundle notNil ifTrue: [^self pundleEnvironment].	^SelectorEnvironment new</body><body package="Browser-BrowserUI" selector="selectorEnvironment">selectorEnvironment	^SelectorEnvironment onMethods: self definitions</body><body package="Browser-BrowserUI" selector="wrappedEnvironment">wrappedEnvironment	self parcel notNil ifTrue: [^self parcelEnvironment].	self pundle notNil ifTrue: [^self pundleEnvironment].	^self environment</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>menu accessing</category><body package="Browser-BrowserUI" selector="menu">menu	^menu</body><body package="Browser-BrowserUI" selector="rebuildMenus">rebuildMenus	menu := self buildTopLevelMenuFrom: #mainMenu.	super rebuildMenus</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="codeModel:">codeModel: aCodeModel 	codeModel := aCodeModel.	menu := self buildTopLevelMenuFrom: #mainMenu</body></methods><methods><class-id>Refactory.Browser.CodeTool class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="codeModel:">codeModel: aCodeModel 	^(self new)		codeModel: aCodeModel;		yourself</body></methods><methods><class-id>Refactory.Browser.CodeTool class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="comboBox1">comboBox1	^(self widgetAt: #ComboBox1) menuButton</body><body package="Browser-BrowserUI" selector="comboBox2">comboBox2	^(self widgetAt: #ComboBox2) menuButton</body><body package="Browser-BrowserUI" selector="definitionFromString:">definitionFromString: aString	^self definitions detect: [:x | x printString = aString ] ifNone: [nil]</body><body package="Browser-BrowserUI" selector="definitionToString:">definitionToString: aDefinition	^aDefinition printString</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="definition1">definition1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^definition1 isNil		ifTrue:			[definition1 := nil asValue]		ifFalse:			[definition1]</body><body package="Browser-BrowserUI" selector="definition2">definition2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^definition2 isNil		ifTrue:			[definition2 := nil asValue]		ifFalse:			[definition2]</body><body package="Browser-BrowserUI" selector="text1">text1	^text1</body><body package="Browser-BrowserUI" selector="text2">text2	^text2</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="doDiff">doDiff	| old1 old2 |	Cursor wait 		showWhile: [DiffList compareTokensIn: self text1 value with: self text2 value].	"Make sure that the TextView doesn't ignore the emphasis change"	old1 := self text1 value.	old2 := self text2 value.	self text1 value: ''.	self text2 value: ''.	self text1 value: old1.	self text2 value: old2</body><body package="Browser-BrowserUI" selector="updateContents">updateContents	self setComboBoxes.	self compareSelectedItems</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay		super updateDisplay.	self setComboBoxes.</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>menus</category><body package="Browser-BrowserUI" selector="definition1Changed">definition1Changed	self text1 value: self methodSourceCode1.	self doDiff</body><body package="Browser-BrowserUI" selector="definition2Changed">definition2Changed	self text2 value: self methodSourceCode2.	self doDiff</body><body package="Browser-BrowserUI" selector="makeDefinitionsList">makeDefinitionsList	^self definitions 		asSortedCollection: [:a :b | a printString &lt;= b printString]</body><body package="Browser-BrowserUI" selector="setComboBoxes">setComboBoxes	| myMenu |	myMenu := self makeDefinitionsList.	self comboBox1 setList: myMenu asValue.	self comboBox2 setList: myMenu asValue.	self definition1 suspendInterestsFor: self while:		[self definition2 suspendInterestsFor: self while:			[self definition1 value: (myMenu at: 1).			self definition2 value: (myMenu at: 2)]]</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="methodSourceCode1">methodSourceCode1	^self definition1 value sourceCode</body><body package="Browser-BrowserUI" selector="methodSourceCode2">methodSourceCode2	^self definition2 value sourceCode</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	text1 := '' asText asValue.	text2 := '' asText asValue.	self definition1 onChangeSend: #definition1Changed to: self.	self definition2 onChangeSend: #definition2Changed to: self.</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="compareSelectedItems">compareSelectedItems	self text1 value: self methodSourceCode1.	self text2 value: self methodSourceCode2.	self doDiff</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="preBuildWith:">preBuildWith: aBuilder 	super preBuildWith: aBuilder.	self builder aspectAt: #list1 put: OrderedCollection new asValue.	self builder aspectAt: #list2 put: OrderedCollection new  asValue</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>building</category><body package="Browser-BrowserUI" selector="build:">build: spec 	| oldBuilder |	isViewingInspector := spec = #inspectorSpec.	oldBuilder := builder.	subcanvas := nil.	self 		installSubcanvasIn: #subcanvas		using: self		spec: spec.	builder := oldBuilder</body><body package="Browser-BrowserUI" selector="buildDeploymentPrerequisites">buildDeploymentPrerequisites	subcanvas := DeploymentPrerequisitesTool codeModel: codeModel.	self 		installSubcanvasIn: #subcanvas		using: subcanvas		spec: #windowSpec.	subcanvas updateContents</body><body package="Browser-BrowserUI" selector="buildDevelopmentPrerequisites">buildDevelopmentPrerequisites	subcanvas := DevelopmentPrerequisitesTool codeModel: codeModel.	self 		installSubcanvasIn: #subcanvas		using: subcanvas		spec: #windowSpec.	subcanvas updateContents</body><body package="Browser-BrowserUI" selector="buildEmpty">buildEmpty	self build: #emptySpec</body><body package="Browser-BrowserUI" selector="buildInformation">buildInformation	| codeComponent |	codeComponent := self codeComponent.	codeComponent notNil 		ifTrue: [self informationHolder value: codeComponent textForItem].	self build: #informationSpec</body><body package="Browser-BrowserUI" selector="buildInspector">buildInspector	| codeComponent |	codeComponent := self codeComponent.	codeComponent isNil ifTrue: [^self buildEmpty].	(self inspectorSubcanvas)		inspect: codeComponent properties;		builder: nil.	originalInspectedProperties := self inspectorSubcanvas object copy.	self build: #inspectorSpec</body><body package="Browser-BrowserUI" selector="buildPostLoadAction">buildPostLoadAction	subcanvas := CodeComponentBlockTool 				codeModel: codeModel				property: #postLoadBlock				argumentCount: 1.	self 		installSubcanvasIn: #subcanvas		using: subcanvas		spec: #windowSpec.	subcanvas updateContents</body><body package="Browser-BrowserUI" selector="buildPostUnloadAction">buildPostUnloadAction	subcanvas := CodeComponentBlockTool 				codeModel: codeModel				property: #postUnloadBlock				argumentCount: 0.	self 		installSubcanvasIn: #subcanvas		using: subcanvas		spec: #windowSpec.	subcanvas updateContents</body><body package="Browser-BrowserUI" selector="buildPreLoadAction">buildPreLoadAction	subcanvas := CodeComponentBlockTool 				codeModel: codeModel				property: #preLoadBlock				argumentCount: 1.	self 		installSubcanvasIn: #subcanvas		using: subcanvas		spec: #windowSpec.	subcanvas updateContents</body><body package="Browser-BrowserUI" selector="buildPreReadAction">buildPreReadAction	subcanvas := CodeComponentBlockTool 				codeModel: codeModel				property: #preReadBlock				argumentCount: 0.	self 		installSubcanvasIn: #subcanvas		using: subcanvas		spec: #windowSpec.	subcanvas updateContents</body><body package="Browser-BrowserUI" selector="buildPrerequisiteVersionSelectionAction">buildPrerequisiteVersionSelectionAction	subcanvas := CodeComponentBlockTool 				codeModel: codeModel				property: #versionSelectionBlock				argumentCount: 3.	self 		installSubcanvasIn: #subcanvas		using: subcanvas		spec: #windowSpec.	subcanvas updateContents</body><body package="Browser-BrowserUI" selector="buildPreSaveAction">buildPreSaveAction	subcanvas := CodeComponentBlockTool 				codeModel: codeModel				property: #preSaveBlock				argumentCount: 1.	self 		installSubcanvasIn: #subcanvas		using: subcanvas		spec: #windowSpec.	subcanvas updateContents</body><body package="Browser-BrowserUI" selector="buildPreUnloadAction">buildPreUnloadAction	subcanvas := CodeComponentBlockTool 				codeModel: codeModel				property: #preUnloadBlock				argumentCount: 1.	self 		installSubcanvasIn: #subcanvas		using: subcanvas		spec: #windowSpec.	subcanvas updateContents</body><body package="Browser-BrowserUI" selector="buildWarningSuppressionAction">buildWarningSuppressionAction	subcanvas := CodeComponentBlockTool 				codeModel: codeModel				property: #warningSuppressionBlock				argumentCount: 1.	self 		installSubcanvasIn: #subcanvas		using: subcanvas		spec: #windowSpec.	subcanvas updateContents</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="acceptProperties">acceptProperties	| changedProperties |	changedProperties := self inspectorSubcanvas object.	originalInspectedProperties keysDo:		[:each |		(changedProperties includesKey: each) ifFalse:			[self codeComponent propertyAt: each put: nil]].	changedProperties copy keysAndValuesDo: 		[:key :value | 		(self codeComponent propertyAt: key) = value 			ifTrue: [changedProperties removeKey: key]].	self codeComponent copyPropertiesFrom: changedProperties.	self updateInspector</body><body package="Browser-BrowserUI" selector="cancelProperties">cancelProperties	self updateInspector</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="informationHolder">informationHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^informationHolder isNil		ifTrue:			[informationHolder := String new asValue]		ifFalse:			[informationHolder]</body><body package="Browser-BrowserUI" selector="propertiesList">propertiesList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^propertiesList isNil		ifTrue:			[propertiesList := SelectionInList new]		ifFalse:			[propertiesList]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>subcanvases</category><body package="Browser-BrowserUI" selector="subcanvases">subcanvases	subcanvas isNil ifTrue: [^super subcanvases].	^super subcanvases copyWith: subcanvas</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	| selection |	subcanvas notNil 		ifTrue: 			[^self 				installSubcanvasIn: #subcanvas				using: subcanvas				spec: #windowSpec].	selection := self propertiesList selection.	selection isNil 		ifTrue: [self buildEmpty]		ifFalse: [self perform: selection value]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	self propertiesList list: PropertiesList asList.	self propertiesList selection: PropertiesList first.	isViewingInspector := false</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="changedSelection">changedSelection	self updateContents</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	| selection |	selection := self propertiesList selection.	selection isNil 		ifTrue: [self buildEmpty]		ifFalse: [self perform: selection value].	subcanvas notNil ifTrue: [subcanvas updateContents]</body><body package="Browser-BrowserUI" selector="updateInspector">updateInspector	inspectorSubcanvas inspect: self codeComponent properties.	originalInspectedProperties := self inspectorSubcanvas object copy</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>menu accessing</category><body package="Browser-BrowserUI" selector="menu">menu	^[subcanvas isNil ifTrue: [super menu] ifFalse: [subcanvas menu]]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="activeTool">activeTool	^subcanvas isNil ifTrue: [self] ifFalse: [subcanvas]</body><body package="Browser-BrowserUI" selector="inspectorSubcanvas">inspectorSubcanvas	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^inspectorSubcanvas isNil		ifTrue:			[inspectorSubcanvas := Smalltalk.UI.ParcelPropertiesInspector new]		ifFalse:			[inspectorSubcanvas]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>help</category><body package="Browser-BrowserUI" selector="helpTopic">helpTopic	^isViewingInspector 		ifTrue: ['Component Properties']		ifFalse: [super helpTopic]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.ClassDiagramTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="codeModel:">codeModel: aCodeModel 	super codeModel: aCodeModel.	self createView</body></methods><methods><class-id>Refactory.Browser.ClassDiagramTool</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="diagram">diagram	view isNil ifTrue: [self createView].	^view</body></methods><methods><class-id>Refactory.Browser.ClassDiagramTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	| specWrapper |	self selectedClass == oldClass ifTrue: [^self].		[self createView.	"This is not pretty, but I don't know a better way to change the view."	specWrapper := self builder componentAt: #diagram.	specWrapper widget container component: view.	specWrapper widget: view] 			on: Error			do: [:ex | ex return]</body></methods><methods><class-id>Refactory.Browser.ClassDiagramTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="createView">createView	oldClass := self selectedClass.	oldClass isNil ifTrue: [^view := CompositePart new].	(oldClass withAllSubclasses size &lt; 30 or: 			[self 				confirm: (#HasSubclassesDisplayAllQ &lt;&lt; #browser &gt;&gt; 'This class has several subclasses are you sure you wish to display all of them?')]) 		ifFalse: [^view := CompositePart new].	view := ClassDiagramView 				classes: oldClass withAllSuperclasses , oldClass allSubclasses				in: self navigator</body></methods><methods><class-id>Refactory.Browser.ClassDiagramTool</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="preBuildWith:">preBuildWith: aBuilder	super preBuildWith: aBuilder.	self createView.</body></methods><methods><class-id>Refactory.Browser.ClassDiagramTool class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>navigator accessing</category><body package="Browser-BrowserUI" selector="categories">categories	^self state categories</body><body package="Browser-BrowserUI" selector="category">category	^self state category</body><body package="Browser-BrowserUI" selector="classesAndNameSpaces">classesAndNameSpaces	^self state classesAndNameSpaces</body><body package="Browser-BrowserUI" selector="classOrNameSpace">classOrNameSpace	^self state classOrNameSpace</body><body package="Browser-BrowserUI" selector="definition">definition	^state definition</body><body package="Browser-BrowserUI" selector="definitions">definitions	^state definitions</body><body package="Browser-BrowserUI" selector="environment">environment	^self navigator environment</body><body package="Browser-BrowserUI" selector="isData">isData	^state isData</body><body package="Browser-BrowserUI" selector="methodClass">methodClass	^state methodClass</body><body package="Browser-BrowserUI" selector="nameSpace">nameSpace	^self state nameSpace</body><body package="Browser-BrowserUI" selector="nonMetaClass">nonMetaClass	^self state nonMetaClass</body><body package="Browser-BrowserUI" selector="nonMetaClasses">nonMetaClasses	^self state nonMetaClasses</body><body package="Browser-BrowserUI" selector="objectName">objectName	^self state objectName</body><body package="Browser-BrowserUI" selector="objectNames">objectNames	^self state objectNames</body><body package="Browser-BrowserUI" selector="package">package	^self state package</body><body package="Browser-BrowserUI" selector="packages">packages	^self state packages</body><body package="Browser-BrowserUI" selector="parcel">parcel	^self state parcel</body><body package="Browser-BrowserUI" selector="parcels">parcels	^self state parcels</body><body package="Browser-BrowserUI" selector="protocol">protocol	^self state protocol</body><body package="Browser-BrowserUI" selector="protocols">protocols	^self state protocols</body><body package="Browser-BrowserUI" selector="pundle">pundle	^state pundle</body><body package="Browser-BrowserUI" selector="pundles">pundles	^state pundles</body><body package="Browser-BrowserUI" selector="selectedBinding">selectedBinding	^self state selectedBinding</body><body package="Browser-BrowserUI" selector="selectedBindings">selectedBindings	^self state selectedBindings</body><body package="Browser-BrowserUI" selector="selectedClass">selectedClass	^self state selectedClass</body><body package="Browser-BrowserUI" selector="selectedClasses">selectedClasses	^self state selectedClasses</body><body package="Browser-BrowserUI" selector="selector">selector	^self state selector</body><body package="Browser-BrowserUI" selector="selectors">selectors	^self state selectors</body><body package="Browser-BrowserUI" selector="setBinding:">setBinding: aBinding 	navigator setBinding: aBinding</body><body package="Browser-BrowserUI" selector="setClass:">setClass: aClass 	navigator updateWithState: ((NavigatorState new)				selectedClass: aClass;				yourself)</body><body package="Browser-BrowserUI" selector="setNameSpace:">setNameSpace: aNameSpace 	navigator updateWithState: ((NavigatorState new)				classOrNameSpace: aNameSpace;				yourself)</body><body package="Browser-BrowserUI" selector="setSelector:">setSelector: aSelector 	navigator updateWithState: ((state copy)				selector: aSelector;				yourself)</body><body package="Browser-BrowserUI" selector="sharedVariableName">sharedVariableName	^state sharedVariableName</body><body package="Browser-BrowserUI" selector="sharedVariableNames">sharedVariableNames	^state sharedVariableNames</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="changedSelectionPolicy">changedSelectionPolicy	self updateCodeTool</body><body package="Browser-BrowserUI" selector="changeRequest">changeRequest	^self updateRequest</body><body package="Browser-BrowserUI" selector="installCodeTool:">installCodeTool: aBoolean 	| oldTool codeToolClass |	oldTool := tool.	codeToolClass := self codeToolClass.	tool class == codeToolClass 		ifFalse: [tool := codeToolClass codeModel: self].	(aBoolean or: [tool ~~ oldTool]) 		ifTrue: 			[self installSubcanvasIn: #subcanvas using: tool.			tool ~~ oldTool ifTrue: [oldTool release]]</body><body package="Browser-BrowserUI" selector="update">update	self updateState.	self updateTabList.	self updateCodeTool</body><body package="Browser-BrowserUI" selector="update:with:from:">update: anAspectSymbol with: aParameter from: aSender 	anAspectSymbol = #closed ifTrue: [^self closeRequest].	lockPolicy isLocked ifTrue: [^self].	anAspectSymbol = #updateState ifTrue: [^self updateState].	self update</body><body package="Browser-BrowserUI" selector="updateCodeTool">updateCodeTool	self installCodeTool: false.	tool notNil ifTrue: [tool updateContents].	self updateLabel</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	self installCodeTool: true</body><body package="Browser-BrowserUI" selector="updateRequest">updateRequest	^lockPolicy isLocked or: [super updateRequest]</body><body package="Browser-BrowserUI" selector="updateState">updateState	self state: navigator getState</body><body package="Browser-BrowserUI" selector="updateTabLabels">updateTabLabels	| newLabels widget |	newLabels := self tabList list collect: [:each | each displayText].	newLabels = labels 		ifFalse: 			[labels := newLabels.			widget := self tabListWidgetFor: #subcanvas.			widget notNil ifTrue: [widget invalidate]]</body><body package="Browser-BrowserUI" selector="updateTabList">updateTabList	| list currentTool |	list := (self selectionPolicies select: [:each | each isEnabled]) asList.	list = self tabList list 		ifTrue: 			[self updateTabLabels.			^self].	currentTool := self tabList selection.	self tabList list: list.	(list includes: currentTool) 		ifTrue: [self tabList selection: currentTool]		ifFalse: [self tabList selection: (list detect: [:each | true] ifNone: [nil])].	self updateTabLabels</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="codeToolClass">codeToolClass	^self selectionPolicy toolClass</body><body package="Browser-BrowserUI" selector="isZoomed:">isZoomed: aBoolean 	isZoomed := aBoolean</body><body package="Browser-BrowserUI" selector="lock">lock	self isLocked ifTrue: [^self].	lockPolicy lock.	self saveState</body><body package="Browser-BrowserUI" selector="navigator">navigator	^navigator</body><body package="Browser-BrowserUI" selector="selectionPolicies">selectionPolicies	^selectionPolicies isNil 		ifTrue: 			[selectionPolicies := self class defaultSelectionPolicies collect: 							[:each | 							(each copy)								for: self;								yourself]]		ifFalse: [selectionPolicies]</body><body package="Browser-BrowserUI" selector="selectionPolicy">selectionPolicy	^self tabList selection</body><body package="Browser-BrowserUI" selector="selectPolicyNamed:">selectPolicyNamed: aString 	| policy |	policy := selectionPolicies detect: [:each | each name = aString]				ifNone: [^self].	self useToolSelectionPolicy: policy</body><body package="Browser-BrowserUI" selector="state">state	state isNil ifTrue: [state := navigator getState].	^state</body><body package="Browser-BrowserUI" selector="state:">state: anObject	^state := anObject</body><body package="Browser-BrowserUI" selector="tool">tool	^tool</body><body package="Browser-BrowserUI" selector="unlock">unlock	self isLocked ifFalse: [^self].	navigator setState: self state.	lockPolicy unlock</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isEditing">isEditing	^tool notNil and: [tool isEditing]</body><body package="Browser-BrowserUI" selector="isLocked">isLocked	^lockPolicy isLocked</body><body package="Browser-BrowserUI" selector="isZoomed">isZoomed	^isZoomed</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>navigator testing</category><body package="Browser-BrowserUI" selector="isMeta">isMeta	^self state isMeta</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	isZoomed := false.	self tabList list: self selectionPolicies.	self tabList selection: self tabList list first.	self class showStatusBarHolder onChangeSend: #updateStatusBar to: self</body><body package="Browser-BrowserUI" selector="lockPolicyClass:">lockPolicyClass: aClass	lockPolicy := aClass on: self</body><body package="Browser-BrowserUI" selector="navigator:">navigator: aNavigator 	navigator notNil ifTrue: [navigator removeDependent: self].	navigator := aNavigator.	navigator addDependent: self.	lockPolicy := StateLockPolicy on: self.	self update</body><body package="Browser-BrowserUI" selector="release">release	self class showStatusBarHolder retractInterestsFor: self.	navigator removeDependent: self.	tool release.	super release</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="navigate">navigate	navigator setState: self state</body><body package="Browser-BrowserUI" selector="toggleStatusBar">toggleStatusBar	self class showStatusBar: self class showStatusBar value not</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>events</category><body package="Browser-BrowserUI" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	navigator removeDependent: self.	self release.	^super noticeOfWindowClose: aWindow</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>private</category><body package="Browser-BrowserUI" selector="saveState">saveState	tool notNil ifTrue: [tool saveState]</body><body package="Browser-BrowserUI" selector="subcanvases">subcanvases	| superSubcanvases |	superSubcanvases := super subcanvases.	^self tool isNil 		ifTrue: [superSubcanvases]		ifFalse: 			[(superSubcanvases asOrderedCollection)				add: self tool;				yourself]</body><body package="Browser-BrowserUI" selector="updateStatusBar">updateStatusBar	self isLocked ifTrue: [^self].	self builder isNil ifTrue: [^self].	self builder window refresh</body><body package="Browser-BrowserUI" selector="useToolSelectionPolicy:">useToolSelectionPolicy: aCodeToolSelectionPolicy 	self tabList selection == aCodeToolSelectionPolicy ifTrue: [^self].	self tabList selection: aCodeToolSelectionPolicy.	self changedSelectionPolicy</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>updating-label</category><body package="Browser-BrowserUI" selector="updateItemLabelForClass:">updateItemLabelForClass: aClass 	self labelHolder value: (#ClassCSpace &lt;&lt; #browser &gt;&gt; 'Class: ') asString asText allBold, aClass fullName</body><body package="Browser-BrowserUI" selector="updateItemLabelForNameSpace:">updateItemLabelForNameSpace: aNameSpace 	self labelHolder value: (#NameSpaceCSpace &lt;&lt; #browser &gt;&gt; 'Name Space: ') asString asText allBold, aNameSpace fullName</body><body package="Browser-BrowserUI" selector="updateItemLabelForSelector:andClass:">updateItemLabelForSelector: aSelector andClass: aClass 	| label protocol |	label := (#MethodCSpace &lt;&lt; #browser &gt;&gt; 'Method: ') asText allBold.	aClass isNil ifTrue: [^self labelHolder value: label].	label := label , '#' , aSelector.	protocol := self navigator environment whichProtocolIncludes: aSelector				in: aClass.	protocol notNil ifTrue: [label := label , ' (' , protocol , ')'].	self labelHolder value: label</body><body package="Browser-BrowserUI" selector="updateItemLabelForSharedVariable:in:">updateItemLabelForSharedVariable: aSymbol in: aClassOrNameSpace 	self labelHolder value: (#SharedVariableCSpace &lt;&lt; #browser &gt;&gt; 'Shared Variable: ') asString asText allBold , aSymbol</body><body package="Browser-BrowserUI" selector="updateLabel">updateLabel	self selector notNil ifTrue: [^self updateLabelForMethod].	self sharedVariableName notNil 		ifTrue: [^self updateLabelForSharedVariable].	self classOrNameSpace notNil ifTrue: [^self updateLabelForClassOrNameSpace].	self pundle notNil ifTrue: [^self updateLabelForPundle].	self parcel notNil ifTrue: [^self updateLabelForParcel].	self updateLabelForNoSelection</body><body package="Browser-BrowserUI" selector="updateLabelForClassOrNameSpace">updateLabelForClassOrNameSpace	| classOrNameSpace |	classOrNameSpace := self classOrNameSpace.	classOrNameSpace isBehavior 		ifTrue: 			[self				updateItemLabelForClass: classOrNameSpace;				updateParcelLabelForClass: classOrNameSpace;				updatePackageLabelForClass: classOrNameSpace]		ifFalse: 			[self				updateItemLabelForNameSpace: classOrNameSpace;				updateParcelLabelForNameSpace: classOrNameSpace;				updatePackageLabelForNameSpace: classOrNameSpace]</body><body package="Browser-BrowserUI" selector="updateLabelForMethod">updateLabelForMethod	| selector class |	selector := self selector.	class := self selectedClass whichClassIncludesSelector: selector.	class isNil ifTrue: [^self updateLabelForNoSelection].	self updateItemLabelForSelector: selector andClass: class.	self updateParcelLabelForSelector: selector andClass: class.	self updatePackageLabelForSelector: selector andClass: class</body><body package="Browser-BrowserUI" selector="updateLabelForNoSelection">updateLabelForNoSelection	self labelHolder value: ''.	self parcelLabelHolder value: ''.	self packageLabelHolder value: ''</body><body package="Browser-BrowserUI" selector="updateLabelForParcel">updateLabelForParcel	| parcel |	parcel := self parcel.	self labelHolder value: 		(#ParcelCSpace &lt;&lt; #browser &gt;&gt; 'Parcel: ') asString asText allBold , parcel name.	self parcelLabelHolder 		value: (#VersionCSpace &lt;&lt; #browser &gt;&gt; 'Version: ') asString asText allBold , parcel versionString.	self packageLabelHolder value: ''</body><body package="Browser-BrowserUI" selector="updateLabelForPundle">updateLabelForPundle	| pundle |	pundle := self pundle.	self labelHolder 		value: (pundle isPackage ifTrue: [(#PackageCSpace &lt;&lt; #browser &gt;&gt; 'Package: ')] ifFalse: [(#BundleCSp &lt;&lt; #browser &gt;&gt; 'Bundle: ')]) 				asText allBold 				, pundle name.	self parcelLabelHolder value: ''.	self packageLabelHolder value: 		(#VersionCSpace &lt;&lt; #browser &gt;&gt; 'Version: ') asString asText allBold , pundle versionString</body><body package="Browser-BrowserUI" selector="updateLabelForSharedVariable">updateLabelForSharedVariable	| variable classOrNameSpace |	variable := self sharedVariableName.	classOrNameSpace := self classOrNameSpace.	classOrNameSpace isNil ifTrue: [^self updateLabelForNoSelection].	self		updateItemLabelForSharedVariable: variable in: classOrNameSpace;		updateParcelLabelForSharedVariable: variable in: classOrNameSpace;		updatePackageLabelForSharedVariable: variable in: classOrNameSpace</body><body package="Browser-BrowserUI" selector="updatePackageLabelForClass:">updatePackageLabelForClass: aBehavior 	| label component |	label := (#PackageCSpace &lt;&lt; #browser &gt;&gt; 'Package: ') asText allBold.	component := self storeRegistry containingPackageForClass: aBehavior.	label := component notNil 			ifTrue: [label , component name]			ifFalse: [((#x1sNotPackaged &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; Not packaged')						expandMacrosWith: label)].	self packageLabelHolder value: label</body><body package="Browser-BrowserUI" selector="updatePackageLabelForNameSpace:">updatePackageLabelForNameSpace: aNameSpace 	| label component |	label := (#PackageCSpace &lt;&lt; #browser &gt;&gt; 'Package: ') asText allBold.	component := self storeRegistry containingPackageForNameSpaceSymbol: aNameSpace absoluteSymbol.	label := component notNil 			ifTrue: [label , component name]			ifFalse: [((#x1sNotPackaged &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; Not packaged')						expandMacrosWith: label)].	self packageLabelHolder value: label</body><body package="Browser-BrowserUI" selector="updatePackageLabelForSelector:andClass:">updatePackageLabelForSelector: aSelector andClass: aClass 	| codeComponents packageLabel |	packageLabel := (#PackageCSpace &lt;&lt; #browser &gt;&gt; 'Package: ') asText allBold.	codeComponents := self storeRegistry allContainingPackagesForSelector: aSelector class: aClass.	packageLabel := packageLabel , (codeComponents isEmpty 						ifTrue: [(#NotPackaged &lt;&lt; #browser &gt;&gt; 'Not packaged')]						ifFalse: [codeComponents asArray first name]).	self packageLabelHolder value: packageLabel</body><body package="Browser-BrowserUI" selector="updatePackageLabelForSharedVariable:in:">updatePackageLabelForSharedVariable: aSymbol in: aClassOrNameSpace 	| label component |	label := (#PackageCSpace &lt;&lt; #browser &gt;&gt; 'Package: ') asText allBold.	component := self storeRegistry containingPackageForDataKey: aSymbol	symbol: aClassOrNameSpace absoluteSymbol.	label := component notNil 				ifTrue: [label , component name]				ifFalse: [((#x1sNotPackaged &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; Not packaged')							expandMacrosWith: label)].	self packageLabelHolder value: label</body><body package="Browser-BrowserUI" selector="updateParcelLabelForClass:">updateParcelLabelForClass: aBehavior 	| parcels label |	parcels := Parcel parcelsDefiningClass: aBehavior.	label := (#ParcelCSpace &lt;&lt; #browser &gt;&gt; 'Parcel: ') asString asText allBold,		(parcels isEmpty			ifTrue: [(#none &lt;&lt; #browser &gt;&gt; 'none') asString]			ifFalse: [parcels asArray first name]).	self parcelLabelHolder value: label</body><body package="Browser-BrowserUI" selector="updateParcelLabelForNameSpace:">updateParcelLabelForNameSpace: aNameSpace 	| parcels label |	parcels := Parcel parcelsDefiningNameSpace: aNameSpace.	label := (#ParcelCSpace &lt;&lt; #browser &gt;&gt; 'Parcel: ') asString asText allBold,		(parcels isEmpty			ifTrue: [(#none &lt;&lt; #browser &gt;&gt; 'none') asString]			ifFalse: [parcels asArray first name]).	self parcelLabelHolder value: label</body><body package="Browser-BrowserUI" selector="updateParcelLabelForSelector:andClass:">updateParcelLabelForSelector: aSelector andClass: aClass 	| codeComponents parcelLabel |	parcelLabel := (#ParcelCSpace &lt;&lt; #browser &gt;&gt; 'Parcel: ') asText allBold.	codeComponents := Parcel parcelsDefiningSelector: aSelector inClass: aClass.	parcelLabel := parcelLabel , (codeComponents isEmpty 						ifTrue: [(#none &lt;&lt; #browser &gt;&gt; 'none') asString]						ifFalse: [codeComponents asArray first name]).	self parcelLabelHolder value: parcelLabel</body><body package="Browser-BrowserUI" selector="updateParcelLabelForSharedVariable:in:">updateParcelLabelForSharedVariable: aSymbol in: aClassOrNameSpace 	| parcels label binding |	binding := aClassOrNameSpace bindingFor: aSymbol.	binding isNil ifTrue: [^self].	parcels := Parcel parcelsDefiningBinding: binding.	label := (#ParcelCSpace &lt;&lt; #browser &gt;&gt; 'Parcel: ') asString asText allBold,		(parcels isEmpty			ifTrue: [(#none &lt;&lt; #browser &gt;&gt; 'none') asString]			ifFalse: [parcels asArray first name]).	self parcelLabelHolder value: label</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="labelHolder">labelHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^labelHolder isNil		ifTrue:			[labelHolder := String new asValue]		ifFalse:			[labelHolder]</body><body package="Browser-BrowserUI" selector="packageLabelHolder">packageLabelHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^packageLabelHolder isNil		ifTrue:			[packageLabelHolder := String new asValue]		ifFalse:			[packageLabelHolder]</body><body package="Browser-BrowserUI" selector="parcelLabelHolder">parcelLabelHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^parcelLabelHolder isNil		ifTrue:			[parcelLabelHolder := String new asValue]		ifFalse:			[parcelLabelHolder]</body><body package="Browser-BrowserUI" selector="tabList">tabList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^tabList isNil		ifTrue:			[tabList := SelectionInList new]		ifFalse:			[tabList]</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>printing</category><body package="Browser-BrowserUI" selector="printOn:">printOn: aStream 	self state printOn: aStream.	(tool notNil and: [tool isEditing]) ifTrue: [aStream nextPut: $*]</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>menu</category><body package="Browser-BrowserUI" selector="menu">menu	tool isNil ifTrue: [^Menu new].	^tool menu</body><body package="Browser-BrowserUI" selector="selectionPolicyMenuSpecifications">selectionPolicyMenuSpecifications	^(selectionPolicies select: [:each | each isEnabled]) collect: 			[:each | 			(self selectionPolicy == each 				ifTrue: [RBCheckedCommand]				ifFalse: [RBCommand]) 					named: each name					description: (#SelectTool &lt;&lt; #browser &gt;&gt; 'Select Tool') asString					action: [self changeRequest ifTrue: [self useToolSelectionPolicy: each]]					receiver: #yourself]</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildStatusBar">postBuildStatusBar	| widget |	#(#label #parcelLabel #packageLabel) do: 			[:each | 			widget := self builder componentAt: each.			widget component layout 				topOffset: [self class showStatusBar ifTrue: [-25] ifFalse: [0]]].	(self builder componentAt: #subcanvas) component layout 		bottomOffset: [self class showStatusBar ifTrue: [-27] ifFalse: [0]]</body><body package="Browser-BrowserUI" selector="postBuildTabList">postBuildTabList	self tabVisualBlockFor: #subcanvas		is: 			[:view :index | 			| text |			text := (view sequence at: index) displayText.			TabControlLabelAndIcon 				with: text				attributes: view textStyle				offset: 6 @ 0]</body><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self postBuildTabList.	self postBuildStatusBar</body></methods><methods><class-id>Refactory.Browser.CodeModel</class-id> <category>window properties</category><body package="Browser-BrowserUI" selector="takeFocus">takeFocus	self tool activeTool takeFocus</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="defaultSelectionPolicies">defaultSelectionPolicies	(defaultSelectionPolicies isNil or: [defaultSelectionPolicies isEmpty]) 		ifTrue: [self initializeDefaultSelectionPolicies].	^defaultSelectionPolicies</body><body package="Browser-BrowserUI" selector="defaultSelectionPolicies:">defaultSelectionPolicies: aCollection 	defaultSelectionPolicies := aCollection</body><body package="Browser-BrowserUI" selector="initializeDefaultSelectionPolicies">initializeDefaultSelectionPolicies	defaultSelectionPolicies := (OrderedCollection new)				add: SourceSelectionPolicy new;				add: CodeComponentPropertiesSelectionPolicy new;				add: CommentSelectionPolicy new;				add: OverrideSelectionPolicy new;				add: VisualSelectionPolicy new;				add: HierarchyDiagramSelectionPolicy new;				add: CompareCodeToolSelectionPolicy new;				yourself.	self changed: #selectionPolicies</body><body package="Browser-BrowserUI" selector="showStatusBar">showStatusBar	^self showStatusBarHolder value</body><body package="Browser-BrowserUI" selector="showStatusBar:">showStatusBar: aBoolean 	self showStatusBarHolder value: aBoolean</body><body package="Browser-BrowserUI" selector="showStatusBarHolder">showStatusBarHolder	^showStatusBarHolder isNil 		ifTrue: [showStatusBarHolder := true asValue]		ifFalse: [showStatusBarHolder]</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="navigator:">navigator: aNavigator 	^(self new)		navigator: aNavigator;		yourself</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.ClassDiagramClassView</class-id> <category>controller accessing</category><body package="Browser-BrowserUI" selector="defaultControllerClass">defaultControllerClass	^ClassDiagramController</body></methods><methods><class-id>Refactory.Browser.ClassDiagramClassView</class-id> <category>private</category><body package="Browser-BrowserUI" selector="extent:">extent: aPoint	extent := aPoint</body></methods><methods><class-id>Refactory.Browser.ClassDiagramClassView</class-id> <category>bounds accessing</category><body package="Browser-BrowserUI" selector="preferredBounds">preferredBounds	^0 @ 0 corner: extent</body></methods><methods><class-id>Refactory.Browser.ClassDiagramClassView class</class-id> <category>defaults</category><body package="Browser-BrowserUI" selector="height">height	^140</body><body package="Browser-BrowserUI" selector="minWidth">minWidth	^100</body></methods><methods><class-id>Refactory.Browser.ClassDiagramClassView class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="viewFor:in:">viewFor: aClass in: aBrowser 	| model view instVarView methodView label offsetBlock textHeightBlock |	model := ClassDiagramModel new on: aClass in: aBrowser.	view := self model: model.	(view controller)		menuHolder: model classMenuHolder;		performer: model.	label := model name asText allBold asComposedText.	offsetBlock := [model name asText allBold asComposedText width // 2].	textHeightBlock := [model name asText allBold asComposedText height].	view add: label		in: ((LayoutFrame new)				leftFraction: 0.5 offset: [offsetBlock value negated];				topOffset: 0;				rightFraction: 0.5 offset: offsetBlock;				bottomOffset: textHeightBlock;				yourself).	instVarView := SequenceView new.	instVarView optimizeForText.	instVarView model: model instVarListHolder listHolder.	instVarView selectionChannel: model instVarListHolder selectionIndexHolder.	instVarView controller menuHolder: model instVarMenuHolder.	instVarView controller performer: model.	view add: (LookPreferences edgeDecorator on: instVarView)		in: ((LayoutFrame new)				leftOffset: 2;				topOffset: [textHeightBlock value];				rightFraction: 1 offset: -2;				bottomFraction: 0.5 offset: [textHeightBlock value // 2];				yourself).	methodView := SequenceView new.	methodView optimizeForText.	methodView model: model methodListHolder listHolder.	methodView selectionChannel: model methodListHolder selectionIndexHolder.	methodView controller menuHolder: model methodMenuHolder.	methodView controller performer: model.	view add: (LookPreferences edgeDecorator on: methodView)		in: ((LayoutFrame new)				leftOffset: 2;				topFraction: 0.5 offset: [textHeightBlock value // 2 + 2];				rightFraction: 1 offset: -2;				bottomFraction: 1 offset: -2;				yourself).	view 		extent: (aClass name asText allBold asComposedText width + 4 				max: self minWidth) @ self height.	^view</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="for:">for: aCodeModel 	codeModel := aCodeModel</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id> <category>comparing</category><body package="Browser-BrowserUI" selector="=">= aCodeToolSelectionPolicy 	^self class = aCodeToolSelectionPolicy class 		and: [self name = aCodeToolSelectionPolicy name]</body><body package="Browser-BrowserUI" selector="hash">hash	^self name hash</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id> <category>printing</category><body package="Browser-BrowserUI" selector="displayString">displayString	^self name</body><body package="Browser-BrowserUI" selector="displayText">displayText	^self name asText</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id> <category>accessing-classes</category><body package="Browser-BrowserUI" selector="codeToolClassForBundle:">codeToolClassForBundle: aBundleModel 	| package |	package := codeModel package.	^package isNil 		ifTrue: [nil]		ifFalse: [self codeToolClassForPackage: package]</body><body package="Browser-BrowserUI" selector="codeToolClassForCategory:">codeToolClassForCategory: aSymbol 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForClass:">codeToolClassForClass: aBehavior 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForNameSpace:">codeToolClassForNameSpace: aNameSpace	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForPackage:">codeToolClassForPackage: aPackageModel 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForParcel:">codeToolClassForParcel: aParcel 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForProtocol:andClass:">codeToolClassForProtocol: aSymbol andClass: aBehavior 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForSelector:andClass:">codeToolClassForSelector: aSymbol andClass: aBehavior 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForSharedVariable:andClass:">codeToolClassForSharedVariable: aSymbol andClass: aBehavior 	^nil</body><body package="Browser-BrowserUI" selector="codeToolClassForSharedVariableProtocol:andClass:">codeToolClassForSharedVariableProtocol: aSymbol andClass: aBehavior 	^nil</body><body package="Browser-BrowserUI" selector="nothingSelectedCodeToolClass">nothingSelectedCodeToolClass	^nil</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isEnabled">isEnabled	^self toolClass notNil</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="name">name	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="toolClass">toolClass	| object |	(object := codeModel selector) notNil 		ifTrue: 			[^self codeToolClassForSelector: object andClass: codeModel methodClass].	(object := codeModel sharedVariableName) notNil 		ifTrue: 			[^self codeToolClassForSharedVariable: object				andClass: codeModel classOrNameSpace].	(object := codeModel protocol) notNil 		ifTrue: 			[^codeModel isData 				ifTrue: 					[self codeToolClassForSharedVariableProtocol: object						andClass: codeModel classOrNameSpace]				ifFalse: 					[self codeToolClassForProtocol: object andClass: codeModel selectedClass]].	(object := codeModel classOrNameSpace) notNil 		ifTrue: 			[^object isBehavior 				ifTrue: [self codeToolClassForClass: codeModel selectedClass]				ifFalse: [self codeToolClassForNameSpace: object]].	(object := codeModel category) notNil 		ifTrue: [^self codeToolClassForCategory: object].	(object := codeModel pundle) notNil 		ifTrue: 			[^object isBundle 				ifTrue: [self codeToolClassForBundle: object]				ifFalse: [self codeToolClassForPackage: object]].	(object := codeModel parcel) notNil 		ifTrue: [^self codeToolClassForParcel: object].	^self nothingSelectedCodeToolClass</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="addSelectionPolicy">addSelectionPolicy	| policies inst |	inst := self new.	policies := CodeModel defaultSelectionPolicies.	(policies anySatisfy: [:each | each name = inst name]) ifTrue: [^self].	CodeModel defaultSelectionPolicies: (policies copyWith: inst)</body><body package="Browser-BrowserUI" selector="removeSelectionPolicy">removeSelectionPolicy	CodeModel defaultSelectionPolicies: (CodeModel defaultSelectionPolicies 				copyWithout: self new)</body></methods><methods><class-id>Refactory.Browser.CodeToolSelectionPolicy class</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="update:with:from:">update: anAspectSymbol with: aParameter from: aSender 	(aSender = CodeModel and: [anAspectSymbol = #selectionPolicies]) 		ifTrue: [^self addSelectionPolicy].	^super 		update: anAspectSymbol		with: aParameter		from: aSender</body></methods><methods><class-id>Refactory.Browser.HierarchyDiagramSelectionPolicy</class-id> <category>accessing-classes</category><body package="Browser-BrowserUI" selector="codeToolClassForClass:">codeToolClassForClass: aBehavior 	^ClassDiagramTool</body></methods><methods><class-id>Refactory.Browser.HierarchyDiagramSelectionPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="name">name	^(#HierarchyDiagram &lt;&lt; #browser &gt;&gt; 'Hierarchy Diagram') asString</body></methods><methods><class-id>Refactory.Browser.VisualSelectionPolicy</class-id> <category>accessing-classes</category><body package="Browser-BrowserUI" selector="codeToolClassForSelector:andClass:">codeToolClassForSelector: aSymbol andClass: aBehavior 	| method |	method := aBehavior compiledMethodAt: aSymbol ifAbsent: [^nil].	^ResourceTypes at: method resourceType ifAbsent: [nil]</body></methods><methods><class-id>Refactory.Browser.VisualSelectionPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="name">name	^(#Visual &lt;&lt; #browser &gt;&gt; 'Visual') asString</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesSelectionPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="name">name	^(#Properties &lt;&lt; #browser &gt;&gt; 'Properties') asString</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesSelectionPolicy</class-id> <category>accessing-classes</category><body package="Browser-BrowserUI" selector="codeToolClassForBundle:">codeToolClassForBundle: aBundleModel 	^CodeComponentPropertiesTool</body><body package="Browser-BrowserUI" selector="codeToolClassForPackage:">codeToolClassForPackage: aPackageModel 	^CodeComponentPropertiesTool</body><body package="Browser-BrowserUI" selector="codeToolClassForParcel:">codeToolClassForParcel: aParcel 	aParcel isUnparceledParcel 		ifTrue: [^super codeToolClassForParcel: aParcel].	^CodeComponentPropertiesTool</body></methods><methods><class-id>Refactory.Browser.CompareCodeToolSelectionPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="name">name	^(#Compare &lt;&lt; #browser &gt;&gt; 'Compare') asString</body></methods><methods><class-id>Refactory.Browser.CompareCodeToolSelectionPolicy</class-id> <category>accessing-classes</category><body package="Browser-BrowserUI" selector="codeToolClassForSelector:andClass:">codeToolClassForSelector: aSymbol andClass: aBehavior 	codeModel definitions size &lt; 2 ifTrue: [^nil].	^CompareCodeTool</body></methods><methods><class-id>Refactory.Browser.OverrideSelectionPolicy</class-id> <category>accessing-classes</category><body package="Browser-BrowserUI" selector="codeToolClassForClass:">codeToolClassForClass: aBehavior 	^self codeToolClassForClassOrNameSpace: aBehavior</body><body package="Browser-BrowserUI" selector="codeToolClassForClassOrNameSpace:">codeToolClassForClassOrNameSpace: aBehavior 	| overrides |	overrides := Override overridesForClassOrNameSpace: aBehavior.	(overrides isNil or: [overrides isEmpty]) ifTrue: [^nil].	^OverrideCodeTool</body><body package="Browser-BrowserUI" selector="codeToolClassForNameSpace:">codeToolClassForNameSpace: aBehavior 	^self codeToolClassForClassOrNameSpace: aBehavior</body><body package="Browser-BrowserUI" selector="codeToolClassForSelector:andClass:">codeToolClassForSelector: aSymbol andClass: aBehavior 	| overrides |	overrides := Override overridesForSelector: aSymbol class: aBehavior.	(overrides isNil or: [overrides isEmpty]) ifTrue: [^nil].	^OverrideCodeTool</body><body package="Browser-BrowserUI" selector="codeToolClassForSharedVariable:andClass:">codeToolClassForSharedVariable: aSymbol andClass: aBehavior 	| overrides |	overrides := Override overridesForDataKey: aSymbol in: aBehavior.	(overrides isNil or: [overrides isEmpty]) ifTrue: [^nil].	^OverrideCodeTool</body></methods><methods><class-id>Refactory.Browser.OverrideSelectionPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="name">name	^(#Overridden &lt;&lt; #browser &gt;&gt; 'Overridden') asString</body></methods><methods><class-id>Refactory.Browser.CommentSelectionPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="name">name	^(#Comment &lt;&lt; #browser &gt;&gt; 'Comment') asString</body></methods><methods><class-id>Refactory.Browser.CommentSelectionPolicy</class-id> <category>private</category><body package="Browser-BrowserUI" selector="updateCommentFor:">updateCommentFor: aBehavior 	hasComment := aBehavior comment notEmpty</body></methods><methods><class-id>Refactory.Browser.CommentSelectionPolicy</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	hasComment := true</body></methods><methods><class-id>Refactory.Browser.CommentSelectionPolicy</class-id> <category>accessing-classes</category><body package="Browser-BrowserUI" selector="codeToolClassForBundle:">codeToolClassForBundle: aBundleModel 	self updateCommentFor: aBundleModel.	^BrowserCommentTool</body><body package="Browser-BrowserUI" selector="codeToolClassForClass:">codeToolClassForClass: aBehavior 	self updateCommentFor: aBehavior instanceBehavior.	^BrowserCommentTool</body><body package="Browser-BrowserUI" selector="codeToolClassForNameSpace:">codeToolClassForNameSpace: aNameSpace 	self updateCommentFor: aNameSpace.	^BrowserCommentTool</body><body package="Browser-BrowserUI" selector="codeToolClassForPackage:">codeToolClassForPackage: aPackageModel 	self updateCommentFor: aPackageModel.	^BrowserCommentTool</body><body package="Browser-BrowserUI" selector="codeToolClassForParcel:">codeToolClassForParcel: aParcel 	self updateCommentFor: aParcel.	^BrowserCommentTool</body></methods><methods><class-id>Refactory.Browser.CommentSelectionPolicy</class-id> <category>printing</category><body package="Browser-BrowserUI" selector="displayText">displayText	^hasComment 		ifTrue: [self name]		ifFalse: 			[self name asText emphasizeAllWith: (Array with: #color -&gt; ColorValue red)]</body></methods><methods><class-id>Refactory.Browser.CommentSelectionPolicy class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="new">new	^(super new)		initialize;		yourself</body></methods><methods><class-id>Refactory.Browser.SourceSelectionPolicy</class-id> <category>accessing-classes</category><body package="Browser-BrowserUI" selector="codeToolClassForBundle:">codeToolClassForBundle: aBundleModel 	^self defaultDefinitionToolClass</body><body package="Browser-BrowserUI" selector="codeToolClassForCategory:">codeToolClassForCategory: aSymbol 	^self defaultDefinitionToolClass</body><body package="Browser-BrowserUI" selector="codeToolClassForClass:">codeToolClassForClass: aBehavior 	^self defaultDefinitionToolClass</body><body package="Browser-BrowserUI" selector="codeToolClassForNameSpace:">codeToolClassForNameSpace: aNameSpace 	^self defaultDefinitionToolClass</body><body package="Browser-BrowserUI" selector="codeToolClassForPackage:">codeToolClassForPackage: aPackageModel 	^self defaultDefinitionToolClass</body><body package="Browser-BrowserUI" selector="codeToolClassForParcel:">codeToolClassForParcel: aParcel 	^self defaultDefinitionToolClass</body><body package="Browser-BrowserUI" selector="codeToolClassForProtocol:andClass:">codeToolClassForProtocol: aSymbol andClass: aBehavior 	^self defaultCodeToolClass</body><body package="Browser-BrowserUI" selector="codeToolClassForSelector:andClass:">codeToolClassForSelector: aSymbol andClass: aBehavior 	^self defaultCodeToolClass</body><body package="Browser-BrowserUI" selector="codeToolClassForSharedVariable:andClass:">codeToolClassForSharedVariable: aSymbol andClass: aBehavior 	^self defaultSharedVariableToolClass</body><body package="Browser-BrowserUI" selector="codeToolClassForSharedVariableProtocol:andClass:">codeToolClassForSharedVariableProtocol: aSymbol andClass: aBehavior 	^self defaultSharedVariableToolClass</body><body package="Browser-BrowserUI" selector="defaultCodeToolClass">defaultCodeToolClass	^BrowserCodeTool</body><body package="Browser-BrowserUI" selector="defaultDefinitionToolClass">defaultDefinitionToolClass	^BrowserDefinitionTool</body><body package="Browser-BrowserUI" selector="defaultSharedVariableToolClass">defaultSharedVariableToolClass	^SharedVariableCodeTool</body><body package="Browser-BrowserUI" selector="nothingSelectedCodeToolClass">nothingSelectedCodeToolClass	^self defaultDefinitionToolClass</body></methods><methods><class-id>Refactory.Browser.SourceSelectionPolicy</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="name">name	^(#Source &lt;&lt; #browser &gt;&gt; 'Source') asString</body></methods><methods><class-id>Refactory.Browser.ClassDiagramModel</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="environment">environment	^navigator environment</body><body package="Browser-BrowserUI" selector="instVarListHolder">instVarListHolder	^instVarNames</body><body package="Browser-BrowserUI" selector="methodListHolder">methodListHolder	^methods</body><body package="Browser-BrowserUI" selector="name">name	^class name</body><body package="Browser-BrowserUI" selector="navigator">navigator	^navigator</body></methods><methods><class-id>Refactory.Browser.ClassDiagramModel</class-id> <category>actions-methods</category><body package="Browser-BrowserUI" selector="implementors">implementors	self navigator browseImplementorsOf: methods selection</body><body package="Browser-BrowserUI" selector="removeMethod">removeMethod	self navigator removeMethodsSafe: (Array with: methods selection)		from: class.	self updateMethods</body><body package="Browser-BrowserUI" selector="renameMethod">renameMethod	self navigator renameMethod: methods selection in: class.	self updateMethods</body><body package="Browser-BrowserUI" selector="senders">senders	self navigator browseReferencesTo: methods selection</body></methods><methods><class-id>Refactory.Browser.ClassDiagramModel</class-id> <category>menu</category><body package="Browser-BrowserUI" selector="classMenuHolder">classMenuHolder	classMenuHolder isNil 		ifTrue: [classMenuHolder := self class classMenu asValue].	^classMenuHolder</body><body package="Browser-BrowserUI" selector="instVarMenuHolder">instVarMenuHolder	instVarMenuHolder isNil		ifTrue:			[instVarMenuHolder := nil asValue.			self changedInstVar].	^instVarMenuHolder</body><body package="Browser-BrowserUI" selector="methodMenuHolder">methodMenuHolder	methodMenuHolder isNil		ifTrue:			[methodMenuHolder := nil asValue.			self changedMethod].	^methodMenuHolder</body></methods><methods><class-id>Refactory.Browser.ClassDiagramModel</class-id> <category>private-class functions</category><body package="Browser-BrowserUI" selector="nonMetaClass">nonMetaClass	^class instanceBehavior</body></methods><methods><class-id>Refactory.Browser.ClassDiagramModel</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="on:in:">on: aClass in: aNavigator	navigator := aNavigator.	class := aClass.	instVarNames := SelectionInList new.	methods := SelectionInList new.	self updateInstVars.	self updateMethods.	instVarNames selectionIndexHolder onChangeSend: #changedInstVar to: self.	methods selectionIndexHolder onChangeSend: #changedMethod to: self</body></methods><methods><class-id>Refactory.Browser.ClassDiagramModel</class-id> <category>change</category><body package="Browser-BrowserUI" selector="changedInstVar">changedInstVar	instVarMenuHolder value: (instVarNames selection isNil 				ifTrue: [self class noInstVarMenu]				ifFalse: [self class instVarMenu])</body><body package="Browser-BrowserUI" selector="changedMethod">changedMethod	methodMenuHolder value: (methods selection isNil 				ifTrue: [nil]				ifFalse: [self class methodMenu])</body><body package="Browser-BrowserUI" selector="updateInstVars">updateInstVars	| oldName |	oldName := instVarNames selection.	instVarNames list: (List withAll: class instVarNames asSortedCollection).	instVarNames selection: oldName</body><body package="Browser-BrowserUI" selector="updateMethods">updateMethods	| oldSelector |	oldSelector := methods selection.	methods list: (List 				withAll: (self environment selectorsForClass: class) asSortedCollection).	methods selection: oldSelector</body></methods><methods><class-id>Refactory.Browser.ClassDiagramModel</class-id> <category>actions-class</category><body package="Browser-BrowserUI" selector="classRefs">classRefs	self navigator browseReferencesTo: (self nonMetaClass environment 				bindingFor: self nonMetaClass name)</body><body package="Browser-BrowserUI" selector="removeClass">removeClass	self navigator 		removeObjectsNamedSafe: (Array with: self nonMetaClass fullRootName)</body><body package="Browser-BrowserUI" selector="renameClass">renameClass	self navigator renameObjectNamed: self nonMetaClass fullRootName</body></methods><methods><class-id>Refactory.Browser.ClassDiagramModel</class-id> <category>actions-instVars</category><body package="Browser-BrowserUI" selector="abstractInstanceVariable">abstractInstanceVariable	self navigator abstractInstanceVariable: instVarNames selection in: class</body><body package="Browser-BrowserUI" selector="addInstanceVariable">addInstanceVariable	self navigator addInstanceVariableIn: class.	self updateInstVars</body><body package="Browser-BrowserUI" selector="instanceVariableReferences">instanceVariableReferences	| instVarName |	instVarName := instVarNames selection.	self navigator browseInstVarRefsTo: instVarName in: class</body><body package="Browser-BrowserUI" selector="removeInstanceVariable">removeInstanceVariable	self navigator removeInstanceVariable: instVarNames selection fromClass: class</body><body package="Browser-BrowserUI" selector="renameInstanceVariable">renameInstanceVariable	self navigator renameInstanceVariable: instVarNames selection in: class.	self updateInstVars</body></methods><methods><class-id>Refactory.Browser.ClassDiagramModel class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>accepting</category><body package="Browser-BrowserUI" selector="accept:from:">accept: aText from: aController	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="acceptText">acceptText	^self textAccepted: self textController</body><body package="Browser-BrowserUI" selector="addDefinitionChangeToParcel:">addDefinitionChangeToParcel: anAddObjectChange 	| parcel object parcels |	parcel := self parcel.	parcel isNil ifTrue: [^self].	object := anAddObjectChange definedObject.	object isBehavior 		ifTrue: 			[(Parcel parcelsDefiningClass: object) notEmpty ifTrue: [^self].			parcel addClass: object].	object isNameSpace 		ifTrue: 			[parcels := Parcel parcelsForClassOrNameSpace: object.			(parcels notNil and: [parcels notEmpty]) ifTrue: [^self].			parcel addNameSpace: object].	object isBindingReference 		ifTrue: 			[(Parcel parcelsDefiningBinding: object binding) notEmpty ifTrue: [^self].			parcel addName: object simpleName in: object environment]</body><body package="Browser-BrowserUI" selector="cancelText">cancelText	self text: originalText</body><body package="Browser-BrowserUI" selector="compileIntoClass">compileIntoClass	| class |	class := self selectedClass.	class = self methodClass 		ifFalse: 			[class := Dialog 						choose: (#CompileIntoClass &lt;&lt; #browser &gt;&gt; 'Compile into class?')						labels: (Array 								with: class name asString								with: self methodClass name asString								with: (#Abort &lt;&lt; #browser &gt;&gt; 'Abort'))						values: (Array 								with: class								with: self methodClass								with: nil)						default: class].	^class</body><body package="Browser-BrowserUI" selector="compileObjectDefinitionText:from:">compileObjectDefinitionText: aText from: aController 	| object |	object := self define: aText from: aController.	object isNil ifTrue: [^self].	object isBehavior ifTrue: [^codeModel setClass: object].	object isNameSpace ifTrue: [^codeModel setNameSpace: object].	(object isBindingReference and: [object isDefined]) 		ifTrue: [codeModel setBinding: object binding]</body><body package="Browser-BrowserUI" selector="define:from:">define: aText from: aController 	^self showWaitCursorWhile: 			[			[| change |			change := ExecuteCodeChange definition: aText string for: aController.			change package: self objectPackage.			self performChange: change.			self addDefinitionChangeToParcel: change.			change definedObject] 					on: Error					do: 						[:ex | 						ex isResumable 							ifTrue: 								[(self confirm: ((#x1snDoYouWantToContinue &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;&lt;n&gt;Do you want to continue?')			expandMacrosWith: ex errorString)) 									ifTrue: [ex proceed]]							ifFalse: [self warn: ex errorString].						ex return: nil]]</body><body package="Browser-BrowserUI" selector="explain">explain	| controller |	controller := self textController.	controller maybeSelectCurrentWord.	self explain: controller text from: controller</body><body package="Browser-BrowserUI" selector="explain:from:">explain: fullText from: aController 	Explainer 		explain: aController selection string		class: self methodClass		selector: self selector		methodText: self textController text		for: self</body><body package="Browser-BrowserUI" selector="explainSpecial:for:">explainSpecial: string for: anExplainer 	^nil</body><body package="Browser-BrowserUI" selector="textAccepted:">textAccepted: aController 	self isEnabled ifTrue: [self accept: aController text from: aController]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>messages</category><body package="Browser-BrowserUI" selector="browseImplementors">browseImplementors	| node results |	node := self findNode.	(node isNil or: [node isMessage not]) ifTrue: [^self].	results := BrowserEnvironment new implementorsOf: node selector.	results notEmpty		ifTrue: [results openEditor]		ifFalse: [Dialog warn:			(#NoImplementorsOf1pFound &lt;&lt; #browser &gt;&gt; 'No implementors of &lt;1p&gt; found'				expandMacrosWith: node selector)]</body><body package="Browser-BrowserUI" selector="browseSenders">browseSenders	| node results |	node := self findNode.	(node isNil or: [node isMessage not]) ifTrue: [^self].	results := BrowserEnvironment new referencesTo: node selector.	results notEmpty		ifTrue: [results openEditor]		ifFalse: [Dialog warn:			(#NoSendersOf1pFound &lt;&lt; #browser &gt;&gt; 'No senders of &lt;1p&gt; found'				expandMacrosWith: node selector)]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>controller accessing</category><body package="Browser-BrowserUI" selector="copySelection">copySelection	^self textController copySelection</body><body package="Browser-BrowserUI" selector="cut">cut	^self textController cut</body><body package="Browser-BrowserUI" selector="debugIt">debugIt	^self textController debugIt</body><body package="Browser-BrowserUI" selector="doIt">doIt	^self textController doIt</body><body package="Browser-BrowserUI" selector="find">find	^self textController find</body><body package="Browser-BrowserUI" selector="hardcopy">hardcopy	^self textController hardcopy</body><body package="Browser-BrowserUI" selector="inspectIt">inspectIt	^self textController inspectIt</body><body package="Browser-BrowserUI" selector="paste">paste	^self textController paste</body><body package="Browser-BrowserUI" selector="printIt">printIt	^self textController printIt</body><body package="Browser-BrowserUI" selector="replace">replace	^self textController replace</body><body package="Browser-BrowserUI" selector="undo">undo	^self textController undo</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>refactoring</category><body package="Browser-BrowserUI" selector="abstractInstanceVariable:">abstractInstanceVariable: aString 	self 		performRefactoring: (AbstractInstanceVariableRefactoring variable: aString				class: (self selectedClass whichClassDefinesInstVar: aString))</body><body package="Browser-BrowserUI" selector="addInstanceVariable">addInstanceVariable	self navigator addInstanceVariableIn: self selectedClass.	self updateContents</body><body package="Browser-BrowserUI" selector="createAccessorsForInstVar:">createAccessorsForInstVar: aString 	self performRefactoring: (CreateAccessorsForVariableRefactoring 				variable: aString				class: (self selectedClass whichClassDefinesInstVar: aString))</body><body package="Browser-BrowserUI" selector="performRefactoring:">performRefactoring: aRefactoring 	aRefactoring isNil ifTrue: [^self].	self handleError: 			[super performRefactoring: aRefactoring.			codeModel navigate.			self updateContents]</body><body package="Browser-BrowserUI" selector="protectInstVar:">protectInstVar: aString 	self 		performRefactoring: (ProtectInstanceVariableRefactoring variable: aString				class: (self selectedClass whichClassDefinesInstVar: aString))</body><body package="Browser-BrowserUI" selector="pushUpInstVar:">pushUpInstVar: aString 	self 		performRefactoring: (PullUpInstanceVariableRefactoring variable: aString				class: (self selectedClass whichClassDefinesInstVar: aString) superclass)</body><body package="Browser-BrowserUI" selector="renameInstVar:">renameInstVar: aString 	self navigator renameInstanceVariable: aString		in: (self selectedClass whichClassDefinesInstVar: aString).	self updateContents</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="doItEnvironment">doItEnvironment	| classOrNameSpace |	classOrNameSpace := self classOrNameSpace.	^classOrNameSpace isNameSpace 		ifTrue: [classOrNameSpace]		ifFalse: [self doItReceiver == nil ifTrue: [Smalltalk] ifFalse: [nil]]</body><body package="Browser-BrowserUI" selector="doItReceiver">doItReceiver	| classOrNameSpace |	classOrNameSpace := self classOrNameSpace.	^classOrNameSpace isNameSpace ifTrue: [nil] ifFalse: [classOrNameSpace]</body><body package="Browser-BrowserUI" selector="insertError:at:">insertError: aString at: position 	self textController insertAndSelect: ((#x1s &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; -%&gt;')			expandMacrosWith: aString) at: position</body><body package="Browser-BrowserUI" selector="saveState">saveState	| controller |	controller := self textController.	controller isNil ifTrue: [^self].	(changed := controller textHasChanged) 		ifTrue: [savedText := controller text]</body><body package="Browser-BrowserUI" selector="text">text	| controller |	controller := self textController.	^controller notNil ifTrue: [controller text] ifFalse: ['']</body><body package="Browser-BrowserUI" selector="text:">text: aString 	self textHolder value: aString.	originalText := aString.	changed := false</body><body package="Browser-BrowserUI" selector="textNoChange:">textNoChange: aString 	| textController |	textController := self textController.	textController		selectFrom: 1 to: self textController text size;		deselect;		replaceSelectionWith: aString asText;		selectAt: 1.	textController view		selectionStopIndex: textController text size + 1;		invalidate</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="hasAssignmentSelected">hasAssignmentSelected	| node |	node := self findNode.	^node notNil and: [node isAssignment]</body><body package="Browser-BrowserUI" selector="hasClassSelected">hasClassSelected	| node |	node := self findNode.	(node isNil or: [node isVariable not]) ifTrue: [^false].	^(node name asQualifiedReference home: self navigator nameSpace) binding 		isForClass</body><body package="Browser-BrowserUI" selector="hasClassSelectedAndIncludesClass">hasClassSelectedAndIncludesClass	^self hasClassSelected and: 			[| node |			node := self findNode.			self environment 				includesClass: (node name asQualifiedReference 						home: self navigator nameSpace) value]</body><body package="Browser-BrowserUI" selector="hasInstanceVariableSelected">hasInstanceVariableSelected	| name class |	class := self selectedClass.	name := self selectedVariableName.	^name notNil 		and: [class notNil and: [(class allInstVarNames indexOf: name) &gt; 0]]</body><body package="Browser-BrowserUI" selector="hasMessageNodeSelected">hasMessageNodeSelected	| node |	node := self findNode.	^node notNil and: [node isMessage]</body><body package="Browser-BrowserUI" selector="hasMessageNodeSelectedForRefactoring">hasMessageNodeSelectedForRefactoring	^self isEditing not and: [self hasMessageNodeSelected]</body><body package="Browser-BrowserUI" selector="hasParameterSelected">hasParameterSelected	| node |	node := self findNode.	node isNil ifTrue: [^false].	^(node whoDefines: node name) notNil and: [node parent isMethod]</body><body package="Browser-BrowserUI" selector="hasTemporaryVariableSelected">hasTemporaryVariableSelected	| node |	node := self findNode.	^node notNil 		and: [node isVariable and: [(node whoDefines: node name) notNil]]</body><body package="Browser-BrowserUI" selector="hasValueNodeSelected">hasValueNodeSelected	^(self hasAssignmentSelected or: 			[self hasClassSelected or: 					[self hasInstanceVariableSelected 						or: [self hasMessageNodeSelected or: [self hasTemporaryVariableSelected]]]]) 		not and: 				[| node |				node := self findNode.				node notNil and: [node isValue]]</body><body package="Browser-BrowserUI" selector="isEditing">isEditing	"The '== true' below is for people filing in the source with open browsers"	| controller |	(super isEditing or: [changed == true]) ifTrue: [^true].	controller := self textController.	^controller notNil and: [controller textHasChanged]</body><body package="Browser-BrowserUI" selector="isEnabled">isEnabled	^true</body><body package="Browser-BrowserUI" selector="isMethodText:">isMethodText: aText 	RBParser parseMethod: aText onError: [:s :p | ^false].	^true</body><body package="Browser-BrowserUI" selector="isTextSelected">isTextSelected	^self selectedInterval notEmpty</body><body package="Browser-BrowserUI" selector="isTextTool">isTextTool	^true</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	self text: ''</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="findNode">findNode	| tree node interval text |	interval := self selectedInterval.	interval isEmpty 		ifTrue: 			[| cursorPosition |			cursorPosition := self selectionIndex.			cursorPosition = 1 ifTrue: [^nil].			interval := cursorPosition to: cursorPosition].	text := self text asString.	text size &gt; ParserTextLimit ifTrue: [^nil].	tree := self parseSource: text.	tree isNil ifTrue: [^self parseSelection].	node := tree whichNodeIsContainedBy: interval.	node isNil ifTrue: [node := tree bestNodeFor: interval].	^node</body><body package="Browser-BrowserUI" selector="isMethod">isMethod	^false</body><body package="Browser-BrowserUI" selector="objectPackage">objectPackage	| classOrNameSpace registry |	registry := self storeRegistry.	registry isNil ifTrue: [^nil].	classOrNameSpace := self classOrNameSpace.	classOrNameSpace isNil ifTrue: [^self package].	^classOrNameSpace isBehavior 		ifTrue: [registry containingPackageForClass: classOrNameSpace]		ifFalse: 			[registry 				containingPackageForNameSpaceSymbol: classOrNameSpace absoluteSymbol]</body><body package="Browser-BrowserUI" selector="parseSelection">parseSelection	^RBParser parseExpression: self selectedText onError: [:str :pos | ^nil]</body><body package="Browser-BrowserUI" selector="parseSource:">parseSource: aString 	parsedSource = aString ifTrue: [^parseTree].	parsedSource := aString.	parseTree := nil.	^parseTree := self isMethod 				ifTrue: [RBParser parseMethod: aString onError: [:str :err | ^nil]]				ifFalse: [RBParser parseExpression: aString onError: [:str :err | ^nil]]</body><body package="Browser-BrowserUI" selector="selectedInterval">selectedInterval	| controller |	controller := self textController.	controller isNil ifTrue: [^1 to: 0].	^controller selectionStartIndex to: controller selectionStopIndex - 1</body><body package="Browser-BrowserUI" selector="selectedText">selectedText	| interval |	interval := self selectedInterval.	interval isEmpty ifTrue: [^''].	^self textController text asString copyFrom: interval first		to: interval last</body><body package="Browser-BrowserUI" selector="selectionIndex">selectionIndex	| controller |	controller := self textController.	controller isNil ifTrue: [^1].	^controller selectionStartIndex</body><body package="Browser-BrowserUI" selector="textController">textController	^self controllerFor: #textEditor</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>menu</category><body package="Browser-BrowserUI" selector="buildMenuBarMenu">buildMenuBarMenu	menuBarMenu := self buildTopLevelMenuFrom:  #menuPrefixForMenuBar.	menuBarMenu addPart: self textMenu.	#(#'Do It' #'Print It' #'Inspect It' #'Debug It' #'Cut Selection' #'Copy Selection' #'Paste Selection' #'Find Text' #'Replace Text') do:		[:each |		(menuBarMenu atNameKey: each) makeShortcutDisplayOnly]</body><body package="Browser-BrowserUI" selector="menu">menu	^menuBarMenu ifNil: [self rebuildMenus. menuBarMenu]</body><body package="Browser-BrowserUI" selector="rebuildMenus">rebuildMenus	super rebuildMenus.	self buildMenuBarMenu.	self setMenu: self textMenu for: #textEditor</body><body package="Browser-BrowserUI" selector="textMenu">textMenu	^menu</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>instance variables</category><body package="Browser-BrowserUI" selector="abstractInstanceVariable">abstractInstanceVariable	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self abstractInstanceVariable: name</body><body package="Browser-BrowserUI" selector="browseInstVarReaders">browseInstVarReaders	| name |	name := self selectedVariableName.	name notNil 		ifTrue: 			[self navigator browseGlobalInstVarReadersTo: name in: self selectedClass]</body><body package="Browser-BrowserUI" selector="browseInstVarRefs">browseInstVarRefs	| name |	name := self selectedVariableName.	name notNil 		ifTrue: 			[self navigator browseGlobalInstVarRefsTo: name in: self selectedClass]</body><body package="Browser-BrowserUI" selector="browseInstVarWriters">browseInstVarWriters	| name |	name := self selectedVariableName.	name notNil 		ifTrue: 			[self navigator browseGlobalInstVarWritersTo: name in: self selectedClass]</body><body package="Browser-BrowserUI" selector="createInstanceVariableAccessors">createInstanceVariableAccessors	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self createAccessorsForInstVar: name</body><body package="Browser-BrowserUI" selector="protectInstanceVariable">protectInstanceVariable	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self protectInstVar: name</body><body package="Browser-BrowserUI" selector="pushDownInstanceVariable">pushDownInstanceVariable	| string |	string := self selectedText.	self 		performRefactoring: (PushDownInstanceVariableRefactoring variable: string				class: self selectedClass)</body><body package="Browser-BrowserUI" selector="pushUpInstanceVariable">pushUpInstanceVariable	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self pushUpInstVar: name</body><body package="Browser-BrowserUI" selector="removeInstanceVariable">removeInstanceVariable	| string |	self changeRequest ifFalse: [^self].	string := self selectedText.	self navigator removeInstanceVariable: string fromClass: self selectedClass</body><body package="Browser-BrowserUI" selector="renameInstanceVariable">renameInstanceVariable	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self renameInstVar: name</body><body package="Browser-BrowserUI" selector="selectedVariableName">selectedVariableName	"Guess the variable name from the selection"	^self selectedText</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="textHolder">textHolder	^textHolder isNil ifTrue: [textHolder := '' asValue] ifFalse: [textHolder]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="okToChangeToolFocus">okToChangeToolFocus	| choice |	choice := Dialog 				choose: (#AcceptUnsavedTextChanges &lt;&lt; #browser &gt;&gt; 'Accept unsaved text changes?')				labels: (Array with: (#Yes &lt;&lt; #browser &gt;&gt; 'Yes') with: (#No &lt;&lt; #browser &gt;&gt; 'No') with: (#Cancel &lt;&lt; #browser &gt;&gt; 'Cancel'))				values: #(#yes #no #cancel)				default: #yes.	choice = #cancel ifTrue: [^false].	choice = #yes ifTrue: [self acceptText].	^true</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	| controller |	super updateDisplay.	savedText notNil 		ifTrue: 			[controller := self textController.			controller view editText: savedText.			controller textHasChanged: true.			savedText := nil].	changed := false</body><body package="Browser-BrowserUI" selector="updateRequest">updateRequest	^super updateRequest 		and: [self isEditing not or: [self okToChangeToolFocus]]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	(self textController)		autoAccept: false;		continuousAccept: false</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>window properties</category><body package="Browser-BrowserUI" selector="takeFocus">takeFocus	(self wrapperAt: #textEditor) ifNotNil: [:each | each takeKeyboardFocus]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool</class-id> <category>compiling methods</category><body package="Browser-BrowserUI" selector="changeWithPackageAndParcelInformation:">changeWithPackageAndParcelInformation: anAddMethodChange 	| package newSelector packages |	package := self methodPackage.	anAddMethodChange package: package.	newSelector := anAddMethodChange selector.	newSelector ~= self selector 		ifTrue: 			[(anAddMethodChange changeObject includesSelector: newSelector) 				ifTrue: 					[(self confirm: ((#x1sIsAlreadyDefinedIn2pReplaceQ &lt;&lt; #browser &gt;&gt; '&lt;1s&gt; is already defined in &lt;2p&gt;.&lt;n&gt;Replace definition?') 								expandMacrosWith: newSelector								with: anAddMethodChange changeObject)) 						ifFalse: [^nil].					packages := self storeRegistry ifNil: [#()]								ifNotNil: 									[:registry | 									registry allContainingPackagesForSelector: newSelector										class: anAddMethodChange changeObject].					packages notEmpty 						ifTrue: 							[package := packages asArray first.							anAddMethodChange package: package]]				ifFalse: 					[(self parcel notNil 						and: [(self methodParcelsForChange: anAddMethodChange) isEmpty]) 							ifTrue: [anAddMethodChange parcels: (Array with: self parcel)].					^anAddMethodChange]].	(self shouldOverrideInPackage: package) 		ifTrue: [^self overrideInPackageChange: anAddMethodChange].	(self shouldOverrideInParcel: anAddMethodChange) 		ifTrue: [^self overrideInParcelChange: anAddMethodChange].	^anAddMethodChange</body><body package="Browser-BrowserUI" selector="compileMethodText:from:">compileMethodText: aText from: aController 	| change selector class compositeChange |	class := self compileIntoClass.	class isNil ifTrue: [^self].	change := AddMethodChange 				compile: aText				in: class				classified: self protocol				for: aController.	compositeChange := self changeWithPackageAndParcelInformation: change.	compositeChange isNil ifTrue: [^self].	self performChange: compositeChange.	selector := change definedSelector.	selector notNil ifTrue: [codeModel setSelector: selector]</body><body package="Browser-BrowserUI" selector="methodPackage">methodPackage	| class selector items registry packages containerPackages |	registry := self storeRegistry.	registry isNil ifTrue: [^nil].	class := self methodClass.	class isNil ifTrue: [^self package].	selector := self selector.	(selector notNil and: 			[(items := registry allContainingPackagesForSelector: selector class: class) 				notEmpty]) 		ifTrue: [^items asArray first].	packages := self packages.	packages isEmpty ifTrue: [^nil].	containerPackages := packages 				select: [:each | (each definesClass: class) or: [each extendsClass: class]].	containerPackages isEmpty ifTrue: [containerPackages := packages].	containerPackages := containerPackages 				asSortedCollection: [:a :b | a name &lt; b name].	^containerPackages size = 1 		ifTrue: [containerPackages first]		ifFalse: 			[self 				choose: (#WhichPackage &lt;&lt; #browser &gt;&gt; 'Which package ')				fromList: (containerPackages collect: [:each | each displayString])				values: containerPackages				lines: 5				cancel: [nil]]</body><body package="Browser-BrowserUI" selector="methodParcelsForChange:">methodParcelsForChange: change 	^Parcel parcelsDefiningSelector: change selector		inClass: change changeObject</body><body package="Browser-BrowserUI" selector="overrideInPackageChange:">overrideInPackageChange: anAddMethodChange 	anAddMethodChange package: self package.	^(CompositeRefactoryChange named: anAddMethodChange name)		addChange: (MoveMethodToPackageChange 					class: self selectedClass					selector: anAddMethodChange selector					package: self package);		addChange: (AddOverrideChange 					for: (Override forSelector: anAddMethodChange selector							class: anAddMethodChange changeObject));		addChange: anAddMethodChange;		yourself</body><body package="Browser-BrowserUI" selector="overrideInParcelChange:">overrideInParcelChange: anAddMethodChange 	^(CompositeRefactoryChange named: anAddMethodChange name)		addChange: (AddMethodToParcelChange 					class: anAddMethodChange changeObject					selector: anAddMethodChange selector					parcel: self parcel);		addChange: (AddOverrideChange 					for: (Override forSelector: anAddMethodChange selector							class: anAddMethodChange changeObject));		addChange: anAddMethodChange;		yourself</body><body package="Browser-BrowserUI" selector="shouldOverrideInPackage:">shouldOverrideInPackage: package 	^self packages notEmpty and: 			[(self packages includes: package) not 				and: [self confirm: (#CreateOverrideForMethod &lt;&lt; #browser &gt;&gt; 'Create override for method?')]]</body><body package="Browser-BrowserUI" selector="shouldOverrideInParcel:">shouldOverrideInParcel: anAddMethodChange 	| parcelsForChange |	parcelsForChange := self methodParcelsForChange: anAddMethodChange.	(parcelsForChange isEmpty or: [self parcel isNil]) ifTrue: [^false].	^(self parcels anySatisfy: [:each | parcelsForChange includes: each]) not 		and: [self confirm: (#CreateOverrideForMethod &lt;&lt; #browser &gt;&gt; 'Create override for method?')]</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="parserTextLimit">parserTextLimit	^ParserTextLimit</body><body package="Browser-BrowserUI" selector="parserTextLimit:">parserTextLimit: anInteger 	ParserTextLimit := anInteger</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="restore">restore	| codeComponent |	codeComponent := self codeComponent.	codeComponent isNil 		ifFalse: [codeComponent perform: (property , ':') asSymbol with: nil].	self updateContents</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="parseSource:">parseSource: aString 	| tree |	tree := super parseSource: aString.	tree isNil ifTrue: [^nil].	tree isBlock ifFalse: [^nil].	^tree</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="property:count:">property: aSymbol count: anInteger 	property := aSymbol.	blockArgumentCount := anInteger</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>accepting</category><body package="Browser-BrowserUI" selector="accept:from:">accept: aText from: aController 	| block codeComponent |	codeComponent := self codeComponent.	codeComponent isNil ifTrue: [^self].	block := self class compilerClass new 				evaluate: aText				in: nil				allowReceiver: false				receiver: nil				environment: Smalltalk				notifying: aController				ifFail: [^self].	(block isKindOf: BlockClosure) 		ifFalse: [^self warn: (#DidNotEvaluateToABlock &lt;&lt; #browser &gt;&gt; 'Did not evaluate to a block')].	block numArgs ~= blockArgumentCount 		ifTrue: 			[^self 				warn: ((#BlockDoesNotHaveCorrectNumArgs1s &lt;&lt; #browser &gt;&gt; 'Block does not have the correct number of arguments (&lt;1s&gt;)')			expandMacrosWith: blockArgumentCount printString)].	codeComponent perform: ((#x1sC &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;:')			expandMacrosWith: property) asSymbol		with: (CodeComponent asActionBlock: aText).	self updateContents</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	| codeComponent block |	codeComponent := self codeComponent.	property isNil | codeComponent isNil ifTrue: [^self text: ''].	block := codeComponent perform: property.	block isNil 		ifTrue: 			[^self text: ((DefaultBlockStrings at: property ifAbsent: ['']) asText 						emphasizeAllWith: #italic)].	self 		text: (block isString ifTrue: [block] ifFalse: [block method getSource])</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>help</category><body package="Browser-BrowserUI" selector="helpTopic">helpTopic	^HelpStrings at: property ifAbsent: [super helpTopic]</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="codeModel:property:argumentCount:">codeModel: aCodeModel property: aSymbol argumentCount: anInteger 	^(self codeModel: aCodeModel)		property: aSymbol count: anInteger;		yourself</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="convertToSourceInterval:">convertToSourceInterval: anInterval 	"Convert the selected interval from our text widget, to the interval in the stored source code.	For this widget, we don't need to do anything."	^anInterval</body><body package="Browser-BrowserUI" selector="isMethod">isMethod	^true</body><body package="Browser-BrowserUI" selector="modifiedTextColor">modifiedTextColor	^ColorValue red</body><body package="Browser-BrowserUI" selector="updateSelection">updateSelection	| controller view interval |	controller := self textController.	controller isNil ifTrue: [^self].	view := controller view.	([view topComponent isMapped] on: Error do: [:ex | ex return: false]) 		ifFalse: [^self].	"If the controller isn't being displayed, then we get a DNU error."	interval := self environment selectionIntervalFor: self text.	interval isNil ifTrue: [^self].	controller selectFrom: interval first to: interval last.	view displaySelection: true.	view selectAndScroll</body><body package="Browser-BrowserUI" selector="updateTextWidget">updateTextWidget	| widget prefs |	builder isNil ifTrue: [^self].	widget := builder componentAt: #textEditor.	widget isNil ifTrue: [^self].	modified 		= (widget lookPreferences foregroundColor = self modifiedTextColor) 			ifTrue: [^self].	prefs := modified 				ifTrue: [initialLookPrefs copy foregroundColor: self modifiedTextColor]				ifFalse: [initialLookPrefs].	widget lookPreferences: prefs</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>accepting</category><body package="Browser-BrowserUI" selector="accept:from:">accept: aText from: aController 	modified := nil.	[self compileMethodText: aText from: aController] 		ensure: [modified := false]</body><body package="Browser-BrowserUI" selector="format">format	| selectedClass newText |	selectedClass := self methodClass.	newText := (RBParser parseMethod: self textController text				onError: [:aString :position | ^self insertError: aString at: position]) 					printString asText 				makeSelectorBoldIn: selectedClass.	self textNoChange: newText</body><body package="Browser-BrowserUI" selector="protocol">protocol	| protocol definition |	protocol := super protocol.	^(protocol isNil and: [(definition := self definition) notNil]) 		ifTrue: [definition protocol]		ifFalse: [protocol]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>refactorings</category><body package="Browser-BrowserUI" selector="extractMethod">extractMethod	self updateRequest ifFalse: [^self].	self performRefactoring: (ExtractMethodRefactoring 				extract: (self convertToSourceInterval: self selectedInterval)				from: self selector				in: self methodClass)</body><body package="Browser-BrowserUI" selector="extractToComponent">extractToComponent	self updateRequest ifFalse: [^self].	self performRefactoring: (ExtractMethodToComponentRefactoring 				extract: (self convertToSourceInterval: self selectedInterval)				from: self selector				in: self methodClass)</body><body package="Browser-BrowserUI" selector="extractToTemp">extractToTemp	| newName node |	self updateRequest ifFalse: [^self].	node := self findNode.	(node isNil or: [node isValue not]) 		ifTrue: [^self warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	newName := self request: (#EnterNameForTemporaryC &lt;&lt; #browser &gt;&gt; 'Enter name forTemporary:').	newName isEmpty ifTrue: [^self].	self performRefactoring: (ExtractToTemporaryRefactoring 				extract: (self convertToSourceInterval: node sourceInterval)				to: newName				from: self selector				in: self methodClass)</body><body package="Browser-BrowserUI" selector="inlineTemporary">inlineTemporary	| node |	self updateRequest ifFalse: [^self].	node := self findNode.	(node isNil or: [node isAssignment not]) 		ifTrue: [^self warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	self performRefactoring: (InlineTemporaryRefactoring 				inline: (self convertToSourceInterval: node sourceInterval)				from: self selector				in: self methodClass)</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	ChangeSet addDependent: self.	modified := false</body><body package="Browser-BrowserUI" selector="release">release	ChangeSet removeDependent: self.	builder := nil.	super release</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>messages</category><body package="Browser-BrowserUI" selector="inlineMethod">inlineMethod	| node |	node := self findNode.	(node isNil or: [node isMessage not]) 		ifTrue: [^self warn: (#CouldNotFindMessageSend &lt;&lt; #browser &gt;&gt; 'Could not find message send')].	(node receiver isVariable 		and: [#('self' 'super') includes: node receiver name]) 			ifTrue: 				[self performRefactoring: (InlineMethodRefactoring 							inline: (self convertToSourceInterval: node sourceInterval)							inMethod: self selector							forClass: self methodClass)]			ifFalse: 				[self performRefactoring: (InlineMethodFromComponentRefactoring 							inline: (self convertToSourceInterval: node sourceInterval)							inMethod: self selector							forClass: self methodClass)]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	initialLookPrefs := (builder componentAt: #textEditor) lookPreferences.	self updateTextWidget</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>temporary variables</category><body package="Browser-BrowserUI" selector="bindTight">bindTight	| node |	node := self findNode.	(node isNil or: [node isVariable not]) 		ifTrue: [^self warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	self performRefactoring: (MoveVariableDefinitionRefactoring 				bindTight: (self convertToSourceInterval: node sourceInterval)				in: self methodClass				selector: self selector)</body><body package="Browser-BrowserUI" selector="createInstVar">createInstVar	| node |	node := self findNode.	(node isNil or: [node isVariable not]) 		ifTrue: [^self warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	self performRefactoring: (TemporaryToInstanceVariableRefactoring 				class: self methodClass				selector: self selector				variable: node name)</body><body package="Browser-BrowserUI" selector="inlineParameter">inlineParameter	| node |	node := self findNode.	(node isNil or: [node isVariable not]) 		ifTrue: [^self warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	self handleError: 			[| ref |			ref := InlineParameterRefactoring 						inlineParameter: node name						in: self methodClass						selector: self selector.			ref execute.			codeModel setSelector: ref newSelector]</body><body package="Browser-BrowserUI" selector="removeParameter">removeParameter	| node |	node := self findNode.	(node isNil or: [node isVariable not]) 		ifTrue: [^self warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	self handleError: 			[| ref |			ref := RemoveParameterRefactoring 						removeParameter: node name						in: self methodClass						selector: self selector.			ref execute.			codeModel setSelector: ref newSelector]</body><body package="Browser-BrowserUI" selector="renameTemporary">renameTemporary	| newName node |	node := self findNode.	(node isNil or: [node isVariable not]) 		ifTrue: [^self warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	newName := self request: (#EnterNewNameC &lt;&lt; #browser &gt;&gt; 'Enter new name:') initialAnswer: node name.	newName isEmpty ifTrue: [^self].	self performRefactoring: (RenameTemporaryRefactoring 				renameTemporaryFrom: (self convertToSourceInterval: node sourceInterval)				to: newName				in: self methodClass				selector: self selector)</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>instance variables</category><body package="Browser-BrowserUI" selector="selectedVariableName">selectedVariableName	| node |	node := self findNode.	^(node notNil and: [node isVariable]) ifTrue: [node name] ifFalse: [nil]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="update:with:from:">update: anAspectSymbol with: aParameter from: aSender 	(#(#removeSelector:class: #changeSelector:class: #addSelector:class: #changeSelector:class:attributes: #addSelector:class:attributes:) 		includes: anAspectSymbol) 			ifTrue: 				[modified isNil ifTrue: [^self].	"We're making the modification so don't update the display"				(aParameter first = self selector 					and: [(aParameter at: 2) = self methodClass]) 						ifTrue: 							[modified := true.							self updateTextWidget]]			ifFalse: 				[super 					update: anAspectSymbol					with: aParameter					from: aSender]</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	super updateDisplay.	self isEditing ifFalse: [self updateSelection]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>global variables</category><body package="Browser-BrowserUI" selector="browseReferencesToGlobal">browseReferencesToGlobal	| binding |	binding := self selectedVariableBinding.	self navigator browseGlobalReferencesTo: binding</body><body package="Browser-BrowserUI" selector="navigateToClass">navigateToClass	| binding |	binding := self selectedVariableBinding.	binding isNil ifTrue: [^self].	self changeRequest ifFalse: [^self].	codeModel setBinding: binding</body><body package="Browser-BrowserUI" selector="openBrowserForClass">openBrowserForClass	| binding |	binding := self selectedVariableBinding.	binding isNil ifTrue: [^self].	(RefactoringBrowser open navigator)		setBinding: binding;		changed</body><body package="Browser-BrowserUI" selector="selectedVariableBinding">selectedVariableBinding	| name |	name := self selectedVariableName.	name isNil ifTrue: [^nil].	^(name includes: $.) 		ifTrue: [name asQualifiedReference bindingOrNil]		ifFalse: [self nameSpace bindingFor: name asSymbol]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="canExtractMethod">canExtractMethod	^self isEditing not and: [self isTextSelected]</body><body package="Browser-BrowserUI" selector="canExtractToTemporary">canExtractToTemporary	^self isEditing not and: 			[| node |			node := self findNode.			node notNil and: [node isValue]]</body><body package="Browser-BrowserUI" selector="canPerformInlineAssignmentRefactoring">canPerformInlineAssignmentRefactoring	^self isEditing not and: [self hasAssignmentSelected]</body><body package="Browser-BrowserUI" selector="canPerformParameterRefactorings">canPerformParameterRefactorings	^self isEditing not and: [self hasParameterSelected]</body><body package="Browser-BrowserUI" selector="canPerformTemporaryVariableRefactorings">canPerformTemporaryVariableRefactorings	^self isEditing not and: [self hasTemporaryVariableSelected]</body><body package="Browser-BrowserUI" selector="hasInstanceVariableSelected">hasInstanceVariableSelected	^super hasInstanceVariableSelected 		and: [self hasTemporaryVariableSelected not]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool class</class-id> <category>parcel load/unload/save</category><body package="Browser-BrowserUI" selector="preUnloadActionFor:">preUnloadActionFor: aParcel 	self allInstances do: [:each | ChangeSet removeDependent: each]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="commentObject">commentObject	| object |	object := self classOrNameSpace.	object isNil ifTrue: [object := self pundle].	object isNil ifTrue: [object := self parcel].	^object</body><body package="Browser-BrowserUI" selector="defaultClassComment">defaultClassComment	| typer class vars commentStream |	class := self commentObject.	typer := (RefactoryTyper new)				runOn: class;				yourself.	commentStream := WriteStream on: String new.	commentStream		emphasis: #bold;		nextPutAll: class name;		nextPutAll: (#HasNotBeenCommented &lt;&lt; #browser &gt;&gt; ' has not been commented.') asString;		emphasis: nil;		nextPutAll: (#CommentShouldStateClassPurposeEtc &lt;&lt; #browser &gt;&gt; '  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.') asString;		cr;		cr.	self printSubclassResponsibilitiesFor: class on: commentStream.	vars := class instVarNames.	vars notEmpty 		ifTrue: 			[commentStream				nextPutAll: (#InstanceVariablesC &lt;&lt; #browser &gt;&gt; 'Instance Variables:') asString;				cr.			self 				printVariables: vars				types: typer				on: commentStream].	^commentStream contents</body><body package="Browser-BrowserUI" selector="defaultCodeComponentComment">defaultCodeComponentComment	^(#ThisObjectHasNotBeenCommented &lt;&lt; #browser &gt;&gt; 'This object has not been commented.') asString</body><body package="Browser-BrowserUI" selector="defaultComment">defaultComment	self showWaitCursorWhile: 			[| object |			object := self commentObject.			^object isBehavior 				ifTrue: [self defaultClassComment]				ifFalse: 					[object isNameSpace 						ifTrue: [self defaultNameSpaceComment]						ifFalse: [self defaultCodeComponentComment]]]</body><body package="Browser-BrowserUI" selector="defaultNameSpaceComment">defaultNameSpaceComment	^(#ThisNameSpaceHasNotBeenCommented &lt;&lt; #browser &gt;&gt; 'This name space has not been commented.') asString</body><body package="Browser-BrowserUI" selector="generateDefaultComment">generateDefaultComment	self textNoChange: self defaultComment</body><body package="Browser-BrowserUI" selector="printSubclassResponsibilitiesFor:on:">printSubclassResponsibilitiesFor: class on: commentStream 	| protocols selectors |	selectors := class 				whichSelectorsReferTo: 'subclassResponsibility' asSymbol.	selectors isEmpty ifTrue: [^self].	commentStream		nextPutAll: (#SubclassesMustImplementTheseC &lt;&lt; #browser &gt;&gt; 'Subclasses must implement the following messages:') asString;		cr.	protocols := (selectors 				collect: [:each | BrowserEnvironment new whichProtocolIncludes: each in: class]) 					asSet asSortedCollection.	selectors := selectors asSortedCollection.	protocols do: 			[:protocol | 			commentStream				tab;				nextPutAll: protocol;				cr.			selectors do: 					[:sel | 					protocol == (BrowserEnvironment new whichProtocolIncludes: sel in: class) 						ifTrue: 							[commentStream								tab;								tab;								nextPutAll: sel;								cr]]].	commentStream cr</body><body package="Browser-BrowserUI" selector="printVariables:types:on:">printVariables: vars types: aRefactoryTyper on: commentStream 	vars asSortedCollection do: 			[:each | 			commentStream				tab;				nextPutAll: each;				tab;				nextPut: $&lt;.			aRefactoryTyper printTypeFor: each on: commentStream.			commentStream				nextPutAll: ((#DescriptionOf1s &lt;&lt; #browser &gt;&gt; '&gt;	description of &lt;1s&gt;')					expandMacrosWith: each);				cr].	commentStream cr</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	| comment |	self commentObject isNil ifTrue: [^self text: '' asText].	comment := self commentObject comment asText.	comment notEmpty ifTrue: [^self text: comment].	self text: self defaultComment</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isEnabled">isEnabled	^self commentObject notNil</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool</class-id> <category>accepting</category><body package="Browser-BrowserUI" selector="accept:from:">accept: aText from: aController 	| object |	object := self commentObject.	self performChange: ((object isBehavior or: [object isNameSpace]) 				ifTrue: [CommentChange object: object comment: aText string]				ifFalse: 					[CodeComponentCommentChange codeComponent: object comment: aText string]).	self text: aText.	codeModel update</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="binding">binding	^self selectedBinding</body><body package="Browser-BrowserUI" selector="bytesClassTemplate">bytesClassTemplate	^self classTemplateFor: #bytes</body><body package="Browser-BrowserUI" selector="categoryForNewObject">categoryForNewObject	^self category isNil 		ifTrue: 			[self package isNil 				ifTrue: 					[self parcel isNil ifTrue: [#'Some Category'] ifFalse: [self parcel name]]				ifFalse: [self package name]]		ifFalse: [self category]</body><body package="Browser-BrowserUI" selector="classTemplate">classTemplate	^self classTemplateFor: #none</body><body package="Browser-BrowserUI" selector="classTemplateFor:">classTemplateFor: aSymbol 	^'&lt;1p&gt; defineClass: #&lt;2s&gt;	superclass: #{&lt;3s&gt;}	indexedType: #&lt;4s&gt;	private: false	instanceVariableNames: ''&lt;5s&gt;''	classInstanceVariableNames: ''''	imports: ''''	category: &lt;6p&gt;' 		expandMacrosWithArguments: (OrderedCollection new			add: self nameSpace;			add: #NameOfClass &lt;&lt; #browser &gt;&gt; 'NameOfClass';			add: #NameOfSuperclass &lt;&lt; #browser &gt;&gt; 'NameOfSuperclass';			add: aSymbol;			add: (aSymbol == #bytes				ifTrue: ['']				ifFalse: [(#instVarName1InstVarName2 &lt;&lt; #browser &gt;&gt; 'instVarName1 instVarName2')]);			add: self categoryForNewObject asString;			yourself)</body><body package="Browser-BrowserUI" selector="defaultTemplate">defaultTemplate	^(self category isNil and: [self pundle isNil and: [self parcel isNil]]) 		ifTrue: [self nameSpace definition asText]		ifFalse: [self template]</body><body package="Browser-BrowserUI" selector="definitionOfBinding:">definitionOfBinding: binding 	| ns |	binding isForGeneral ifFalse: [^binding value definition asText].	ns := Root whoDefinesBinding: binding.	ns isNil ifTrue: [^''].	^ns definitionOfStatic: binding</body><body package="Browser-BrowserUI" selector="indexedClassTemplate">indexedClassTemplate	^self classTemplateFor: #objects</body><body package="Browser-BrowserUI" selector="nameSpaceTemplate">nameSpaceTemplate	^'&lt;1p&gt; defineNameSpace: #&lt;2s&gt;	private: false	imports: ''			private Smalltalk.*			''	category: &lt;3p&gt;' 		expandMacrosWith: self nameSpace		with: #NameSpace &lt;&lt; #browser &gt;&gt; 'NameSpace'		with: self categoryForNewObject asString</body><body package="Browser-BrowserUI" selector="sharedVariableTemplateFor:">sharedVariableTemplateFor: aNameSpace 	^'&lt;1p&gt; defineSharedVariable: #&lt;2s&gt;	private: false	constant: false	category: &lt;3p&gt;	initializer: ''Array new: 5'''		expandMacrosWith: aNameSpace		with: #NameOfBinding &lt;&lt; #browser &gt;&gt; 'NameOfBinding'		with: (self protocol isNil 				ifTrue: [self categoryForNewObject]				ifFalse: [self protocol]) asString</body><body package="Browser-BrowserUI" selector="template">template	^self classTemplate</body><body package="Browser-BrowserUI" selector="updateContents">updateContents	| binding |	binding := self binding.	self text: (binding isNil 				ifTrue: [self defaultTemplate]				ifFalse: [self definitionOfBinding: binding])</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="canDefineClassesAndNameSpaces">canDefineClassesAndNameSpaces	^true</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>accepting</category><body package="Browser-BrowserUI" selector="accept:from:">accept: aText from: aController 	(self selectedClass notNil and: [self isMethodText: aText]) 		ifTrue: [self compileMethodText: aText from: aController]		ifFalse: [self compileObjectDefinitionText: aText from: aController]</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="showBytesClassTemplate">showBytesClassTemplate	self text: self bytesClassTemplate</body><body package="Browser-BrowserUI" selector="showClassTemplate">showClassTemplate	self text: self classTemplate</body><body package="Browser-BrowserUI" selector="showIndexedClassTemplate">showIndexedClassTemplate	self text: self indexedClassTemplate</body><body package="Browser-BrowserUI" selector="showNameSpaceTemplate">showNameSpaceTemplate	self text: self nameSpaceTemplate</body><body package="Browser-BrowserUI" selector="showSharedVariableTemplate">showSharedVariableTemplate	self text: (self sharedVariableTemplateFor: self nameSpace)</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="binding">binding	| binding name |	binding := self selectedBinding.	(binding notNil and: [binding isForGeneral]) ifTrue: [^binding].	binding isNil ifTrue: [^nil].	name := self sharedVariableName.	^name notNil ifTrue: [binding value bindingFor: name] ifFalse: [nil]</body><body package="Browser-BrowserUI" selector="defaultTemplate">defaultTemplate	^self template</body><body package="Browser-BrowserUI" selector="nameSpace">nameSpace	| binding |	binding := self selectedBinding.	binding isNil ifTrue: [^Smalltalk].	^binding isForGeneral 		ifTrue: [self objectName asQualifiedReference environment]		ifFalse: [binding value]</body><body package="Browser-BrowserUI" selector="template">template	^self sharedVariableTemplateFor: self nameSpace</body><body package="Browser-BrowserUI" selector="updateContents">updateContents	super updateContents.	self installInspector</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	super updateDisplay.	self installInspector</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="canDefineClassesAndNameSpaces">canDefineClassesAndNameSpaces	^false</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="installInspector">installInspector	self installInspectorOn: self binding value</body><body package="Browser-BrowserUI" selector="installInspectorOn:">installInspectorOn: anObject 	self resetWindowLabelAround: 			[| inspectorClass |			inspectorClass := anObject inspectorClass.			self 				installSubcanvasIn: #inspector				using: (inspectorClass inspect: anObject)				spec: #windowSpec]</body><body package="Browser-BrowserUI" selector="resetWindowLabelAround:">resetWindowLabelAround: aBlock 	| window label |	self builder isNil ifTrue: [^self].	window := self builder window.	window notNil ifTrue: [label := window label].	aBlock ensure: [window notNil ifTrue: [window label: label]]</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="objectPackage">objectPackage	^self package</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	self selector notNil 		ifTrue: [self updateOverridesForMethod]		ifFalse: 			[self sharedVariableName notNil 				ifTrue: [self updateOverridesForSharedVariable]				ifFalse: [self updateOverridesForClassOrNameSpace]].	self overrideList list notEmpty 		ifTrue: 			[self overrideList selection: self overrideList list first.			self changedSelection]</body><body package="Browser-BrowserUI" selector="updateOverridesForClassOrNameSpace">updateOverridesForClassOrNameSpace	| class overrides |	class := self classOrNameSpace.	overrides := Override overridesForClassOrNameSpace: class.	self overrideList list: (overrides ifNil: [#()]) asList</body><body package="Browser-BrowserUI" selector="updateOverridesForMethod">updateOverridesForMethod	| selector class overrides |	class := self selectedClass.	selector := self selector.	overrides := Override overridesForSelector: selector class: class.	self overrideList list: (overrides ifNil: [#()]) asList</body><body package="Browser-BrowserUI" selector="updateOverridesForSharedVariable">updateOverridesForSharedVariable	| sharedVariable class overrides |	class := self classOrNameSpace.	sharedVariable := self sharedVariableName.	overrides := Override overridesForDataKey: sharedVariable in: class.	self overrideList list: (overrides ifNil: [#()]) asList</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="overrideList">overrideList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^overrideList isNil		ifTrue:			[overrideList := SelectionInList new]		ifFalse:			[overrideList]</body><body package="Browser-BrowserUI" selector="sourceHolder">sourceHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^sourceHolder isNil		ifTrue:			[sourceHolder := String new asValue]		ifFalse:			[sourceHolder]</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="restoreOverride">restoreOverride	self navigator 		performChangeWithUpdate: (RestoreOverrideChange for: self override)</body><body package="Browser-BrowserUI" selector="showOverrideDiff">showOverrideDiff	(Differator newOn: self override text and: self override systemText) open</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="changedSelection">changedSelection	| override |	override := self override.	self sourceHolder 		value: (override isNil ifTrue: [''] ifFalse: [override text])</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="override">override	^self overrideList selection</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self visualBlockFor: #overrideList		is: 			[:view :index | 			Label with: (view sequence at: index) componentString				attributes: view textStyle]</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isOverrideSelected">isOverrideSelected	^self override notNil</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.VisualViewer</class-id> <category>menu accessing</category><body package="Browser-BrowserUI" selector="menu">menu	"Return a menu that can be placed into a window. Menus that use symbol must be converted to use	blocks since they will have a different model when they are placed into a window."	^(Menu new)		addItemLabel: (#_EditResourceDots &lt;&lt; #browser &gt;&gt; '&amp;Edit Resource...') value: [self editSpec];		addLine;		addItemLabel: (#Re_fresh &lt;&lt; #browser &gt;&gt; 'Re&amp;fresh') value: [self updateDisplay];		yourself</body></methods><methods><class-id>Refactory.Browser.VisualViewer</class-id> <category>private</category><body package="Browser-BrowserUI" selector="editorClass">editorClass	self subclassResponsibility</body><body package="Browser-BrowserUI" selector="method">method	| class selector |	class := self selectedClass.	selector := self selector.	class isNil | selector isNil ifTrue: [^nil].	class := class whichClassIncludesSelector: selector.	class isNil ifTrue: [^nil].	^class compiledMethodAt: selector</body></methods><methods><class-id>Refactory.Browser.VisualViewer</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="editSpec">editSpec	| editorClass method |	method := self method.	method isNil ifTrue: [^self].	editorClass := self editorClass.	editorClass isNil ifTrue: [^self].	editorClass new openOnClass: self nonMetaClass andSelector: self selector</body></methods><methods><class-id>Refactory.Browser.VisualViewer class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.MenuViewer</class-id> <category>private</category><body package="Browser-BrowserUI" selector="editorClass">editorClass	| class |	class := #{MenuEditor} valueOrDo: [nil].	class isNil 		ifTrue: 			[self warn: (#UIPainterNotLoaded &lt;&lt; #browser &gt;&gt; 'UIPainter not loaded.').			^nil].	^class</body><body package="Browser-BrowserUI" selector="initializeMenu:">initializeMenu: aMenu 	aMenu 		values: (aMenu values collect: [:each | [self selection value: each]]).	aMenu menuItems do: 			[:each | 			each submenu notNil 				ifTrue: [each submenu: (self initializeMenu: each submenu)]].	^aMenu</body></methods><methods><class-id>Refactory.Browser.MenuViewer</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="selection">selection	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^selection isNil		ifTrue:			[selection := nil asValue]		ifFalse:			[selection]</body></methods><methods><class-id>Refactory.Browser.MenuViewer</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="menuResource">menuResource	^	[| class selector method |	class := self selectedClass.	selector := self selector.	selector notNil 		ifTrue: 			[method := class compiledMethodAt: selector ifAbsent: [nil].			(method notNil and: [method resourceType == #menu]) 				ifTrue: 					[[self initializeMenu: (self nonMetaClass perform: selector)] on: Error						do: [:ex | ex return: Menu new]]				ifFalse: [Menu new]]		ifFalse: [Menu new]]</body></methods><methods><class-id>Refactory.Browser.MenuViewer class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.IconViewer</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self updateContents</body></methods><methods><class-id>Refactory.Browser.IconViewer</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	| image |	self selectedClass isNil ifTrue: [^self].	(self selectedClass isMeta &amp; self selector notNil and: 			[(self selectedClass compiledMethodAt: self selector) resourceType = #image 				&amp; (self selector numArgs = 0) and: 						[image := [self nonMetaClass perform: self selector] on: Error									do: [:ex | ex return: nil].						image isKindOf: PixelArray]]) 		ifTrue: [(builder componentAt: #icon) widget label: image]		ifFalse: [(builder componentAt: #icon) widget label: nil]</body></methods><methods><class-id>Refactory.Browser.IconViewer</class-id> <category>private</category><body package="Browser-BrowserUI" selector="editorClass">editorClass	| class |	class := #{UIMaskEditor} valueOrDo: [nil].	class isNil 		ifTrue: 			[self warn: (#UIPainterNotLoaded &lt;&lt; #browser &gt;&gt; 'UIPainter not loaded.').			^nil].	^class</body></methods><methods><class-id>Refactory.Browser.IconViewer class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.CanvasViewer</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="updateContents">updateContents	self updateDisplay</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	"Update the subcanvas with the current spec. Use a builder that is editing so that	the canvas can be built properly. This can fail if UIPainter is not loaded, so be prepared.	In particular, the subcanvas's container is wiped out during such failed builds, so it must	be restored before installing an error message canvas for the viewer to keep working."	| subcanvas originalContainer |	builder notNil ifTrue: 		[subcanvas := self widgetAt: #subcanvas.		originalContainer := subcanvas container.		[self installPreviewCanvasIn: subcanvas] 			on: Error 			do: [:ex | 				subcanvas container: originalContainer.				self installErrorCanvasIn: subcanvas]].	super updateDisplay</body></methods><methods><class-id>Refactory.Browser.CanvasViewer</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="openSpec">openSpec	self nonMetaClass openWithSpec: self selector</body></methods><methods><class-id>Refactory.Browser.CanvasViewer</class-id> <category>private</category><body package="Browser-BrowserUI" selector="disableSpec:">disableSpec: aFullSpec 	aFullSpec collection do: 			[:each | 			(each isKindOf: SpecCollection) ifTrue: [self disableSpec: each].			(each isKindOf: NamedSpec) ifTrue: [each initiallyDisabled: true]]</body><body package="Browser-BrowserUI" selector="editorClass">editorClass	| class |	class := #{UIPainter} valueOrDo: [nil].	class isNil 		ifTrue: 			[self warn: (#UIPainterNotLoaded &lt;&lt; #browser &gt;&gt; 'UIPainter not loaded.').			^nil].	^class</body><body package="Browser-BrowserUI" selector="installErrorCanvasIn:">installErrorCanvasIn: aSubCanvas	^aSubCanvas		client: self		spec: #errorMessageSpec		builder: self builder newSubBuilder</body><body package="Browser-BrowserUI" selector="installPreviewCanvasIn:">installPreviewCanvasIn: aSubCanvas	^aSubCanvas		client: ApplicationModel new		spec: self spec		builder: ((UIBuilder new)				isEditing: true;				yourself)</body><body package="Browser-BrowserUI" selector="spec">spec	| class selector method specArray spec |	class := self selectedClass.	selector := self selector.	specArray := selector notNil 				ifTrue: 					[method := class compiledMethodAt: selector ifAbsent: [nil].					(method notNil and: [method resourceType == #canvas]) 						ifTrue: 							[[self nonMetaClass perform: selector] on: Error								do: [:ex | ex return: self class emptySpec]]						ifFalse: [self class emptySpec]]				ifFalse: [self class emptySpec].	spec := specArray decodeAsLiteralArray.	spec isNil ifTrue: [^nil].	self disableSpec: spec component.	^spec</body></methods><methods><class-id>Refactory.Browser.CanvasViewer</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	(aBuilder componentAt: #open) 		ifNotNil: [:wrapper | wrapper isEnabled: (self nonMetaClass respondsTo: #openWithSpec:)]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>browsing</category><body package="Browser-BrowserUI" selector="browseImplementors">browseImplementors	| searchString |	searchString := self request: (#EnterAMethodNameC &lt;&lt; #browser &gt;&gt; 'Enter a method name:').	searchString isEmpty ifTrue: [^self].	self showWaitCursorWhile: 			[self class 				openOnEnvironment: (self environment implementorsMatching: searchString)]</body><body package="Browser-BrowserUI" selector="browseStringMatches">browseStringMatches	| searchString |	searchString := self request: (#EnterAStringToSearchForEGBrowser &lt;&lt; #browser &gt;&gt; 'Enter a string search for ("*browser*"):').	(searchString isNil or: [searchString isEmpty]) ifTrue: [^self].	self showWaitCursorWhile: 			[self class openOnEnvironment: (self environment matches: searchString)]</body><body package="Browser-BrowserUI" selector="browseSymbols">browseSymbols	| searchString |	searchString := self request: (#EnterASymbolC &lt;&lt; #browser &gt;&gt; 'Enter a symbol:').	(searchString isNil or: [searchString isEmpty]) ifTrue: [^self].	self navigator browseReferencesTo: searchString asSymbol</body><body package="Browser-BrowserUI" selector="browseVariables">browseVariables	self showWaitCursorWhile: 			[| searchString env |			searchString := self 						request: (#EnterVarToSearchForRGBrowser &lt;&lt; #browser &gt;&gt; 'Enter variable to search for ("*browser*"):').			(searchString isNil or: [searchString isEmpty]) ifTrue: [^self].			env := ClassEnvironment onEnvironment: self environment.			self environment classesDo: 					[:each | 					(each instVarNames anySatisfy: [:name | searchString match: name]) 						ifTrue: [env addClass: each]].			self class openOnEnvironment: env]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>private</category><body package="Browser-BrowserUI" selector="bufferChangeRequest">bufferChangeRequest	currentBuffer value state: navigator getState.	^true</body><body package="Browser-BrowserUI" selector="buildNewMenu">buildNewMenu	self builder window menuBar menuChannel: self menuBar</body><body package="Browser-BrowserUI" selector="changedBuffer">changedBuffer	| buffer |	buffer := currentBuffer value.	buffer isNil ifTrue: [^self].	tools do: [:each | each lock].	buffer unlock.	navigator updateWindowLabel.	self installSubcanvasIn: #codeTool using: buffer.	self isZoomed = self codeTool isZoomed ifFalse: [self toggleZoom].	buffer takeFocus.	self buildNewMenu</body><body package="Browser-BrowserUI" selector="deselectClass">deselectClass	| state |	state := navigator getState.	state		definitions: #();		protocols: #();		objectNames: #().	navigator updateWithState: state</body><body package="Browser-BrowserUI" selector="promptForReferencePathBlock">promptForReferencePathBlock	| source block |	source := self request: (#FindWhat &lt;&lt; #browser &gt;&gt; 'Find what?')				initialAnswer: (#CeachEach10000 &lt;&lt; #browser &gt;&gt; '[:each | each == 10000]').	source isEmpty ifTrue: [^nil].	block := self class compilerClass evaluate: source.	(block respondsTo: #value:) 		ifFalse: 			[self warn: (#SourceDidNotEvaluateToABlock &lt;&lt; #browser &gt;&gt; 'Source did not evaluate to a block').			^nil].	^block</body><body package="Browser-BrowserUI" selector="setNavigatorType:">setNavigatorType: aSymbol 	self changeRequest ifFalse: [^self].	navigator navigatorType: aSymbol.	self buildNewMenu</body><body package="Browser-BrowserUI" selector="switchToSourceView">switchToSourceView	self currentTool selectPolicyNamed: (#Source &lt;&lt; #browser &gt;&gt; 'Source') asString</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>menu</category><body package="Browser-BrowserUI" selector="bufferMenuSpecifications">bufferMenuSpecifications	^(1 to: (tools size min: 9)) collect: 			[:i | 			(self currentTool == (tools at: i) 				ifTrue: [RBCheckedCommand]				ifFalse: [RBCommand]) 					named: (self 						menuNameFor: ('&amp;&lt;1s&gt; &lt;2s&gt;'							expandMacrosWith: i printString							with: (tools at: i) printString))					description: (#SelectBuffer &lt;&lt; #browser &gt;&gt; 'Select Buffer')					action: [self switchToBuffer: i]					receiver: #yourself]</body><body package="Browser-BrowserUI" selector="menu">menu	^[self menuBar]</body><body package="Browser-BrowserUI" selector="menuBar">menuBar	| menu |	menu := Menu new.	menu		addItem: ((MenuItem labeled: (#_Browser &lt;&lt; #browser &gt;&gt; '&amp;Browser'))					nameKey: #Browser;					submenu: (self buildTopLevelMenuFrom: #browserMenu);					yourself);		addItem: ((MenuItem labeled: (#_Edit &lt;&lt; #browser &gt;&gt; '&amp;Edit'))					nameKey: #Edit;					submenu: [currentBuffer value menu value];					yourself);		addItem: ((MenuItem labeled: (#_Find &lt;&lt; #browser &gt;&gt; '&amp;Find'))					nameKey: #Find;					submenu: (self buildTopLevelMenuFrom: #findMenu);					yourself);		addItem: ((MenuItem labeled: (#_View &lt;&lt; #browser &gt;&gt; '&amp;View'))					nameKey: #View;					submenu: (self buildTopLevelMenuFrom: #viewMenu);					yourself).	navigator windowMenuItems do: 			[:each | 			menu addItem: ((MenuItem labeled: each key)						nameKey: (each key copyWithout: $&amp;) asSymbol;						submenu: each value;						yourself)].	menu		addItem: ((MenuItem labeled: (#Tools &lt;&lt; #browser &gt;&gt; 'Tools'))					nameKey: #Tools;					submenu: (self buildTopLevelMenuFrom: #toolsMenu);					yourself);		addItem: ((MenuItem labeled: (#Help &lt;&lt; #browser &gt;&gt; 'Help'))					nameKey: #Help;					submenu: (self buildTopLevelMenuFrom: #helpMenu);					yourself).	menu 		augmentFrom: self class		to: BrowserApplicationModel		menuName: #menuBar		for: self.	^menu</body><body package="Browser-BrowserUI" selector="navigatorTypeSpecifications">navigatorTypeSpecifications	navigator isNil ifTrue: [^#()].	^navigator class navigatorTypes collect: 			[:each | 			| isSet |			isSet := navigator navigatorType = each value.			(isSet ifTrue: [RBCheckedCommand] ifFalse: [RBCommand]) 				named: each key				description: (#SelectNavigatorType &lt;&lt; #browser &gt;&gt; 'Select Navigator Type')				action: [isSet ifFalse: [self setNavigatorType: each value]]				receiver: #yourself]</body><body package="Browser-BrowserUI" selector="rebuildMenus">rebuildMenus	navigator rebuildMenus.	tools do: [:each | each rebuildMenus].	self buildNewMenu.	self toolbarMenuHolder value: self toolbarMenu</body><body package="Browser-BrowserUI" selector="switchToBuffer:">switchToBuffer: anInteger 	currentBuffer value: (tools at: anInteger).	self changedBuffer</body><body package="Browser-BrowserUI" selector="toolbarMenu">toolbarMenu	| menu |	menu := (self buildTopLevelMenuFrom: #toolbarMenu) value.	menu menuItems do: 			[:each | 			| block |			block := each value.			each value: ((PluggableAdaptor on: ValueHolder new) 						getBlock: [:m | false]						putBlock: [:m :v | (self isMenuItemEnabled: each) ifTrue: [block value]]						updateBlock: [:m :a :p | false])].	^menu</body><body package="Browser-BrowserUI" selector="toolbarMenuHolder">toolbarMenuHolder	toolbarMenuHolder isNil 		ifTrue: [toolbarMenuHolder := self toolbarMenu asValue].	^toolbarMenuHolder</body><body package="Browser-BrowserUI" selector="zoomMenuSpecifications">zoomMenuSpecifications	^Array 		with: ((self isZoomed ifTrue: [RBCheckedCommand] ifFalse: [RBCommand]) 				named: (#Zoom &lt;&lt; #browser &gt;&gt; 'Zoom')				description: (#Zoom &lt;&lt; #browser &gt;&gt; 'Zoom')				action: [self toggleZoom]				receiver: #yourself)</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="changedFindString">changedFindString	| findString list |	self changeRequest ifFalse: [^self].	findString := self findHolder value.	findString isEmpty ifTrue: [^self].	list := self findList value.	list remove: findString ifAbsent: [].	list addFirst: findString.	list size &gt; 20 ifTrue: [list removeLast].	self showWaitCursorWhile: [navigator find: findString]</body><body package="Browser-BrowserUI" selector="changeRequest">changeRequest	"The receiver wants to change; check with all dependents that it is OK."	^super changeRequest and: [navigator changeRequest]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="codeModelClass">codeModelClass	^CodeModel</body><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	self class showToolbarHolder onChangeSend: #updateToolbar to: self.	self findHolder onChangeSend: #changedFindString to: self</body><body package="Browser-BrowserUI" selector="initializeDispatcher">initializeDispatcher	dispatcher := RBActionDispatcher new.	dispatcher browser: self</body><body package="Browser-BrowserUI" selector="initializeOnEnvironment:type:">initializeOnEnvironment: anEnvironment type: aNavigatorTypeSymbol 	policyClass := StateLockPolicy.	self initializeDispatcher.	tools := OrderedCollection new.	self environment: anEnvironment.	navigator dispatcher: dispatcher.	navigator navigatorType: aNavigatorTypeSymbol.	currentBuffer := (self codeModelClass navigator: navigator) asValue.	currentBuffer value lockPolicyClass: policyClass.	tools add: currentBuffer value</body><body package="Browser-BrowserUI" selector="release">release	navigator release.	tools do: [:each | each release].	self class showToolbarHolder retractInterestsFor: self.	super release</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="codeTool">codeTool	^self currentTool</body><body package="Browser-BrowserUI" selector="currentTool">currentTool	^self currentBuffer value</body><body package="Browser-BrowserUI" selector="dispatcher">dispatcher	^dispatcher</body><body package="Browser-BrowserUI" selector="environment">environment	^navigator environment</body><body package="Browser-BrowserUI" selector="environment:">environment: anEnvironment 	| navigatorClass |	navigatorClass := anEnvironment navigatorClass.	navigatorClass == navigator class 		ifTrue: [navigator environment: anEnvironment]		ifFalse: 			[navigator release.			navigator := navigatorClass forEnvironment: anEnvironment						dispatcher: dispatcher.			tools do: [:each | each navigator: navigator]]</body><body package="Browser-BrowserUI" selector="navigator">navigator	^navigator</body><body package="Browser-BrowserUI" selector="policyClass:">policyClass: aLockPolicyClass	policyClass := aLockPolicyClass.	tools do: [:each | each lockPolicyClass: policyClass]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="currentBuffer">currentBuffer	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^currentBuffer isNil		ifTrue:			[currentBuffer := nil asValue]		ifFalse:			[currentBuffer]</body><body package="Browser-BrowserUI" selector="findHolder">findHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^findHolder isNil		ifTrue:			[findHolder := String new asValue]		ifFalse:			[findHolder]</body><body package="Browser-BrowserUI" selector="findList">findList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^findList isNil		ifTrue:			[findList := FindList asValue]		ifFalse:			[findList]</body><body package="Browser-BrowserUI" selector="redoLabel">redoLabel	| manager |	manager := RefactoryChangeManager instance.	^manager hasRedoableOperations 		ifTrue: [((#_Redo1s &lt;&lt; #browser &gt;&gt; '&amp;Redo &lt;1s&gt;')			expandMacrosWith: manager redoChange name)]		ifFalse: [(#_Redo &lt;&lt; #browser &gt;&gt; '&amp;Redo')]</body><body package="Browser-BrowserUI" selector="undoLabel">undoLabel	| manager |	manager := RefactoryChangeManager instance.	^manager hasUndoableOperations 		ifTrue: [((#_Undo1s &lt;&lt; #browser &gt;&gt; '&amp;Undo &lt;1s&gt;')			expandMacrosWith: manager undoChange name)]		ifFalse: [(#_Undo &lt;&lt; #browser &gt;&gt; '&amp;Undo')]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="findAllReferencePaths">findAllReferencePaths	| block |	block := self promptForReferencePathBlock.	block isNil ifTrue: [^self].	self showWaitCursorWhile: 			[| paths |			paths := ReferenceFinder new findAllPaths: block.			paths isEmpty 				ifTrue: [self warn: (#NoPathsFound &lt;&lt; #browser &gt;&gt; 'No paths found')]				ifFalse: [paths inspect]]</body><body package="Browser-BrowserUI" selector="findReferencePath">findReferencePath	| block |	block := self promptForReferencePathBlock.	block isNil ifTrue: [^self].	self showWaitCursorWhile: 			[| path |			path := ReferenceFinder new findPath: block.			path notNil ifTrue: [path inspect] ifFalse: [self warn: (#NoPathsFound &lt;&lt; #browser &gt;&gt; 'No paths found')]]</body><body package="Browser-BrowserUI" selector="newBuffer">newBuffer	| newBuffer |	newBuffer := self codeModelClass navigator: navigator.	newBuffer lockPolicyClass: policyClass.	tools add: newBuffer.	self bufferChangeRequest.	self switchToBuffer: tools size.	currentBuffer value tool updateContents.	self enable: #removeBuffer.	self updateCodeToolZoomed</body><body package="Browser-BrowserUI" selector="newByteIndexedClass">newByteIndexedClass	self changeRequest ifFalse: [^self].	self deselectClass.	self switchToSourceView.	self performAction: 'Byte Indexed Class Template'</body><body package="Browser-BrowserUI" selector="newClass">newClass	self changeRequest ifFalse: [^self].	self switchToSourceView.	self navigator createNewClass.</body><body package="Browser-BrowserUI" selector="newIndexedClass">newIndexedClass	self changeRequest ifFalse: [^self].	self deselectClass.	self switchToSourceView.	self performAction: 'Indexed Class Template'</body><body package="Browser-BrowserUI" selector="newNameSpace">newNameSpace	self changeRequest ifFalse: [^self].	self deselectClass.	self switchToSourceView.	self navigator createNewNameSpace</body><body package="Browser-BrowserUI" selector="newSharedVariable">newSharedVariable	self changeRequest ifFalse: [^self].	self deselectClass.	self switchToSourceView.	self navigator createNewSharedVariable</body><body package="Browser-BrowserUI" selector="redoOperation">redoOperation	self changeRequest ifFalse: [^self].	self showWaitCursorWhile: 			[RefactoryChangeManager instance redoOperation.			navigator refreshLists]</body><body package="Browser-BrowserUI" selector="removeBuffer">removeBuffer	currentBuffer value updateRequest ifFalse: [^self].	tools remove: currentBuffer value.	currentBuffer value release.	self switchToBuffer: 1.	tools size == 1 ifTrue: [self disable: #removeBuffer]</body><body package="Browser-BrowserUI" selector="selectBuffer">selectBuffer	| buffer |	buffer := Dialog 				choose: (#SelectBuffer1 &lt;&lt; #browser &gt;&gt; 'Select buffer')				fromList: tools				values: (1 to: tools size)				lines: 20				cancel: [nil].	buffer isNil ifTrue: [^self].	self switchToBuffer: buffer</body><body package="Browser-BrowserUI" selector="setUndoCount">setUndoCount	"Don't like the isKindOf:, but don't have a portable way to determine if something is a number."	| undoString undoTree |	undoString := self request: (#EnterUndoStackSizeC &lt;&lt; #browser &gt;&gt; 'Enter undo stack size:')				initialAnswer: RefactoryChangeManager undoSize printString.	undoString isEmpty ifTrue: [^self].	undoTree := RBParser parseExpression: undoString				onError: [:str :pos | ^self].	(undoTree isLiteralNode and: [undoTree value respondsToArithmetic]) 		ifFalse: [^self].	RefactoryChangeManager undoSize: undoTree value asInteger</body><body package="Browser-BrowserUI" selector="spawnBrowser">spawnBrowser	self class openWithSelection: self navigator getState</body><body package="Browser-BrowserUI" selector="toggleToolbar">toggleToolbar	self class showToolbar: self class showToolbar not.	self updateToolbar</body><body package="Browser-BrowserUI" selector="toggleZoom">toggleZoom	| widget splitterWidget |	widget := self builder componentAt: #codeTool.	self isZoomed 		ifTrue: 			[splitterWidget := self builder componentAt: #splitter.			(widget component layout)				topOffset: splitterWidget component layout bottomOffset;				topFraction: splitterWidget component layout bottomFraction.			self showAll: #(#navigator #splitter)]		ifFalse: 			[self hideAll: #(#navigator #splitter).			(widget component layout)				topOffset: 0;				topFraction: 0].	self updateCodeToolZoomed.	builder window refresh</body><body package="Browser-BrowserUI" selector="undoOperation">undoOperation	self changeRequest ifFalse: [^self].	self showWaitCursorWhile: 			[RefactoryChangeManager instance undoOperation.			navigator refreshLists]</body><body package="Browser-BrowserUI" selector="updateCodeToolZoomed">updateCodeToolZoomed	self codeTool isZoomed: self isZoomed</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="has10orMoreCodeTools">has10orMoreCodeTools	^tools size &gt; 9</body><body package="Browser-BrowserUI" selector="hasMultipleCodeTools">hasMultipleCodeTools	^tools size &gt; 1</body><body package="Browser-BrowserUI" selector="hasRedoableOperations">hasRedoableOperations	^RefactoryChangeManager instance hasRedoableOperations</body><body package="Browser-BrowserUI" selector="hasUndoableOperations">hasUndoableOperations	^RefactoryChangeManager instance hasUndoableOperations</body><body package="Browser-BrowserUI" selector="isCategoryParcelOrPackageSelected">isCategoryParcelOrPackageSelected	^navigator isCategorySelected or: [navigator isCodeComponentSelected]</body><body package="Browser-BrowserUI" selector="isGlobalSelected">isGlobalSelected	^navigator isGlobalSelected</body><body package="Browser-BrowserUI" selector="isZoomed">isZoomed	^(self builder componentAt: #navigator) isVisible not</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>events</category><body package="Browser-BrowserUI" selector="areAllBuffersClean">areAllBuffersClean	^tools allSatisfy: [:each | each isLocked not or: [each isEditing not]]</body><body package="Browser-BrowserUI" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	self release.	^super noticeOfWindowClose: aWindow</body><body package="Browser-BrowserUI" selector="requestForWindowClose">requestForWindowClose	super requestForWindowClose ifFalse: [^false].	(builder isNil or: [builder window isOpen not]) ifTrue: [^true].	tools size &gt; 1 		ifTrue: 			[(self confirm: (#MultipleViewsExistExitAnyway &lt;&lt; #browser &gt;&gt; 'Multiple views exist.Exit anyway?')) 				ifFalse: [^false]].	self areAllBuffersClean ifTrue: [^true].	^self confirm: (#ModifiedViewsExistsExitAnyway &lt;&lt; #browser &gt;&gt; 'Modified views exists.Exit anyway?')</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="addFind">addFind	"This isn't a pretty method, but I want an input field in the toolbar."	[| components toolbar oldComposite wrappedToolbar |	components := self builder window component components.	components size = 3 ifFalse: [^self].	((toolbar := (components at: 2) component) isKindOf: ToolBar)		ifFalse: [^self].	oldComposite := builder composite.	builder composite: (wrappedToolbar := CompositePart new).	self class findWindowSpec decodeAsLiteralArray component collection		do: [:each | self builder add: each].	wrappedToolbar := WidgetWrapper		on:			(BoundedWrapper				on: wrappedToolbar				in:					((LayoutFrame new)						leftOffset: [toolbar components last bounds right + 10];						leftFraction: 0;						rightOffset: -3;						rightFraction: 1;						topOffset: [(components at: 2) bounds center y - 13];						topFraction: 0;						bottomOffset: [(components at: 2) bounds center y + 13];						bottomFraction: 0)).	self builder window component addWrapper: wrappedToolbar.	wrappedToolbar invalidate.	builder composite: oldComposite]		on: Error		do: [:ex | ex return]</body><body package="Browser-BrowserUI" selector="postBuildWith:">postBuildWith: aBuilder 		super postBuildWith: aBuilder.	(builder window)		application: self;		sendWindowEvents: #(#newGraphicsDevice #reopen).	navigator updateNavigator</body><body package="Browser-BrowserUI" selector="postOpenWith:">postOpenWith: aBuilder 	super postOpenWith: aBuilder.	self addFind.	builder window sensor invalidationSuppressWhile: [self updateToolbar].	self currentTool updateDisplay</body><body package="Browser-BrowserUI" selector="preBuildWith:">preBuildWith: aBuilder 	aBuilder 		subCanvasAt: #NavigatorTool		at: #windowSpec		put: navigator spec.	aBuilder 		subCanvasAt: #CodeModelSubcanvas		at: #windowSpec		put: (self currentTool class perform: self currentTool windowSpecMethod).	^super preBuildWith: aBuilder</body><body package="Browser-BrowserUI" selector="reInstallInterface">reInstallInterface	| spec window |	self currentTool lock.	window := builder window.	self resetBuilder.	window component release.	window controller reInstallEventDispatcher.	builder := UIBuilder new.	builder setWindow: window.	builder source: self.	spec := self class interfaceSpecFor: #windowSpec.	self preBuildWith: builder.	builder add: spec.	self postBuildWith: builder.	builder doFinalHookup.	self postOpenWith: builder.	self currentTool unlock.	^builder</body><body package="Browser-BrowserUI" selector="showFind:">showFind: aBoolean 	| widgets |	widgets := #(#findLabel #find).	aBoolean ifTrue: [self showAll: widgets] ifFalse: [self hideAll: widgets]</body><body package="Browser-BrowserUI" selector="subcanvases">subcanvases	^super subcanvases , tools copyWith: navigator</body><body package="Browser-BrowserUI" selector="updateToolbar">updateToolbar	self showFind: self class showToolbar.	self builder window toolbarVisible: self class showToolbar.	(self widgetAt: #toolbarMenuHolder) 		ifNotNil: [:toolbar | toolbar enableAllButtons]</body><body package="Browser-BrowserUI" selector="windowEvent:from:">windowEvent: anEvent from: aWindow 	super windowEvent: anEvent from: aWindow.	(#(#newGraphicsDevice #reopen) includes: anEvent key) 		ifTrue: [self reInstallInterface]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>menu accessing</category><body package="Browser-BrowserUI" selector="dynamicMenuItemsFrom:">dynamicMenuItemsFrom: aMenuItem 	"Hack the dynamic menus to have shortcuts. Not pretty, but works."	| items |	items := super dynamicMenuItemsFrom: aMenuItem.	aMenuItem nameKey = #'Zoom Specifications' 		ifTrue: 			[(items first)				shortcutModifiers: InputState altMask;				shortcutKeyCharacter: $z.			^items].	aMenuItem nameKey ~= #Buffers ifTrue: [^items].	1 to: (items size min: 9)		do: 			[:i | 			(items at: i)				shortcutModifiers: InputState altMask;				shortcutKeyCharacter: (Character value: $0 asInteger + i)].	^items</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>interface opening</category><body package="Browser-BrowserUI" selector="open">open	^self openOnEnvironment: BrowserEnvironment new</body><body package="Browser-BrowserUI" selector="openCategory">openCategory	^self openOnEnvironment: BrowserEnvironment new type: #Category</body><body package="Browser-BrowserUI" selector="openHierarchyOnEnvironment:withSelection:">openHierarchyOnEnvironment: aBrowserEnvironment withSelection: aNavigatorState 	^self 		openOnEnvironment: aBrowserEnvironment		type: BrowserNavigator navigatorType		state: aNavigatorState		hierarchy: true</body><body package="Browser-BrowserUI" selector="openHierarchyWithSelection:">openHierarchyWithSelection: aNavigatorState 	^self openHierarchyOnEnvironment: BrowserEnvironment new		withSelection: aNavigatorState</body><body package="Browser-BrowserUI" selector="openOnEnvironment:">openOnEnvironment: anEnvironment 	^self openOnEnvironment: anEnvironment type: BrowserNavigator navigatorType</body><body package="Browser-BrowserUI" selector="openOnEnvironment:type:">openOnEnvironment: anEnvironment type: aNavigatorTypeSymbol 	^self 		openOnEnvironment: anEnvironment		type: aNavigatorTypeSymbol		state: NavigatorState new		hierarchy: false</body><body package="Browser-BrowserUI" selector="openOnEnvironment:type:state:hierarchy:">openOnEnvironment: anEnvironment type: aNavigatorTypeSymbol state: aNavigatorState hierarchy: aBoolean 	| browser type |	type := aNavigatorState categories isEmpty 				ifTrue: 					[aNavigatorState parcels isEmpty 						ifTrue: 							[aNavigatorState pundles isEmpty 								ifTrue: [aNavigatorTypeSymbol]								ifFalse: [#Package]]						ifFalse: [#Parcel]]				ifFalse: [#Category].	browser := self onEnvironment: anEnvironment type: type.	browser allButOpenInterface: #windowSpec.	aNavigatorState hasSelection 		ifTrue: 			[(anEnvironment isSelector and: [anEnvironment numberSelectors = 1]) 				ifTrue: [browser toggleZoom].			browser navigator updateWithState: aNavigatorState].	aBoolean ifTrue: [browser navigator beHierarchy].	browser finallyOpen.	^browser</body><body package="Browser-BrowserUI" selector="openOnEnvironment:withSelection:">openOnEnvironment: aBrowserEnvironment withSelection: aNavigatorState 	^self 		openOnEnvironment: aBrowserEnvironment		type: BrowserNavigator navigatorType		state: aNavigatorState		hierarchy: false</body><body package="Browser-BrowserUI" selector="openOnSelection">openOnSelection	| dialog |	dialog := ClassSelectionDialog new.	dialog open ifFalse: [^self].	^self openOnEnvironment: dialog selectedEnvironment</body><body package="Browser-BrowserUI" selector="openPackage">openPackage	^self openOnEnvironment: BrowserEnvironment new type: #Package</body><body package="Browser-BrowserUI" selector="openParcel">openParcel	^self openOnEnvironment: BrowserEnvironment new type: #Parcel</body><body package="Browser-BrowserUI" selector="openType:">openType: aNavigatorTypeSymbol 	^self openOnEnvironment: BrowserEnvironment new type: aNavigatorTypeSymbol</body><body package="Browser-BrowserUI" selector="openWithSelection:">openWithSelection: aNavigatorState 	^self openOnEnvironment: BrowserEnvironment new		withSelection: aNavigatorState</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>compatibility messages</category><body package="Browser-BrowserUI" selector="newOnClass:">newOnClass: aClass 	"Set the default VW class browser to be a Refactoring Browser."	"#(browserType classBrowserType methodListBrowserType) do: [:each | UISettings preferenceFor: each put: 'Refactory.Browser.RefactoringBrowser']"	(self open navigator)		selectClass: aClass;		changed;		beHierarchy</body><body package="Browser-BrowserUI" selector="openListBrowserOn:label:initialSelection:">openListBrowserOn: referenceCollection label: aString initialSelection: selection 	| browserEnvironment |	browserEnvironment := SelectorEnvironment onMethods: referenceCollection.	browserEnvironment label: aString.	selection notNil ifTrue: [browserEnvironment addSearchString: selection].	^self openOnEnvironment: browserEnvironment</body><body package="Browser-BrowserUI" selector="openListBrowserOn:label:initialSelection:spawnedFrom:">openListBrowserOn: methodCollection label: aString initialSelection: selection spawnedFrom: aBrowserOrNil 	^self 		openListBrowserOn: methodCollection		label: aString		initialSelection: selection</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>instance creation</category><body package="Browser-BrowserUI" selector="onEnvironment:type:">onEnvironment: anEnvironment type: navigatorTypeSymbol 	| browser |	browser := self new.	browser initializeOnEnvironment: anEnvironment type: navigatorTypeSymbol.	^browser</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>class initialization</category><body package="Browser-BrowserUI" selector="initialize">initialize	self initializeViewMenu</body><body package="Browser-BrowserUI" selector="initializeViewMenu">initializeViewMenu	| menu |	menu := self menuNamed: #toolsMenu.	(menu atNameKey: #'Toggle Toolbar') indication: self showToolbarHolder.	(menu atNameKey: #'Toggle Status Bar') 		indication: CodeModel showStatusBarHolder</body><body package="Browser-BrowserUI" selector="obsolete">obsolete	super obsolete</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="showToolbar">showToolbar	^self showToolbarHolder value</body><body package="Browser-BrowserUI" selector="showToolbar:">showToolbar: aBoolean 	"self showToolbar: false"	"self showToolbar: true"	self showToolbarHolder value: aBoolean</body><body package="Browser-BrowserUI" selector="showToolbarHolder">showToolbarHolder	^showToolbarHolder isNil 		ifTrue: [showToolbarHolder := true asValue]		ifFalse: [showToolbarHolder]</body></methods><methods><class-id>Refactory.Browser.DeploymentPrerequisitesTool</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="allPackagesList">allPackagesList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^allPackagesList isNil		ifTrue:			[allPackagesList := MultiSelectionInList new]		ifFalse:			[allPackagesList]</body><body package="Browser-BrowserUI" selector="entryPrerequisiteHolder">entryPrerequisiteHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^entryPrerequisiteHolder isNil		ifTrue:			[entryPrerequisiteHolder := String new asValue]		ifFalse:			[entryPrerequisiteHolder]</body><body package="Browser-BrowserUI" selector="prerequisitesList">prerequisitesList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^prerequisitesList isNil		ifTrue:			[prerequisitesList := MultiSelectionInList new]		ifFalse:			[prerequisitesList]</body><body package="Browser-BrowserUI" selector="versionHolder">versionHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^versionHolder isNil		ifTrue:			[versionHolder := String new asValue]		ifFalse:			[versionHolder]</body></methods><methods><class-id>Refactory.Browser.DeploymentPrerequisitesTool</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="changedEntryText">changedEntryText	self entryPrerequisiteHolder value isEmpty 		ifTrue: [self disable: #addEntryPrerequisitesButton]		ifFalse: [self enable: #addEntryPrerequisitesButton]</body><body package="Browser-BrowserUI" selector="changedPackageSelection">changedPackageSelection	self allPackagesList selections isEmpty 		ifTrue: [self disable: #addPrerequisitesButton]		ifFalse: [self enable: #addPrerequisitesButton]</body><body package="Browser-BrowserUI" selector="changedPrerequisites">changedPrerequisites	isChanged := true.	self enableAll: #(#okButton #cancelButton)</body><body package="Browser-BrowserUI" selector="changedPrerequisitesSelection">changedPrerequisitesSelection	self updateRemovePrerequisitesButton.	self updatePrerequisiteInformation</body><body package="Browser-BrowserUI" selector="updateDisplay">updateDisplay	super updateDisplay.	(self builder componentAt: #entryPrerequisite) widget controller 		continuousAccept: true.	self		changedEntryText;		changedPackageSelection;		changedPrerequisitesSelection.	isChanged ifTrue: [self changedPrerequisites]</body><body package="Browser-BrowserUI" selector="updatePrerequisiteInformation">updatePrerequisiteInformation	| prereq |	prereq := self selectedPrerequisite.	selectedPrerequisiteHolder value: prereq.	prereq isNil 		ifTrue: [self disable: #version]		ifFalse: [self enable: #version]</body><body package="Browser-BrowserUI" selector="updateRemovePrerequisitesButton">updateRemovePrerequisitesButton	self prerequisitesList selections isEmpty 		ifTrue: [self disable: #removePrerequisitesButton]		ifFalse: [self enable: #removePrerequisitesButton]</body></methods><methods><class-id>Refactory.Browser.DeploymentPrerequisitesTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="acceptPrerequisites">acceptPrerequisites	self codeComponent 		deploymentPrerequisites: (self prerequisitesList list 				collect: [:each | each deploymentPrerequisite]) asArray</body><body package="Browser-BrowserUI" selector="allCodeComponents">allCodeComponents	^self parcel notNil 		ifTrue: [Parcel parcels]		ifFalse: 			[| items |			items := OrderedCollection withAll: self storeRegistry allPackages.			(self storeRegistry bundleNamed: 'Base VisualWorks') allContainedItems 				do: [:each | items remove: each ifAbsent: []].			items]</body><body package="Browser-BrowserUI" selector="codeComponentEnvironment">codeComponentEnvironment	| pundle |	pundle := self pundle.	^pundle isNil 		ifTrue: 			[ParcelEnvironment onEnvironment: BrowserEnvironment new				parcels: (Array with: self parcel)]		ifFalse: 			[PundleEnvironment onEnvironment: BrowserEnvironment new				pundles: (Array with: self pundle)]</body><body package="Browser-BrowserUI" selector="currentPrerequisites">currentPrerequisites	^self codeComponent deploymentPrerequisites 		collect: [:each | Prerequisite name: each first version: each last]</body><body package="Browser-BrowserUI" selector="entryPrerequisite">entryPrerequisite	^Prerequisite name: self entryPrerequisiteHolder value version: ''</body><body package="Browser-BrowserUI" selector="helpText">helpText	^(#DeploymentPrerequisitesToolHelp &lt;&lt; #browser &gt;&gt; 'Deployment prerequsites are an array of prerequisite parcels.  Each individual prerequisite is a name, version pair.  On loading the Parcel loader searches along the SearchPath for .pcl files that have the required name and attempts to load them.  All parcels have a version which is an arbitrary string, that defaults to the empty string.  Each Parcel can also define a prerequisite version block which it can use to select appropriate versions of prerequisite parcels.')</body><body package="Browser-BrowserUI" selector="packageList">packageList	| prereqs registry |	prereqs := Set new.	Parcel parcels 		do: [:each | prereqs add: (self prerequisiteObjectFor: each)].	self parcel isNil 		ifTrue: 			[registry := self storeRegistry.			registry notNil 				ifTrue: 					[registry allPundles 						do: [:each | prereqs add: (self prerequisiteObjectFor: each)]]].	^prereqs</body><body package="Browser-BrowserUI" selector="prerequisiteObjectFor:">prerequisiteObjectFor: codeComponent 	^Prerequisite name: (codeComponent isParcel 				ifTrue: [codeComponent name]				ifFalse: [codeComponent parcelName])		version: ''</body><body package="Browser-BrowserUI" selector="prerequisitesFor:">prerequisitesFor: aCodeComponent 	| prereqs |	prereqs := Set new.	self prerequisitesFor: aCodeComponent into: prereqs.	^prereqs</body><body package="Browser-BrowserUI" selector="prerequisitesFor:into:">prerequisitesFor: aCodeComponent into: aCollection 	| prereqBlock registry |	registry := self storeRegistry.	prereqBlock := 			[:prereq | 			prereq notNil 				ifTrue: 					[(aCollection includes: prereq) 						ifFalse: 							[aCollection add: prereq.							self prerequisitesFor: prereq into: aCollection]]].	aCodeComponent deploymentPrerequisites do: 			[:each | 			prereqBlock value: (Parcel parcelNamed: each first).			registry notNil 				ifTrue: 					[prereqBlock value: (registry packageNamed: each first).					prereqBlock value: (registry bundleNamed: each first)]]</body><body package="Browser-BrowserUI" selector="referencedBindings">referencedBindings	| env objects |	objects := IdentitySet new.	env := self codeComponentEnvironment.	env classesDo: 			[:each | 			(env definesClass: each) 				ifTrue: 					[each superclass notNil 						ifTrue: 							[objects 								add: (each superclass environment bindingFor: each superclass name)]]				ifFalse: [objects add: (each environment bindingFor: each name)]].	env methodsDo: 			[:each | 			each allLiteralsDo: 					[:lit | 					lit isVariableBinding ifTrue: [objects add: lit nonDeferredBinding].					lit isBindingReference ifTrue: [objects add: lit bindingOrNil]]].	^objects</body><body package="Browser-BrowserUI" selector="resetChanged">resetChanged	isChanged := false.	self disableAll: #(#okButton #cancelButton)</body><body package="Browser-BrowserUI" selector="selectedPrerequisite">selectedPrerequisite	| selections |	selections := self prerequisitesList selections.	^selections size = 1 ifTrue: [selections asArray first] ifFalse: [nil]</body><body package="Browser-BrowserUI" selector="setPrerequisites:">setPrerequisites: newList 	| unique |	unique := List new: newList size.	newList do: [:each | (unique includes: each) ifFalse: [unique add: each]].	self prerequisitesList list: unique</body><body package="Browser-BrowserUI" selector="sortPrerequisites:">sortPrerequisites: aPrerequisitesCollection 	^aPrerequisitesCollection asSortedCollection: [:a :b | a printString &lt; b printString]</body></methods><methods><class-id>Refactory.Browser.DeploymentPrerequisitesTool</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="addEntryPrerequisites">addEntryPrerequisites	| newList |	newList := self prerequisitesList list.	newList add: self entryPrerequisite.	self setPrerequisites: newList.	self changedPrerequisites</body><body package="Browser-BrowserUI" selector="addEnvironmentPrereqsFrom:to:">addEnvironmentPrereqsFrom: allItems to: prereqs 	| block |	block := 			[:each | 			| codeComponent |			codeComponent := allItems 						detect: [:codeCmp | codeCmp definesClassOrNameSpace: each environment]						ifNone: [nil].			codeComponent notNil 				ifTrue: 					[prereqs add: codeComponent.					allItems remove: codeComponent]].	(self codeComponentEnvironment)		classesDo: block;		nameSpacesDo: block</body><body package="Browser-BrowserUI" selector="addPrerequisites">addPrerequisites	| newList |	newList := List withAll: self prerequisitesList list.	newList addAll: self allPackagesList selections.	self setPrerequisites: newList.	self changedPrerequisites</body><body package="Browser-BrowserUI" selector="addReferencePrereqsFrom:to:">addReferencePrereqsFrom: allItems to: prereqs 	self referencedBindings do: 			[:each | 			| codeComponent |			codeComponent := allItems detect: 							[:codeCmp | 							each isForGeneral 								ifTrue: [codeCmp definesName: each key in: (Root whoDefinesBinding: each)]								ifFalse: [codeCmp definesClassOrNameSpace: each value]]						ifNone: [nil].			codeComponent notNil 				ifTrue: 					[prereqs add: codeComponent.					allItems remove: codeComponent]]</body><body package="Browser-BrowserUI" selector="cancel">cancel	self updateContents</body><body package="Browser-BrowserUI" selector="computePrerequisites">computePrerequisites	self showWaitCursorWhile: 			[| allItems prereqs |			allItems := self allCodeComponents.			prereqs := OrderedCollection new.			allItems remove: self codeComponent ifAbsent: [].			self addReferencePrereqsFrom: allItems to: prereqs.			self addEnvironmentPrereqsFrom: allItems to: prereqs.			self removeDuplicatePrereqsFrom: prereqs.			self setPrerequisites: (prereqs 						collect: [:each | Prerequisite name: each name version: '']).			self changedPrerequisites]</body><body package="Browser-BrowserUI" selector="ok">ok	self acceptPrerequisites.	self updateContents</body><body package="Browser-BrowserUI" selector="removeDuplicatePrereqsFrom:">removeDuplicatePrereqsFrom: prereqs 	prereqs copy do: 			[:each | 			| myPrereqs |			myPrereqs := self prerequisitesFor: each.			myPrereqs do: [:prereq | prereqs remove: prereq ifAbsent: []]]</body><body package="Browser-BrowserUI" selector="removePrerequisites">removePrerequisites	| newList |	newList := List withAll: self prerequisitesList list.	newList removeAll: self prerequisitesList selections.	self setPrerequisites: newList.	self changedPrerequisites</body></methods><methods><class-id>Refactory.Browser.DeploymentPrerequisitesTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	selectedPrerequisiteHolder := nil asValue.	versionHolder := (AspectAdaptor subjectChannel: selectedPrerequisiteHolder) 				forAspect: #version.	isChanged := false.	self allPackagesList selectionIndexHolder 		onChangeSend: #changedPackageSelection		to: self.	self prerequisitesList selectionIndexHolder 		onChangeSend: #changedPrerequisitesSelection		to: self.	self entryPrerequisiteHolder onChangeSend: #changedEntryText to: self</body></methods><methods><class-id>Refactory.Browser.DeploymentPrerequisitesTool</class-id> <category>updating</category><body package="Browser-BrowserUI" selector="okToChangeToolFocus">okToChangeToolFocus	| choice |	choice := Dialog 				choose: ((#AcceptPrereqChangesTo1sQ &lt;&lt; #browser &gt;&gt; 'Accept unsaved prerequisite changes to &lt;1s&gt;?')			expandMacrosWith: self codeComponent name)				labels: (Array with: (#Yes &lt;&lt; #browser &gt;&gt; 'Yes') with: (#No &lt;&lt; #browser &gt;&gt; 'No') with: (#Cancel &lt;&lt; #browser &gt;&gt; 'Cancel'))				values: #(#yes #no #cancel)				default: #yes.	choice = #cancel ifTrue: [^false].	choice = #yes ifTrue: [self acceptPrerequisites].	^true</body><body package="Browser-BrowserUI" selector="updateContents">updateContents	self resetChanged.	self updatePackageList.	self updatePrerequisitesList</body><body package="Browser-BrowserUI" selector="updatePackageList">updatePackageList	self allPackagesList 		list: (self sortPrerequisites: self packageList) asList</body><body package="Browser-BrowserUI" selector="updatePrerequisitesList">updatePrerequisitesList	self setPrerequisites: self currentPrerequisites</body><body package="Browser-BrowserUI" selector="updateRequest">updateRequest	^super updateRequest and: [isChanged not or: [self okToChangeToolFocus]]</body></methods><methods><class-id>Refactory.Browser.DeploymentPrerequisitesTool</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="isEditing">isEditing	^super isEditing or: [isChanged]</body></methods><methods><class-id>Refactory.Browser.DeploymentPrerequisitesTool</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canAcceptDropFrom:">canAcceptDropFrom: aDragContext 	^aDragContext key = #prerequisites</body><body package="Browser-BrowserUI" selector="doAddDrag:">doAddDrag: aController 	self dragItems: self allPackagesList selections for: aController</body><body package="Browser-BrowserUI" selector="doReorderDrag:">doReorderDrag: aController 	self dragItems: self prerequisitesList selections for: aController</body><body package="Browser-BrowserUI" selector="dragEnter:">dragEnter: aDragContext 	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	aDragContext dropTarget 		clientData: (self initialDropStateFor: #prerequisitesList).	^#dropEffectMove</body><body package="Browser-BrowserUI" selector="dragItems:for:">dragItems: items for: aController 	| data |	data := DragDropData new.	data key: #prerequisites.	data contextWindow: self builder window.	data contextWidget: aController view.	data contextApplication: self.	data clientData: IdentityDictionary new.	data clientData at: #prerequisites put: items.	(DragDropManager withDropSource: DropSource new withData: data) doDragDrop</body><body package="Browser-BrowserUI" selector="dragLeave:">dragLeave: aDragContext 	self restoreListStateFrom: aDragContext dropTarget clientData.	aDragContext dropTarget clientData: nil.	^#dropEffectNone</body><body package="Browser-BrowserUI" selector="dragOver:">dragOver: aDragContext 	^(self canAcceptDropFrom: aDragContext) 		ifTrue: 			[self showDropFeedbackForList: #prerequisitesList in: aDragContext.			#dropEffectMove]		ifFalse: [#dropEffectNone]</body><body package="Browser-BrowserUI" selector="drop:">drop: aDragContext 	| item newItems newPrereqs |	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	item := self dropSelection: aDragContext.	self restoreListStateFrom: aDragContext clientData.	aDragContext clientData: nil.	newPrereqs := aDragContext sourceData clientData at: #prerequisites.	newItems := List withAll: self prerequisitesList list.	newPrereqs do: [:each | newItems remove: each ifAbsent: []].	item isNil 		ifTrue: [newItems addAll: newPrereqs]		ifFalse: 			[newItems addAll: newPrereqs				beforeIndex: (newItems indexOf: item ifAbsent: [newItems size + 1])].	self setPrerequisites: newItems.	self changedPrerequisites.	^#dropEffectMove</body><body package="Browser-BrowserUI" selector="wantToDrag:">wantToDrag: aController	^true</body></methods><methods><class-id>Refactory.Browser.DeploymentPrerequisitesTool</class-id> <category>help</category><body package="Browser-BrowserUI" selector="helpTopic">helpTopic	^'Deployment Prerequisites'</body></methods><methods><class-id>Refactory.Browser.DeploymentPrerequisitesTool class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.DevelopmentPrerequisitesTool</class-id> <category>private</category><body package="Browser-BrowserUI" selector="acceptPrerequisites">acceptPrerequisites	self codeComponent 		developmentPrerequisites: (self prerequisitesList list 				collect: [:each | each developmentPrerequisite]) asArray</body><body package="Browser-BrowserUI" selector="currentPrerequisites">currentPrerequisites	^self codeComponent developmentPrerequisites collect: 			[:each | 			Prerequisite 				name: (each at: 2)				type: each first				version: each last]</body><body package="Browser-BrowserUI" selector="entryPrerequisite">entryPrerequisite	^Prerequisite 		name: self entryPrerequisiteHolder value		type: #any		version: ''</body><body package="Browser-BrowserUI" selector="helpText">helpText	^(#DevelopmentPrereqToolHelp &lt;&lt; #browser &gt;&gt; 'Development prerequisites are used in loading from Store. Each prerequisite is an array with a type (#parcel #package #bundle or #any), a name and a version string. Developement prerequisites are usually supersets of the deployment prerequisities.')</body><body package="Browser-BrowserUI" selector="prerequisiteObjectFor:">prerequisiteObjectFor: codeComponent 	^Prerequisite 		name: codeComponent name		type: (codeComponent isParcel 				ifTrue: [#parcel]				ifFalse: [codeComponent isBundle ifTrue: [#bundle] ifFalse: [#package]])		version: ''</body></methods><methods><class-id>Refactory.Browser.DevelopmentPrerequisitesTool</class-id> <category>aspects</category><body package="Browser-BrowserUI" selector="typeHolder">typeHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^typeHolder isNil ifTrue: [typeHolder := nil asValue] ifFalse: [typeHolder]</body><body package="Browser-BrowserUI" selector="typeList">typeList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^typeList isNil ifTrue: [typeList := List new asValue] ifFalse: [typeList]</body></methods><methods><class-id>Refactory.Browser.DevelopmentPrerequisitesTool</class-id> <category>changing</category><body package="Browser-BrowserUI" selector="updatePrerequisiteInformation">updatePrerequisiteInformation	| prereq |	super updatePrerequisiteInformation.	prereq := self selectedPrerequisite.	prereq isNil ifTrue: [self disable: #type] ifFalse: [self enable: #type]</body></methods><methods><class-id>Refactory.Browser.DevelopmentPrerequisitesTool</class-id> <category>initialize-release</category><body package="Browser-BrowserUI" selector="initialize">initialize	super initialize.	typeHolder := (AspectAdaptor subjectChannel: selectedPrerequisiteHolder) 				forAspect: #type.	self typeList value: #(#any #bundle #package #parcel) asList</body></methods><methods><class-id>Refactory.Browser.DevelopmentPrerequisitesTool</class-id> <category>actions</category><body package="Browser-BrowserUI" selector="copyDeployment">copyDeployment	| codeComponent |	codeComponent := self codeComponent.	codeComponent isNil ifTrue: [^self].	self 		setPrerequisites: (codeComponent deploymentPrerequisites collect: 					[:each | 					Prerequisite 						name: each first						type: #any						version: each last]).	self changedPrerequisites</body></methods><methods><class-id>Refactory.Browser.DevelopmentPrerequisitesTool</class-id> <category>help</category><body package="Browser-BrowserUI" selector="helpTopic">helpTopic	^'Development Prerequisites'</body></methods><methods><class-id>Refactory.Browser.DevelopmentPrerequisitesTool class</class-id> <category>private-interface building</category><body package="Browser-BrowserUI" selector="markedAsSystemClass">markedAsSystemClass	"This class not to be shown when browsing user classes."</body></methods><methods><class-id>Refactory.Browser.ProtocolEnvironment</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="useProtocolNavigator">useProtocolNavigator	^true</body></methods><methods><class-id>Refactory.Browser.HierarchyPundleNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canAcceptDropFrom:">canAcceptDropFrom: aDC 	^#(#category #class #protocol #selector #sharedVariable #sharedVariableProtocol) 		includes: aDC key</body><body package="Browser-BrowserUI" selector="dragOver:">dragOver: aDragContext 	^(self canAcceptDropFrom: aDragContext) 		ifTrue: 			[| bundle |			self showDropFeedbackForList: #objectList in: aDragContext.			bundle := self dropSelection: aDragContext.			(bundle notNil and: [bundle isPackage]) ifFalse: [^#dropEffectNone].			#dropEffectMove]		ifFalse: [#dropEffectNone]</body><body package="Browser-BrowserUI" selector="drop:">drop: aDragContext 	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	^	[| dropPackage |	dropPackage := self dropSelection: aDragContext.	(dropPackage notNil and: [dropPackage isPackage]) 		ifFalse: [^#dropEffectNone].	self moveToPackage: dropPackage using: aDragContext] 			ensure: 				[self restoreListStateFrom: aDragContext clientData.				aDragContext clientData: nil.				navigator refreshLists]</body><body package="Browser-BrowserUI" selector="moveToPackage:using:">moveToPackage: aPackage using: aDragContext 	aDragContext key = #category 		ifTrue: 			[^navigator moveCategories: (self 						dropCategoriesFrom: aDragContext sourceData clientData)				toPackage: aPackage].	aDragContext key = #class 		ifTrue: 			[^navigator 				moveObjectsIn: (self dropStateFrom: aDragContext sourceData clientData)				toPackage: aPackage].	(#(#protocol #sharedVariableProtocol) includes: aDragContext key) 		ifTrue: 			[^navigator moveDefinitions: (self 						dropAllDefinitionsFrom: aDragContext sourceData clientData)				toPackage: aPackage].	(#(#selector #sharedVariable) includes: aDragContext key) 		ifTrue: 			[^navigator moveDefinitions: (self 						dropDefinitionsFrom: aDragContext sourceData clientData)				toPackage: aPackage]</body></methods><methods><class-id>Refactory.Browser.SelectorProtocolNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canAcceptDropFrom:">canAcceptDropFrom: aDC 	^aDC key = #selector</body><body package="Browser-BrowserUI" selector="canDropInProtocol:">canDropInProtocol: aDC 	| aDict |	aDict := aDC sourceData clientData.	^aDC key = #selector and: 			[(self dropProtocolFrom: aDict) ~= (self dropSelection: aDC) 				or: [(self dropClassFrom: aDict) ~= navigator selectedClass]]</body><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator protocol notNil 		ifTrue: [self doDragAndDrop: #protocol for: aController]</body><body package="Browser-BrowserUI" selector="dropUsing:">dropUsing: aDragContext 	| dataClass protocol dataSelectors |	dataSelectors := self 				dropSelectorsFrom: aDragContext sourceData clientData.	dataClass := self dropClassFrom: aDragContext sourceData clientData.	protocol := self dropSelection: aDragContext.	(dataClass isNil | protocol isNil or: [self changeRequest]) 		ifFalse: [^#dropEffectNone].	dataClass == navigator selectedClass 		ifTrue: 			[navigator 				moveMethods: dataSelectors				to: protocol				in: dataClass.			^#dropEffectMove]		ifFalse: 			[navigator 				moveMethods: dataSelectors				to: ('&lt;1s&gt;&gt;&lt;2s&gt;' expandMacrosWith: navigator selectedClass fullName						with: (protocol ifNil: [ClassOrganizer defaultProtocol]))				in: dataClass.			^#dropEffectCopy]</body></methods><methods><class-id>Refactory.Browser.SelectorNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator selector isNil ifTrue: [^self].	self doDragAndDrop: #selector for: aController</body></methods><methods><class-id>Refactory.Browser.ProtocolNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canDropInProtocol:">canDropInProtocol: aDC 	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="dragOver:">dragOver: aDragContext 	^(self canAcceptDropFrom: aDragContext) 		ifTrue: 			[self showDropFeedbackForList: #objectList in: aDragContext.			(self canDropInProtocol: aDragContext) 				ifTrue: 					[(self dropClassFrom: aDragContext sourceData clientData) 						= navigator selectedClass 							ifTrue: [#dropEffectMove]							ifFalse: [#dropEffectCopy]]				ifFalse: [#dropEffectNone]]		ifFalse: [#dropEffectNone]</body><body package="Browser-BrowserUI" selector="drop:">drop: aDragContext 	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	^[self dropUsing: aDragContext] ensure: 			[self restoreListStateFrom: aDragContext clientData.			aDragContext clientData: nil.			navigator refreshLists]</body><body package="Browser-BrowserUI" selector="dropUsing:">dropUsing: aDragContext 	^self subclassResponsibility</body><body package="Browser-BrowserUI" selector="wantToDrag:">wantToDrag: aController 	^self codeToolHasChanges not</body></methods><methods><class-id>Refactory.Browser.SharedVariableNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator sharedVariableName isNil ifTrue: [^self].	self doDragAndDrop: #sharedVariable for: aController</body></methods><methods><class-id>Refactory.Browser.RBActionDispatcher</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="activeTool">activeTool	^self codeTool activeTool</body><body package="Browser-BrowserUI" selector="browser">browser	^self objects at: #browser ifAbsent: [nil]</body><body package="Browser-BrowserUI" selector="browser:">browser: aRefactoringBrowser 	self objects at: #browser put: aRefactoringBrowser</body><body package="Browser-BrowserUI" selector="codeModel">codeModel	^self browser currentTool</body><body package="Browser-BrowserUI" selector="codeTool">codeTool	^self codeModel tool</body></methods><methods><class-id>Kernel.Parcel</class-id> <category>Refactoring Browser</category><body package="Browser-BrowserUI" selector="allClassesAndNameSpaces">allClassesAndNameSpaces	| objects |	objects := Set new.	objects		addAll: self extendedClasses;		addAll: definedBindings keys;		addAll: self definedClasses;		addAll: self definedNameSpaces.	^objects</body><body package="Browser-BrowserUI" selector="textForItem">textForItem	^self printString</body></methods><methods><class-id>Refactory.Browser.ParcelNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canAcceptDropFrom:">canAcceptDropFrom: aDC 	^#(#category #class #protocol #selector #sharedVariable #sharedVariableProtocol) 		includes: aDC key</body><body package="Browser-BrowserUI" selector="dragOver:">dragOver: aDragContext 	^(self canAcceptDropFrom: aDragContext) 		ifTrue: 			[self showDropFeedbackForList: #objectList in: aDragContext.			#dropEffectMove]		ifFalse: [#dropEffectNone]</body><body package="Browser-BrowserUI" selector="drop:">drop: aDragContext 	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	^	[| dropParcel |	dropParcel := self dropSelection: aDragContext.	self moveToParcel: dropParcel using: aDragContext] 			ensure: 				[self restoreListStateFrom: aDragContext clientData.				aDragContext clientData: nil.				navigator refreshLists]</body><body package="Browser-BrowserUI" selector="moveToParcel:using:">moveToParcel: aParcel using: aDragContext 	aDragContext key = #category 		ifTrue: 			[^navigator moveCategories: (self 						dropCategoriesFrom: aDragContext sourceData clientData)				toParcel: aParcel].	aDragContext key = #class 		ifTrue: 			[^navigator 				moveObjectsIn: (self dropStateFrom: aDragContext sourceData clientData)				toParcel: aParcel].	(#(#protocol #sharedVariableProtocol) includes: aDragContext key) 		ifTrue: 			[^navigator moveDefinitions: (self 						dropAllDefinitionsFrom: aDragContext sourceData clientData)				toParcel: aParcel].	(#(#selector #sharedVariable) includes: aDragContext key) 		ifTrue: 			[^navigator moveDefinitions: (self 						dropDefinitionsFrom: aDragContext sourceData clientData)				toParcel: aParcel]</body></methods><methods><class-id>Refactory.Browser.ParcelEnvironment</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="useParcelNavigator">useParcelNavigator	^true</body></methods><methods><class-id>Refactory.Browser.ProtocolItemNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="wantToDrag:">wantToDrag: aController 	^self codeToolHasChanges not</body></methods><methods><class-id>Refactory.Browser.BrowserEnvironment</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="navigatorClass">navigatorClass	^BrowserNavigator</body><body package="Browser-BrowserUI" selector="openEditor">openEditor	^RefactoringBrowser openOnEnvironment: self</body></methods><methods><class-id>Refactory.Browser.BrowserEnvironment</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="useCategoryNavigator">useCategoryNavigator	^false</body><body package="Browser-BrowserUI" selector="useParcelNavigator">useParcelNavigator	^false</body><body package="Browser-BrowserUI" selector="useProtocolNavigator">useProtocolNavigator	^false</body><body package="Browser-BrowserUI" selector="usePundleNavigator">usePundleNavigator	^false</body><body package="Browser-BrowserUI" selector="useSingleClassNavigator">useSingleClassNavigator	^false</body></methods><methods><class-id>Refactory.Browser.PundleEnvironment</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="usePundleNavigator">usePundleNavigator	^true</body></methods><methods><class-id>Refactory.Browser.CategoryNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canAcceptDropFrom:">canAcceptDropFrom: aDC 	^#(#class) includes: aDC key</body><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator category isNil ifTrue: [^self].	self doDragAndDrop: #category for: aController</body><body package="Browser-BrowserUI" selector="dragOver:">dragOver: aDragContext 	^(self canAcceptDropFrom: aDragContext) 		ifTrue: 			[self showDropFeedbackForList: #objectList in: aDragContext.			(aDragContext sourceData clientData at: #category				ifAbsent: [self dropSelection: aDragContext]) 					= (self dropSelection: aDragContext) 					ifTrue: [#dropEffectNone]					ifFalse: [#dropEffectMove]]		ifFalse: [#dropEffectNone]</body><body package="Browser-BrowserUI" selector="drop:">drop: aDragContext 	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	^	[| dropCategory |	dropCategory := self dropSelection: aDragContext.	dropCategory == (aDragContext sourceData clientData at: #category				ifAbsent: [dropCategory]) 		ifTrue: [#dropEffectNone]		ifFalse: 			[self moveClassTo: dropCategory using: aDragContext sourceData clientData]] 			ensure: 				[self restoreListStateFrom: aDragContext clientData.				aDragContext clientData: nil.				navigator refreshLists]</body><body package="Browser-BrowserUI" selector="moveClassTo:using:">moveClassTo: dropCategory using: aDictionary 	| classNames |	classNames := self dropClassNamesFrom: aDictionary.	classNames isEmpty ifTrue: [^#dropEffectNone].	navigator moveNames: classNames to: dropCategory.	^#dropEffectMove</body><body package="Browser-BrowserUI" selector="wantToDrag:">wantToDrag: aController 	^self codeToolHasChanges not</body></methods><methods><class-id>Refactory.Browser.ClassEnvironment</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="useSingleClassNavigator">useSingleClassNavigator	| allClasses |	(classes size &gt; 1 or: [metaClasses size &gt; 1]) ifTrue: [^false].	allClasses := Set withAll: classes.	allClasses addAll: metaClasses.	^allClasses size = 1</body></methods><methods><class-id>Refactory.Browser.MethodNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator selector isNil ifTrue: [^self].	self doDragAndDrop: #selector for: aController</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canAcceptDropFrom:">canAcceptDropFrom: aDC 	^#(#protocol #selector) includes: aDC key</body><body package="Browser-BrowserUI" selector="canExtract:">canExtract: aDragContext 	| dropClassName dropClass aDict |	aDict := aDragContext sourceData clientData.	dropClassName := self dropSelection: aDragContext.	dropClass := dropClassName isNil 				ifTrue: [nil]				ifFalse: [self classForName: dropClassName].	^dropClass notNil and: 			[dropClass fullRootName ~~ (self dropClassNameFrom: aDict) 				or: [(self dropMetaFrom: aDict) ~~ navigator isMeta]]</body><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator objectName isNil ifTrue: [^self].	navigator classOrNameSpace isNil 		ifTrue: 			[^self warn: ((#Object1sNoLongerExists &lt;&lt; #browser &gt;&gt; 'Object &lt;1s&gt; no longer exists.') 						expandMacrosWith: navigator objectName)].	self doDragAndDrop: #class for: aController</body><body package="Browser-BrowserUI" selector="dragEnter:">dragEnter: aDragContext 	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	aDragContext dropTarget 		clientData: (self initialDropStateFor: #objectList).	^#dropEffectCopy</body><body package="Browser-BrowserUI" selector="dragOver:">dragOver: aDragContext 	^(self canAcceptDropFrom: aDragContext) 		ifTrue: 			[self showDropFeedbackForList: #objectList in: aDragContext.			(self canExtract: aDragContext) 				ifTrue: [^#dropEffectCopy]				ifFalse: [^#dropEffectNone]]		ifFalse: [#dropEffectNone]</body><body package="Browser-BrowserUI" selector="drop:">drop: aDragContext 	(self canAcceptDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	^	[| dropClassName |	dropClassName := self dropSelection: aDragContext.	(self canExtract: aDragContext) 		ifTrue: 			[aDragContext key == #selector 				ifTrue: 					[self dropSelectorIn: dropClassName						using: aDragContext sourceData clientData]				ifFalse: 					[self dropProtocolIn: dropClassName						using: aDragContext sourceData clientData]]		ifFalse: [#dropEffectNone]] 			ensure: 				[self restoreListStateFrom: aDragContext clientData.				aDragContext clientData: nil.				navigator refreshLists]</body><body package="Browser-BrowserUI" selector="dropProtocolIn:using:">dropProtocolIn: dropClassName using: aDictionary 	| protocols fromClass meta class classNames |	class := self classForName: dropClassName.	protocols := self dropProtocolsFrom: aDictionary.	classNames := self dropClassNamesFrom: aDictionary.	(protocols isEmpty or: [classNames size ~~ 1]) ifTrue: [^#dropEffectNone].	fromClass := self classForName: classNames first.	meta := self dropMetaFrom: aDictionary.	class isNil ifTrue: [^#dropEffectNone].	meta ifTrue: [fromClass := fromClass class].	navigator isMeta ifTrue: [class := class class].	fromClass == class ifTrue: [^#dropEffectNone].	navigator 		copyProtocols: protocols		from: fromClass		to: class.	^#dropEffectCopy</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>private-overrides</category><body package="Browser-BrowserUI" selector="dropSelection:">dropSelection: aDragContext	^(super dropSelection: aDragContext) ifNotNil: [:item | item fullName]</body></methods><methods><class-id>Refactory.Browser.ClassNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="dropSelectorIn:using:">dropSelectorIn: dropClassName using: aDictionary 	| selectors fromClass class |	class := self classForName: dropClassName.	selectors := self dropSelectorsFrom: aDictionary.	fromClass := self dropClassFrom: aDictionary.	selectors isEmpty ifTrue: [^#dropEffectNone].	fromClass = class ifTrue: [^#dropEffectNone].	fromClass isNil | class isNil ifTrue: [^#dropEffectNone].	navigator isMeta ifTrue: [class := class class].	navigator 		copySelectors: fromClass		from: selectors		to: class.	^#dropEffectCopy</body><body package="Browser-BrowserUI" selector="wantToDrag:">wantToDrag: aController 	^self codeToolHasChanges not</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel class</class-id> <category>compling</category><body package="Browser-BrowserUI" selector="instanceMethodsChanged">instanceMethodsChanged	ScheduledControllers scheduledControllers do: 			[:each | 			(each model isKindOf: RefactoringBrowser) 				ifTrue: [each model rebuildMenus]]</body></methods><methods><class-id>Refactory.Browser.CategoryEnvironment</class-id> <category>testing</category><body package="Browser-BrowserUI" selector="useCategoryNavigator">useCategoryNavigator	^true</body></methods><methods><class-id>Refactory.Browser.VariableEnvironment</class-id> <category>accessing</category><body package="Browser-BrowserUI" selector="navigatorClass">navigatorClass	^(self numberVariables &gt; 1 or: [self numberSelectors = 0]) 		ifTrue: [VariableNavigator]		ifFalse: [super navigatorClass]</body></methods><methods><class-id>Refactory.Browser.SharedVariableProtocolNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="canAcceptDropFrom:">canAcceptDropFrom: aDC 	^aDC key = #sharedVariable</body><body package="Browser-BrowserUI" selector="canDropInProtocol:">canDropInProtocol: aDC 	| aDict |	aDict := aDC sourceData clientData.	^aDC key = #sharedVariable and: 			[(self dropProtocolFrom: aDict) ~= (self dropSelection: aDC) 				and: [(self dropClassOrNameSpaceFrom: aDict) = navigator classOrNameSpace]]</body><body package="Browser-BrowserUI" selector="doDrag:">doDrag: aController 	navigator protocol notNil 		ifTrue: [self doDragAndDrop: #sharedVariableProtocol for: aController]</body><body package="Browser-BrowserUI" selector="dropUsing:">dropUsing: aDragContext 	| dataClass protocol variables |	variables := self 				dropSharedVariableNamesFrom: aDragContext sourceData clientData.	dataClass := navigator classOrNameSpace.	protocol := self dropSelection: aDragContext.	(dataClass isNil | protocol isNil or: [self changeRequest]) 		ifFalse: [^#dropEffectNone].	navigator 		moveSharedVariableNames: variables		to: protocol		in: dataClass.	^#dropEffectMove</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart</class-id> <category>drag and drop</category><body package="Browser-BrowserUI" selector="dropSelection:">dropSelection: aDragContext	^(super dropSelection: aDragContext) ifNotNil: [:item | item programItem]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="classWindowSpec">classWindowSpec	"UIPainter new openOnClass: self andSelector: #classWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1440 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #selectorList 					#flags: 0 					#majorKey: #{Refactory.Browser.NameSpaceItemTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #NameSpaceItemTabNavigatorPart ) ) ) )</body><body package="Browser-BrowserUI" selector="codeComponentWindowSpec">codeComponentWindowSpec	"UIPainter new openOnClass: self andSelector: #codeComponentWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1440 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.333333 0 0 2 0.333333 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'classList' 					#belowWidgets: 'selectorList' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.333333 0 1 ) 					#name: #classList 					#flags: 0 					#majorKey: #{Refactory.Browser.ClassNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #ClassNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.333333 0 0 0 1 0 1 ) 					#name: #selectorList 					#flags: 0 					#majorKey: #{Refactory.Browser.NameSpaceItemTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #NameSpaceItemTabNavigatorPart ) ) ) )</body><body package="Browser-BrowserUI" selector="methodWindowSpec">methodWindowSpec	"UIPainter new openOnClass: self andSelector: #methodWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1440 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #methodPart 					#flags: 0 					#majorKey: #{Refactory.Browser.ClassAndMethodTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #ClassAndMethodTabNavigatorPart ) ) ) )</body><body package="Browser-BrowserUI" selector="protocolWindowSpec">protocolWindowSpec	"UIPainter new openOnClass: self andSelector: #protocolWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1440 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #methodPart 					#flags: 0 					#majorKey: #{Refactory.Browser.MethodNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #MethodNavigatorPart ) ) ) )</body><body package="Browser-BrowserUI" selector="systemWindowSpec">systemWindowSpec	"UIPainter new openOnClass: self andSelector: #systemWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1440 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'classList' 					#belowWidgets: 'selectorList' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.5 0 1 ) 					#name: #classList 					#flags: 0 					#majorKey: #{Refactory.Browser.CodeComponentTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #CodeComponentTabNavigatorPart ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #selectorList 					#flags: 0 					#majorKey: #{Refactory.Browser.NameSpaceItemTabNavigatorPart} 					#minorKey: #windowSpec 					#clientKey: #NameSpaceItemTabNavigatorPart ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="categoryMenu">categoryMenu	"MenuEditor new openOnClass: self andSelector: #categoryMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Ne_wDot #defaultString: 'Ne&amp;w...' #catalogID: #browser) 				#nameKey: #'Add Category' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Move #defaultString: '&amp;Move' #catalogID: #browser) 				#nameKey: #Move 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #to_ParcelDots #defaultString: 'to &amp;Parcel...' #catalogID: #browser) 							#nameKey: #'Move Category to Parcel' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #toPackageDots #defaultString: 'to Package...' #catalogID: #browser) 							#nameKey: #'Move Category to Package' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Re_nameDots #defaultString: 'Re&amp;name...' #catalogID: #browser) 				#nameKey: #'Rename Category' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_RemoveDots #defaultString: '&amp;Remove...' #catalogID: #browser) 				#nameKey: #'Remove Category' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Refresh #defaultString: '&amp;Refresh' #catalogID: #browser) 				#nameKey: #'Update Navigator' 				#value: 				#action: 				#shortcutKeyCharacter: #F5 				#shortcutModifiers: 0 ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #FindNameSpaceDots #defaultString: 'Find Name Space...' #catalogID: #browser) 				#nameKey: #'Find Name Space' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_FindClassDots #defaultString: '&amp;Find Class...' #catalogID: #browser) 				#nameKey: #'Find Class' 				#value: 				#action: 				#shortcutKeyCharacter: $f 				#shortcutModifiers: 3 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #findClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #FindSharedVariableDots #defaultString: 'Find Shared Variable...' #catalogID: #browser) 				#nameKey: #'Find Shared Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Spawn #defaultString: 'Spawn' #catalogID: #browser) 				#nameKey: #'Spawn Category' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #File_OutAsDots #defaultString: 'File &amp;Out As...' #catalogID: #browser) 				#nameKey: #'File Out Category' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Hardcopy #defaultString: 'Hardcopy' #catalogID: #browser) 				#nameKey: #'Hardcopy Category' 				#value: 				#action: ) ) #(4 1 3 3 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="classMenu">classMenu	"Tools.MenuEditor new openOnClass: self andSelector: #classMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #New_ClassDots 					#defaultString: 'New &amp;Class...' 					#catalogID: #browser ) 				#nameKey: #'New Class' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #newClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #New 					#defaultString: 'New' 					#catalogID: #browser ) 				#nameKey: #New 				#value: #rbItem 				#enablementSelector: #isGlobalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ClassExtensionDots 								#defaultString: 'Class Extension...' 								#catalogID: #browser ) 							#nameKey: #'Store New Class Extension' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #NameSpaceDots 								#defaultString: 'Name Space...' 								#catalogID: #browser ) 							#nameKey: #'New Name Space' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #SharedVariableDots 								#defaultString: 'Shared Variable...' 								#catalogID: #browser ) 							#nameKey: #'New Shared Variable' 							#value: 							#action: ) ) #(1 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Re_ferences 					#defaultString: 'Re&amp;ferences' 					#catalogID: #browser ) 				#nameKey: #'Global Class References' 				#value: 				#action: 				#enablementSelector: #isGlobalEnvironment 				#shortcutKeyCharacter: #F8 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #classReferences ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Re_ferences 					#defaultString: 'Re&amp;ferences' 					#catalogID: #browser ) 				#nameKey: #References 				#value: #rbItem 				#enablementSelector: #isLocalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Global 								#defaultString: '&amp;Global' 								#catalogID: #browser ) 							#nameKey: #'Global Class References' 							#value: 							#action: 							#shortcutKeyCharacter: #F8 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #classReferences ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Local 								#defaultString: '&amp;Local' 								#catalogID: #browser ) 							#nameKey: #'Local Class References' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Initialize 					#defaultString: 'Initialize' 					#catalogID: #browser ) 				#nameKey: #'Reinitialize Bindings' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #E_xtendInPackageDots 					#defaultString: 'E&amp;xtend in Package...' 					#catalogID: #browser ) 				#nameKey: #'Store Extend Class in Package' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Re_nameDots 					#defaultString: 'Re&amp;name...' 					#catalogID: #browser ) 				#nameKey: #'Rename Object' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_RemoveDots 					#defaultString: '&amp;Remove...' 					#catalogID: #browser ) 				#nameKey: #'Remove Object' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_SafeRemoveDots 					#defaultString: '&amp;Safe Remove...' 					#catalogID: #browser ) 				#nameKey: #'Safe Remove Object' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Move 					#defaultString: 'Move' 					#catalogID: #browser ) 				#nameKey: #Move 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #toCategoryDots 								#defaultString: 'to Category...' 								#catalogID: #browser ) 							#nameKey: #'Move Object to Category' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #toNameSpaceDots 								#defaultString: 'to Name Space...' 								#catalogID: #browser ) 							#nameKey: #'Move Object to Name Space' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #DefinitionToParcelDots 								#defaultString: 'Definition to Parcel...' 								#catalogID: #browser ) 							#nameKey: #'Move Object Definition to Parcel' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #SelectedToParcelDots 								#defaultString: 'Selected to Parcel...' 								#catalogID: #browser ) 							#nameKey: #'Move Object to Parcel' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AllToParcelDots 								#defaultString: 'All to Parcel...' 								#catalogID: #browser ) 							#nameKey: #'Move Complete Object to Parcel' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #DefinitionToPackage 								#defaultString: 'Definition to Package' 								#catalogID: #browser ) 							#nameKey: #'Move Object Definition to Package' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #SelectedToPackageDots 								#defaultString: 'Selected to Package...' 								#catalogID: #browser ) 							#nameKey: #'Move Object to Package' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #AllToPackageDots 								#defaultString: 'All to Package...' 								#catalogID: #browser ) 							#nameKey: #'Move Complete Object to Package' 							#value: 							#action: ) ) #(2 3 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Override 					#defaultString: 'Override' 					#catalogID: #browser ) 				#nameKey: #Override 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #inParcelDots 								#defaultString: 'in Parcel...' 								#catalogID: #browser ) 							#nameKey: #'Parcel Override Object' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #inPackageDots 								#defaultString: 'in Package...' 								#catalogID: #browser ) 							#nameKey: #'Store Override Object' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RestoreOverriddenDots 								#defaultString: 'Restore Overridden...' 								#catalogID: #browser ) 							#nameKey: #'Restore Override Object' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RemoveOverriddenDots 								#defaultString: 'Remove Overridden...' 								#catalogID: #browser ) 							#nameKey: #'Remove Override Object' 							#value: 							#action: ) ) #(2 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Refactor 					#defaultString: 'Refactor' 					#catalogID: #browser ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Create_SubclassDots 								#defaultString: 'Create &amp;Subclass...' 								#catalogID: #browser ) 							#nameKey: #'Create Subclass' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ConvertToSiblingDots 								#defaultString: '&amp;Convert to Sibling...' 								#catalogID: #browser ) 							#nameKey: #'Convert to Sibling' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Store 					#defaultString: 'Store' 					#catalogID: #browser ) 				#nameKey: #Store 				#value: #rbItem 				#enablementSelector: #isStoreLoaded 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BrowseVersions 								#defaultString: 'Browse Versions' 								#catalogID: #browser ) 							#nameKey: #'Store Browse Class Versions' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BrowseRemovedMethods 								#defaultString: 'Browse Removed Methods' 								#catalogID: #browser ) 							#nameKey: #'Store Browse Removed Methods' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CompareWithDots 								#defaultString: 'Compare With...' 								#catalogID: #browser ) 							#nameKey: #'Store Compare Class Version' 							#value: 							#action: ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Query 					#defaultString: '&amp;Query' 					#catalogID: #browser ) 				#nameKey: #Other 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_InspectAllInstances 								#defaultString: '&amp;Inspect All Instances' 								#catalogID: #browser ) 							#nameKey: #'Inspect All Instances' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BrowseMethodsWithSourceMatchingDots 								#defaultString: 'Browse Methods with Source Matching...' 								#catalogID: #browser ) 							#nameKey: #'Browse Class Methods Matching String' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Find_ReferencePathToAnInstanceDots 								#defaultString: 'Find &amp;Reference Path to an Instance...' 								#catalogID: #browser ) 							#nameKey: #'Find Reference Path to an Instance' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #FindAllReferencePath_sToAnInstanceDots 								#defaultString: 'Find All Reference Path&amp;s to an Instance...' 								#catalogID: #browser ) 							#nameKey: #'Find Reference Paths to All Instances' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Check_ProtocolsDots 								#defaultString: 'Check &amp;Protocols...' 								#catalogID: #browser ) 							#nameKey: #'Check Protocols' 							#value: 							#action: ) ) #(5 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_InstanceVariables 					#defaultString: '&amp;Instance Variables' 					#catalogID: #browser ) 				#nameKey: #'Instance Variables' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ReferencesDots 								#defaultString: '&amp;References...' 								#catalogID: #browser ) 							#nameKey: #'Global Instance Variable References' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment 							#shortcutKeyCharacter: #F5 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_References 								#defaultString: '&amp;References' 								#catalogID: #browser ) 							#nameKey: #References 							#value: #rbItem 							#enablementSelector: #isLocalEnvironment 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_GlobalDots 											#defaultString: '&amp;Global...' 											#catalogID: #browser ) 										#nameKey: #'Global Instance Variable References' 										#value: 										#action: 										#shortcutKeyCharacter: #F5 										#shortcutModifiers: 2 ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_LocalDots 											#defaultString: '&amp;Local...' 											#catalogID: #browser ) 										#nameKey: #'Local Instance Variable References' 										#value: 										#action: ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ReadersDots 								#defaultString: '&amp;Readers...' 								#catalogID: #browser ) 							#nameKey: #'Global Instance Variable Readers' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Readers 								#defaultString: '&amp;Readers' 								#catalogID: #browser ) 							#nameKey: #Readers 							#value: #rbItem 							#enablementSelector: #isLocalEnvironment 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_GlobalDots 											#defaultString: '&amp;Global...' 											#catalogID: #browser ) 										#nameKey: #'Global Instance Variable Readers' 										#value: 										#action: ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_LocalDots 											#defaultString: '&amp;Local...' 											#catalogID: #browser ) 										#nameKey: #'Local Instance Variable Readers' 										#value: 										#action: ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_WritersDots 								#defaultString: '&amp;Writers...' 								#catalogID: #browser ) 							#nameKey: #'Global Instance Variable Writers' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Writers 								#defaultString: '&amp;Writers' 								#catalogID: #browser ) 							#nameKey: #Writers 							#value: #rbItem 							#enablementSelector: #isLocalEnvironment 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_GlobalDots 											#defaultString: '&amp;Global...' 											#catalogID: #browser ) 										#nameKey: #'Global Instance Variable Writers' 										#value: 										#action: ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_LocalDots 											#defaultString: '&amp;Local...' 											#catalogID: #browser ) 										#nameKey: #'Local Instance Variable Writers' 										#value: 										#action: ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_AddDots 								#defaultString: '&amp;Add...' 								#catalogID: #browser ) 							#nameKey: #'Add Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Re_nameDots 								#defaultString: 'Re&amp;name...' 								#catalogID: #browser ) 							#nameKey: #'Rename Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_RemoveDots 								#defaultString: '&amp;Remove...' 								#catalogID: #browser ) 							#nameKey: #'Remove Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_UpDots 								#defaultString: 'Push &amp;Up...' 								#catalogID: #browser ) 							#nameKey: #'Push Up Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_DownDots 								#defaultString: 'Push &amp;Down...' 								#catalogID: #browser ) 							#nameKey: #'Push Down Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_CreateAccessorsDots 								#defaultString: '&amp;Create Accessors...' 								#catalogID: #browser ) 							#nameKey: #'Create Instance Variable Accessors' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #A_bstractDots 								#defaultString: 'A&amp;bstract...' 								#catalogID: #browser ) 							#nameKey: #'Abstract Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ProtectDots 								#defaultString: '&amp;Protect...' 								#catalogID: #browser ) 							#nameKey: #'Protect Instance Variable' 							#value: 							#action: ) ) #(6 3 2 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ClassInstanceVariables 					#defaultString: 'Class Instance Variables' 					#catalogID: #browser ) 				#nameKey: #'Class Instance Variables' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ReferencesDots 								#defaultString: '&amp;References...' 								#catalogID: #browser ) 							#nameKey: #'Global Class Instance Variable References' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_References 								#defaultString: '&amp;References' 								#catalogID: #browser ) 							#nameKey: #References 							#value: #rbItem 							#enablementSelector: #isLocalEnvironment 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_GlobalDots 											#defaultString: '&amp;Global...' 											#catalogID: #browser ) 										#nameKey: #'Global Class Instance Variable References' 										#value: 										#action: ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_LocalDots 											#defaultString: '&amp;Local...' 											#catalogID: #browser ) 										#nameKey: #'Local Class Instance Variable References' 										#value: 										#action: ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ReadersDots 								#defaultString: '&amp;Readers...' 								#catalogID: #browser ) 							#nameKey: #'Global Class Instance Variable Readers' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Readers 								#defaultString: '&amp;Readers' 								#catalogID: #browser ) 							#nameKey: #Readers 							#value: #rbItem 							#enablementSelector: #isLocalEnvironment 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_GlobalDots 											#defaultString: '&amp;Global...' 											#catalogID: #browser ) 										#nameKey: #'Global Class Instance Variable Readers' 										#value: 										#action: ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_LocalDots 											#defaultString: '&amp;Local...' 											#catalogID: #browser ) 										#nameKey: #'Local Class Instance Variable Readers' 										#value: 										#action: ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_WritersDots 								#defaultString: '&amp;Writers...' 								#catalogID: #browser ) 							#nameKey: #'Global Class Instance Variable Writers' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Writers 								#defaultString: '&amp;Writers' 								#catalogID: #browser ) 							#nameKey: #Writers 							#value: #rbItem 							#enablementSelector: #isLocalEnvironment 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_GlobalDots 											#defaultString: '&amp;Global...' 											#catalogID: #browser ) 										#nameKey: #'Global Class Instance Variable Writers' 										#value: 										#action: ) 									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #_LocalDots 											#defaultString: '&amp;Local...' 											#catalogID: #browser ) 										#nameKey: #'Local Class Instance Variable Writers' 										#value: 										#action: ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_AddDots 								#defaultString: '&amp;Add...' 								#catalogID: #browser ) 							#nameKey: #'Add Class Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Re_nameDots 								#defaultString: 'Re&amp;name...' 								#catalogID: #browser ) 							#nameKey: #'Rename Class Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_RemoveDots 								#defaultString: '&amp;Remove...' 								#catalogID: #browser ) 							#nameKey: #'Remove Class Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_UpDots 								#defaultString: 'Push &amp;Up...' 								#catalogID: #browser ) 							#nameKey: #'Push Up Class Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_DownDots 								#defaultString: 'Push &amp;Down...' 								#catalogID: #browser ) 							#nameKey: #'Push Down Class Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_CreateAccessorsDots 								#defaultString: '&amp;Create Accessors...' 								#catalogID: #browser ) 							#nameKey: #'Create Class Instance Variable Accessors' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #A_bstractDots 								#defaultString: 'A&amp;bstract...' 								#catalogID: #browser ) 							#nameKey: #'Abstract Class Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ProtectDots 								#defaultString: '&amp;Protect...' 								#catalogID: #browser ) 							#nameKey: #'Protect Class Instance Variable' 							#value: 							#action: ) ) #(6 3 2 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Spawn 					#defaultString: 'Spawn' 					#catalogID: #browser ) 				#nameKey: #'Spawn Class' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Spawn_Hierarchy 					#defaultString: 'Spawn &amp;Hierarchy' 					#catalogID: #browser ) 				#nameKey: #'Spawn Class Hierarchy' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FileOutAsDots 					#defaultString: 'File Out As...' 					#catalogID: #browser ) 				#nameKey: #'File Out Global' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Hardcopy 					#defaultString: 'Hardcopy' 					#catalogID: #browser ) 				#nameKey: #'Hardcopy Class' 				#value: 				#action: ) ) #(2 2 5 3 2 2 4 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="instanceVariableMenu">instanceVariableMenu	"Tools.MenuEditor new openOnClass: self andSelector: #instanceVariableMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_References 					#defaultString: '&amp;References' 					#catalogID: #browser ) 				#nameKey: #'Global Instance Variable References' 				#value: 				#action: 				#enablementSelector: #isGlobalEnvironment 				#shortcutKeyCharacter: #F5 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_References 					#defaultString: '&amp;References' 					#catalogID: #browser ) 				#nameKey: #References 				#value: #rbItem 				#enablementSelector: #isLocalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Global 								#defaultString: '&amp;Global' 								#catalogID: #browser ) 							#nameKey: #'Global Instance Variable References' 							#value: 							#action: 							#shortcutKeyCharacter: #F5 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Local 								#defaultString: '&amp;Local' 								#catalogID: #browser ) 							#nameKey: #'Local Instance Variable References' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Readers 					#defaultString: '&amp;Readers' 					#catalogID: #browser ) 				#nameKey: #'Global Instance Variable Readers' 				#value: 				#action: 				#enablementSelector: #isGlobalEnvironment ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Readers 					#defaultString: '&amp;Readers' 					#catalogID: #browser ) 				#nameKey: #Readers 				#value: #rbItem 				#enablementSelector: #isLocalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Global 								#defaultString: '&amp;Global' 								#catalogID: #browser ) 							#nameKey: #'Global Instance Variable Readers' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Local 								#defaultString: '&amp;Local' 								#catalogID: #browser ) 							#nameKey: #'Local Instance Variable Readers' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Writers 					#defaultString: '&amp;Writers' 					#catalogID: #browser ) 				#nameKey: #'Global Instance Variable Writers' 				#value: 				#action: 				#enablementSelector: #isGlobalEnvironment ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Writers 					#defaultString: '&amp;Writers' 					#catalogID: #browser ) 				#nameKey: #Writers 				#value: #rbItem 				#enablementSelector: #isLocalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Global 								#defaultString: '&amp;Global' 								#catalogID: #browser ) 							#nameKey: #'Global Instance Variable Writers' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Local 								#defaultString: '&amp;Local' 								#catalogID: #browser ) 							#nameKey: #'Local Instance Variable Writers' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_AddDots 					#defaultString: '&amp;Add...' 					#catalogID: #browser ) 				#nameKey: #'Add Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Re_nameDots 					#defaultString: 'Re&amp;name...' 					#catalogID: #browser ) 				#nameKey: #'Rename Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_RemoveDots 					#defaultString: '&amp;Remove...' 					#catalogID: #browser ) 				#nameKey: #'Remove Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Push_UpDots 					#defaultString: 'Push &amp;Up...' 					#catalogID: #browser ) 				#nameKey: #'Push Up Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Push_DownDots 					#defaultString: 'Push &amp;Down...' 					#catalogID: #browser ) 				#nameKey: #'Push Down Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_CreateAccessorsDots 					#defaultString: '&amp;Create Accessors...' 					#catalogID: #browser ) 				#nameKey: #'Create Instance Variable Accessors' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #A_bstractDots 					#defaultString: 'A&amp;bstract...' 					#catalogID: #browser ) 				#nameKey: #'Abstract Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ProtectDots 					#defaultString: '&amp;Protect...' 					#catalogID: #browser ) 				#nameKey: #'Protect Instance Variable' 				#value: 				#action: ) ) #(6 3 2 3 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="parcelMenu">parcelMenu	"MenuEditor new openOnClass: self andSelector: #parcelMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_NewDots #defaultString: '&amp;New...' #catalogID: #browser) 				#nameKey: #'Parcel Create' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_LoadDots #defaultString: '&amp;Load...' #catalogID: #browser) 				#nameKey: #'Parcel Load' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_SaveDots #defaultString: '&amp;Save...' #catalogID: #browser) 				#nameKey: #'Parcel Save' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Re_nameDots #defaultString: 'Re&amp;name...' #catalogID: #browser) 				#nameKey: #'Parcel Rename' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #UnloadDots #defaultString: 'Unload...' #catalogID: #browser) 				#nameKey: #'Parcel Unload' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_RemoveDots #defaultString: '&amp;Remove...' #catalogID: #browser) 				#nameKey: #'Parcel Remove' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #DiscardDots #defaultString: 'Discard...' #catalogID: #browser) 				#nameKey: #'Parcel Discard' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #EmptyDots #defaultString: 'Empty...' #catalogID: #browser) 				#nameKey: #'Parcel Empty' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Build #defaultString: 'Build' #catalogID: #browser) 				#nameKey: #Build 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #Add_FileInDots #defaultString: 'Add &amp;File-In...' #catalogID: #browser) 							#nameKey: #'Parcel Add File-in' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #Add_Changes #defaultString: 'Add &amp;Changes' #catalogID: #browser) 							#nameKey: #'Parcel Add Changes' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #_RemoveChanges #defaultString: '&amp;Remove Changes' #catalogID: #browser) 							#nameKey: #'Parcel Remove Changes' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #Add_toChanges #defaultString: 'Add &amp;to Changes' #catalogID: #browser) 							#nameKey: #'Parcel Add to Changes' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #Remove_fromChanges #defaultString: 'Remove &amp;from Changes' #catalogID: #browser) 							#nameKey: #'Parcel Remove from Changes' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #MakeRemoveScriptDots #defaultString: 'Make Remove Script...' #catalogID: #browser) 							#nameKey: #'Parcel Make Remove Script' 							#value: 							#action: ) ) #(3 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Browse #defaultString: 'Browse' #catalogID: #browser) 				#nameKey: #Browse 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #UnparceledMethodsUsedExclusively #defaultString: 'Unparceled Methods Used Exclusively' #catalogID: #browser) 							#nameKey: #'Parcel Browse Exclusive Method Imports' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #UnparceledMethodsInDefinedClasses #defaultString: 'Unparceled Methods in Defined Classes' #catalogID: #browser) 							#nameKey: #'Parcel Browse Unparceled Methods on Defined Classes' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #ExtensionMethods #defaultString: 'Extension Methods' #catalogID: #browser) 							#nameKey: #'Parcel Browse Extension Methods' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #OverridesOfOthers #defaultString: 'Overrides of Others' #catalogID: #browser) 							#nameKey: #'Browse Overrides' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #OverriddenByOthers #defaultString: 'Overridden by Others' #catalogID: #browser) 							#nameKey: #'Browse Overridden' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #ExtensionsOfDefinedClasses #defaultString: 'Extensions of Defined Classes' #catalogID: #browser) 							#nameKey: #'Parcel Browse Extensions of Defined Classes' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #ReferencesToDefinedClasses #defaultString: 'References to Defined Classes' #catalogID: #browser) 							#nameKey: #'Parcel Browse References to Defined Classes' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #SubclassesOfDefinedClasses #defaultString: 'Subclasses of Defined Classes' #catalogID: #browser) 							#nameKey: #'Parcel Browse Subclasses of Defined Classes' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #ChangedMethods #defaultString: 'Changed Methods' #catalogID: #browser) 							#nameKey: #'Parcel Browse Changed Methods' 							#value: 							#action: ) ) #(2 3 3 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Refresh #defaultString: '&amp;Refresh' #catalogID: #browser) 				#nameKey: #'Update Navigator' 				#value: 				#action: 				#shortcutKeyCharacter: #F5 				#shortcutModifiers: 0 ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #FindNameSpaceDots #defaultString: 'Find Name Space...' #catalogID: #browser) 				#nameKey: #'Find Name Space' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_FindClassDots #defaultString: '&amp;Find Class...' #catalogID: #browser) 				#nameKey: #'Find Class' 				#value: 				#action: 				#shortcutKeyCharacter: $f 				#shortcutModifiers: 3 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #findClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #FindSharedVariableDots #defaultString: 'Find Shared Variable...' #catalogID: #browser) 				#nameKey: #'Find Shared Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Spawn #defaultString: 'Spawn' #catalogID: #browser) 				#nameKey: #'Spawn Parcel' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #File_OutAsDots #defaultString: 'File &amp;Out As...' #catalogID: #browser) 				#nameKey: #'Parcel File-out' 				#value: 				#action: ) ) #(2 1 3 2 2 1 3 2 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="protocolMenu">protocolMenu	"Tools.MenuEditor new openOnClass: self andSelector: #protocolMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Ne_wDot 					#defaultString: 'Ne&amp;w...' 					#catalogID: #browser ) 				#nameKey: #'Add Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Move 					#defaultString: '&amp;Move' 					#catalogID: #browser ) 				#nameKey: #Move 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #toParcelDots 								#defaultString: 'to Parcel...' 								#catalogID: #browser ) 							#nameKey: #'Move Protocol to Parcel' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #toPackageDots 								#defaultString: 'to Package...' 								#catalogID: #browser ) 							#nameKey: #'Move Protocol to Package' 							#value: 							#action: ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Re_nameDots 					#defaultString: 'Re&amp;name...' 					#catalogID: #browser ) 				#nameKey: #'Rename Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_RemoveDots 					#defaultString: '&amp;Remove...' 					#catalogID: #browser ) 				#nameKey: #'Remove Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindMethodDot 					#defaultString: '&amp;Find Method...' 					#catalogID: #browser ) 				#nameKey: #'Find Method' 				#value: 				#action: 				#shortcutKeyCharacter: $m 				#shortcutModifiers: 3 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #findSelector ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Spawn 					#defaultString: 'Spawn' 					#catalogID: #browser ) 				#nameKey: #'Spawn Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #File_OutAsDots 					#defaultString: 'File &amp;Out As...' 					#catalogID: #browser ) 				#nameKey: #'File Out Protocol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Hardcopy 					#defaultString: 'Hardcopy' 					#catalogID: #browser ) 				#nameKey: #'Hardcopy Protocol' 				#value: 				#action: ) ) #(4 1 3 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="pundleMenu">pundleMenu	"Tools.MenuEditor new openOnClass: self andSelector: #pundleMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #New_PackageDots 					#defaultString: 'New &amp;Package...' 					#catalogID: #browser ) 				#nameKey: #'Store Add Package' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #New_BundleDots 					#defaultString: 'New &amp;Bundle...' 					#catalogID: #browser ) 				#nameKey: #'Store Add Bundle' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #LoadPackageOrBundleDots 					#defaultString: 'Load Package or Bundle...' 					#catalogID: #browser ) 				#nameKey: #'Store Load Another Pundle' 				#value: 				#action: 				#enablementSelector: #isStoreLoaded ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #LoadVersionDots 					#defaultString: 'Load Version...' 					#catalogID: #browser ) 				#nameKey: #'Store Load Pundle' 				#value: 				#action: 				#enablementSelector: #isStoreLoaded ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #PublishDots 					#defaultString: 'Publish...' 					#catalogID: #browser ) 				#nameKey: #'Store Publish' 				#value: 				#action: 				#enablementSelector: #isStoreLoaded ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #PublishAsParcelDots 					#defaultString: 'Publish as Parcel...' 					#catalogID: #browser ) 				#nameKey: #'Store Publish Parcel' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #RenameDots 					#defaultString: 'Rename...' 					#catalogID: #browser ) 				#nameKey: #'Store Rename Pundle' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #RemoveParenUnload 					#defaultString: 'Remove (Unload)' 					#catalogID: #browser ) 				#nameKey: #'Store Unload Pundle' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #SetAsCurrent 					#defaultString: 'Set as Current' 					#catalogID: #browser ) 				#nameKey: #'Store Make Current' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #EditBundleSpecificationDots 					#defaultString: 'Edit Bundle Specification...' 					#catalogID: #browser ) 				#nameKey: #'Store Edit Bundle' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Store 					#defaultString: 'Store' 					#catalogID: #browser ) 				#nameKey: #Versions 				#enablementSelector: #isStoreLoaded 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BrowseVersions 								#defaultString: 'Browse Versions' 								#catalogID: #browser ) 							#nameKey: #'Store Browse Pundle Versions' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CompareWithParent 								#defaultString: 'Compare with Parent' 								#catalogID: #browser ) 							#nameKey: #'Store Compare Pundle with Parent' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CompareWithDots 								#defaultString: 'Compare with...' 								#catalogID: #browser ) 							#nameKey: #'Store Compare Pundle Versions' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ReconcileWithDatabase 								#defaultString: 'Reconcile with Database' 								#catalogID: #browser ) 							#nameKey: #'Store Reconcile Pundle' 							#value: 							#action: ) ) #(4 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Browse 					#defaultString: 'Browse' 					#catalogID: #browser ) 				#nameKey: #Browse 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangedMethodsDots 								#defaultString: 'Changed Methods...' 								#catalogID: #browser ) 							#nameKey: #'Store Browse Method Changes' 							#value: 							#action: 							#enablementSelector: #hasSingleDatabase ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangedMethods 								#defaultString: 'Changed Methods' 								#catalogID: #browser ) 							#nameKey: #'Changed Methods' 							#value: #rbItem 							#enablementSelector: #hasMultipleDatabases 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #DynamicDatabaseChangedMethods 											#defaultString: 'Dynamic Database Changed Methods' 											#catalogID: #browser ) 										#nameKey: #'Store All Databases Browse Changes' 										#value: #dynamicMenu ) ) #(1 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangeListOnChangesDots 								#defaultString: 'Change List on Changes...' 								#catalogID: #browser ) 							#nameKey: #'Store Change List on Changes' 							#value: 							#action: 							#enablementSelector: #hasSingleDatabase ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangeListOnChanges 								#defaultString: 'Change List on Changes' 								#catalogID: #browser ) 							#nameKey: #'Change List on Changes' 							#value: #rbItem 							#enablementSelector: #hasMultipleDatabases 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #DynamicChangeList 											#defaultString: 'Dynamic Change List' 											#catalogID: #browser ) 										#nameKey: #'Store All Databases Change List' 										#value: #dynamicMenu ) ) #(1 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangeSetDots 								#defaultString: 'Change Set...' 								#catalogID: #browser ) 							#nameKey: #'Store Inspect Change Set' 							#value: 							#action: 							#enablementSelector: #hasSingleDatabase ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangeSet 								#defaultString: 'Change Set' 								#catalogID: #browser ) 							#nameKey: #'Change Set' 							#value: #rbItem 							#enablementSelector: #hasMultipleDatabases 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #DynamicChangeSet 											#defaultString: 'Dynamic Change Set' 											#catalogID: #browser ) 										#nameKey: #'Store All Databases Inspect Changes' 										#value: #dynamicMenu ) ) #(1 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #OverridesOfOthersDots 								#defaultString: 'Overrides of others...' 								#catalogID: #browser ) 							#nameKey: #'Browse Overrides' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #OverriddenByOthersDots 								#defaultString: 'Overridden by others...' 								#catalogID: #browser ) 							#nameKey: #'Browse Overridden' 							#value: 							#action: ) ) #(8 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FindPackageDots 					#defaultString: 'Find Package...' 					#catalogID: #browser ) 				#nameKey: #'Find Package' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FindNameSpaceDots 					#defaultString: 'Find Name Space...' 					#catalogID: #browser ) 				#nameKey: #'Find Name Space' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindClassDots 					#defaultString: '&amp;Find Class...' 					#catalogID: #browser ) 				#nameKey: #'Find Class' 				#value: 				#action: 				#shortcutKeyCharacter: $f 				#shortcutModifiers: 3 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #findClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FindSharedVariableDots 					#defaultString: 'Find Shared Variable...' 					#catalogID: #browser ) 				#nameKey: #'Find Shared Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Spawn 					#defaultString: 'Spawn' 					#catalogID: #browser ) 				#nameKey: #'Spawn Pundle' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FileIntoDots 					#defaultString: 'File Into...' 					#catalogID: #browser ) 				#nameKey: #'File Into Package' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FileOut 					#defaultString: 'File Out' 					#catalogID: #browser ) 				#nameKey: #'File Out' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #PackageDots 								#defaultString: 'Package...' 								#catalogID: #browser ) 							#nameKey: #'File Out Package' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ChangesDots 								#defaultString: 'Changes...' 								#catalogID: #browser ) 							#nameKey: #'File Out Package Changes' 							#value: 							#action: 							#enablementSelector: #hasSingleDatabase ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Changes 								#defaultString: 'Changes' 								#catalogID: #browser ) 							#nameKey: #Changes 							#value: #rbItem 							#enablementSelector: #hasMultipleDatabases 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 										#(#{Kernel.UserMessage} 											#key: #DynamicFileoutChanges 											#defaultString: 'Dynamic Fileout Changes' 											#catalogID: #browser ) 										#nameKey: #'Store All Databases Fileout Changes' 										#value: #dynamicMenu ) ) #(1 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #DifferencesDots 								#defaultString: 'Differences...' 								#catalogID: #browser ) 							#nameKey: #'File Out Package Differences' 							#value: 							#action: ) ) #(4 ) nil ) ) ) #(2 1 3 3 1 2 4 3 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="selectorMenu">selectorMenu	"Tools.MenuEditor new openOnClass: self andSelector: #selectorMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Senders 					#defaultString: '&amp;Senders' 					#catalogID: #browser ) 				#nameKey: #'Global Senders' 				#value: 				#action: 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Senders 								#defaultString: 'Senders' 								#catalogID: #browser ) 							#nameKey: #'Global Senders' 							#value: 							#action:methodName: 							#shortcutKeyCharacter: #F6 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #selectorReferences ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #GlobalSenders 								#defaultString: 'Global Senders' 								#catalogID: #browser ) 							#nameKey: #'Global Senders Actions' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Implementors 					#defaultString: '&amp;Implementors' 					#catalogID: #browser ) 				#nameKey: #'Global Implementors' 				#value: 				#action: 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Implementors 								#defaultString: 'Implementors' 								#catalogID: #browser ) 							#nameKey: #'Global Implementors' 							#value: 							#action:methodName: 							#shortcutKeyCharacter: #F7 							#shortcutModifiers: 2 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #selectorImplementors ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #GlobalImplementors 								#defaultString: 'Global Implementors' 								#catalogID: #browser ) 							#nameKey: #'Global Implementors Actions' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #HierarchySenders 					#defaultString: 'Hierarchy Senders' 					#catalogID: #browser ) 				#nameKey: #'Hierarchy Senders' 				#value: 				#action: 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Senders 								#defaultString: 'Senders' 								#catalogID: #browser ) 							#nameKey: #'Hierarchy Senders' 							#value: 							#action:methodName: 							#shortcutKeyCharacter: #F6 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #HierarchySenders 								#defaultString: 'Hierarchy Senders' 								#catalogID: #browser ) 							#nameKey: #'Hierarchy Senders Actions' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #HierarchyImplementors 					#defaultString: 'Hierarchy Implementors' 					#catalogID: #browser ) 				#nameKey: #'Hierarchy Implementors' 				#value: 				#action: 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Implementors 								#defaultString: 'Implementors' 								#catalogID: #browser ) 							#nameKey: #'Hierarchy Implementors' 							#value: 							#action:methodName: 							#shortcutKeyCharacter: #F7 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #GlobalImplementors 								#defaultString: 'Global Implementors' 								#catalogID: #browser ) 							#nameKey: #'Hierarchy Implementors Actions' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #LocalSenders 					#defaultString: 'Local Senders' 					#catalogID: #browser ) 				#nameKey: #'Local Senders' 				#value: 				#action: 				#enablementSelector: #isLocalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #LocalSenders 								#defaultString: 'Local Senders' 								#catalogID: #browser ) 							#nameKey: #'Local Senders' 							#value: 							#action:methodName: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #LocalSenders 								#defaultString: 'Local Senders' 								#catalogID: #browser ) 							#nameKey: #'Local Senders Actions' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #LocalImplementors 					#defaultString: 'Local Implementors' 					#catalogID: #browser ) 				#nameKey: #'Local Implementors' 				#value: 				#action: 				#enablementSelector: #isLocalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Implementors 								#defaultString: 'Implementors' 								#catalogID: #browser ) 							#nameKey: #'Local Implementors' 							#value: 							#action:methodName: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #LocalImplementors 								#defaultString: 'Local Implementors' 								#catalogID: #browser ) 							#nameKey: #'Local Implementors Actions' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Re_nameDots 					#defaultString: 'Re&amp;name...' 					#catalogID: #browser ) 				#nameKey: #'Rename Method' 				#value: 				#action: 				#enablementSelector: #isMethod ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Re_nameDots 					#defaultString: 'Re&amp;name...' 					#catalogID: #browser ) 				#nameKey: #'Rename Shared Variable' 				#value: 				#action: 				#enablementSelector: #isData ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_RemoveDots 					#defaultString: '&amp;Remove...' 					#catalogID: #browser ) 				#nameKey: #'Remove Method' 				#value: 				#action: 				#enablementSelector: #isMethod ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_RemoveDots 					#defaultString: '&amp;Remove...' 					#catalogID: #browser ) 				#nameKey: #'Remove Shared Variable' 				#value: 				#action: 				#enablementSelector: #isData ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #S_afeRemove 					#defaultString: 'S&amp;afe Remove' 					#catalogID: #browser ) 				#nameKey: #'Safe Remove Method' 				#value: 				#action: 				#enablementSelector: #isMethod ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #S_afeRemove 					#defaultString: 'S&amp;afe Remove' 					#catalogID: #browser ) 				#nameKey: #'Safe Remove Shared Variable' 				#value: 				#action: 				#enablementSelector: #isData ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Move 					#defaultString: '&amp;Move' 					#catalogID: #browser ) 				#nameKey: #Move 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #to_ProtocolDots 								#defaultString: 'to &amp;Protocol...' 								#catalogID: #browser ) 							#nameKey: #'Move Method to Protocol' 							#value: 							#action: 							#enablementSelector: #isMethod ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #to_ProtocolDots 								#defaultString: 'to &amp;Protocol...' 								#catalogID: #browser ) 							#nameKey: #'Move Shared Variable to Protocol' 							#value: 							#action: 							#enablementSelector: #isData ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #toParcelDots 								#defaultString: 'to Parcel...' 								#catalogID: #browser ) 							#nameKey: #'Move Method to Parcel' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #toPackageDots 								#defaultString: 'to Package...' 								#catalogID: #browser ) 							#nameKey: #'Move Method to Package' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #to_ComponentDots 								#defaultString: 'to &amp;Component...' 								#catalogID: #browser ) 							#nameKey: #'Move Method to Component' 							#value: 							#action: ) ) #(5 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Override 					#defaultString: 'Override' 					#catalogID: #browser ) 				#nameKey: #Override 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #inParcelDots 								#defaultString: 'in Parcel...' 								#catalogID: #browser ) 							#nameKey: #'Parcel Override Method' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #inPackageDots 								#defaultString: 'in Package...' 								#catalogID: #browser ) 							#nameKey: #'Store Override Method' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RemoveOverriddenDots 								#defaultString: 'Remove Overridden...' 								#catalogID: #browser ) 							#nameKey: #'Remove Override Method' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RestoreOverriddenDots 								#defaultString: 'Restore Overridden...' 								#catalogID: #browser ) 							#nameKey: #'Restore Override Method' 							#value: 							#action: ) ) #(2 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Refactor 					#defaultString: 'Refactor' 					#catalogID: #browser ) 				#nameKey: #Refactoring 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_AddParameterDots 								#defaultString: '&amp;Add Parameter...' 								#catalogID: #browser ) 							#nameKey: #'Add Parameter' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RemoveParameterDots 								#defaultString: 'Remove Parameter...' 								#catalogID: #browser ) 							#nameKey: #'Navigator Remove Paramter' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_InlineAllSelfSends 								#defaultString: '&amp;Inline All Self Sends' 								#catalogID: #browser ) 							#nameKey: #'Inline All Self Sends' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_Up 								#defaultString: 'Push &amp;Up' 								#catalogID: #browser ) 							#nameKey: #'Push Up Method' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_Down 								#defaultString: 'Push &amp;Down' 								#catalogID: #browser ) 							#nameKey: #'Push Down Method' 							#value: 							#action: ) ) #(3 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseMethodChanges 					#defaultString: 'Browse Method Changes' 					#catalogID: #browser ) 				#nameKey: #'Browse Change Set Method Versions' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Store 					#defaultString: 'Store' 					#catalogID: #browser ) 				#nameKey: #Store 				#value: #rbItem 				#enablementSelector: #isStoreLoaded 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BrowseVersions 								#defaultString: 'Browse Versions' 								#catalogID: #browser ) 							#nameKey: #'Store Browse Method Versions' 							#value: 							#action: 							#enablementSelector: #isMethod ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #BrowseVersions 								#defaultString: 'Browse Versions' 								#catalogID: #browser ) 							#nameKey: #'Store Browse Shared Variable Versions' 							#value: 							#action: 							#enablementSelector: #isData ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CompareWithDots 								#defaultString: 'Compare With...' 								#catalogID: #browser ) 							#nameKey: #'Store Compare Method Versions' 							#value: 							#action: 							#enablementSelector: #isMethod ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CompareWithDots 								#defaultString: 'Compare With...' 								#catalogID: #browser ) 							#nameKey: #'Store Compare Shared Variable Versions' 							#value: 							#action: 							#enablementSelector: #isData ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RevertDots 								#defaultString: 'Revert...' 								#catalogID: #browser ) 							#nameKey: #'Store Revert Method' 							#value: 							#action: 							#enablementSelector: #isMethod ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #RevertDots 								#defaultString: 'Revert...' 								#catalogID: #browser ) 							#nameKey: #'Store Revert Shared Variable' 							#value: 							#action: 							#enablementSelector: #isData ) ) #(6 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Visibility 					#defaultString: 'Visibility' 					#catalogID: #browser ) 				#nameKey: #Visibility 				#value: #rbItem 				#enablementSelector: #isGlobalEnvironment 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ShowOnlyFiltered 								#defaultString: 'Show Only Filtered' 								#catalogID: #browser ) 							#nameKey: #'Show Only Filtered' 							#value: #dynamicMenu ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Hierarchy 								#defaultString: 'Hierarchy' 								#catalogID: #browser ) 							#nameKey: #'Inherited Classes Specifications' 							#value: #dynamicMenu ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #SharedVariable 					#defaultString: 'Shared Variable' 					#catalogID: #browser ) 				#nameKey: #'Shared Variable' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #References 								#defaultString: 'References' 								#catalogID: #browser ) 							#nameKey: #'Global Shared Variable References' 							#value: 							#action: 							#enablementSelector: #isGlobalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #GlobalReferences 								#defaultString: 'Global References' 								#catalogID: #browser ) 							#nameKey: #'Global Shared Variable References' 							#value: 							#action: 							#enablementSelector: #isLocalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #LocalReferences 								#defaultString: 'Local References' 								#catalogID: #browser ) 							#nameKey: #'Local Shared Variable References' 							#value: 							#action: 							#enablementSelector: #isLocalEnvironment ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Initialize 								#defaultString: 'Initialize' 								#catalogID: #browser ) 							#nameKey: #'Initialize Shared Variable' 							#value: 							#action: ) ) #(3 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #RemoveFromList 					#defaultString: 'Remove From List' 					#catalogID: #browser ) 				#nameKey: #'Remove Method From List' 				#value: 				#action: 				#enablementSelector: #isSelectorEnvironment ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Spawn 					#defaultString: 'Spawn' 					#catalogID: #browser ) 				#nameKey: #'Spawn Method' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #File_OutAsDots 					#defaultString: 'File &amp;Out As...' 					#catalogID: #browser ) 				#nameKey: #'File Out Method' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Hardcopy 					#defaultString: 'Hardcopy' 					#catalogID: #browser ) 				#nameKey: #'Hardcopy Method' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Inspect 					#defaultString: 'Inspect' 					#catalogID: #browser ) 				#nameKey: #'Inspect Method' 				#value: 				#action: ) ) #(2 2 2 6 3 3 1 1 4 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.VariableNavigator class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="variableMenu">variableMenu	"MenuEditor new openOnClass: self andSelector: #variableMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Pull_Up #defaultString: 'Pull &amp;Up' #catalogID: #browser) 				#nameKey: #'Variable Navigator Pull Up Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Remove #defaultString: '&amp;Remove' #catalogID: #browser) 				#nameKey: #'Variable Navigator Remove Variable' 				#value: 				#action: ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.VariableNavigator class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="HorizontalWindowSpec">HorizontalWindowSpec	"UIPainter new openOnClass: self andSelector: #HorizontalWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #Navigator #defaultString: 'Navigator' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 506 525 1094 676 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.25 0 1 ) 					#name: #variableClassList 					#model: #variableClassList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedVariableClass 						#requestValueChangeSelector: #changeRequest ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.25 0 0 -2 0.5 0 1 ) 					#name: #instanceVariableList 					#model: #instanceVariableList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedInstanceVariable 						#requestValueChangeSelector: #changeRequest ) 					#menu: #instanceVariableMenuHolder 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 0 0 0 1 0 1 ) 					#name: #navigator 					#flags: 0 					#minorKey: #navigatorSpec ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.25 0 0 2 0.25 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'variableClassList' 					#belowWidgets: 'instanceVariableList' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0 2 0.5 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'instanceVariableList' 					#belowWidgets: 'navigator' ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Refresh #defaultString: 'Refresh' #catalogID: #browser) 				#nameKey: #'Update Code Tool Display' 				#value: 				#action: ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.CompareCodeTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Multi Differator' 			#min: #(#{Core.Point} 20 20 ) 			#bounds: #(#{Graphics.Rectangle} 512 384 965 696 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0.5 0 0 1 0.5 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'leftPane' 					#belowWidgets: 'rightPane' ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.TextEditorSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 24 0 0 1.0 0 1.0 ) 							#name: #TextEditor1 							#model: #text1 							#tabRequiresControl: true ) 						#(#{UI.ComboBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1.0 23 0 ) 							#name: #ComboBox1 							#model: #definition1 							#type: #object 							#comboList: #list1 							#readSelector: 							#definitionFromString: 							#printSelector: 							#definitionToString: ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -1 0.5 0 1 ) 						#name: #leftPane ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.TextEditorSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 24 0 0 1 0 1 ) 							#name: #TextEditor2 							#model: #text2 							#tabRequiresControl: true ) 						#(#{UI.ComboBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1.0 23 0 ) 							#name: #ComboBox2 							#model: #definition2 							#type: #object 							#comboList: #list2 							#readSelector: 							#definitionFromString: 							#printSelector: 							#definitionToString: ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 1 0.5 0 0 0 1 0 1 ) 						#name: #rightPane ) ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="informationSpec">informationSpec	"UIPainter new openOnClass: self andSelector: #informationSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 361 262 561 462 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #informationHolder 					#flags: 4 					#model: #informationHolder 					#isReadOnly: true 					#tabRequiresControl: true ) ) ) )</body><body package="Browser-BrowserUI" selector="inspectorSpec">inspectorSpec	"UIPainter new openOnClass: self andSelector: #inspectorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 28 0 -2 1 -42 1 ) 					#name: #inspectorSubcanvas 					#flags: 0 					#majorKey: #{Smalltalk.UI.ParcelPropertiesInspector} 					#minorKey: #windowSpec 					#clientKey: #inspectorSubcanvas ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 2 ) 					#name: #Label1 					#label: #(#{Kernel.UserMessage} #key: #InspectorC #defaultString: 'Inspector:' #catalogID: #browser) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -205 1 -32 1 -105 1 -4 1 ) 					#name: #okButton 					#model: #acceptProperties 					#label: #(#{Kernel.UserMessage} #key: #Apply #defaultString: 'Apply' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -102 1 -32 1 -2 1 -4 1 ) 					#name: #cancelButton 					#model: #cancelProperties 					#label: #(#{Kernel.UserMessage} #key: #Cancel #defaultString: 'Cancel' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 -38 1 -3 1 -34 1 ) 					#name: #Divider1 ) ) ) )</body><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.25 0 1 ) 					#name: #propertiesList 					#model: #propertiesList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSelection 						#requestValueChangeSelector: #updateRequest ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.25 0 0 0 1 0 1 ) 					#name: #subcanvas 					#flags: 0 ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.25 0 0 2 0.25 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'propertiesList' 					#belowWidgets: 'subcanvas' ) ) ) )</body></methods><methods><class-id>Refactory.Browser.ClassDiagramTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 511 369 1089 832 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #diagram 					#flags: 11 					#component: #diagram ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #CodeTool #defaultString: 'Code Tool' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1333 1002 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -27 1 ) 					#name: #subcanvas 					#model: #tabList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSelectionPolicy 						#requestValueChangeSelector: #updateRequest ) 					#labels: #() ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -25 1 -1 0.333333 0 1 ) 					#name: #label 					#model: #labelHolder 					#tabable: false 					#isReadOnly: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.333333 -25 1 -1 0.666666 0 1 ) 					#name: #parcelLabel 					#model: #parcelLabelHolder 					#tabable: false 					#isReadOnly: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.666666 -25 1 0 1 0 1 ) 					#name: #packageLabel 					#model: #packageLabelHolder 					#tabable: false 					#isReadOnly: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.ClassDiagramModel class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="classMenu">classMenu	"MenuEditor new openOnClass: self andSelector: #classMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #referencesDots #defaultString: 'references...' #catalogID: #browser) 				#value: #classRefs ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #renameAsDots #defaultString: 'rename as...' #catalogID: #browser) 				#value: #renameClass ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #removeDots #defaultString: 'remove...' #catalogID: #browser) 				#value: #removeClass ) ) #(1 2 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="instVarMenu">instVarMenu	"MenuEditor new openOnClass: self andSelector: #instVarMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #referencesDots #defaultString: 'references...' #catalogID: #browser) 				#value: #instanceVariableReferences ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #addDots #defaultString: 'add...' #catalogID: #browser) 				#value: #addInstanceVariable ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #renameAsDots #defaultString: 'rename as...' #catalogID: #browser) 				#value: #renameInstanceVariable ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #removeDots #defaultString: 'remove...' #catalogID: #browser) 				#value: #removeInstanceVariable ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #abstract #defaultString: 'abstract' #catalogID: #browser) 				#value: #abstractInstanceVariable ) ) #(1 3 1 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="menu">menu	"MenuEditor new openOnClass: self andSelector: #menu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #sendersDots #defaultString: 'senders...' #catalogID: #browser) 				#value: #senders ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #implementorsDots #defaultString: 'implementors...' #catalogID: #browser) 				#value: #implementors ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #renameAsDots #defaultString: 'rename as...' #catalogID: #browser) 				#value: #renameMethod ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #removeDots #defaultString: 'remove...' #catalogID: #browser) 				#value: #removeMethod ) ) #(2 2 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="methodMenu">methodMenu	"MenuEditor new openOnClass: self andSelector: #methodMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #senders #defaultString: 'senders' #catalogID: #browser) 				#value: #senders ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #implementorsDots #defaultString: 'implementors...' #catalogID: #browser) 				#value: #implementors ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #renameAsDots #defaultString: 'rename as...' #catalogID: #browser) 				#value: #renameMethod ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #removeDots #defaultString: 'remove...' #catalogID: #browser) 				#value: #removeMethod ) ) #(2 2 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="noInstVarMenu">noInstVarMenu	"MenuEditor new openOnClass: self andSelector: #noInstVarMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #addDots #defaultString: 'add...' #catalogID: #browser) 				#value: #addInstanceVariable ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 329 272 695 497 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #textEditor 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#menu: #textMenu ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserTextTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="menuPrefixForMenuBar">menuPrefixForMenuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrefixForMenuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Undo 					#defaultString: '&amp;Undo' 					#catalogID: #browser ) 				#nameKey: #'Undo Typing' 				#value: 				#action: 				#shortcutKeyCharacter: $Z 				#shortcutModifiers: 2 ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1086 675 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -42 1 ) 					#name: #textEditor 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -308 1 -32 1 -208 1 -4 1 ) 					#name: #okButton 					#model: #acceptText 					#label: 					#(#{Kernel.UserMessage} 						#key: #Apply 						#defaultString: 'Apply' 						#catalogID: #browser ) 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -205 1 -32 1 -105 1 -4 1 ) 					#name: #cancelButton 					#model: #cancelText 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #browser ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -102 1 -32 1 -2 1 -4 1 ) 					#name: #restoreButton 					#model: #restore 					#label: 					#(#{Kernel.UserMessage} 						#key: #RestoreDefault 						#defaultString: 'Restore Default' 						#catalogID: #browser ) 					#defaultable: true ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 -38 1 -3 1 -34 1 ) 					#name: #Divider2 ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Accept 					#defaultString: '&amp;Accept' 					#catalogID: #browser ) 				#nameKey: #Accept 				#value: 				#action: 				#shortcutKeyCharacter: $s 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DoIt 					#defaultString: '&amp;Do it' 					#catalogID: #browser ) 				#nameKey: #'Do It' 				#value: 				#action: 				#shortcutKeyCharacter: $d 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #doIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Pri_ntIt 					#defaultString: 'Pri&amp;nt it' 					#catalogID: #browser ) 				#nameKey: #'Print It' 				#value: 				#action: 				#shortcutKeyCharacter: $p 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #printIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_InspectIt 					#defaultString: '&amp;Inspect it' 					#catalogID: #browser ) 				#nameKey: #'Inspect It' 				#value: 				#action: 				#shortcutKeyCharacter: $q 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #inspectIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DebugIt 					#defaultString: '&amp;Debug it' 					#catalogID: #browser ) 				#nameKey: #'Debug It' 				#value: 				#action: 				#shortcutKeyCharacter: $B 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #debugIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cu_t 					#defaultString: 'Cu&amp;t' 					#catalogID: #browser ) 				#nameKey: #'Cut Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #cut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #copy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Paste 					#defaultString: '&amp;Paste' 					#catalogID: #browser ) 				#nameKey: #'Paste Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $V 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #paste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindDots 					#defaultString: '&amp;Find...' 					#catalogID: #browser ) 				#nameKey: #'Find Text' 				#value: 				#action: 				#shortcutKeyCharacter: $L 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ReplaceDots 					#defaultString: '&amp;Replace...' 					#catalogID: #browser ) 				#nameKey: #'Replace Text' 				#value: 				#action: 				#shortcutKeyCharacter: $R 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cancel 					#defaultString: 'Cancel' 					#catalogID: #browser ) 				#nameKey: #Cancel 				#value: 				#action: ) ) #(1 4 3 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Accept 					#defaultString: '&amp;Accept' 					#catalogID: #browser ) 				#nameKey: #Accept 				#value: 				#action: 				#shortcutKeyCharacter: $S 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #F_ormat 					#defaultString: 'F&amp;ormat' 					#catalogID: #browser ) 				#nameKey: #'Format Code' 				#value: 				#action: 				#shortcutKeyCharacter: $O 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #GoToClass 					#defaultString: 'Go to Class' 					#catalogID: #browser ) 				#nameKey: #'Navigate to Class' 				#value: 				#action: 				#enablementSelector: #hasClassSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseClassInNewWindow 					#defaultString: 'Browse Class in New Window' 					#catalogID: #browser ) 				#nameKey: #'Open Browser on Class' 				#value: 				#action: 				#enablementSelector: #hasClassSelected 				#shortcutKeyCharacter: #F12 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseReferencesToClass 					#defaultString: 'Browse References to Class' 					#catalogID: #browser ) 				#nameKey: #'Browse References to Class' 				#value: 				#action: 				#enablementSelector: #hasClassSelected 				#shortcutKeyCharacter: #F11 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseVariableRe_ferencesDots 					#defaultString: 'Browse Variable Re&amp;ferences...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable References' 				#value: 				#action: 				#enablementSelector: #hasInstanceVariableSelected 				#shortcutKeyCharacter: #F11 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseVariableRea_dersDots 					#defaultString: 'Browse Variable Rea&amp;ders...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable Readers' 				#value: 				#action: 				#enablementSelector: #hasInstanceVariableSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseVariable_WritersDots 					#defaultString: 'Browse Variable &amp;Writers...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable Writers' 				#value: 				#action: 				#enablementSelector: #hasInstanceVariableSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Browse_SendersOfSelector 					#defaultString: 'Browse &amp;Senders of Selector' 					#catalogID: #browser ) 				#nameKey: #'Selected Message References' 				#value: 				#action: 				#enablementSelector: #hasMessageNodeSelected 				#shortcutKeyCharacter: #F11 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Browse_ImplementorsOfSelector 					#defaultString: 'Browse &amp;Implementors of Selector' 					#catalogID: #browser ) 				#nameKey: #'Selected Message Implementors' 				#value: 				#action: 				#enablementSelector: #hasMessageNodeSelected 				#shortcutKeyCharacter: #F12 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Refactor 					#defaultString: 'Refactor' 					#catalogID: #browser ) 				#nameKey: #refactorMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ExtractValueToTemporary 								#defaultString: '&amp;Extract Value to Temporary' 								#catalogID: #browser ) 							#nameKey: #'Extract to Temporary' 							#value: 							#action: 							#enablementSelector: #hasValueNodeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Re_nameVariableAsDots 								#defaultString: 'Re&amp;name Variable As...' 								#catalogID: #browser ) 							#nameKey: #'Rename Selected Temporary Variable' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected 							#shortcutKeyCharacter: $N 							#shortcutModifiers: 3 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #MoveToInner_Scope 								#defaultString: 'Move to Inner &amp;Scope' 								#catalogID: #browser ) 							#nameKey: #'Move Selected Temporary to Innermost Scope' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Con_vertToInstanceVariable 								#defaultString: 'Con&amp;vert to Instance Variable' 								#catalogID: #browser ) 							#nameKey: #'Convert Temporary Variable to Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_RemoveParameter 								#defaultString: '&amp;Remove Parameter' 								#catalogID: #browser ) 							#nameKey: #'Remove Selected Parameter' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #In_lineParameter 								#defaultString: 'In&amp;line Parameter' 								#catalogID: #browser ) 							#nameKey: #'Inline Selected Parameter' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #In_lineMethod 								#defaultString: 'In&amp;line Method' 								#catalogID: #browser ) 							#nameKey: #'Inline Method' 							#value: 							#action: 							#enablementSelector: #hasMessageNodeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ExtractToTemporary 								#defaultString: '&amp;Extract to Temporary' 								#catalogID: #browser ) 							#nameKey: #'Extract to Temporary' 							#value: 							#action: 							#enablementSelector: #hasMessageNodeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_InlineAssignedTemporary 								#defaultString: '&amp;Inline Assigned Temporary' 								#catalogID: #browser ) 							#nameKey: #'Inline Temporary' 							#value: 							#action: 							#enablementSelector: #hasAssignmentSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Re_nameVariableAsDots 								#defaultString: 'Re&amp;name Variable As...' 								#catalogID: #browser ) 							#nameKey: #'Rename Selected Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected 							#shortcutKeyCharacter: $N 							#shortcutModifiers: 3 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #PushVariable_Up 								#defaultString: 'Push Variable &amp;Up' 								#catalogID: #browser ) 							#nameKey: #'Push Up Selected Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CreateAccessors 								#defaultString: 'Create Accessors' 								#catalogID: #browser ) 							#nameKey: #'Create Selected Instance Variable Accessors' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #MakeVariableA_bstract 								#defaultString: 'Make Variable A&amp;bstract' 								#catalogID: #browser ) 							#nameKey: #'Abstract Selected Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ProtectVariable 								#defaultString: '&amp;Protect Variable' 								#catalogID: #browser ) 							#nameKey: #'Protect Selected Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ExtractMethod 								#defaultString: '&amp;Extract Method' 								#catalogID: #browser ) 							#nameKey: #'Extract Method' 							#value: 							#action: 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #extractMethod ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ExtractMethodToComponent 								#defaultString: 'Extract Method to Component' 								#catalogID: #browser ) 							#nameKey: #'Extract Method to Component' 							#value: 							#action: ) ) #(14 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DoIt 					#defaultString: '&amp;Do it' 					#catalogID: #browser ) 				#nameKey: #'Do It' 				#value: 				#action: 				#shortcutKeyCharacter: $d 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #doIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Pri_ntIt 					#defaultString: 'Pri&amp;nt it' 					#catalogID: #browser ) 				#nameKey: #'Print It' 				#value: 				#action: 				#shortcutKeyCharacter: $p 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #printIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_InspectIt 					#defaultString: '&amp;Inspect it' 					#catalogID: #browser ) 				#nameKey: #'Inspect It' 				#value: 				#action: 				#shortcutKeyCharacter: $q 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #inspectIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DebugIt 					#defaultString: '&amp;Debug it' 					#catalogID: #browser ) 				#nameKey: #'Debug It' 				#value: 				#action: 				#shortcutKeyCharacter: $B 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #debugIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Explain 					#defaultString: 'Explain' 					#catalogID: #browser ) 				#nameKey: #'Explain Code' 				#value: 				#action: 				#shortcutKeyCharacter: $E 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cu_t 					#defaultString: 'Cu&amp;t' 					#catalogID: #browser ) 				#nameKey: #'Cut Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #cut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #copy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Paste 					#defaultString: '&amp;Paste' 					#catalogID: #browser ) 				#nameKey: #'Paste Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $V 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #paste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindDots 					#defaultString: '&amp;Find...' 					#catalogID: #browser ) 				#nameKey: #'Find Text' 				#value: 				#action: 				#shortcutKeyCharacter: $L 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ReplaceDots 					#defaultString: '&amp;Replace...' 					#catalogID: #browser ) 				#nameKey: #'Replace Text' 				#value: 				#action: 				#shortcutKeyCharacter: $R 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cancel 					#defaultString: 'Cancel' 					#catalogID: #browser ) 				#nameKey: #Cancel 				#value: 				#action: ) ) #(2 9 4 1 3 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.BrowserCommentTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Accept 					#defaultString: '&amp;Accept' 					#catalogID: #browser ) 				#nameKey: #Accept 				#value: 				#action: 				#shortcutKeyCharacter: $S 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_GenerateDefaultComment 					#defaultString: '&amp;Generate Default Comment' 					#catalogID: #browser ) 				#nameKey: #'Generate Default Class Comment' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DoIt 					#defaultString: '&amp;Do it' 					#catalogID: #browser ) 				#nameKey: #'Do It' 				#value: 				#action: 				#shortcutKeyCharacter: $d 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #doIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Pri_ntIt 					#defaultString: 'Pri&amp;nt it' 					#catalogID: #browser ) 				#nameKey: #'Print It' 				#value: 				#action: 				#shortcutKeyCharacter: $p 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #printIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_InspectIt 					#defaultString: '&amp;Inspect it' 					#catalogID: #browser ) 				#nameKey: #'Inspect It' 				#value: 				#action: 				#shortcutKeyCharacter: $q 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #inspectIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DebugIt 					#defaultString: '&amp;Debug it' 					#catalogID: #browser ) 				#nameKey: #'Debug It' 				#value: 				#action: 				#shortcutKeyCharacter: $B 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #debugIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cu_t 					#defaultString: 'Cu&amp;t' 					#catalogID: #browser ) 				#nameKey: #'Cut Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #cut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #copy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Paste 					#defaultString: '&amp;Paste' 					#catalogID: #browser ) 				#nameKey: #'Paste Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $V 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #paste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindDots 					#defaultString: '&amp;Find...' 					#catalogID: #browser ) 				#nameKey: #'Find Text' 				#value: 				#action: 				#shortcutKeyCharacter: $L 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ReplaceDots 					#defaultString: '&amp;Replace...' 					#catalogID: #browser ) 				#nameKey: #'Replace Text' 				#value: 				#action: 				#shortcutKeyCharacter: $R 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cancel 					#defaultString: 'Cancel' 					#catalogID: #browser ) 				#nameKey: #Cancel 				#value: 				#action: ) ) #(1 1 4 3 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Accept 					#defaultString: '&amp;Accept' 					#catalogID: #browser ) 				#nameKey: #Accept 				#value: 				#action: 				#shortcutKeyCharacter: $s 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseRe_ferencesDots 					#defaultString: 'Browse Re&amp;ferences...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable References' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseRea_dersDots 					#defaultString: 'Browse Rea&amp;ders...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable Readers' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Browse_WritersDots 					#defaultString: '&amp;Browse Writers...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable Writers' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_AddVariableDots 					#defaultString: '&amp;Add Variable...' 					#catalogID: #browser ) 				#nameKey: #'Add Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_RemoveVariableDots 					#defaultString: '&amp;Remove Variable...' 					#catalogID: #browser ) 				#nameKey: #'Remove Selected Instance Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Refactor 					#defaultString: 'Refactor' 					#catalogID: #browser ) 				#nameKey: #refactorMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Re_nameAsDots 								#defaultString: 'Re&amp;name As...' 								#catalogID: #browser ) 							#nameKey: #'Rename Selected Instance Variable' 							#value: 							#action: 							#shortcutKeyCharacter: $N 							#shortcutModifiers: 3 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_Up 								#defaultString: 'Push &amp;Up' 								#catalogID: #browser ) 							#nameKey: #'Push Up Selected Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Push_Down 								#defaultString: 'Push &amp;Down' 								#catalogID: #browser ) 							#nameKey: #'Push Down Selected Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CreateAccessors 								#defaultString: 'Create Accessors' 								#catalogID: #browser ) 							#nameKey: #'Create Selected Instance Variable Accessors' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #A_bstract 								#defaultString: 'A&amp;bstract' 								#catalogID: #browser ) 							#nameKey: #'Abstract Selected Instance Variable' 							#value: 							#action: ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Protect 								#defaultString: '&amp;Protect' 								#catalogID: #browser ) 							#nameKey: #'Protect Selected Instance Variable' 							#value: 							#action: ) ) #(1 2 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DoIt 					#defaultString: '&amp;Do it' 					#catalogID: #browser ) 				#nameKey: #'Do It' 				#value: 				#action: 				#shortcutKeyCharacter: $d 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #doIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Pri_ntIt 					#defaultString: 'Pri&amp;nt it' 					#catalogID: #browser ) 				#nameKey: #'Print It' 				#value: 				#action: 				#shortcutKeyCharacter: $p 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #printIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_InspectIt 					#defaultString: '&amp;Inspect it' 					#catalogID: #browser ) 				#nameKey: #'Inspect It' 				#value: 				#action: 				#shortcutKeyCharacter: $q 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #inspectIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DebugIt 					#defaultString: '&amp;Debug it' 					#catalogID: #browser ) 				#nameKey: #'Debug It' 				#value: 				#action: 				#shortcutKeyCharacter: $B 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #debugIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Explain 					#defaultString: 'Explain' 					#catalogID: #browser ) 				#nameKey: #'Explain Code' 				#value: 				#action: 				#shortcutKeyCharacter: $E 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cu_t 					#defaultString: 'Cu&amp;t' 					#catalogID: #browser ) 				#nameKey: #'Cut Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #cut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #copy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Paste 					#defaultString: '&amp;Paste' 					#catalogID: #browser ) 				#nameKey: #'Paste Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $V 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #paste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindDots 					#defaultString: '&amp;Find...' 					#catalogID: #browser ) 				#nameKey: #'Find Text' 				#value: 				#action: 				#shortcutKeyCharacter: $L 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ReplaceDots 					#defaultString: '&amp;Replace...' 					#catalogID: #browser ) 				#nameKey: #'Replace Text' 				#value: 				#action: 				#shortcutKeyCharacter: $R 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cancel 					#defaultString: 'Cancel' 					#catalogID: #browser ) 				#nameKey: #Cancel 				#value: 				#action: ) ) #(1 3 3 4 1 3 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1347 741 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.583333 0 0 0 1 0 1 ) 					#name: #inspector 					#flags: 0 ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.583333 0 1 ) 					#name: #textEditor 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: 						#textAccepted: ) 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.583333 0 0 2 0.583333 0 1 ) 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'textEditor' 					#belowWidgets: 'inspector' ) ) ) )</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="mainMenu">mainMenu	"MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RestoreDots #defaultString: 'Restore...' #catalogID: #browser) 				#nameKey: #'Restore Selected Override' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #CompareWithSystemDots #defaultString: 'Compare with System...' #catalogID: #browser) 				#nameKey: #'Show Override Diffs' 				#value: 				#action: ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.OverrideCodeTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1338 898 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 2 ) 					#name: #overridesLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #OverriddenC 						#defaultString: 'Overridden:' 						#catalogID: #browser ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 25 0 -2 0.333333 -2 1 ) 					#name: #overrideList 					#flags: 15 					#model: #overrideList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSelection ) 					#menu: #menu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.333333 0 0 2 0.333333 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'overrideList' 					#belowWidgets: 'sourceLabel source' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0.333333 2 0 ) 					#name: #sourceLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #OverriddenSourceC 						#defaultString: 'Overridden Source:' 						#catalogID: #browser ) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.333333 25 0 -2 1 -2 1 ) 					#name: #source 					#model: #sourceHolder 					#tabable: false 					#isReadOnly: true 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.MenuViewer class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 512 370 994 729 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -75 0.5 10 0 75 0.5 40 0 ) 					#name: #menu 					#label: #(#{Kernel.UserMessage} #key: #Menu #defaultString: 'Menu' #catalogID: #browser) 					#menu: #menuResource ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 65 0 -10 1 90 0 ) 					#name: #selection 					#flags: 0 					#model: #selection 					#alignment: #center 					#type: #object ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 10 83 40 ) 					#name: #edit 					#model: #editSpec 					#label: #(#{Kernel.UserMessage} #key: #Edit #defaultString: 'Edit' #catalogID: #browser) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.IconViewer class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 512 376 953 768 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 0 27 ) 					#name: #icon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 2 82 25 ) 					#name: #edit 					#model: #editSpec 					#label: #(#{Kernel.UserMessage} #key: #Edit #defaultString: 'Edit' #catalogID: #browser) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CanvasViewer class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="errorMessageSpec">errorMessageSpec	"Tools.UIPainter new openOnClass: self andSelector: #errorMessageSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 512 384 900 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 0 0.5 0.5 0.5 ) 					#name: #messageLabel 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #red ) ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #ErrorDisplayingTheCanvasPainterNeeded 						#defaultString: 'Error displaying the canvas, UIPainter may need to be loaded' 						#catalogID: #browser ) ) ) ) )</body><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1203 972 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 27 0 0 1 0 1 ) 					#name: #subcanvas 					#flags: 43 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 2 82 25 ) 					#name: #edit 					#model: #editSpec 					#label: #(#{Kernel.UserMessage} #key: #Edit #defaultString: 'Edit' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 2 165 25 ) 					#name: #open 					#model: #openSpec 					#label: #(#{Kernel.UserMessage} #key: #Open #defaultString: 'Open' #catalogID: #browser) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="browserMenu">browserMenu	"Tools.MenuEditor new openOnClass: self andSelector: #browserMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Open_NewBrowser 					#defaultString: 'Open &amp;New Browser' 					#catalogID: #browser ) 				#nameKey: #'Spawn Browser' 				#value: 				#action: 				#shortcutKeyCharacter: $N 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Undo 					#defaultString: '&amp;Undo' 					#catalogID: #browser ) 				#nameKey: #Undo 				#value: 				#action:undoLabel: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #undo ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Redo 					#defaultString: '&amp;Redo' 					#catalogID: #browser ) 				#nameKey: #Redo 				#value: 				#action:redoLabel: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #redo ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Refresh 					#defaultString: '&amp;Refresh' 					#catalogID: #browser ) 				#nameKey: #'Update Navigator' 				#value: 				#action: 				#shortcutKeyCharacter: #F5 				#shortcutModifiers: 0 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #NavigatorTypes 					#defaultString: 'Navigator Types' 					#catalogID: #browser ) 				#nameKey: #'Navigator Type Specifications' 				#value: #dynamicMenu ) ) #(1 2 1 1 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="findMenu">findMenu	"Tools.MenuEditor new openOnClass: self andSelector: #findMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_PackageDots 					#defaultString: '&amp;Package...' 					#catalogID: #browser ) 				#nameKey: #'Find Package' 				#value: 				#action: 				#enablementSelector: #isViewingPackages 				#shortcutKeyCharacter: $P 				#shortcutModifiers: 3 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ClassVariableNamespaceDots 					#defaultString: '&amp;Class/Variable/Name Space...' 					#catalogID: #browser ) 				#nameKey: #'Find Global Name' 				#value: 				#action: 				#shortcutKeyCharacter: $f 				#shortcutModifiers: 3 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #findClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_MethodDots 					#defaultString: '&amp;Method...' 					#catalogID: #browser ) 				#nameKey: #'Find Method' 				#value: 				#action: 				#shortcutKeyCharacter: $m 				#shortcutModifiers: 3 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #findSelector ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ReferencesToSymbolDots 					#defaultString: 'References to Symbol...' 					#catalogID: #browser ) 				#nameKey: #'References to Symbol' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ClassesDefiningVariableDots 					#defaultString: 'Classes Defining Variable...' 					#catalogID: #browser ) 				#nameKey: #'Classes Defining Variable' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ImplementorsMatchingDots 					#defaultString: 'Implementors Matching...' 					#catalogID: #browser ) 				#nameKey: #'Implementors Matching' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #MethodsWithStringsMatchingDots 					#defaultString: 'Methods with Strings Matching...' 					#catalogID: #browser ) 				#nameKey: #'Methods with Strings Matching' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ReferencePathToDots 					#defaultString: 'Reference Path to...' 					#catalogID: #browser ) 				#nameKey: #'Find Reference Path to' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #AllReferencePathsToDots 					#defaultString: 'All Reference Paths to...' 					#catalogID: #browser ) 				#nameKey: #'Find All Reference Paths to' 				#value: 				#action: ) ) #(3 1 2 1 2 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="helpMenu">helpMenu	"MenuEditor new openOnClass: self andSelector: #helpMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Help #defaultString: 'Help' #catalogID: #browser) 				#nameKey: #'Context Help' 				#value: 				#action: 				#shortcutKeyCharacter: #F1 				#shortcutModifiers: 0 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #help ) ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Topics #defaultString: '&amp;Topics' #catalogID: #browser) 				#nameKey: #'Refactoring Browser Help' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #IconsReference #defaultString: 'Icons Reference' #catalogID: #browser) 				#nameKey: #'Icon Help' 				#value: 				#action: ) ) #(3 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="toolbarMenu">toolbarMenu	"Tools.MenuEditor new openOnClass: self andSelector: #toolbarMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #CreateBuffer 					#defaultString: 'Create Buffer' 					#catalogID: #browser ) 				#nameKey: #'Create Buffer' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #rbNewBuffer ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FindClassVariableNameSpace 					#defaultString: 'Find Class/Variable/Name Space' 					#catalogID: #browser ) 				#nameKey: #'Find Global Name' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #findClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ClassReferences 					#defaultString: 'Class References' 					#catalogID: #browser ) 				#nameKey: #'Global Class References' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #classReferences ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #createClass 					#defaultString: 'Create Class' 					#catalogID: #browser ) 				#nameKey: #'New Class' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #newClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Undo 					#defaultString: 'Undo' 					#catalogID: #browser ) 				#nameKey: #Undo 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #undo ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Redo 					#defaultString: 'Redo' 					#catalogID: #browser ) 				#nameKey: #Redo 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #redo ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cut 					#defaultString: 'Cut' 					#catalogID: #browser ) 				#nameKey: #'Cut Selection' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #cut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Copy 					#defaultString: 'Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #copy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Paste 					#defaultString: 'Paste' 					#catalogID: #browser ) 				#nameKey: #'Paste Selection' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #paste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FindMethod 					#defaultString: 'Find Method' 					#catalogID: #browser ) 				#nameKey: #'Find Method' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #findSelector ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Senders 					#defaultString: 'Senders' 					#catalogID: #browser ) 				#nameKey: #'Global Senders' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #selectorReferences ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Implementors 					#defaultString: 'Implementors' 					#catalogID: #browser ) 				#nameKey: #'Global Implementors' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #selectorImplementors ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ExtractMethod 					#defaultString: 'Extract Method' 					#catalogID: #browser ) 				#nameKey: #'Extract Method' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #extractMethod ) ) ) #(1 3 2 3 3 1 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="toolsMenu">toolsMenu	"Tools.MenuEditor new openOnClass: self andSelector: #toolsMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #CodeModelToolsMenu 					#defaultString: 'Code Model Tools Menu' 					#catalogID: #browser ) 				#nameKey: #'Code Model Tools Menu' 				#value: #dynamicMenu ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #SetUndo_Count 					#defaultString: 'Set Undo &amp;Count' 					#catalogID: #browser ) 				#nameKey: #'Set Undo Count' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #SetDefaultNameSpace 					#defaultString: 'Set Default Name Space' 					#catalogID: #browser ) 				#nameKey: #'Set Default Name Space' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Toolbar 					#defaultString: 'Toolbar' 					#catalogID: #browser ) 				#nameKey: #'Toggle Toolbar' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #StatusBar 					#defaultString: 'Status Bar' 					#catalogID: #browser ) 				#nameKey: #'Toggle Status Bar' 				#value: 				#action: ) ) #(1 2 2 ) nil ) decodeAsLiteralArray</body><body package="Browser-BrowserUI" selector="viewMenu">viewMenu	"Tools.MenuEditor new openOnClass: self andSelector: #viewMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Zoom 					#defaultString: '&amp;Zoom' 					#catalogID: #browser ) 				#nameKey: #'Zoom Specifications' 				#value: #dynamicMenu 				#shortcutKeyCharacter: $Z 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_NewView 					#defaultString: '&amp;New View' 					#catalogID: #browser ) 				#nameKey: #'Create Buffer' 				#value: 				#action: 				#shortcutKeyCharacter: $B 				#shortcutModifiers: 3 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #rbNewBuffer ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_RemoveCurrentView 					#defaultString: '&amp;Remove Current View' 					#catalogID: #browser ) 				#nameKey: #'Remove Buffer' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Buffers 					#defaultString: 'Buffers' 					#catalogID: #browser ) 				#nameKey: #Buffers 				#value: #dynamicMenu ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_MoreBuffers 					#defaultString: '&amp;More Buffers' 					#catalogID: #browser ) 				#nameKey: #'More Buffers' 				#value: 				#action: 				#enablementSelector: #has10orMoreCodeTools ) ) #(1 2 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="findWindowSpec">findWindowSpec	"Tools.UIPainter new openOnClass: self andSelector: #findWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 719 449 1009 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 33 0 25 0 1 1 ) 					#name: #findLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #FindC 						#defaultString: 'Find:' 						#catalogID: #browser ) ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 35 0 0 0 0 1 25 0 ) 					#name: #find 					#model: #findHolder 					#tabable: true 					#isReadOnly: false 					#comboList: #findList ) ) ) )</body><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#min: #(#{Core.Point} 472 312 ) 			#bounds: #(#{Graphics.Rectangle} 196 144 829 624 ) 			#flags: 4 			#menu: #menuBar 			#toolBar: #toolbarMenuHolder ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -2 0.333333 ) 					#name: #navigator 					#flags: 0 					#majorKey: #NavigatorTool 					#minorKey: #windowSpec 					#clientKey: #navigator ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0.333333 0 1 0 1 ) 					#name: #codeTool 					#flags: 0 					#majorKey: #CodeModelSubcanvas 					#minorKey: #windowSpec 					#clientKey: #codeTool ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.333333 0 1 2 0.333333 ) 					#name: #splitter 					#horizontal: true 					#minAboveSize: 50 					#minBelowSize: 30 					#aboveWidgets: 'navigator' 					#belowWidgets: 'codeTool' ) ) ) )</body></methods><methods><class-id>Refactory.Browser.DeploymentPrerequisitesTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 2 ) 					#name: #Label1 					#label: #(#{Kernel.UserMessage} #key: #AvailableParcelsC #defaultString: 'Available Parcels:' #catalogID: #browser) ) 				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragStartSelector 						#doAddDrag: #dragOkSelector 						#wantToDrag: ) 					#layout: #(#{Graphics.LayoutFrame} 2 0 25 0 -34 0.5 -74 1 ) 					#name: #allPackagesList 					#model: #allPackagesList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 -68 1 -96 0.5 -45 1 ) 					#name: #entryPrerequisite 					#model: #entryPrerequisiteHolder ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -90 0.5 -71 1 -34 0.5 -43 1 ) 					#name: #addEntryPrerequisitesButton 					#flags: 40 					#model: #addEntryPrerequisites 					#label: #(#{Kernel.UserMessage} #key: #Add #defaultString: 'Add' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -18 0.5 -60 0.5 17 0.5 -33 0.5 ) 					#name: #addPrerequisitesButton 					#flags: 40 					#model: #addPrerequisites 					#label: '&gt;&gt;' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -18 0.5 -13 0.5 17 0.5 14 0.5 ) 					#name: #removePrerequisitesButton 					#flags: 40 					#model: #removePrerequisites 					#label: '&lt;&lt;' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 34 0.5 2 0 ) 					#name: #Label2 					#label: #(#{Kernel.UserMessage} #key: #PrerequisitesC #defaultString: 'Prerequisites:' #catalogID: #browser) ) 				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEnter: #dropSelector 						#drop: #dragStartSelector 						#doReorderDrag: #dragOverSelector 						#dragOver: #dragExitSelector 						#dragLeave: ) 					#layout: #(#{Graphics.LayoutFrame} 34 0.5 25 0 -2 1 -74 1 ) 					#name: #prerequisitesList 					#model: #prerequisitesList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 34 0.5 -67 1 ) 					#name: #Label3 					#label: #(#{Kernel.UserMessage} #key: #VersionC #defaultString: 'Version:' #catalogID: #browser) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 85 0.5 -68 1 -2 1 -45 1 ) 					#name: #version 					#flags: 40 					#model: #versionHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedPrerequisites ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -308 1 -32 1 -208 1 -4 1 ) 					#name: #okButton 					#flags: 40 					#model: #ok 					#label: #(#{Kernel.UserMessage} #key: #Apply #defaultString: 'Apply' #catalogID: #browser) 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -205 1 -32 1 -105 1 -4 1 ) 					#name: #cancelButton 					#flags: 40 					#model: #cancel 					#label: #(#{Kernel.UserMessage} #key: #Cancel #defaultString: 'Cancel' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -102 1 -32 1 -2 1 -4 1 ) 					#name: #computePrerequisites 					#model: #computePrerequisites 					#label: #(#{Kernel.UserMessage} #key: #ComputePrereqs #defaultString: 'Compute Prereqs' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 -38 1 -3 1 -34 1 ) 					#name: #Divider1 ) ) ) )</body></methods><methods><class-id>Refactory.Browser.DevelopmentPrerequisitesTool class</class-id> <category>interface specs</category><body package="Browser-BrowserUI" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 2 ) 					#name: #Label1 					#label: #(#{Kernel.UserMessage} #key: #AvailableParcelsPackagesC #defaultString: 'Available Parcels/Packages:' #catalogID: #browser) ) 				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragStartSelector 						#doAddDrag: #dragOkSelector 						#wantToDrag: ) 					#layout: #(#{Graphics.LayoutFrame} 2 0 25 0 -34 0.5 -74 1 ) 					#name: #allPackagesList 					#model: #allPackagesList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 -68 1 -96 0.5 -45 1 ) 					#name: #entryPrerequisite 					#model: #entryPrerequisiteHolder ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -90 0.5 -71 1 -34 0.5 -43 1 ) 					#name: #addEntryPrerequisitesButton 					#flags: 40 					#model: #addEntryPrerequisites 					#label: #(#{Kernel.UserMessage} #key: #Add #defaultString: 'Add' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -18 0.5 -60 0.5 17 0.5 -33 0.5 ) 					#name: #addPrerequisitesButton 					#flags: 40 					#model: #addPrerequisites 					#label: '&gt;&gt;' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -18 0.5 -13 0.5 17 0.5 14 0.5 ) 					#name: #removePrerequisitesButton 					#flags: 40 					#model: #removePrerequisites 					#label: '&lt;&lt;' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 34 0.5 2 0 ) 					#name: #Label2 					#label: #(#{Kernel.UserMessage} #key: #PrerequisitesC #defaultString: 'Prerequisites:' #catalogID: #browser) ) 				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEnter: #dropSelector 						#drop: #dragStartSelector 						#doReorderDrag: #dragOverSelector 						#dragOver: #dragExitSelector 						#dragLeave: ) 					#layout: #(#{Graphics.LayoutFrame} 34 0.5 25 0 -2 1 -98 1 ) 					#name: #prerequisitesList 					#model: #prerequisitesList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 34 0.5 -92 1 ) 					#name: #Label4 					#label: #(#{Kernel.UserMessage} #key: #TypeC #defaultString: 'Type:' #catalogID: #browser) ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 85 0.5 -93 1 -2 1 -70 1 ) 					#name: #type 					#flags: 40 					#model: #typeHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedPrerequisites ) 					#type: #symbol 					#comboList: #typeList ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 34 0.5 -67 1 ) 					#name: #Label3 					#label: #(#{Kernel.UserMessage} #key: #VersionC #defaultString: 'Version:' #catalogID: #browser) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 85 0.5 -68 1 -2 1 -45 1 ) 					#name: #version 					#flags: 40 					#model: #versionHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedPrerequisites ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -308 1 -32 1 -208 1 -4 1 ) 					#name: #okButton 					#flags: 40 					#model: #ok 					#label: #(#{Kernel.UserMessage} #key: #Apply #defaultString: 'Apply' #catalogID: #browser) 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -205 1 -32 1 -105 1 -4 1 ) 					#name: #cancelButton 					#flags: 40 					#model: #cancel 					#label: #(#{Kernel.UserMessage} #key: #Cancel #defaultString: 'Cancel' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -102 1 -32 1 -2 1 -4 1 ) 					#name: #copyDeployment 					#model: #copyDeployment 					#label: #(#{Kernel.UserMessage} #key: #CopyDeployment #defaultString: 'Copy Deployment' #catalogID: #browser) 					#defaultable: true ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 -38 1 -3 1 -34 1 ) 					#name: #Divider2 ) ) ) )</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="Browser-BrowserUI" selector="extractMethod20x20">extractMethod20x20	"UIMaskEditor new openOnClass: self andSelector: #extractMethod20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4) at: 1 put: Graphics.ColorValue black; at: 2 put: Graphics.ColorValue white; at: 3 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3170 scaledBlue: 3170); at: 4 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); yourself)) usingBits: #[85 85 85 85 85 0 0 0 85 85 85 85 85 0 0 0 85 85 85 85 85 0 0 0 87 255 255 253 85 0 0 0 85 85 85 85 85 0 0 0 87 255 255 253 85 0 0 0 85 85 85 85 85 0 0 0 87 255 213 85 85 0 0 0 85 85 86 152 85 0 0 0 87 253 86 146 85 0 0 0 85 85 106 136 5 0 0 0 87 253 106 32 5 0 0 0 85 85 84 144 85 0 0 0 87 253 98 0 5 0 0 0 85 85 72 0 5 0 0 0 85 85 84 16 85 0 0 0 85 85 84 16 85 0 0 0 85 85 85 85 85 0 0 0 85 85 85 85 85 0 0 0 85 85 85 85 85 0 0 0])</body><body package="Browser-BrowserUI" selector="extractMethod20x20mask">extractMethod20x20mask	"UIMaskEditor new openOnClass: self andSelector: #extractMethod20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 31 254 0 0 0 0 0 0 31 254 0 0 0 0 0 0 31 128 0 0 0 27 0 0 30 27 0 0 0 127 192 0 30 127 192 0 0 27 0 0 30 127 192 0 0 127 192 0 0 27 0 0 0 27 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Browser-BrowserUI" selector="rbNewBuffer20x20">rbNewBuffer20x20	"UIMaskEditor new openOnClass: self andSelector: #rbNewBuffer20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 6 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 40) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 264); at: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 792); at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 0 scaledBlue: 1321); at: 6 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 4227 scaledBlue: 5548); at: 7 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 6605 scaledBlue: 5548); at: 8 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 1056 scaledBlue: 1321); at: 9 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 1056 scaledBlue: 2113); at: 10 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 4756 scaledBlue: 4491); at: 11 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 528 scaledBlue: 2113); at: 12 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 264 scaledBlue: 3434); at: 13 put: (Graphics.ColorValue scaledRed: 7662 scaledGreen: 7926 scaledBlue: 7662); at: 14 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 264); at: 15 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 1849); at: 16 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 0 scaledBlue: 1849); at: 17 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 2642); at: 18 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 1321 scaledBlue: 1321); at: 19 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 1585 scaledBlue: 1585); at: 20 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4227); at: 21 put: (Graphics.ColorValue scaledRed: 4491 scaledGreen: 3963 scaledBlue: 4227); at: 22 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); at: 23 put: (Graphics.ColorValue scaledRed: 1849 scaledGreen: 1849 scaledBlue: 2113); at: 24 put: (Graphics.ColorValue scaledRed: 2378 scaledGreen: 1321 scaledBlue: 2113); at: 25 put: (Graphics.ColorValue scaledRed: 6077 scaledGreen: 7134 scaledBlue: 7926); at: 26 put: (Graphics.ColorValue scaledRed: 7134 scaledGreen: 6869 scaledBlue: 7134); at: 27 put: (Graphics.ColorValue scaledRed: 264 scaledGreen: 2378 scaledBlue: 5548); at: 28 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 29 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 528 scaledBlue: 0); at: 30 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 0 scaledBlue: 1321); at: 31 put: (Graphics.ColorValue scaledRed: 1321 scaledGreen: 792 scaledBlue: 0); at: 32 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 1585 scaledBlue: 528); at: 33 put: (Graphics.ColorValue scaledRed: 528 scaledGreen: 1056 scaledBlue: 2113); at: 34 put: (Graphics.ColorValue scaledRed: 792 scaledGreen: 1056 scaledBlue: 1849); at: 35 put: (Graphics.ColorValue scaledRed: 3434 scaledGreen: 3963 scaledBlue: 3963); at: 36 put: (Graphics.ColorValue scaledRed: 1056 scaledGreen: 1585 scaledBlue: 1849); at: 37 put: (Graphics.ColorValue scaledRed: 1585 scaledGreen: 1849 scaledBlue: 1056); at: 38 put: (Graphics.ColorValue scaledRed: 2642 scaledGreen: 792 scaledBlue: 1056); at: 39 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 2378 scaledBlue: 4491); at: 40 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 3434 scaledBlue: 4227); yourself)) usingBits: (ByteArray fromPackedString: '@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LCEQLSD1LSD1LSD1LSD1LSD0LC@0LU@1LSD1LSD1LSD1LS@0LS@0LC@1TSD1LSD1LSD1LSD1LSD1LC@0LCEPLC@0LC@0LC@0LC@0LC@@LC@0LU@1TCGPLCGPLU@0LC@0L@@0LC@1TCE!PAH2@!I@LCEPLC@0@C@0LCEP4BC (DD@,OGQTC@1TU@@LC@@@GF1,E@2THI!,WG!TC@0L@@0LCEPLX@2X&amp;G0$&amp;F1,\D!TC@0@C@0LC@@LCF"X''I"XC@2HQF0LC@@LC@0@UC@LCI"X&amp;@0LFH!,C@0L@@0LC@1TUF1$C@0LCF0@C@0LC@0@C@0LCEPL@F1T[@A,C@0LC@0LC@@LC@0LU@0LC@0LC@0LC@0LC@0L@@0LC@0@@@@@@@@@@@@@@@@@@@@@C@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0@a'))</body><body package="Browser-BrowserUI" selector="rbNewBuffer20x20bw">rbNewBuffer20x20bw	"UIMaskEditor new openOnClass: self andSelector: #rbNewBuffer20x20bw"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 31 255 224 0 23 255 32 0 31 255 224 0 16 0 32 0 21 40 32 0 23 242 32 0 31 252 224 0 126 254 32 0 35 247 32 0 19 230 32 0 57 204 32 0 30 24 32 0 23 224 32 0 16 0 32 0 31 255 224 0 0 0 0 0 0 0 0 0])</body><body package="Browser-BrowserUI" selector="rbNewBuffer20x20mask">rbNewBuffer20x20mask	"UIMaskEditor new openOnClass: self andSelector: #rbNewBuffer20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 31 255 224 0 31 255 224 0 31 255 224 0 31 255 224 0 31 255 224 0 31 255 224 0 31 255 224 0 127 255 224 0 63 255 224 0 31 255 224 0 63 255 224 0 31 255 224 0 31 255 224 0 31 255 224 0 31 255 224 0 0 0 0 0 0 0 0 0])</body></methods><initialize><class-id>Refactory.Browser.RefactoringBrowser</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>BrowserEnvironment</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label searchStrings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>ClassEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classes metaClasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>ProtocolEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>class protocols </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>PundleEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bundleNames packageNames </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>ControllerWithMenu</name><environment>UI</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuHolder performer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>RBActionDispatcher</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objects </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Commands</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>CategoryEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>categories </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>CompositePart</name><environment>Graphics</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>components preferredBounds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>BrowserApplicationModel</name><environment>Refactory.Browser</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>menus </class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>ProtocolItemNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>protocolHolder listSelector overriddenCache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>HierarchyPundleNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>SharedVariableNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>Navigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>environment state dispatcher parts partsDictionary menus showOnlyFiltered </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>ParcelNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>PundleNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.HierarchyPundleNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>ProtocolNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>SelectorProtocolNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>ParcelEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parcelNames </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>CompositeView</name><environment>UI</environment><super>Graphics.DependentComposite</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class><class><name>SharedVariableProtocolNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>CategoryNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nameSpace </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>MethodNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>VariableEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instanceVariables instanceVariableReaders instanceVariableWriters selectorCache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>Parcel</name><environment>Kernel</environment><super>Kernel.CodeComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>definedObjects definedClasses definedBindings classSelectors namedObjects dirty loaded </inst-vars><class-inst-vars>parcels classParcelMap parcelFileInfoCache parcelFileDirectoryCache </class-inst-vars><imports></imports><category>System-Code Components</category><attributes><package>System-Code Components</package></attributes></class><class><name>ClassNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>SelectorNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class></st-source>