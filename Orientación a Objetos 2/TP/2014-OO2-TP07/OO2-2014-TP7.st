Object subclass: #Sale	instanceVariableNames: 'pending amount'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!Sale commentStamp: '<historical>' prior: 0!!!Sale methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:26'!amount: anObject	amount := anObject! !!Sale methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:27'!pending	^pending! !!Sale methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:27'!collected	^pending not! !!Sale methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:27'!setAsCollected	pending := false! !!Sale methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:26'!amount	^amount! !!Sale methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:27'!setAsPending	pending := true! !!Sale methodsFor: 'initialize-release' stamp: 'AR 5/10/2014 15:25'!initialize	pending := false.	^self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sale class	instanceVariableNames: ''!!Sale class commentStamp: '<historical>' prior: 0!!!Sale class methodsFor: 'instance creation' stamp: 'AR 5/10/2014 15:24'!new	"Answer a newly created and initialized instance."	^super new initialize! !!Sale class methodsFor: 'instance creation' stamp: 'AR 5/10/2014 15:24'!pendingFor: anAmount 	^(self for: anAmount)		setAsPending;		yourself! !!Sale class methodsFor: 'instance creation' stamp: 'AR 5/10/2014 15:24'!for: anAmount 	^(self new)		amount: anAmount;		yourself! !Object subclass: #Rental	instanceVariableNames: 'days movie'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!Rental commentStamp: '<historical>' prior: 0!!!Rental methodsFor: 'accessing' stamp: 'AR 5/10/2014 16:01'!frequentRenterPoints	^self movie frequentRenterPoints: self days! !!Rental methodsFor: 'accessing' stamp: 'AR 5/10/2014 16:01'!days	^days! !!Rental methodsFor: 'accessing' stamp: 'AR 5/10/2014 16:01'!days: numberOfDays	days := numberOfDays! !!Rental methodsFor: 'accessing' stamp: 'AR 5/10/2014 16:01'!movie	^movie! !!Rental methodsFor: 'accessing' stamp: 'AR 5/10/2014 16:01'!charge	^self movie charge: self days! !!Rental methodsFor: 'accessing' stamp: 'AR 5/10/2014 16:01'!movie: aMovie	movie := aMovie! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rental class	instanceVariableNames: ''!!Rental class commentStamp: '<historical>' prior: 0!!!Rental class methodsFor: 'instance creation' stamp: 'AR 5/10/2014 16:00'!of: aMovie for: numberOfDays	^(self new)		movie: aMovie;		days: numberOfDays! !Object subclass: #Salesman	instanceVariableNames: 'name sales'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!Salesman commentStamp: '<historical>' prior: 0!!!Salesman methodsFor: 'initialize' stamp: 'AR 5/10/2014 15:29'!initialize	sales := OrderedCollection new.	^self! !!Salesman methodsFor: 'sales' stamp: 'AR 5/10/2014 15:31'!pendingSalesNumber	| ps |	ps := sales select:[:s | s pending].	^ps size! !!Salesman methodsFor: 'sales' stamp: 'AR 5/10/2014 15:30'!pendingMoney	| ps tot |	ps := sales select:[:s | s pending].	tot := 0.	ps do: [ :s2 | tot := tot + s2 amount.].	^tot! !!Salesman methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:30'!sales	^sales! !!Salesman methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:30'!name: aString	name := aString! !!Salesman methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:30'!addSale: aSale 	sales add: aSale! !!Salesman methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:30'!name	^name! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Salesman class	instanceVariableNames: ''!!Salesman class commentStamp: '<historical>' prior: 0!!!Salesman class methodsFor: 'instance-creation' stamp: 'AR 5/10/2014 15:29'!named: aString 	^(self new)		name: aString;		yourself! !!Salesman class methodsFor: 'instance-creation' stamp: 'AR 5/10/2014 15:29'!new	"Answer a newly created and initialized instance."	^super new initialize! !Object subclass: #Price	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!Price commentStamp: '<historical>' prior: 0!!!Price methodsFor: 'pricing' stamp: 'AR 5/10/2014 15:54'!price	^5! !!Price methodsFor: 'pricing' stamp: 'AR 5/10/2014 15:54'!frequentRenterPoints: days 	^days! !!Price methodsFor: 'pricing' stamp: 'AR 5/10/2014 15:54'!charge: days	^self price * days! !Price subclass: #ChildrenPrice	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!ChildrenPrice commentStamp: '<historical>' prior: 0!!!ChildrenPrice methodsFor: 'pricing' stamp: 'AR 5/10/2014 15:56'!frequentRenterPoints: days 	^0! !!ChildrenPrice methodsFor: 'pricing' stamp: 'AR 5/10/2014 15:57'!price	^3! !TestCase subclass: #CustomerTest	instanceVariableNames: 'noRentals oneRental fiveRentals'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!CustomerTest commentStamp: '<historical>' prior: 0!!!CustomerTest methodsFor: 'testing' stamp: 'AR 5/10/2014 16:04'!testHtmlStatement	self assert: noRentals htmlStatement 				= '<H1>Rentals for <EM>Arturo </EM></H1><P>\<P>You owe <EM> 0</EM><P>\On this rental you earned <EM> 0 </EM> frequent renter points<P>\' 						withCRs.	self assert: oneRental htmlStatement 				= '<H1>Rentals for <EM>Leandro </EM></H1><P>\Deathproof: 14<BR>\<P>You owe <EM> 14</EM><P>\On this rental you earned <EM> 2 </EM> frequent renter points<P>\' 						withCRs.	self assert: fiveRentals htmlStatement 				= '<H1>Rentals for <EM>Andres </EM></H1><P>\Reservoir Dogs: 5<BR>\Pulp Fiction: 10<BR>\Jackie Brown: 15<BR>\Kill Bill: 10<BR>\Deathproof: 14<BR>\<P>You owe <EM> 54</EM><P>\On this rental you earned <EM> 6.0 </EM> frequent renter points<P>\' 						withCRs! !!CustomerTest methodsFor: 'testing' stamp: 'AR 5/10/2014 16:05'!testStatement	self assert: noRentals statement 				= 'Rental Record for Arturo\Amount owed is 0\You earned 0 frequent renter points.' 						withCRs.	self assert: oneRental statement 				= 'Rental Record for Leandro\Deathproof 14\Amount owed is 14\You earned 2 frequent renter points.' 						withCRs.	self assert: fiveRentals statement 				= 'Rental Record for Andres\Reservoir Dogs 5\Pulp Fiction 10\Jackie Brown 15\Kill Bill 10\Deathproof 14\Amount owed is 54\You earned 6.0 frequent renter points.' 						withCRs.! !!CustomerTest methodsFor: 'running' stamp: 'AR 5/10/2014 16:04'!setUp	| reservoirDogs pulpFiction jackieBrown killBill deathproof |	reservoirDogs := Movie titled: 'Reservoir Dogs'.	pulpFiction := Movie titled: 'Pulp Fiction'.	jackieBrown := Movie titled: 'Jackie Brown'.	killBill := Movie titled: 'Kill Bill'.	deathproof := Movie newReleaseTitled: 'Deathproof'.	noRentals := Customer named: 'Arturo'.	oneRental := (Customer named: 'Leandro') 				addRental: (Rental of: deathproof for: 2).	fiveRentals := (Customer named: 'Andres')				addRental: (Rental of: reservoirDogs for: 1);				addRental: (Rental of: pulpFiction for: 2);				addRental: (Rental of: jackieBrown for: 3);				addRental: (Rental of: killBill for: 2);				addRental: (Rental of: deathproof for: 2)! !!CustomerTest methodsFor: 'accessing' stamp: 'AR 5/10/2014 16:04'!fiveRentals	^fiveRentals! !!CustomerTest methodsFor: 'accessing' stamp: 'AR 5/10/2014 16:04'!oneRental	^oneRental! !!CustomerTest methodsFor: 'accessing' stamp: 'AR 5/10/2014 16:04'!noRentals	^noRentals! !Price subclass: #NewReleasePrice	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!NewReleasePrice commentStamp: '<historical>' prior: 0!!!NewReleasePrice methodsFor: 'pricing' stamp: 'AR 5/10/2014 15:55'!price	^7! !Object subclass: #CuentaBancaria	instanceVariableNames: 'saldo tipo rojoPermitido'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!CuentaBancaria commentStamp: '<historical>' prior: 0!!!CuentaBancaria methodsFor: 'initialize' stamp: 'AR 5/10/2014 15:40'!init	saldo:= 0.	rojoPermitido:=0.! !!CuentaBancaria methodsFor: 'operaciones' stamp: 'AR 5/10/2014 15:41'!realizarExtraccion: unMonto	saldo:= saldo - unMonto! !!CuentaBancaria methodsFor: 'operaciones' stamp: 'AR 5/10/2014 15:41'!extraer: unMonto 	tipo = #CajaAhorro 		ifTrue: [self saldo >= unMonto ifTrue: [self realizarExtraccion: unMonto]]		ifFalse: 			[tipo = #CuentaCorriente 				ifTrue: 					[self saldo + rojoPermitido >= unMonto 						ifTrue: [self realizarExtraccion: unMonto]]]! !!CuentaBancaria methodsFor: 'operaciones' stamp: 'AR 5/10/2014 15:41'!depositar: unMonto	saldo:= saldo + unMonto.! !!CuentaBancaria methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:40'!tipo	^tipo! !!CuentaBancaria methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:40'!rojoPermitido	^rojoPermitido! !!CuentaBancaria methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:40'!rojoPermitido: aNumber	rojoPermitido := aNumber! !!CuentaBancaria methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:40'!saldo	^saldo! !!CuentaBancaria methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:41'!tipo: anObject	tipo := anObject! !!CuentaBancaria methodsFor: 'testing' stamp: 'AR 5/10/2014 15:41'!verificarCondicionesDeExtraccion: unMonto 	^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuentaBancaria class	instanceVariableNames: ''!!CuentaBancaria class commentStamp: '<historical>' prior: 0!!!CuentaBancaria class methodsFor: 'instance creation' stamp: 'AR 5/10/2014 15:39'!new	^(super new) init! !Object subclass: #Inmueble	instanceVariableNames: 'superficie'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!Inmueble commentStamp: '<historical>' prior: 0!!!Inmueble methodsFor: 'impuestos' stamp: 'AR 5/10/2014 10:39'!alicuotaImpuesto	^self subclassResponsibility! !!Inmueble methodsFor: 'impuestos' stamp: 'AR 5/10/2014 10:40'!tasa	^self subclassResponsibility! !!Inmueble methodsFor: 'impuestos' stamp: 'AR 5/10/2014 10:40'!impuestoAPagar	^self subclassResponsibility! !!Inmueble methodsFor: 'accesing' stamp: 'AR 5/10/2014 10:38'!superficie: anObject  superficie:= anObject! !!Inmueble methodsFor: 'accesing' stamp: 'AR 5/10/2014 10:37'!superficie	^ superficie! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Inmueble class	instanceVariableNames: ''!!Inmueble class commentStamp: '<historical>' prior: 0!!!Inmueble class methodsFor: 'instance creation' stamp: 'AR 5/10/2014 10:36'!superficie: aNumber	^self new superficie: aNumber! !Inmueble subclass: #ViviendaUnica	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!ViviendaUnica commentStamp: '<historical>' prior: 0!!!ViviendaUnica methodsFor: 'impuestos' stamp: 'AR 5/10/2014 10:42'!tasa	^2000! !!ViviendaUnica methodsFor: 'impuestos' stamp: 'AR 5/10/2014 15:37'!alicuotaImpuesto	^0.01! !!ViviendaUnica methodsFor: 'impuestos' stamp: 'AR 5/10/2014 10:42'!impuestoAPagar	| base impuesto |	base := self superficie * self tasa * 0.5.	impuesto := base * self alicuotaImpuesto * 0.2.	^ impuesto! !Object subclass: #Movie	instanceVariableNames: 'title price'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!Movie commentStamp: '<historical>' prior: 0!!!Movie methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:58'!frequentRenterPoints: days	^self price frequentRenterPoints: days! !!Movie methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:58'!initialize	price := RegularPrice new! !!Movie methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:58'!price	^price! !!Movie methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:58'!charge: days 	^self price charge: days! !!Movie methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:59'!title: aString	title := aString! !!Movie methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:58'!title	^title! !!Movie methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:58'!price: aPrice	price := aPrice! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Movie class	instanceVariableNames: ''!!Movie class commentStamp: '<historical>' prior: 0!!!Movie class methodsFor: 'instance creation' stamp: 'AR 5/10/2014 15:57'!titled: aString	^self new title: aString! !!Movie class methodsFor: 'instance creation' stamp: 'AR 5/10/2014 15:57'!newReleaseTitled: aString 	^(self new)		title: aString;		price: NewReleasePrice new! !!Movie class methodsFor: 'instance creation' stamp: 'AR 5/10/2014 15:52'!new	^super new initialize! !Price subclass: #RegularPrice	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!RegularPrice commentStamp: '<historical>' prior: 0!!!RegularPrice methodsFor: 'pricing' stamp: 'AR 5/10/2014 15:56'!frequentRenterPoints: days 	^days * 0.5! !TestCase subclass: #ViviendaUnicaTest	instanceVariableNames: 'muchaSuperficie pocaSuperficie sinSuperficie'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!ViviendaUnicaTest commentStamp: '<historical>' prior: 0!!!ViviendaUnicaTest methodsFor: 'testing' stamp: 'AR 5/10/2014 15:18'!testImpuestoAPagar	self assert: sinSuperficie impuestoAPagar = 0.	self assert: pocaSuperficie impuestoAPagar = 100.	self assert: muchaSuperficie impuestoAPagar = 400! !!ViviendaUnicaTest methodsFor: 'accesing' stamp: 'AR 5/10/2014 15:16'!muchaSuperficie	^muchaSuperficie! !!ViviendaUnicaTest methodsFor: 'accesing' stamp: 'AR 5/10/2014 15:16'!pocaSuperficie	^pocaSuperficie! !!ViviendaUnicaTest methodsFor: 'accesing' stamp: 'AR 5/10/2014 15:16'!sinSuperficie	^sinSuperficie! !!ViviendaUnicaTest methodsFor: 'initialize' stamp: 'AR 5/10/2014 15:18'!initialize	"Initialize a newly created instance. This method must answer the receiver."	sinSuperficie := nil.	pocaSuperficie := nil.	muchaSuperficie := nil.	^ self! !!ViviendaUnicaTest methodsFor: 'running' stamp: 'AR 5/10/2014 15:17'!setUp	sinSuperficie := ViviendaUnica  superficie: 0.	pocaSuperficie :=  ViviendaUnica superficie: 50.	muchaSuperficie := ViviendaUnica   superficie: 200! !TestCase subclass: #CuentaCorrienteTest	instanceVariableNames: 'sinLimite limiteCien'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!CuentaCorrienteTest commentStamp: '<historical>' prior: 0!!!CuentaCorrienteTest methodsFor: 'running' stamp: 'AR 5/10/2014 15:43'!setUp	sinLimite := CuentaBancaria new.	sinLimite tipo: #CuentaCorriente.	limiteCien := CuentaBancaria new.	limiteCien tipo: #CuentaCorriente.	limiteCien rojoPermitido: 100.! !!CuentaCorrienteTest methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:43'!sinLimite	^sinLimite! !!CuentaCorrienteTest methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:43'!limiteCien	^limiteCien! !!CuentaCorrienteTest methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:43'!limiteCien: aCuentaBancaria	limiteCien := aCuentaBancaria! !!CuentaCorrienteTest methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:43'!sinLimite: aCuentaBancaria	sinLimite := aCuentaBancaria! !!CuentaCorrienteTest methodsFor: 'testing' stamp: 'AR 5/10/2014 15:44'!testExtraer	self assert: sinLimite saldo = 0.	sinLimite extraer: 10.	self assert: sinLimite saldo = 0.	sinLimite depositar: 100.	sinLimite extraer: 120.	self assert: sinLimite saldo = 100.	sinLimite extraer: 20.	self assert: sinLimite saldo = 80.	sinLimite extraer: 80.	self assert: sinLimite saldo = 0.	self assert: limiteCien saldo = 0.	limiteCien extraer: 10.	self assert: limiteCien saldo = -10.	limiteCien depositar: 100.	self assert: limiteCien saldo = 90.	limiteCien extraer: 220.	self assert: limiteCien saldo = 90.	limiteCien extraer: 190.	self assert: limiteCien saldo = -100.	limiteCien extraer: 190.	self assert: limiteCien saldo = -100.! !!CuentaCorrienteTest methodsFor: 'testing' stamp: 'AR 5/10/2014 15:44'!testDepositar	self assert: sinLimite saldo = 0.	sinLimite depositar: 0.	self assert: sinLimite saldo = 0.	sinLimite depositar: 100.	self assert: sinLimite saldo = 100.	sinLimite depositar:120.	self assert: sinLimite saldo = 220.! !TestCase subclass: #SalesmanTest	instanceVariableNames: 'smallSale regularSale bigSale smallPendingSale bigPendingSale noSalesSalesman oneSaleSalesman fiveSalesSalesman'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!SalesmanTest commentStamp: '<historical>' prior: 0!!!SalesmanTest methodsFor: 'running' stamp: 'AR 5/10/2014 15:32'!setUp	smallSale := Sale for: 100.	regularSale := Sale for: 500.	bigSale := Sale for: 13400.	smallPendingSale := Sale pendingFor: 110.	bigPendingSale := Sale pendingFor: 12000.	noSalesSalesman := Salesman named: 'George'.	oneSaleSalesman := (Salesman named: 'Paul')				addSale: smallPendingSale;				yourself.	fiveSalesSalesman := (Salesman named: 'Ringo')				addSale: smallSale;				addSale: regularSale;				addSale: bigSale;				addSale: smallPendingSale;				addSale: bigPendingSale;				yourself! !!SalesmanTest methodsFor: 'testing' stamp: 'AR 5/10/2014 15:34'!testPendingSalesNumber	self assert: noSalesSalesman pendingSalesNumber = 0		description: 'A salesman with no pending sales must return 0 when asked for #pendingSalesNumber'.	self assert: oneSaleSalesman pendingSalesNumber = 1		description: 'A salesman with one pending sales must return 1 when asked for #pendingSalesNumber'.	self assert: fiveSalesSalesman pendingSalesNumber = 2		description: 'A salesman with two pending sales must return 2 when asked for #pendingSalesNumber'.! !!SalesmanTest methodsFor: 'testing' stamp: 'AR 5/10/2014 15:34'!testSalesmanCreation	| john |	john := Salesman named: 'John'.	self assert: john pendingMoney = 0 description: 'A newly created salesman should have 0 pending money'.	self assert: john name = 'John' description: 'A salesman shoul be the same as specified in creation using #named:'.! !!SalesmanTest methodsFor: 'testing' stamp: 'AR 5/10/2014 15:33'!testFiveSalesPendingMoney	self deny: fiveSalesSalesman pendingMoney < 0		description: 'A salesman should never have negative pending money'.	self assert: fiveSalesSalesman pendingMoney = (smallPendingSale amount + bigPendingSale amount)		description: 'Salesman with two pending sales should have pending money equal the sum of both sales amount'.! !!SalesmanTest methodsFor: 'testing' stamp: 'AR 5/10/2014 15:34'!testNoSalesPendingMoney	self deny: noSalesSalesman pendingMoney < 0		description: 'A salesman should never have negative pending money'.	self assert: noSalesSalesman pendingMoney = 0		description: 'Salesman with no sales should have 0 pending money'.	noSalesSalesman addSale: smallSale.	self assert: noSalesSalesman pendingMoney = 0		description: 'Salesman with no pending sales should have 0 pending money'.	noSalesSalesman addSale: smallPendingSale.	self assert: noSalesSalesman pendingMoney = smallPendingSale amount		description: 'Salesman with one pending sale should have pending money equal to sale amount'.! !!SalesmanTest methodsFor: 'testing' stamp: 'AR 5/10/2014 15:33'!testOneSalePendingMoney	self deny: oneSaleSalesman pendingMoney < 0		description: 'A salesman should never have negative pending money'.	self assert: oneSaleSalesman pendingMoney = smallPendingSale amount		description: 'Salesman with one pending sale should have pending money equal to sale amount'.	oneSaleSalesman addSale: smallSale.	self assert: oneSaleSalesman pendingMoney = smallPendingSale amount		description: 'Salesman with one pending sale should have pending money equal to sale amount'.	oneSaleSalesman addSale: bigPendingSale.	self assert: oneSaleSalesman pendingMoney = (smallPendingSale amount + bigPendingSale amount)		description: 'Salesman with two pending sales should have pending money equal the sum of both sales amount'.! !TestCase subclass: #CasaDeFinDeSemanaTest	instanceVariableNames: 'muchaSuperficie pocaSuperficie sinSuperficie'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!CasaDeFinDeSemanaTest commentStamp: '<historical>' prior: 0!!!CasaDeFinDeSemanaTest methodsFor: 'testing' stamp: 'AR 5/10/2014 15:16'!testImpuestoAPagar	self assert: sinSuperficie impuestoAPagar = 0.	self assert: pocaSuperficie impuestoAPagar =  8750.0.	self assert: muchaSuperficie impuestoAPagar = 35000.0.! !!CasaDeFinDeSemanaTest methodsFor: 'initialize' stamp: 'AR 5/10/2014 15:19'!initialize	"Initialize a newly created instance. This method must answer the receiver."	sinSuperficie := nil.	pocaSuperficie := nil.	muchaSuperficie := nil.	^ self! !!CasaDeFinDeSemanaTest methodsFor: 'running' stamp: 'AR 5/10/2014 15:15'!setUp	sinSuperficie := CasaDeFinDeSemana superficie: 0.	pocaSuperficie :=  CasaDeFinDeSemana superficie: 50.	muchaSuperficie := CasaDeFinDeSemana  superficie: 200! !!CasaDeFinDeSemanaTest methodsFor: 'accesing' stamp: 'AR 5/10/2014 15:14'!muchaSuperficie	^muchaSuperficie! !!CasaDeFinDeSemanaTest methodsFor: 'accesing' stamp: 'AR 5/10/2014 15:14'!pocaSuperficie	^pocaSuperficie! !!CasaDeFinDeSemanaTest methodsFor: 'accesing' stamp: 'AR 5/10/2014 15:14'!sinSuperficie	^sinSuperficie! !Object subclass: #Customer	instanceVariableNames: 'name rentals'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!Customer commentStamp: '<historical>' prior: 0!!!Customer methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:50'!addRental: aRental 	self rentals add: aRental! !!Customer methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:50'!name: aString	name := aString! !!Customer methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:50'!name	^name! !!Customer methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:50'!rentals	^rentals! !!Customer methodsFor: 'operations' stamp: 'AR 5/10/2014 15:50'!totalCharge	^self rentals inject: 0 into: [:total :rental | total + rental charge]! !!Customer methodsFor: 'operations' stamp: 'AR 5/10/2014 15:51'!totalFrequentRenterPoints	^self rentals inject: 0		into: [:total :rental | total + rental frequentRenterPoints]! !!Customer methodsFor: 'printing' stamp: 'AR 5/10/2014 15:51'!statement	| result |	result := 'Rental Record for ' , self name , '\' .	rentals do: 			[:aRental | 			result := result , aRental movie title , ' ' , aRental charge printString						, '\'].	result := result , 'Amount owed is ' , self totalCharge printString , '\'.	result := result , 'You earned ' , self totalFrequentRenterPoints printString				, ' frequent renter points.'.	^result withCRs! !!Customer methodsFor: 'printing' stamp: 'AR 5/10/2014 15:51'!htmlStatement	| result |	result := '<H1>Rentals for <EM>' , self name , ' </EM></H1><P>\'  withCRs.	rentals do: 			[:aRental | 			result := result , aRental movie title , ': ' , aRental charge printString , '<BR>\'  withCRs].	result := result , '<P>You owe <EM> ' , self totalCharge printString , '</EM><P>\'  withCRs.	result := result , 'On this rental you earned <EM> ' 				, self totalFrequentRenterPoints printString , ' </EM> frequent renter points<P>\'  withCRs.	^result! !!Customer methodsFor: 'initialize' stamp: 'AR 5/10/2014 15:49'!initialize	rentals := OrderedCollection new.	^self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: ''!!Customer class commentStamp: '<historical>' prior: 0!!!Customer class methodsFor: 'instance creation' stamp: 'AR 5/10/2014 15:49'!named: aString 	^self new name: aString! !!Customer class methodsFor: 'instance creation' stamp: 'AR 5/10/2014 15:49'!new	^super new initialize! !Inmueble subclass: #CasaDeFinDeSemana	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!CasaDeFinDeSemana commentStamp: '<historical>' prior: 0!!!CasaDeFinDeSemana methodsFor: 'impuestos' stamp: 'AR 5/10/2014 10:41'!alicuotaImpuesto	^0.05! !!CasaDeFinDeSemana methodsFor: 'impuestos' stamp: 'AR 5/10/2014 10:41'!tasa	^3500! !!CasaDeFinDeSemana methodsFor: 'impuestos' stamp: 'AR 5/10/2014 10:41'!impuestoAPagar	| base impuesto |	base := self superficie * self tasa.	impuesto := base * self alicuotaImpuesto.	^impuesto! !TestCase subclass: #CajaAhorroTest	instanceVariableNames: 'cajaAhorro'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-2014-TP7'!!CajaAhorroTest commentStamp: '<historical>' prior: 0!!!CajaAhorroTest methodsFor: 'running' stamp: 'AR 5/10/2014 15:46'!setUp	cajaAhorro := CuentaBancaria new.	cajaAhorro tipo: #CajaAhorro.! !!CajaAhorroTest methodsFor: 'testing' stamp: 'AR 5/10/2014 15:46'!testExtraer	self assert: cajaAhorro saldo = 0.	cajaAhorro extraer: 10.	self assert: cajaAhorro saldo = 0.	cajaAhorro depositar: 100.	cajaAhorro extraer: 120.	self assert: cajaAhorro saldo = 100.	cajaAhorro extraer: 20.	self assert: cajaAhorro saldo = 80.	cajaAhorro extraer: 80.	self assert: cajaAhorro saldo = 0.! !!CajaAhorroTest methodsFor: 'testing' stamp: 'AR 5/10/2014 15:46'!testDepositar	self assert: cajaAhorro saldo = 0.	cajaAhorro depositar: 0.	self assert: cajaAhorro saldo = 0.	cajaAhorro depositar: 100.	self assert: cajaAhorro saldo = 100.	cajaAhorro depositar:120.	self assert: cajaAhorro saldo = 220.! !!CajaAhorroTest methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:46'!cajaAhorro: aCuentaBancaria	cajaAhorro := aCuentaBancaria! !!CajaAhorroTest methodsFor: 'accessing' stamp: 'AR 5/10/2014 15:45'!cajaAhorro	^cajaAhorro! !